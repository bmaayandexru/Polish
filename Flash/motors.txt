; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\motors.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\motors.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\motors.crf Main\Motors.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ZComp PROC
;;;43     
;;;44     float ZComp(float x, float y, float z){
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;45     	float Zo;
;;;46     	if (*pfZcomp) {
000004  4cfe              LDR      r4,|L1.1024|
000006  4606              MOV      r6,r0                 ;44
000008  4690              MOV      r8,r2                 ;44
00000a  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
00000c  460a              MOV      r2,r1                 ;44
00000e  7801              LDRB     r1,[r0,#0]
000010  2000              MOVS     r0,#0
000012  b369              CBZ      r1,|L1.112|
;;;47     		if (*pC) {
000014  6be1              LDR      r1,[r4,#0x3c]  ; pC
000016  680d              LDR      r5,[r1,#0]
000018  f0154fff          TST      r5,#0x7f800000
00001c  d028              BEQ      |L1.112|
;;;48     /*		
;;;49     			dX = *dXPos * *pX_PG_MM / *pX_SPR;
;;;50     			dY = *dYPos * *pY_PG_MM / *pY_SPR;
;;;51     			dZ = *dZPos * *pZ_PG_MM / *pZ_SPR;
;;;52     			// x+dX y+dY - абсолютные координаты точки G-кода
;;;53     			Za_pl = ((*pD)-(*pA)*(x+dX)-(*pB)*(y+dY))/(*pC);
;;;54     			// Za_pl - координата Z на плоскости коррекции
;;;55     			Zo = (z-dZ+Za_pl);
;;;56     			// Zo - относительная скоррретированная координата Z для точки (x,y,z)
;;;57     */			
;;;58     			// ПОЧЕМУ СВЯЗЬ ЧЕРЕЗ ПЕРВУЮ ТОЧКУ???!!!!!!!!!!
;;;59     			// так будет работать через любую точку поверхности
;;;60     			// и чтобы не вычислять dX, dY, dZ 
;;;61     			// используем уже вычисленные значения *pX1 *pY1 *pZ1
;;;62     			// которые точно лежат на плоскости коррекции
;;;63     			dz = ((*pD)-(*pA)*(x+*pX1)-(*pB)*(y+*pY1))/(*pC);
00001e  6920              LDR      r0,[r4,#0x10]  ; pY1
000020  6801              LDR      r1,[r0,#0]
000022  4610              MOV      r0,r2
000024  f7fffffe          BL       __aeabi_fadd
000028  6ba1              LDR      r1,[r4,#0x38]  ; pB
00002a  6809              LDR      r1,[r1,#0]
00002c  f7fffffe          BL       __aeabi_fmul
000030  4607              MOV      r7,r0
000032  68e0              LDR      r0,[r4,#0xc]  ; pX1
000034  6801              LDR      r1,[r0,#0]
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       __aeabi_fadd
00003c  6b61              LDR      r1,[r4,#0x34]  ; pA
00003e  6809              LDR      r1,[r1,#0]
000040  f7fffffe          BL       __aeabi_fmul
000044  6c21              LDR      r1,[r4,#0x40]  ; pD
000046  6809              LDR      r1,[r1,#0]
000048  f7fffffe          BL       __aeabi_frsub
00004c  4639              MOV      r1,r7
00004e  f7fffffe          BL       __aeabi_fsub
000052  4629              MOV      r1,r5
000054  f7fffffe          BL       __aeabi_fdiv
000058  4605              MOV      r5,r0
;;;64     			Zo = (z-*pZ1+dz);
00005a  6460              STR      r0,[r4,#0x44]  ; dz
00005c  6960              LDR      r0,[r4,#0x14]  ; pZ1
00005e  6801              LDR      r1,[r0,#0]
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       __aeabi_fsub
000066  4629              MOV      r1,r5
000068  e8bd41f0          POP      {r4-r8,lr}
00006c  f7ffbffe          B.W      __aeabi_fadd
                  |L1.112|
;;;65     			return Zo;
;;;66     		}
;;;67     		// С == 0 
;;;68     		else {
;;;69     			dz = 0;
;;;70     			return (z);
;;;71     		}
;;;72     	} 
;;;73     	// компенсация не возможна
;;;74     	else {
;;;75     			dz = 0;
;;;76     			return (z);
000070  6460              STR      r0,[r4,#0x44]  ; dz
000072  4640              MOV      r0,r8
                  |L1.116|
;;;77     	}
;;;78     }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;79     
                          ENDP

                  dXYZImpTodXYZ PROC
;;;438    
;;;439    void dXYZImpTodXYZ(s32 Xi,s32 Yi,s32 Zi,float *X,float *Y,float *Z){
000078  e92d47f0          PUSH     {r4-r10,lr}
00007c  4607              MOV      r7,r0
;;;440    	*X = (Xi)*(*pX_PG_MM)/(*pX_SPR);
00007e  48e1              LDR      r0,|L1.1028|
000080  e9dd5808          LDRD     r5,r8,[sp,#0x20]      ;439
000084  6800              LDR      r0,[r0,#0]  ; pX_SPR
000086  461e              MOV      r6,r3                 ;439
000088  4692              MOV      r10,r2                ;439
00008a  4689              MOV      r9,r1                 ;439
00008c  6800              LDR      r0,[r0,#0]
00008e  f7fffffe          BL       __aeabi_ui2f
000092  4604              MOV      r4,r0
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       __aeabi_i2f
00009a  49db              LDR      r1,|L1.1032|
00009c  6809              LDR      r1,[r1,#0]  ; pX_PG_MM
00009e  6809              LDR      r1,[r1,#0]
0000a0  f7fffffe          BL       __aeabi_fmul
0000a4  4621              MOV      r1,r4
0000a6  f7fffffe          BL       __aeabi_fdiv
;;;441    	*Y = (Yi)*(*pY_PG_MM)/(*pY_SPR);
0000aa  6030              STR      r0,[r6,#0]
0000ac  48d7              LDR      r0,|L1.1036|
0000ae  6800              LDR      r0,[r0,#0]  ; pY_SPR
0000b0  6800              LDR      r0,[r0,#0]
0000b2  f7fffffe          BL       __aeabi_ui2f
0000b6  4604              MOV      r4,r0
0000b8  4648              MOV      r0,r9
0000ba  f7fffffe          BL       __aeabi_i2f
0000be  49d4              LDR      r1,|L1.1040|
0000c0  6809              LDR      r1,[r1,#0]  ; pY_PG_MM
0000c2  6809              LDR      r1,[r1,#0]
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  4621              MOV      r1,r4
0000ca  f7fffffe          BL       __aeabi_fdiv
;;;442    // см. выше
;;;443    //	*Z = (Zi-Z_MIN_POS)*(*pZ_PG_MM)/(*pZ_SPR);
;;;444    	*Z = (Zi)*(*pZ_PG_MM)/(*pZ_SPR);
0000ce  6028              STR      r0,[r5,#0]
0000d0  48d0              LDR      r0,|L1.1044|
0000d2  6800              LDR      r0,[r0,#0]  ; pZ_SPR
0000d4  6800              LDR      r0,[r0,#0]
0000d6  f7fffffe          BL       __aeabi_ui2f
0000da  4604              MOV      r4,r0
0000dc  4650              MOV      r0,r10
0000de  f7fffffe          BL       __aeabi_i2f
0000e2  49cd              LDR      r1,|L1.1048|
0000e4  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
0000e6  6809              LDR      r1,[r1,#0]
0000e8  f7fffffe          BL       __aeabi_fmul
0000ec  4621              MOV      r1,r4
0000ee  f7fffffe          BL       __aeabi_fdiv
0000f2  f8c80000          STR      r0,[r8,#0]
                  |L1.246|
;;;445    }
0000f6  e8bd87f0          POP      {r4-r10,pc}
;;;446    
                          ENDP

                  XYZImpToXYZ PROC
;;;430    
;;;431    void XYZImpToXYZ(s32 Xi,s32 Yi,s32 Zi,float *X,float *Y,float *Z){
0000fa  e92d47f0          PUSH     {r4-r10,lr}
0000fe  4680              MOV      r8,r0
;;;432    	*X = (Xi- *dXPos)*(*pX_PG_MM)/(*pX_SPR);
000100  48c0              LDR      r0,|L1.1028|
000102  e9dd9a08          LDRD     r9,r10,[sp,#0x20]     ;431
000106  6800              LDR      r0,[r0,#0]  ; pX_SPR
000108  461f              MOV      r7,r3                 ;431
00010a  4615              MOV      r5,r2                 ;431
00010c  460e              MOV      r6,r1                 ;431
00010e  6800              LDR      r0,[r0,#0]
000110  f7fffffe          BL       __aeabi_ui2f
000114  4604              MOV      r4,r0
000116  48c1              LDR      r0,|L1.1052|
000118  6800              LDR      r0,[r0,#0]  ; dXPos
00011a  6801              LDR      r1,[r0,#0]
00011c  eba80001          SUB      r0,r8,r1
000120  f7fffffe          BL       __aeabi_i2f
000124  49b8              LDR      r1,|L1.1032|
000126  6809              LDR      r1,[r1,#0]  ; pX_PG_MM
000128  6809              LDR      r1,[r1,#0]
00012a  f7fffffe          BL       __aeabi_fmul
00012e  4621              MOV      r1,r4
000130  f7fffffe          BL       __aeabi_fdiv
;;;433    	*Y = (Yi- *dYPos)*(*pY_PG_MM)/(*pY_SPR);
000134  6038              STR      r0,[r7,#0]
000136  48b5              LDR      r0,|L1.1036|
000138  6800              LDR      r0,[r0,#0]  ; pY_SPR
00013a  6800              LDR      r0,[r0,#0]
00013c  f7fffffe          BL       __aeabi_ui2f
000140  4604              MOV      r4,r0
000142  48b7              LDR      r0,|L1.1056|
000144  6800              LDR      r0,[r0,#0]  ; dYPos
000146  6800              LDR      r0,[r0,#0]
000148  1a30              SUBS     r0,r6,r0
00014a  f7fffffe          BL       __aeabi_i2f
00014e  49b0              LDR      r1,|L1.1040|
000150  6809              LDR      r1,[r1,#0]  ; pY_PG_MM
000152  6809              LDR      r1,[r1,#0]
000154  f7fffffe          BL       __aeabi_fmul
000158  4621              MOV      r1,r4
00015a  f7fffffe          BL       __aeabi_fdiv
;;;434    // см. выше
;;;435    //	*Z = (Zi-Z_MIN_POS)*(*pZ_PG_MM)/(*pZ_SPR);
;;;436    	*Z = (Zi- *dZPos)*(*pZ_PG_MM)/(*pZ_SPR);
00015e  f8c90000          STR      r0,[r9,#0]
000162  48ac              LDR      r0,|L1.1044|
000164  6800              LDR      r0,[r0,#0]  ; pZ_SPR
000166  6800              LDR      r0,[r0,#0]
000168  f7fffffe          BL       __aeabi_ui2f
00016c  4604              MOV      r4,r0
00016e  48ad              LDR      r0,|L1.1060|
000170  6800              LDR      r0,[r0,#0]  ; dZPos
000172  6800              LDR      r0,[r0,#0]
000174  1a28              SUBS     r0,r5,r0
000176  f7fffffe          BL       __aeabi_i2f
00017a  49a7              LDR      r1,|L1.1048|
00017c  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
00017e  6809              LDR      r1,[r1,#0]
000180  f7fffffe          BL       __aeabi_fmul
000184  4621              MOV      r1,r4
000186  f7fffffe          BL       __aeabi_fdiv
00018a  f8ca0000          STR      r0,[r10,#0]
;;;437    }
00018e  e7b2              B        |L1.246|
;;;438    
                          ENDP

                  InitZComp PROC
;;;79     
;;;80     void InitZComp(){
000190  e92d4ff0          PUSH     {r4-r11,lr}
;;;81     	float dx21,dx31,dy21,dy31,dz21,dz31,k,b;
;;;82     	float tmpX,tmpY,tmpZ;
;;;83     //	s32 xi,yi,zi;
;;;84     
;;;85     	// настройка нуля
;;;86     	//*dXPos=0; *dYPos=0; *dZPos=0;
;;;87     	// сброс коэффициентов плоскости
;;;88     	*pA=0; *pB=0; *pC=0; *pD=0;
000194  4c9a              LDR      r4,|L1.1024|
000196  b08b              SUB      sp,sp,#0x2c           ;80
000198  2500              MOVS     r5,#0                 ;80
00019a  6b60              LDR      r0,[r4,#0x34]  ; pA
;;;89     //	XYZToXYZImp(*pX1,*pY1,*pZ1,&xi,&yi,&zi);
;;;90     //	Msg("SZ x %d y %d z %d xi %d yi %d zi %d\r\n",OUTF1(*pX1),OUTF1(*pY1),OUTF1(*pZ1),xi,yi,zi);
;;;91     //	*dXPos=xi; *dYPos=yi; *dZPos=zi;
;;;92     	// инициализация компенсации
;;;93     	if (((*pX1 == *pX2)&&(*pY1 == *pY2))||
;;;94     	 	((*pX3 == *pX2)&&(*pY3 == *pY2))||
;;;95     	 	((*pX3 == *pX1)&&(*pY3 == *pY1))
;;;96     		)
;;;97     	{
;;;98     		// две точки точно совпадают
;;;99     		// компенсация не возможна
;;;100    		Msg("Err Zcomp. Points is EQU.\r\n");
;;;101    		*pfZcomp = 0;
;;;102    		 dz = 0;
;;;103    	} else {
;;;104    		// точки не совпадают
;;;105    		// проверяем не лежат ли они на 1 прямой
;;;106    		if ((*pX1==*pX2) && (*pX1==*pX3) && (*pX1==*pX2)) {
;;;107    			// точки на вертикальной прямой
;;;108    			Msg("Err Zcomp. Points by Line.\r\n");
;;;109    			*pfZcomp = 0;
;;;110    			dz = 0;
;;;111    		} else {
;;;112    			if ((*pY1==*pY2) && (*pY1==*pY3) && (*pY1==*pY2)) {
;;;113    				// точки на горизонтальной прямой
;;;114    				Msg("Err Zcomp. Points by Line.\r\n");
;;;115    				*pfZcomp = 0;
;;;116        		 dz = 0;
;;;117    			} else {
;;;118    				if ((*pX1==*pX2)&&(*pX3!=*pX2)) {
;;;119    					//решаем через пару pX3 pX2
;;;120    					k = (*pY3 - *pY2)/(*pX3-*pX2);
;;;121    					b = *pY3-k**pX3;
;;;122    					if (*pY1 == (k**pX1+b)) {
;;;123    						// точки на одной прямой
;;;124    						Msg("Init Err Zcomp. Points by Line.\r\n");
;;;125    						*pfZcomp = 0;
;;;126    						dz = 0;
;;;127    					} else {
;;;128    						*pfZcomp = 1;
00019c  f04f0a01          MOV      r10,#1
0001a0  6005              STR      r5,[r0,#0]            ;88
0001a2  6ba0              LDR      r0,[r4,#0x38]         ;88  ; pB
0001a4  6005              STR      r5,[r0,#0]            ;88
0001a6  6be0              LDR      r0,[r4,#0x3c]         ;88  ; pC
0001a8  6005              STR      r5,[r0,#0]            ;88
0001aa  6c20              LDR      r0,[r4,#0x40]         ;88  ; pD
0001ac  6005              STR      r5,[r0,#0]            ;93
0001ae  69a0              LDR      r0,[r4,#0x18]         ;93  ; pX2
0001b0  6801              LDR      r1,[r0,#0]            ;93
0001b2  68e0              LDR      r0,[r4,#0xc]          ;93  ; pX1
0001b4  6800              LDR      r0,[r0,#0]            ;93
0001b6  f7fffffe          BL       __aeabi_cfcmpeq
0001ba  d106              BNE      |L1.458|
0001bc  69e0              LDR      r0,[r4,#0x1c]         ;93  ; pY2
0001be  6801              LDR      r1,[r0,#0]            ;93
0001c0  6920              LDR      r0,[r4,#0x10]         ;93  ; pY1
0001c2  6800              LDR      r0,[r0,#0]            ;93
0001c4  f7fffffe          BL       __aeabi_cfcmpeq
0001c8  d01b              BEQ      |L1.514|
                  |L1.458|
0001ca  69a0              LDR      r0,[r4,#0x18]         ;94  ; pX2
0001cc  6801              LDR      r1,[r0,#0]            ;94
0001ce  6a60              LDR      r0,[r4,#0x24]         ;94  ; pX3
0001d0  6800              LDR      r0,[r0,#0]            ;94
0001d2  f7fffffe          BL       __aeabi_cfcmpeq
0001d6  d106              BNE      |L1.486|
0001d8  69e0              LDR      r0,[r4,#0x1c]         ;94  ; pY2
0001da  6801              LDR      r1,[r0,#0]            ;94
0001dc  6aa0              LDR      r0,[r4,#0x28]         ;94  ; pY3
0001de  6800              LDR      r0,[r0,#0]            ;94
0001e0  f7fffffe          BL       __aeabi_cfcmpeq
0001e4  d00d              BEQ      |L1.514|
                  |L1.486|
0001e6  68e0              LDR      r0,[r4,#0xc]          ;95  ; pX1
0001e8  6801              LDR      r1,[r0,#0]            ;95
0001ea  6a60              LDR      r0,[r4,#0x24]         ;95  ; pX3
0001ec  6800              LDR      r0,[r0,#0]            ;95
0001ee  f7fffffe          BL       __aeabi_cfcmpeq
0001f2  d108              BNE      |L1.518|
0001f4  6920              LDR      r0,[r4,#0x10]         ;95  ; pY1
0001f6  6801              LDR      r1,[r0,#0]            ;95
0001f8  6aa0              LDR      r0,[r4,#0x28]         ;95  ; pY3
0001fa  6800              LDR      r0,[r0,#0]            ;95
0001fc  f7fffffe          BL       __aeabi_cfcmpeq
000200  d101              BNE      |L1.518|
                  |L1.514|
000202  a089              ADR      r0,|L1.1064|
000204  e1ad              B        |L1.1378|
                  |L1.518|
000206  69a0              LDR      r0,[r4,#0x18]         ;106  ; pX2
000208  6801              LDR      r1,[r0,#0]            ;106
00020a  68e0              LDR      r0,[r4,#0xc]          ;106  ; pX1
00020c  6800              LDR      r0,[r0,#0]            ;106
00020e  f7fffffe          BL       __aeabi_cfcmpeq
000212  d10f              BNE      |L1.564|
000214  6a60              LDR      r0,[r4,#0x24]         ;106  ; pX3
000216  6801              LDR      r1,[r0,#0]            ;106
000218  68e0              LDR      r0,[r4,#0xc]          ;106  ; pX1
00021a  6800              LDR      r0,[r0,#0]            ;106
00021c  f7fffffe          BL       __aeabi_cfcmpeq
000220  d108              BNE      |L1.564|
000222  69a0              LDR      r0,[r4,#0x18]         ;106  ; pX2
000224  6801              LDR      r1,[r0,#0]            ;106
000226  68e0              LDR      r0,[r4,#0xc]          ;106  ; pX1
000228  6800              LDR      r0,[r0,#0]            ;106
00022a  f7fffffe          BL       __aeabi_cfcmpeq
00022e  d101              BNE      |L1.564|
                  |L1.560|
000230  a084              ADR      r0,|L1.1092|
000232  e196              B        |L1.1378|
                  |L1.564|
000234  69e0              LDR      r0,[r4,#0x1c]         ;112  ; pY2
000236  6801              LDR      r1,[r0,#0]            ;112
000238  6920              LDR      r0,[r4,#0x10]         ;112  ; pY1
00023a  6800              LDR      r0,[r0,#0]            ;112
00023c  f7fffffe          BL       __aeabi_cfcmpeq
000240  d10d              BNE      |L1.606|
000242  6aa0              LDR      r0,[r4,#0x28]         ;112  ; pY3
000244  6801              LDR      r1,[r0,#0]            ;112
000246  6920              LDR      r0,[r4,#0x10]         ;112  ; pY1
000248  6800              LDR      r0,[r0,#0]            ;112
00024a  f7fffffe          BL       __aeabi_cfcmpeq
00024e  d106              BNE      |L1.606|
000250  69e0              LDR      r0,[r4,#0x1c]         ;112  ; pY2
000252  6801              LDR      r1,[r0,#0]            ;112
000254  6920              LDR      r0,[r4,#0x10]         ;112  ; pY1
000256  6800              LDR      r0,[r0,#0]            ;112
000258  f7fffffe          BL       __aeabi_cfcmpeq
00025c  d0e8              BEQ      |L1.560|
                  |L1.606|
00025e  69a0              LDR      r0,[r4,#0x18]         ;118  ; pX2
000260  6801              LDR      r1,[r0,#0]            ;118
000262  68e0              LDR      r0,[r4,#0xc]          ;118  ; pX1
000264  6800              LDR      r0,[r0,#0]            ;118
000266  f7fffffe          BL       __aeabi_cfcmpeq
00026a  d12e              BNE      |L1.714|
00026c  69a0              LDR      r0,[r4,#0x18]         ;118  ; pX2
00026e  6801              LDR      r1,[r0,#0]            ;118
000270  6a60              LDR      r0,[r4,#0x24]         ;118  ; pX3
000272  6800              LDR      r0,[r0,#0]            ;118
000274  f7fffffe          BL       __aeabi_cfcmpeq
000278  d027              BEQ      |L1.714|
00027a  69a0              LDR      r0,[r4,#0x18]         ;120  ; pX2
00027c  6801              LDR      r1,[r0,#0]            ;120
00027e  6a60              LDR      r0,[r4,#0x24]         ;120  ; pX3
000280  6807              LDR      r7,[r0,#0]            ;120
000282  4638              MOV      r0,r7                 ;120
000284  f7fffffe          BL       __aeabi_fsub
000288  4680              MOV      r8,r0                 ;120
00028a  69e0              LDR      r0,[r4,#0x1c]         ;120  ; pY2
00028c  6801              LDR      r1,[r0,#0]            ;120
00028e  6aa0              LDR      r0,[r4,#0x28]         ;120  ; pY3
000290  6806              LDR      r6,[r0,#0]            ;120
000292  4630              MOV      r0,r6                 ;120
000294  f7fffffe          BL       __aeabi_fsub
000298  4641              MOV      r1,r8                 ;120
00029a  f7fffffe          BL       __aeabi_fdiv
00029e  4680              MOV      r8,r0                 ;120
0002a0  4639              MOV      r1,r7                 ;120
0002a2  f7fffffe          BL       __aeabi_fmul
0002a6  4631              MOV      r1,r6                 ;121
0002a8  f7fffffe          BL       __aeabi_frsub
0002ac  4606              MOV      r6,r0                 ;121
0002ae  68e0              LDR      r0,[r4,#0xc]          ;122  ; pX1
0002b0  6801              LDR      r1,[r0,#0]            ;122
0002b2  4640              MOV      r0,r8                 ;122
0002b4  f7fffffe          BL       __aeabi_fmul
0002b8  4631              MOV      r1,r6                 ;122
0002ba  f7fffffe          BL       __aeabi_fadd
0002be  6921              LDR      r1,[r4,#0x10]         ;122  ; pY1
0002c0  e026              B        |L1.784|
                  |L1.706|
0002c2  6b21              LDR      r1,[r4,#0x30]  ; pfZcomp
0002c4  f881a000          STRB     r10,[r1,#0]
0002c8  e030              B        |L1.812|
                  |L1.714|
;;;129    					}
;;;130    				} else {
;;;131    					//решаем через пару pX1 pX2
;;;132    					k = (*pY2 - *pY1)/(*pX2-*pX1);
0002ca  68e0              LDR      r0,[r4,#0xc]  ; pX1
0002cc  6801              LDR      r1,[r0,#0]
0002ce  69a0              LDR      r0,[r4,#0x18]  ; pX2
0002d0  6807              LDR      r7,[r0,#0]
0002d2  4638              MOV      r0,r7
0002d4  f7fffffe          BL       __aeabi_fsub
0002d8  4680              MOV      r8,r0
0002da  6920              LDR      r0,[r4,#0x10]  ; pY1
0002dc  6801              LDR      r1,[r0,#0]
0002de  69e0              LDR      r0,[r4,#0x1c]  ; pY2
0002e0  6806              LDR      r6,[r0,#0]
0002e2  4630              MOV      r0,r6
0002e4  f7fffffe          BL       __aeabi_fsub
0002e8  4641              MOV      r1,r8
0002ea  f7fffffe          BL       __aeabi_fdiv
0002ee  4680              MOV      r8,r0
0002f0  4639              MOV      r1,r7
;;;133    					b = *pY2-k**pX2;
0002f2  f7fffffe          BL       __aeabi_fmul
0002f6  4631              MOV      r1,r6
0002f8  f7fffffe          BL       __aeabi_frsub
0002fc  4606              MOV      r6,r0
;;;134    					if (*pY3 == (k**pX3+b)) {
0002fe  6a60              LDR      r0,[r4,#0x24]  ; pX3
000300  6801              LDR      r1,[r0,#0]
000302  4640              MOV      r0,r8
000304  f7fffffe          BL       __aeabi_fmul
000308  4631              MOV      r1,r6
00030a  f7fffffe          BL       __aeabi_fadd
00030e  6aa1              LDR      r1,[r4,#0x28]  ; pY3
                  |L1.784|
000310  6809              LDR      r1,[r1,#0]
000312  f7fffffe          BL       __aeabi_cfcmpeq
000316  d1d4              BNE      |L1.706|
;;;135    						// точки на одной прямой
;;;136    						Msg("Init Err Zcomp. Points by Line.\r\n");
000318  a052              ADR      r0,|L1.1124|
00031a  f7fffffe          BL       Msg
;;;137    						*pfZcomp = 0;
00031e  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
000320  7005              STRB     r5,[r0,#0]
;;;138    						dz = 0;
;;;139    					} else {
;;;140    						*pfZcomp = 1;
;;;141    					}
;;;142    				}
;;;143    				//
;;;144    				if (!*pfZcomp) 
000322  6465              STR      r5,[r4,#0x44]  ; dz
000324  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
000326  7800              LDRB     r0,[r0,#0]
000328  2800              CMP      r0,#0
00032a  d068              BEQ      |L1.1022|
                  |L1.812|
;;;145    					// точки на одной прямой
;;;146    					return;
;;;147    				else {
;;;148    					// точки не на одной прямой
;;;149    //					Msg("x1 %d y1 %d z1 %d \r\n",OUTF1(*pX1),OUTF1(*pY1),OUTF1(*pZ1));
;;;150    //					Msg("x2 %d y2 %d z2 %d \r\n",OUTF1(*pX2),OUTF1(*pY2),OUTF1(*pZ2));
;;;151    //					Msg("x3 %d y3 %d z3 %d \r\n",OUTF1(*pX3),OUTF1(*pY3),OUTF1(*pZ3));
;;;152    					dx21=*pX2-*pX1;
00032c  68e0              LDR      r0,[r4,#0xc]  ; pX1
00032e  6807              LDR      r7,[r0,#0]
000330  69a0              LDR      r0,[r4,#0x18]  ; pX2
000332  4639              MOV      r1,r7
000334  6800              LDR      r0,[r0,#0]
000336  f7fffffe          BL       __aeabi_fsub
;;;153    					dy21=*pY2-*pY1;
00033a  9006              STR      r0,[sp,#0x18]
00033c  6920              LDR      r0,[r4,#0x10]  ; pY1
00033e  6806              LDR      r6,[r0,#0]
000340  69e0              LDR      r0,[r4,#0x1c]  ; pY2
000342  4631              MOV      r1,r6
000344  6800              LDR      r0,[r0,#0]
000346  f7fffffe          BL       __aeabi_fsub
;;;154    					dz21=*pZ2-*pZ1;
00034a  9005              STR      r0,[sp,#0x14]
00034c  6960              LDR      r0,[r4,#0x14]  ; pZ1
00034e  f8d09000          LDR      r9,[r0,#0]
000352  6a20              LDR      r0,[r4,#0x20]  ; pZ2
000354  4649              MOV      r1,r9
000356  6800              LDR      r0,[r0,#0]
000358  f7fffffe          BL       __aeabi_fsub
00035c  4683              MOV      r11,r0
;;;155    					dx31=*pX3-*pX1;
00035e  6a60              LDR      r0,[r4,#0x24]  ; pX3
000360  4639              MOV      r1,r7
000362  6800              LDR      r0,[r0,#0]
000364  f7fffffe          BL       __aeabi_fsub
000368  4680              MOV      r8,r0
;;;156    					dy31=*pY3-*pY1;
00036a  6aa0              LDR      r0,[r4,#0x28]  ; pY3
00036c  4631              MOV      r1,r6
00036e  6800              LDR      r0,[r0,#0]
000370  f7fffffe          BL       __aeabi_fsub
000374  4607              MOV      r7,r0
;;;157    					dz31=*pZ3-*pZ1;
000376  6ae0              LDR      r0,[r4,#0x2c]  ; pZ3
000378  4649              MOV      r1,r9
00037a  6800              LDR      r0,[r0,#0]
00037c  f7fffffe          BL       __aeabi_fsub
000380  4681              MOV      r9,r0
;;;158    //					Msg("dx21 %d dy21 %d dz21 %d \r\n",OUTF1(dx21),OUTF1(dy21),OUTF1(dz21));
;;;159    //					Msg("dx31 %d dy31 %d dz31 %d \r\n",OUTF1(dx31),OUTF1(dy31),OUTF1(dz31));
;;;160    					*pA = dy21*dz31 - dy31*dz21;
000382  4659              MOV      r1,r11
000384  4638              MOV      r0,r7
000386  f7fffffe          BL       __aeabi_fmul
00038a  4606              MOV      r6,r0
00038c  4649              MOV      r1,r9
00038e  9805              LDR      r0,[sp,#0x14]
000390  f7fffffe          BL       __aeabi_fmul
000394  4631              MOV      r1,r6
000396  f7fffffe          BL       __aeabi_fsub
00039a  6b61              LDR      r1,[r4,#0x34]  ; pA
;;;161    					*pB = dx31*dz21 - dx21*dz31;
00039c  6008              STR      r0,[r1,#0]
00039e  4649              MOV      r1,r9
0003a0  9806              LDR      r0,[sp,#0x18]
0003a2  f7fffffe          BL       __aeabi_fmul
0003a6  4606              MOV      r6,r0
0003a8  4659              MOV      r1,r11
0003aa  4640              MOV      r0,r8
0003ac  f7fffffe          BL       __aeabi_fmul
0003b0  4631              MOV      r1,r6
0003b2  f7fffffe          BL       __aeabi_fsub
0003b6  6ba1              LDR      r1,[r4,#0x38]  ; pB
;;;162    					*pC = dx21*dy31 - dy21*dx31;
0003b8  6008              STR      r0,[r1,#0]
0003ba  4641              MOV      r1,r8
0003bc  9805              LDR      r0,[sp,#0x14]
0003be  f7fffffe          BL       __aeabi_fmul
0003c2  4606              MOV      r6,r0
0003c4  4639              MOV      r1,r7
0003c6  9806              LDR      r0,[sp,#0x18]
0003c8  f7fffffe          BL       __aeabi_fmul
0003cc  4631              MOV      r1,r6
0003ce  f7fffffe          BL       __aeabi_fsub
0003d2  6be1              LDR      r1,[r4,#0x3c]  ; pC
;;;163    					*pD = (*pA)*(*pX1) + (*pB)*(*pY1) + (*pC)*(*pZ1);
0003d4  6008              STR      r0,[r1,#0]
0003d6  6961              LDR      r1,[r4,#0x14]  ; pZ1
0003d8  6809              LDR      r1,[r1,#0]
0003da  f7fffffe          BL       __aeabi_fmul
0003de  4607              MOV      r7,r0
0003e0  6920              LDR      r0,[r4,#0x10]  ; pY1
0003e2  6801              LDR      r1,[r0,#0]
0003e4  6ba0              LDR      r0,[r4,#0x38]  ; pB
0003e6  6800              LDR      r0,[r0,#0]
0003e8  f7fffffe          BL       __aeabi_fmul
0003ec  4606              MOV      r6,r0
0003ee  68e0              LDR      r0,[r4,#0xc]  ; pX1
0003f0  6801              LDR      r1,[r0,#0]
0003f2  6b60              LDR      r0,[r4,#0x34]  ; pA
0003f4  6800              LDR      r0,[r0,#0]
0003f6  f7fffffe          BL       __aeabi_fmul
0003fa  4631              MOV      r1,r6
0003fc  e044              B        |L1.1160|
                  |L1.1022|
0003fe  e112              B        |L1.1574|
                  |L1.1024|
                          DCD      ||.data||
                  |L1.1028|
                          DCD      pX_SPR
                  |L1.1032|
                          DCD      pX_PG_MM
                  |L1.1036|
                          DCD      pY_SPR
                  |L1.1040|
                          DCD      pY_PG_MM
                  |L1.1044|
                          DCD      pZ_SPR
                  |L1.1048|
                          DCD      pZ_PG_MM
                  |L1.1052|
                          DCD      dXPos
                  |L1.1056|
                          DCD      dYPos
                  |L1.1060|
                          DCD      dZPos
                  |L1.1064|
000428  45727220          DCB      "Err Zcomp. Points is EQU.\r\n",0
00042c  5a636f6d
000430  702e2050
000434  6f696e74
000438  73206973
00043c  20455155
000440  2e0d0a00
                  |L1.1092|
000444  45727220          DCB      "Err Zcomp. Points by Line.\r\n",0
000448  5a636f6d
00044c  702e2050
000450  6f696e74
000454  73206279
000458  204c696e
00045c  652e0d0a
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L1.1124|
000464  496e6974          DCB      "Init Err Zcomp. Points by Line.\r\n",0
000468  20457272
00046c  205a636f
000470  6d702e20
000474  506f696e
000478  74732062
00047c  79204c69
000480  6e652e0d
000484  0a00    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  f7fffffe          BL       __aeabi_fadd
00048c  4639              MOV      r1,r7
00048e  f7fffffe          BL       __aeabi_fadd
000492  6c21              LDR      r1,[r4,#0x40]  ; pD
;;;164    //					Msg("A %d B %d C %d D %d\r\n",OUTF1(A),OUTF1(B),OUTF1(C),OUTF1(D));
;;;165    					if (!(*pC)) {
000494  6008              STR      r0,[r1,#0]
000496  6be0              LDR      r0,[r4,#0x3c]  ; pC
000498  6800              LDR      r0,[r0,#0]
00049a  f0104fff          TST      r0,#0x7f800000
00049e  d05f              BEQ      |L1.1376|
;;;166    						// компенсация не возможна
;;;167    						Msg("Init Err Zcomp. Koef C==0.\r\n");
;;;168    						*pfZcomp = 0;
;;;169    						dz = 0;
;;;170    					} else {
;;;171    						*pfZcomp = 1;
0004a0  6b21              LDR      r1,[r4,#0x30]  ; pfZcomp
;;;172      					XYZImpToXYZ(*(ms_X.Pos),*(ms_Y.Pos),0,&tmpX,&tmpY,&tmpZ);	
0004a2  af08              ADD      r7,sp,#0x20
0004a4  f10d080c          ADD      r8,sp,#0xc
0004a8  f881a000          STRB     r10,[r1,#0]           ;171
0004ac  e9cd8700          STRD     r8,r7,[sp,#0]
0004b0  48fd              LDR      r0,|L1.2216|
0004b2  6880              LDR      r0,[r0,#8]  ; ms_Y
0004b4  6801              LDR      r1,[r0,#0]
0004b6  48fd              LDR      r0,|L1.2220|
0004b8  6880              LDR      r0,[r0,#8]  ; ms_X
0004ba  ab04              ADD      r3,sp,#0x10
0004bc  2200              MOVS     r2,#0
0004be  6800              LDR      r0,[r0,#0]
0004c0  f7fffffe          BL       XYZImpToXYZ
;;;173    						dz = (*pD-(*pA)*(tmpX+*pX1)-(*pB)*(tmpY+*pY1))/(*pC);
0004c4  6920              LDR      r0,[r4,#0x10]  ; pY1
0004c6  6801              LDR      r1,[r0,#0]
0004c8  9803              LDR      r0,[sp,#0xc]
0004ca  f7fffffe          BL       __aeabi_fadd
0004ce  6ba1              LDR      r1,[r4,#0x38]  ; pB
0004d0  6809              LDR      r1,[r1,#0]
0004d2  f7fffffe          BL       __aeabi_fmul
0004d6  4606              MOV      r6,r0
0004d8  68e0              LDR      r0,[r4,#0xc]  ; pX1
0004da  6801              LDR      r1,[r0,#0]
0004dc  9804              LDR      r0,[sp,#0x10]
0004de  f7fffffe          BL       __aeabi_fadd
0004e2  6b61              LDR      r1,[r4,#0x34]  ; pA
0004e4  6809              LDR      r1,[r1,#0]
0004e6  f7fffffe          BL       __aeabi_fmul
0004ea  6c21              LDR      r1,[r4,#0x40]  ; pD
0004ec  6809              LDR      r1,[r1,#0]
0004ee  f7fffffe          BL       __aeabi_frsub
0004f2  4631              MOV      r1,r6
0004f4  f7fffffe          BL       __aeabi_fsub
0004f8  6be1              LDR      r1,[r4,#0x3c]  ; pC
0004fa  6809              LDR      r1,[r1,#0]
0004fc  f7fffffe          BL       __aeabi_fdiv
000500  6460              STR      r0,[r4,#0x44]  ; dz
000502  e9cd8700          STRD     r8,r7,[sp,#0]
;;;174    						// здесь по dXpos dYpos можно скорректировать dZpos чтобы точка была на поверхности
;;;175    						dXYZImpTodXYZ(*dXPos,*dYPos,0,&tmpX,&tmpY,&tmpZ);	
000506  f8df83a8          LDR      r8,|L1.2224|
00050a  f8df93a8          LDR      r9,|L1.2228|
00050e  ab04              ADD      r3,sp,#0x10
000510  f8d80000          LDR      r0,[r8,#0]  ; dYPos
000514  2200              MOVS     r2,#0
000516  6801              LDR      r1,[r0,#0]
000518  f8d90000          LDR      r0,[r9,#0]  ; dXPos
00051c  6800              LDR      r0,[r0,#0]
00051e  f7fffffe          BL       dXYZImpTodXYZ
;;;176    						tmpZ = (*pD-(*pA)*(tmpX)-(*pB)*(tmpY))/(*pC);
000522  6ba0              LDR      r0,[r4,#0x38]  ; pB
000524  9903              LDR      r1,[sp,#0xc]
000526  6800              LDR      r0,[r0,#0]
000528  f7fffffe          BL       __aeabi_fmul
00052c  4606              MOV      r6,r0
00052e  6b60              LDR      r0,[r4,#0x34]  ; pA
000530  9904              LDR      r1,[sp,#0x10]
000532  6800              LDR      r0,[r0,#0]
000534  f7fffffe          BL       __aeabi_fmul
000538  6c21              LDR      r1,[r4,#0x40]  ; pD
00053a  6809              LDR      r1,[r1,#0]
00053c  f7fffffe          BL       __aeabi_frsub
000540  4631              MOV      r1,r6
000542  f7fffffe          BL       __aeabi_fsub
000546  6be1              LDR      r1,[r4,#0x3c]  ; pC
000548  6809              LDR      r1,[r1,#0]
00054a  f7fffffe          BL       __aeabi_fdiv
;;;177    						if (tmpZ < 0) *dZPos = 0;
00054e  4fda              LDR      r7,|L1.2232|
000550  4606              MOV      r6,r0                 ;176
000552  9008              STR      r0,[sp,#0x20]
000554  f1104fff          CMN      r0,#0x7f800000
000558  d309              BCC      |L1.1390|
00055a  6838              LDR      r0,[r7,#0]  ; dZPos
00055c  6005              STR      r5,[r0,#0]
00055e  e017              B        |L1.1424|
                  |L1.1376|
000560  a0d6              ADR      r0,|L1.2236|
                  |L1.1378|
000562  f7fffffe          BL       Msg
000566  6b20              LDR      r0,[r4,#0x30]         ;168  ; pfZcomp
000568  7005              STRB     r5,[r0,#0]            ;168
00056a  6465              STR      r5,[r4,#0x44]         ;169  ; dz
00056c  e035              B        |L1.1498|
                  |L1.1390|
;;;178    						else *dZPos = (tmpZ*(*pZ_SPR)/(*pZ_PG_MM));
00056e  48db              LDR      r0,|L1.2268|
000570  6800              LDR      r0,[r0,#0]  ; pZ_SPR
000572  6800              LDR      r0,[r0,#0]
000574  f7fffffe          BL       __aeabi_ui2f
000578  4631              MOV      r1,r6
00057a  f7fffffe          BL       __aeabi_fmul
00057e  49d8              LDR      r1,|L1.2272|
000580  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
000582  6809              LDR      r1,[r1,#0]
000584  f7fffffe          BL       __aeabi_fdiv
000588  f7fffffe          BL       __aeabi_f2iz
00058c  6839              LDR      r1,[r7,#0]  ; dZPos
00058e  6008              STR      r0,[r1,#0]
                  |L1.1424|
;;;179    						Msg("dx %d dy %d x %d y %d z %d dz %d\r\n",*dXPos,*dYPos,OUTF1T(tmpX),OUTF1T(tmpY),OUTF1T(tmpZ),*dZPos);
000590  f8dfa350          LDR      r10,|L1.2276|
000594  9808              LDR      r0,[sp,#0x20]
000596  4651              MOV      r1,r10
000598  f7fffffe          BL       __aeabi_fmul
00059c  f7fffffe          BL       __aeabi_f2iz
0005a0  4606              MOV      r6,r0
0005a2  4651              MOV      r1,r10
0005a4  9803              LDR      r0,[sp,#0xc]
0005a6  f7fffffe          BL       __aeabi_fmul
0005aa  f7fffffe          BL       __aeabi_f2iz
0005ae  4605              MOV      r5,r0
0005b0  4651              MOV      r1,r10
0005b2  9804              LDR      r0,[sp,#0x10]
0005b4  f7fffffe          BL       __aeabi_fmul
0005b8  f7fffffe          BL       __aeabi_f2iz
0005bc  4603              MOV      r3,r0
0005be  6838              LDR      r0,[r7,#0]  ; dZPos
0005c0  6800              LDR      r0,[r0,#0]
0005c2  9500              STR      r5,[sp,#0]
0005c4  e9cd6001          STRD     r6,r0,[sp,#4]
0005c8  f8d80000          LDR      r0,[r8,#0]  ; dYPos
0005cc  6802              LDR      r2,[r0,#0]
0005ce  f8d90000          LDR      r0,[r9,#0]  ; dXPos
0005d2  6801              LDR      r1,[r0,#0]
0005d4  a0c4              ADR      r0,|L1.2280|
0005d6  f7fffffe          BL       Msg
                  |L1.1498|
;;;180    					}
;;;181    				}
;;;182    			}
;;;183    		}
;;;184    	}
;;;185    	if (*pfZcomp) Msg("Init Zcomp success. A %d B %d C %d D %d dz %d\r\n",OUTF1(*pA),OUTF1(*pB),OUTF1(*pC),OUTF1(*pD),OUTF1T(dz));
0005da  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
0005dc  7800              LDRB     r0,[r0,#0]
0005de  2800              CMP      r0,#0
0005e0  d021              BEQ      |L1.1574|
0005e2  49c0              LDR      r1,|L1.2276|
0005e4  6c60              LDR      r0,[r4,#0x44]  ; dz
0005e6  f7fffffe          BL       __aeabi_fmul
0005ea  f7fffffe          BL       __aeabi_f2iz
0005ee  4680              MOV      r8,r0
0005f0  6c20              LDR      r0,[r4,#0x40]  ; pD
0005f2  6800              LDR      r0,[r0,#0]
0005f4  f7fffffe          BL       __aeabi_f2iz
0005f8  4605              MOV      r5,r0
0005fa  6be0              LDR      r0,[r4,#0x3c]  ; pC
0005fc  6800              LDR      r0,[r0,#0]
0005fe  f7fffffe          BL       __aeabi_f2iz
000602  4607              MOV      r7,r0
000604  6ba0              LDR      r0,[r4,#0x38]  ; pB
000606  6800              LDR      r0,[r0,#0]
000608  f7fffffe          BL       __aeabi_f2iz
00060c  4606              MOV      r6,r0
00060e  6b60              LDR      r0,[r4,#0x34]  ; pA
000610  6800              LDR      r0,[r0,#0]
000612  f7fffffe          BL       __aeabi_f2iz
000616  e9cd5800          STRD     r5,r8,[sp,#0]
00061a  4601              MOV      r1,r0
00061c  463b              MOV      r3,r7
00061e  4632              MOV      r2,r6
000620  a0ba              ADR      r0,|L1.2316|
000622  f7fffffe          BL       Msg
                  |L1.1574|
;;;186    }
000626  b00b              ADD      sp,sp,#0x2c
                  |L1.1576|
000628  e8bd8ff0          POP      {r4-r11,pc}
;;;187    
                          ENDP

                  ShowMC PROC
;;;188    
;;;189    void ShowMC(TFMC * mc){
00062c  6880              LDR      r0,[r0,#8]
;;;190    //	Msg("FMin %d FrR %d FrMax %d RP %d LAP %d Acc %d RD %d MBtn	%d MPos %d PositOn %d\r\n",
;;;191    	Msg("FrMax %d\r\n",
00062e  e9d02300          LDRD     r2,r3,[r0,#0]
000632  a0c2              ADR      r0,|L1.2364|
000634  f7ffbffe          B.W      Msg
;;;192    /*
;;;193    	*(mc->FrMin)/K1,
;;;194    	*(mc->FrReq)/K1,
;;;195    */
;;;196    	*(mc->FrMax));
;;;197    /*
;;;198    	Msg("RP %d LAP %d Acc %d RD %d MBtn %d MPos %d PositOn %d\r\n",
;;;199    
;;;200    	*(mc->FrMin),
;;;201    	*(mc->FrReq),
;;;202    	*(mc->FrMax),
;;;203    
;;;204    	*(mc->ReqPos),
;;;205    	*(mc->LenActPulse),
;;;206        *(mc->Accel),
;;;207    	*(mc->ReqDir),	
;;;208    	*(mc->MoveBtn),	
;;;209    	*(mc->MovePos),	
;;;210    	*(mc->PositOn));	
;;;211    */
;;;212    }
;;;213    
                          ENDP

                  ShowMS PROC
;;;214    void ShowMS(TFMS * ms){
000638  b500              PUSH     {lr}
;;;215    	Msg("Level %d Dir %d Pos %d Lacc %d FrCur %d Tcur %d LPON %d LPOFF %d Posit %d StagePos %d\r\n",
00063a  6b42              LDR      r2,[r0,#0x34]
00063c  6b01              LDR      r1,[r0,#0x30]
00063e  b08d              SUB      sp,sp,#0x34           ;214
000640  7812              LDRB     r2,[r2,#0]
000642  7809              LDRB     r1,[r1,#0]
000644  e9cd120a          STRD     r1,r2,[sp,#0x28]
000648  e9d0120a          LDRD     r1,r2,[r0,#0x28]
00064c  e9cd1208          STRD     r1,r2,[sp,#0x20]
000650  e9d01208          LDRD     r1,r2,[r0,#0x20]
000654  e9cd1206          STRD     r1,r2,[sp,#0x18]
000658  e9d01206          LDRD     r1,r2,[r0,#0x18]
00065c  e9cd1204          STRD     r1,r2,[sp,#0x10]
000660  6901              LDR      r1,[r0,#0x10]
000662  e9d12100          LDRD     r2,r1,[r1,#0]
000666  e9cd2102          STRD     r2,r1,[sp,#8]
00066a  68c1              LDR      r1,[r0,#0xc]
00066c  9100              STR      r1,[sp,#0]
00066e  6881              LDR      r1,[r0,#8]
000670  680b              LDR      r3,[r1,#0]
000672  6841              LDR      r1,[r0,#4]
000674  f9912000          LDRSB    r2,[r1,#0]
000678  7801              LDRB     r1,[r0,#0]
00067a  48b3              LDR      r0,|L1.2376|
00067c  f7fffffe          BL       Msg
;;;216    		ms->Level,
;;;217    		*(ms->Dir),
;;;218    		*(ms->Pos),
;;;219    		ms->Lacc,
;;;220    		*(ms->FrCur),
;;;221    		ms->Tcur,			
;;;222    		ms->LPON,			
;;;223    		ms->LPOFF,				
;;;224    		*(ms->Posit),
;;;225    		*(ms->StagePos));
;;;226    }
000680  b00d              ADD      sp,sp,#0x34
000682  bd00              POP      {pc}
;;;227    
                          ENDP

                  InitMotorStructF PROC
;;;228    
;;;229    void InitMotorStructF(volatile TFMS* ms,volatile TFMC* mc ) {
000684  e92d41f0          PUSH     {r4-r8,lr}
000688  4605              MOV      r5,r0
;;;230    	// параметры по умолчанию для управляющей структуры
;;;231    	*(mc->LenOnPulse) = 5000;
00068a  6908              LDR      r0,[r1,#0x10]
00068c  460c              MOV      r4,r1                 ;229
00068e  f2413788          MOV      r7,#0x1388
;;;232    	*(mc->Accel) = 5000;			// Гц/с
000692  6007              STR      r7,[r0,#0]
000694  6948              LDR      r0,[r1,#0x14]
000696  2100              MOVS     r1,#0
000698  8007              STRH     r7,[r0,#0]
00069a  48ac              LDR      r0,|L1.2380|
;;;233    	*(mc->FrMin) = 100*K1;			// Гц / K1
00069c  6822              LDR      r2,[r4,#0]
00069e  e9c20100          STRD     r0,r1,[r2,#0]
0006a2  48ab              LDR      r0,|L1.2384|
;;;234    	*(mc->FrReq) = 4300*K1;		// Гц / K1
0006a4  6862              LDR      r2,[r4,#4]
0006a6  2119              MOVS     r1,#0x19              ;233
0006a8  e9c20100          STRD     r0,r1,[r2,#0]
;;;235    	*(mc->FrMax) = 4300*K1;		// Гц / K1
0006ac  68a2              LDR      r2,[r4,#8]
0006ae  e9c20100          STRD     r0,r1,[r2,#0]
;;;236    	*(mc->ReqDir) = -1;			// требуемое направление сброшено
0006b2  69a1              LDR      r1,[r4,#0x18]
0006b4  f04f30ff          MOV      r0,#0xffffffff
;;;237    	*(mc->MoveBtn) = 0;				// движение запрещено
0006b8  2600              MOVS     r6,#0
0006ba  7008              STRB     r0,[r1,#0]            ;236
0006bc  69e1              LDR      r1,[r4,#0x1c]
0006be  700e              STRB     r6,[r1,#0]
;;;238    	// параметры по умолчанию
;;;239    	ms->Level = 0;							// уровень сброшен
0006c0  702e              STRB     r6,[r5,#0]
;;;240    	// т.к. сигнал управления направления по умолчанию сброшен оба направления -1
;;;241    	*(ms->Dir) = -1;							// направление положительное
0006c2  6869              LDR      r1,[r5,#4]
0006c4  7008              STRB     r0,[r1,#0]
;;;242       	*(ms->Pos) = 0;							// текущая позиция
0006c6  68a8              LDR      r0,[r5,#8]
;;;243    	if (!(*(mc->FrMin))) *(mc->FrMin) = 1*K1;
0006c8  6006              STR      r6,[r0,#0]
0006ca  6821              LDR      r1,[r4,#0]
0006cc  e9d10100          LDRD     r0,r1,[r1,#0]
0006d0  4308              ORRS     r0,r0,r1
0006d2  d104              BNE      |L1.1758|
0006d4  489f              LDR      r0,|L1.2388|
0006d6  6822              LDR      r2,[r4,#0]
0006d8  2100              MOVS     r1,#0                 ;229
0006da  e9c20100          STRD     r0,r1,[r2,#0]
                  |L1.1758|
;;;244    	if (*(mc->FrMax) < *(mc->FrMin)) *(mc->FrMax) = *(mc->FrMin);
0006de  68a0              LDR      r0,[r4,#8]
0006e0  6822              LDR      r2,[r4,#0]
0006e2  e9d03000          LDRD     r3,r0,[r0,#0]
0006e6  e9d21200          LDRD     r1,r2,[r2,#0]
0006ea  1a59              SUBS     r1,r3,r1
0006ec  4190              SBCS     r0,r0,r2
0006ee  d205              BCS      |L1.1788|
0006f0  6821              LDR      r1,[r4,#0]
0006f2  e9d10100          LDRD     r0,r1,[r1,#0]
0006f6  68a2              LDR      r2,[r4,#8]
0006f8  e9c20100          STRD     r0,r1,[r2,#0]
                  |L1.1788|
;;;245    	if (*(mc->FrReq) == 0) *(mc->FrReq) = 1*K1;
0006fc  6861              LDR      r1,[r4,#4]
0006fe  e9d10100          LDRD     r0,r1,[r1,#0]
000702  4308              ORRS     r0,r0,r1
000704  d104              BNE      |L1.1808|
000706  4893              LDR      r0,|L1.2388|
000708  6862              LDR      r2,[r4,#4]
00070a  2100              MOVS     r1,#0
00070c  e9c20100          STRD     r0,r1,[r2,#0]
                  |L1.1808|
;;;246    
;;;247    	if (*(mc->FrReq) < *(mc->FrMin)) {
000710  6860              LDR      r0,[r4,#4]
000712  6822              LDR      r2,[r4,#0]
000714  e9d03000          LDRD     r3,r0,[r0,#0]
000718  e9d21200          LDRD     r1,r2,[r2,#0]
00071c  1a59              SUBS     r1,r3,r1
00071e  4190              SBCS     r0,r0,r2
000720  d206              BCS      |L1.1840|
;;;248    		*(ms->FrCur) = *(mc->FrReq);
000722  6861              LDR      r1,[r4,#4]
000724  e9d10100          LDRD     r0,r1,[r1,#0]
000728  692a              LDR      r2,[r5,#0x10]
00072a  e9c20100          STRD     r0,r1,[r2,#0]
00072e  e005              B        |L1.1852|
                  |L1.1840|
;;;249    	} else {
;;;250    		*(ms->FrCur) = *(mc->FrMin);
000730  6820              LDR      r0,[r4,#0]
000732  692a              LDR      r2,[r5,#0x10]
000734  e9d01000          LDRD     r1,r0,[r0,#0]
000738  e9c21000          STRD     r1,r0,[r2,#0]
                  |L1.1852|
;;;251    	}
;;;252    	ms->Tcur = Kb / (*(ms->FrCur));
00073c  6928              LDR      r0,[r5,#0x10]
00073e  4987              LDR      r1,|L1.2396|
000740  e9d02300          LDRD     r2,r3,[r0,#0]
000744  4884              LDR      r0,|L1.2392|
000746  f7fffffe          BL       __aeabi_uldivmod
00074a  61a8              STR      r0,[r5,#0x18]
00074c  61e9              STR      r1,[r5,#0x1c]
;;;253    	if (*(mc->LenOnPulse) == 0) *(mc->LenOnPulse) = 5000;
00074e  6920              LDR      r0,[r4,#0x10]
000750  6800              LDR      r0,[r0,#0]
000752  b908              CBNZ     r0,|L1.1880|
000754  6920              LDR      r0,[r4,#0x10]
000756  6007              STR      r7,[r0,#0]
                  |L1.1880|
;;;254    	ms->LPON =  *(mc->LenOnPulse);
000758  6920              LDR      r0,[r4,#0x10]
00075a  6800              LDR      r0,[r0,#0]
00075c  6228              STR      r0,[r5,#0x20]
00075e  626e              STR      r6,[r5,#0x24]
;;;255    	ms->LPOFF = ms->Tcur - ms->LPON;	
000760  69aa              LDR      r2,[r5,#0x18]
000762  69e8              LDR      r0,[r5,#0x1c]
000764  6a2b              LDR      r3,[r5,#0x20]
000766  6a69              LDR      r1,[r5,#0x24]
000768  1ad2              SUBS     r2,r2,r3
00076a  eb600001          SBC      r0,r0,r1
00076e  62aa              STR      r2,[r5,#0x28]
000770  62e8              STR      r0,[r5,#0x2c]
;;;256    	*ms->Posit = 0;
000772  6b28              LDR      r0,[r5,#0x30]
000774  7006              STRB     r6,[r0,#0]
;;;257    	*mc->PositOn = 0;	
000776  6a60              LDR      r0,[r4,#0x24]
000778  7006              STRB     r6,[r0,#0]
                  |L1.1914|
;;;258    }
00077a  e47b              B        |L1.116|
;;;259    
                          ENDP

                  InitMotorStructALF PROC
;;;260    void InitMotorStructALF(volatile TFMS* ms,volatile TFMC* mc ) {
00077c  b570              PUSH     {r4-r6,lr}
00077e  460c              MOV      r4,r1
000780  4605              MOV      r5,r0
;;;261    	// параметры по умолчанию для управляющей структуры
;;;262    	*(mc->ReqDir) = -1;			// требуемое направление сброшено
000782  6989              LDR      r1,[r1,#0x18]
000784  f04f30ff          MOV      r0,#0xffffffff
;;;263    	*(mc->MoveBtn) = 0;				// движение запрещено
000788  2600              MOVS     r6,#0
00078a  7008              STRB     r0,[r1,#0]            ;262
00078c  69e1              LDR      r1,[r4,#0x1c]
00078e  700e              STRB     r6,[r1,#0]
;;;264    	// параметры по умолчанию
;;;265    	ms->Level = 0;							// уровень сброшен
000790  702e              STRB     r6,[r5,#0]
;;;266    	// т.к. сигнал управления направления по умолчанию сброшен оба направления -1
;;;267    	*(ms->Dir) = -1;							
000792  6869              LDR      r1,[r5,#4]
000794  7008              STRB     r0,[r1,#0]
;;;268    	if (!(*(mc->FrMin))) *(mc->FrMin) = 1*K1;
000796  6821              LDR      r1,[r4,#0]
000798  e9d10100          LDRD     r0,r1,[r1,#0]
00079c  4308              ORRS     r0,r0,r1
00079e  d104              BNE      |L1.1962|
0007a0  486c              LDR      r0,|L1.2388|
0007a2  6822              LDR      r2,[r4,#0]
0007a4  2100              MOVS     r1,#0                 ;260
0007a6  e9c20100          STRD     r0,r1,[r2,#0]
                  |L1.1962|
;;;269    	if (*(mc->FrMax) < *(mc->FrMin)) *(mc->FrMax) = *(mc->FrMin);
0007aa  68a0              LDR      r0,[r4,#8]
0007ac  6821              LDR      r1,[r4,#0]
0007ae  e9d02000          LDRD     r2,r0,[r0,#0]
0007b2  e9d13100          LDRD     r3,r1,[r1,#0]
0007b6  1ad2              SUBS     r2,r2,r3
0007b8  4188              SBCS     r0,r0,r1
0007ba  d205              BCS      |L1.1992|
0007bc  6820              LDR      r0,[r4,#0]
0007be  68a2              LDR      r2,[r4,#8]
0007c0  e9d01000          LDRD     r1,r0,[r0,#0]
0007c4  e9c21000          STRD     r1,r0,[r2,#0]
                  |L1.1992|
;;;270    	if (*(mc->FrReq) == 0) *(mc->FrReq) = 1*K1;
0007c8  6861              LDR      r1,[r4,#4]
0007ca  e9d10100          LDRD     r0,r1,[r1,#0]
0007ce  4308              ORRS     r0,r0,r1
0007d0  d104              BNE      |L1.2012|
0007d2  4860              LDR      r0,|L1.2388|
0007d4  6862              LDR      r2,[r4,#4]
0007d6  2100              MOVS     r1,#0
0007d8  e9c20100          STRD     r0,r1,[r2,#0]
                  |L1.2012|
;;;271    
;;;272    	if (*(mc->FrReq) < *(mc->FrMin)) {
0007dc  6860              LDR      r0,[r4,#4]
0007de  6823              LDR      r3,[r4,#0]
0007e0  e9d01000          LDRD     r1,r0,[r0,#0]
0007e4  e9d32300          LDRD     r2,r3,[r3,#0]
0007e8  1a89              SUBS     r1,r1,r2
0007ea  4198              SBCS     r0,r0,r3
0007ec  d201              BCS      |L1.2034|
;;;273    		*(ms->FrCur) = *(mc->FrReq);
0007ee  6860              LDR      r0,[r4,#4]
0007f0  e000              B        |L1.2036|
                  |L1.2034|
;;;274    	} else {
;;;275    		*(ms->FrCur) = *(mc->FrMin);
0007f2  6820              LDR      r0,[r4,#0]
                  |L1.2036|
0007f4  692a              LDR      r2,[r5,#0x10]
0007f6  e9d01000          LDRD     r1,r0,[r0,#0]
0007fa  e9c21000          STRD     r1,r0,[r2,#0]
;;;276    	}
;;;277    	ms->Tcur = Kb / (*(ms->FrCur));
0007fe  6928              LDR      r0,[r5,#0x10]
000800  4956              LDR      r1,|L1.2396|
000802  e9d02300          LDRD     r2,r3,[r0,#0]
000806  4854              LDR      r0,|L1.2392|
000808  f7fffffe          BL       __aeabi_uldivmod
00080c  61a8              STR      r0,[r5,#0x18]
00080e  61e9              STR      r1,[r5,#0x1c]
;;;278    	if (*(mc->LenOnPulse) == 0) *(mc->LenOnPulse) = 5000;
000810  6920              LDR      r0,[r4,#0x10]
000812  6800              LDR      r0,[r0,#0]
000814  b918              CBNZ     r0,|L1.2078|
000816  6921              LDR      r1,[r4,#0x10]
000818  f2413088          MOV      r0,#0x1388
00081c  6008              STR      r0,[r1,#0]
                  |L1.2078|
;;;279    	ms->LPON = *(mc->LenOnPulse); 
00081e  6920              LDR      r0,[r4,#0x10]
000820  6800              LDR      r0,[r0,#0]
000822  6228              STR      r0,[r5,#0x20]
000824  626e              STR      r6,[r5,#0x24]
;;;280    	ms->LPOFF = ms->Tcur - ms->LPON;	
000826  69ab              LDR      r3,[r5,#0x18]
000828  69e8              LDR      r0,[r5,#0x1c]
00082a  6a2a              LDR      r2,[r5,#0x20]
00082c  6a69              LDR      r1,[r5,#0x24]
00082e  1a9a              SUBS     r2,r3,r2
000830  eb600001          SBC      r0,r0,r1
000834  62aa              STR      r2,[r5,#0x28]
000836  62e8              STR      r0,[r5,#0x2c]
;;;281    
;;;282    	*(mc->PositOn) = 0;	
000838  6a60              LDR      r0,[r4,#0x24]
00083a  7006              STRB     r6,[r0,#0]
;;;283    	*(mc->ReqPos) = 0;
00083c  68e0              LDR      r0,[r4,#0xc]
;;;284    	*(mc->MovePos) = 0;	
00083e  6006              STR      r6,[r0,#0]
000840  6a20              LDR      r0,[r4,#0x20]
000842  7006              STRB     r6,[r0,#0]
;;;285    	*(ms->StagePos) = 0;	
000844  6b68              LDR      r0,[r5,#0x34]
000846  7006              STRB     r6,[r0,#0]
;;;286    }
000848  bd70              POP      {r4-r6,pc}
;;;287    
                          ENDP

                  UpZ PROC
;;;297    
;;;298    void UpZ(void){
00084a  4945              LDR      r1,|L1.2400|
00084c  b510              PUSH     {r4,lr}
;;;299    	*(mc_Z.FrReq) = save_mc_Z_FrMax;
00084e  4845              LDR      r0,|L1.2404|
000850  e9d12304          LDRD     r2,r3,[r1,#0x10]
000854  6844              LDR      r4,[r0,#4]  ; mc_Z
000856  e9c42300          STRD     r2,r3,[r4,#0]
00085a  e9d12104          LDRD     r2,r1,[r1,#0x10]
;;;300    	*(mc_Z.FrMax) = save_mc_Z_FrMax;
00085e  6883              LDR      r3,[r0,#8]  ; mc_Z
000860  e9c32100          STRD     r2,r1,[r3,#0]
;;;301    //	*(mc_Z.ReqPos) = Z_MAX_POS;
;;;302    	*(mc_Z.ReqPos) = SaveZPos;
000864  493e              LDR      r1,|L1.2400|
000866  68c3              LDR      r3,[r0,#0xc]  ; mc_Z
000868  3980              SUBS     r1,r1,#0x80
00086a  6c8a              LDR      r2,[r1,#0x48]  ; SaveZPos
;;;303    	*(mc_Z.MovePos) = 1;
00086c  601a              STR      r2,[r3,#0]
00086e  6a00              LDR      r0,[r0,#0x20]  ; mc_Z
000870  2201              MOVS     r2,#1
000872  7002              STRB     r2,[r0,#0]
;;;304    	fStartMoveZLowSpeed = 0;
000874  2000              MOVS     r0,#0
000876  7008              STRB     r0,[r1,#0]
;;;305    }
000878  bd10              POP      {r4,pc}
;;;306    
                          ENDP

                  RecoveryZfreq PROC
;;;307    void RecoveryZfreq(void){
00087a  b570              PUSH     {r4-r6,lr}
;;;308    	fStartMoveZLowSpeed = 0;
00087c  4838              LDR      r0,|L1.2400|
00087e  2400              MOVS     r4,#0
000880  3880              SUBS     r0,r0,#0x80
000882  7004              STRB     r4,[r0,#0]
;;;309    	Msg("StopMoveZLowSpeed\r\n");
000884  a038              ADR      r0,|L1.2408|
000886  f7fffffe          BL       Msg
;;;310    	// восстановить максимальную и требуемую скорости по Z
;;;311    	*(mc_Z.FrReq) = save_mc_Z_FrReq;
00088a  4935              LDR      r1,|L1.2400|
00088c  4835              LDR      r0,|L1.2404|
00088e  e9d12302          LDRD     r2,r3,[r1,#8]
000892  6845              LDR      r5,[r0,#4]  ; mc_Z
000894  e9c52300          STRD     r2,r3,[r5,#0]
000898  e9d12104          LDRD     r2,r1,[r1,#0x10]
;;;312    	*(mc_Z.FrMax) = save_mc_Z_FrMax;
00089c  6883              LDR      r3,[r0,#8]  ; mc_Z
00089e  e9c32100          STRD     r2,r1,[r3,#0]
;;;313    	// остановиться
;;;314    	*mc_Z.MovePos = 0;
0008a2  6a00              LDR      r0,[r0,#0x20]  ; mc_Z
0008a4  7004              STRB     r4,[r0,#0]
                  |L1.2214|
;;;315    }
0008a6  bd70              POP      {r4-r6,pc}
                  |L1.2216|
                          DCD      ms_Y
                  |L1.2220|
                          DCD      ms_X
                  |L1.2224|
                          DCD      dYPos
                  |L1.2228|
                          DCD      dXPos
                  |L1.2232|
                          DCD      dZPos
                  |L1.2236|
0008bc  496e6974          DCB      "Init Err Zcomp. Koef C==0.\r\n",0
0008c0  20457272
0008c4  205a636f
0008c8  6d702e20
0008cc  4b6f6566
0008d0  20433d3d
0008d4  302e0d0a
0008d8  00      
0008d9  00                DCB      0
0008da  00                DCB      0
0008db  00                DCB      0
                  |L1.2268|
                          DCD      pZ_SPR
                  |L1.2272|
                          DCD      pZ_PG_MM
                  |L1.2276|
                          DCD      0x447a0000
                  |L1.2280|
0008e8  64782025          DCB      "dx %d dy %d x %d y %d z %d dz %d\r\n",0
0008ec  64206479
0008f0  20256420
0008f4  78202564
0008f8  20792025
0008fc  64207a20
000900  25642064
000904  7a202564
000908  0d0a00  
00090b  00                DCB      0
                  |L1.2316|
00090c  496e6974          DCB      "Init Zcomp success. A %d B %d C %d D %d dz %d\r\n",0
000910  205a636f
000914  6d702073
000918  75636365
00091c  73732e20
000920  41202564
000924  20422025
000928  64204320
00092c  25642044
000930  20256420
000934  647a2025
000938  640d0a00
                  |L1.2364|
00093c  46724d61          DCB      "FrMax %d\r\n",0
000940  78202564
000944  0d0a00  
000947  00                DCB      0
                  |L1.2376|
                          DCD      ||.conststring||
                  |L1.2380|
                          DCD      0x9502f900
                  |L1.2384|
                          DCD      0x077fd300
                  |L1.2388|
                          DCD      0x017d7840
                  |L1.2392|
                          DCD      0x26fc1000
                  |L1.2396|
                          DCD      0x0002386f
                  |L1.2400|
                          DCD      ||.data||+0x80
                  |L1.2404|
                          DCD      mc_Z
                  |L1.2408|
000968  53746f70          DCB      "StopMoveZLowSpeed\r\n",0
00096c  4d6f7665
000970  5a4c6f77
000974  53706565
000978  640d0a00
                          ENDP

                  StartMoveZLowSpeed PROC
;;;316    
;;;317    void	StartMoveZLowSpeed(void){
00097c  e92d41f0          PUSH     {r4-r8,lr}
;;;318    	if (!fStartMoveZLowSpeed) {
000980  4dfe              LDR      r5,|L1.3452|
;;;319    		fStartMoveZLowSpeed = 1;
;;;320    		Msg("StartMoveZLowSpeed Index %d\r\n",Index);
;;;321    		// запомнить максимальную и требуемую скорости по Z
;;;322    		save_mc_Z_FrReq = *(mc_Z.FrReq);
000982  4cff              LDR      r4,|L1.3456|
000984  2700              MOVS     r7,#0                 ;318
000986  7828              LDRB     r0,[r5,#0]            ;318  ; fStartMoveZLowSpeed
000988  f1050680          ADD      r6,r5,#0x80
00098c  b188              CBZ      r0,|L1.2482|
;;;323    		save_mc_Z_FrMax = *(mc_Z.FrMax);
;;;324    		// перебить их на минимальную
;;;325    		*(mc_Z.FrReq) = *(mc_Z.FrMin);
;;;326    		*(mc_Z.FrMax) = *(mc_Z.FrMin);
;;;327    		// отправить Z координату вниз до срабатывания датчика или до 0
;;;328    		// в нуле или в датчике восстановить скорости 
;;;329    		SaveZPos = *(ms_Z.Pos);
;;;330    		*mc_Z.ReqPos = 0;
;;;331    		*mc_Z.MovePos = 1;
;;;332    	} else {
;;;333    		fStartMoveZLowSpeed = 0;
00098e  702f              STRB     r7,[r5,#0]
;;;334    		Msg("StopMoveZLowSpeed\r\n");
000990  f2af002c          ADR      r0,|L1.2408|
000994  f7fffffe          BL       Msg
000998  e9d60104          LDRD     r0,r1,[r6,#0x10]
;;;335    		// восстановить максимальную и требуемую скорости по Z
;;;336    		*(mc_Z.FrReq) = save_mc_Z_FrMax;
00099c  6862              LDR      r2,[r4,#4]  ; mc_Z
00099e  e9c20100          STRD     r0,r1,[r2,#0]
0009a2  e9d60104          LDRD     r0,r1,[r6,#0x10]
;;;337    		*(mc_Z.FrMax) = save_mc_Z_FrMax;
0009a6  68a2              LDR      r2,[r4,#8]  ; mc_Z
0009a8  e9c20100          STRD     r0,r1,[r2,#0]
;;;338    		// остановиться
;;;339    		*mc_Z.MovePos = 0;
0009ac  6a20              LDR      r0,[r4,#0x20]  ; mc_Z
0009ae  7007              STRB     r7,[r0,#0]
;;;340    	}
;;;341    }
0009b0  e6e3              B        |L1.1914|
                  |L1.2482|
0009b2  f04f0801          MOV      r8,#1                 ;319
0009b6  f8858000          STRB     r8,[r5,#0]            ;319
0009ba  a0f2              ADR      r0,|L1.3460|
0009bc  68a9              LDR      r1,[r5,#8]            ;320  ; Index
0009be  f7fffffe          BL       Msg
0009c2  6860              LDR      r0,[r4,#4]            ;322  ; mc_Z
0009c4  e9d01000          LDRD     r1,r0,[r0,#0]         ;322
0009c8  e9c61002          STRD     r1,r0,[r6,#8]         ;322
0009cc  68a0              LDR      r0,[r4,#8]            ;323  ; mc_Z
0009ce  e9d01000          LDRD     r1,r0,[r0,#0]         ;323
0009d2  e9c61004          STRD     r1,r0,[r6,#0x10]      ;323
0009d6  6821              LDR      r1,[r4,#0]            ;325  ; mc_Z
0009d8  e9d10100          LDRD     r0,r1,[r1,#0]         ;325
0009dc  6862              LDR      r2,[r4,#4]            ;325  ; mc_Z
0009de  e9c20100          STRD     r0,r1,[r2,#0]         ;325
0009e2  6820              LDR      r0,[r4,#0]            ;326  ; mc_Z
0009e4  68a2              LDR      r2,[r4,#8]            ;326  ; mc_Z
0009e6  e9d01000          LDRD     r1,r0,[r0,#0]         ;326
0009ea  e9c21000          STRD     r1,r0,[r2,#0]         ;326
0009ee  48ed              LDR      r0,|L1.3492|
0009f0  6880              LDR      r0,[r0,#8]            ;329  ; ms_Z
0009f2  6800              LDR      r0,[r0,#0]            ;329
0009f4  64a8              STR      r0,[r5,#0x48]         ;330  ; SaveZPos
0009f6  68e0              LDR      r0,[r4,#0xc]          ;330  ; mc_Z
0009f8  6007              STR      r7,[r0,#0]            ;331
0009fa  6a21              LDR      r1,[r4,#0x20]         ;331  ; mc_Z
0009fc  f8818000          STRB     r8,[r1,#0]            ;331
000a00  e6bb              B        |L1.1914|
;;;342    
                          ENDP

                  AddPointFrz PROC
;;;343    void	AddPointFrz(void){
000a02  e92d41fc          PUSH     {r2-r8,lr}
;;;344    	// выдача пакета добавления точки
;;;345    	//float px,py,pz;
;;;346    	Msg("AddPoint ");	
000a06  a0e8              ADR      r0,|L1.3496|
000a08  f7fffffe          BL       Msg
;;;347    	// позицию по Z откорректировать на высоту датчика pHdat
;;;348    	Msg("xp %d yp %d zp %d\r\n",*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos));
000a0c  4ce5              LDR      r4,|L1.3492|
000a0e  68a0              LDR      r0,[r4,#8]  ; ms_Z
000a10  4de8              LDR      r5,|L1.3508|
000a12  6803              LDR      r3,[r0,#0]
000a14  68a8              LDR      r0,[r5,#8]  ; ms_Y
000a16  4ee8              LDR      r6,|L1.3512|
000a18  6802              LDR      r2,[r0,#0]
000a1a  68b0              LDR      r0,[r6,#8]  ; ms_X
000a1c  6801              LDR      r1,[r0,#0]
000a1e  a0e7              ADR      r0,|L1.3516|
000a20  f7fffffe          BL       Msg
;;;349    	dXYZImpTodXYZ(*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos),&px,&py,&pz);
000a24  49d5              LDR      r1,|L1.3452|
000a26  3154              ADDS     r1,r1,#0x54
000a28  1f08              SUBS     r0,r1,#4
000a2a  e9cd0100          STRD     r0,r1,[sp,#0]
000a2e  68a0              LDR      r0,[r4,#8]  ; ms_Z
000a30  6802              LDR      r2,[r0,#0]
000a32  68a8              LDR      r0,[r5,#8]  ; ms_Y
000a34  6801              LDR      r1,[r0,#0]
000a36  68b0              LDR      r0,[r6,#8]  ; ms_X
000a38  4bd0              LDR      r3,|L1.3452|
000a3a  6800              LDR      r0,[r0,#0]
000a3c  334c              ADDS     r3,r3,#0x4c
000a3e  f7fffffe          BL       dXYZImpTodXYZ
;;;350    	pz = pz - *pHdat;
000a42  4cce              LDR      r4,|L1.3452|
000a44  6da0              LDR      r0,[r4,#0x58]  ; pHdat
000a46  6801              LDR      r1,[r0,#0]
000a48  6d60              LDR      r0,[r4,#0x54]  ; pz
000a4a  f7fffffe          BL       __aeabi_fsub
;;;351    	SendAddPointPackFrz(&Index,&px,&py,&pz);
000a4e  f1040354          ADD      r3,r4,#0x54
000a52  1f1a              SUBS     r2,r3,#4
000a54  1f11              SUBS     r1,r2,#4
000a56  6560              STR      r0,[r4,#0x54]  ; pz
000a58  f1a10044          SUB      r0,r1,#0x44
000a5c  f7fffffe          BL       SendAddPointPackFrz
;;;352    	FixPointPackFrz(&Index,&px,&py,&pz);
000a60  f1040354          ADD      r3,r4,#0x54
000a64  1f1a              SUBS     r2,r3,#4
000a66  1f11              SUBS     r1,r2,#4
000a68  f1a10044          SUB      r0,r1,#0x44
000a6c  f7fffffe          BL       FixPointPackFrz
;;;353    	StartTI(tiRetrySendPoint,tiMsToTick(100));
000a70  49d7              LDR      r1,|L1.3536|
000a72  f24070d1          MOV      r0,#0x7d1
000a76  6488              STR      r0,[r1,#0x48]  ; ti
;;;354    	SendPointCount = 3;
000a78  2003              MOVS     r0,#3
;;;355    	Msg("AP %d %d %d %d\r\n",Index,OUTF1T(px),OUTF1T(py),OUTF1T(pz));
000a7a  4fd6              LDR      r7,|L1.3540|
000a7c  7060              STRB     r0,[r4,#1]            ;354
000a7e  4639              MOV      r1,r7
000a80  6d60              LDR      r0,[r4,#0x54]  ; pz
000a82  f7fffffe          BL       __aeabi_fmul
000a86  f7fffffe          BL       __aeabi_f2iz
000a8a  4606              MOV      r6,r0
000a8c  4639              MOV      r1,r7
000a8e  6d20              LDR      r0,[r4,#0x50]  ; py
000a90  f7fffffe          BL       __aeabi_fmul
000a94  f7fffffe          BL       __aeabi_f2iz
000a98  4605              MOV      r5,r0
000a9a  4639              MOV      r1,r7
000a9c  6ce0              LDR      r0,[r4,#0x4c]  ; px
000a9e  f7fffffe          BL       __aeabi_fmul
000aa2  f7fffffe          BL       __aeabi_f2iz
000aa6  4602              MOV      r2,r0
000aa8  9600              STR      r6,[sp,#0]
000aaa  462b              MOV      r3,r5
000aac  a0ca              ADR      r0,|L1.3544|
000aae  68a1              LDR      r1,[r4,#8]  ; Index
000ab0  f7fffffe          BL       Msg
;;;356    	Index++;
000ab4  68a0              LDR      r0,[r4,#8]  ; Index
000ab6  1c40              ADDS     r0,r0,#1
;;;357    	if (Index > 3) Index = 1;
000ab8  60a0              STR      r0,[r4,#8]  ; Index
000aba  2803              CMP      r0,#3
000abc  dd01              BLE      |L1.2754|
000abe  2001              MOVS     r0,#1
000ac0  60a0              STR      r0,[r4,#8]  ; Index
                  |L1.2754|
;;;358    }
000ac2  e8bd81fc          POP      {r2-r8,pc}
;;;359    
                          ENDP

                  HTCorr PROC
;;;360    void	HTCorr(void){
000ac6  e92d4ff0          PUSH     {r4-r11,lr}
000aca  b089              SUB      sp,sp,#0x24
;;;361    	// выдача пакета добавления точки
;;;362    	float ptx,pty,ptz,pzc,dz;
;;;363    	Msg("HTCorr ");
000acc  a0c7              ADR      r0,|L1.3564|
000ace  f7fffffe          BL       Msg
;;;364    	// позицию по Z откорректировать на высоту датчика pHdat
;;;365    	Msg("xp %d yp %d zp %d\r\n",*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos));
000ad2  4db4              LDR      r5,|L1.3492|
000ad4  68a8              LDR      r0,[r5,#8]  ; ms_Z
000ad6  f8df82dc          LDR      r8,|L1.3508|
000ada  6803              LDR      r3,[r0,#0]
000adc  f8d80008          LDR      r0,[r8,#8]  ; ms_Y
000ae0  4644              MOV      r4,r8
000ae2  f8df92d4          LDR      r9,|L1.3512|
000ae6  6802              LDR      r2,[r0,#0]
000ae8  464e              MOV      r6,r9
000aea  f8d90008          LDR      r0,[r9,#8]  ; ms_X
000aee  6801              LDR      r1,[r0,#0]
000af0  a0b2              ADR      r0,|L1.3516|
000af2  f7fffffe          BL       Msg
;;;366    	// измерить dZTool 
;;;367    	// получаем px,py (pz не нужно) абсолютные
;;;368    	dXYZImpTodXYZ(*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos),&ptx,&pty,&ptz);
000af6  f10d0a08          ADD      r10,sp,#8
000afa  af03              ADD      r7,sp,#0xc
000afc  e9cd7a00          STRD     r7,r10,[sp,#0]
000b00  68a8              LDR      r0,[r5,#8]  ; ms_Z
000b02  6802              LDR      r2,[r0,#0]
000b04  68a0              LDR      r0,[r4,#8]  ; ms_Y
000b06  6801              LDR      r1,[r0,#0]
000b08  68b0              LDR      r0,[r6,#8]  ; ms_X
000b0a  ab04              ADD      r3,sp,#0x10
000b0c  6800              LDR      r0,[r0,#0]
000b0e  f7fffffe          BL       dXYZImpTodXYZ
;;;369    	Msg("ptx %d pty %d\r\n",OUTF1T(ptx),OUTF1T(pty));
000b12  4eb0              LDR      r6,|L1.3540|
000b14  9803              LDR      r0,[sp,#0xc]
000b16  4631              MOV      r1,r6
000b18  f7fffffe          BL       __aeabi_fmul
000b1c  f7fffffe          BL       __aeabi_f2iz
000b20  4604              MOV      r4,r0
000b22  4631              MOV      r1,r6
000b24  9804              LDR      r0,[sp,#0x10]
000b26  f7fffffe          BL       __aeabi_fmul
000b2a  f7fffffe          BL       __aeabi_f2iz
000b2e  4601              MOV      r1,r0
000b30  4622              MOV      r2,r4
000b32  a0b0              ADR      r0,|L1.3572|
000b34  f7fffffe          BL       Msg
;;;370    	// вычисляем z на плоскости
;;;371    	if (*pfZcomp) {
000b38  4c90              LDR      r4,|L1.3452|
000b3a  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
000b3c  7800              LDRB     r0,[r0,#0]
000b3e  2800              CMP      r0,#0
000b40  d067              BEQ      |L1.3090|
;;;372    		if (*pC) {
000b42  6be0              LDR      r0,[r4,#0x3c]  ; pC
000b44  f8d08000          LDR      r8,[r0,#0]
000b48  f0184fff          TST      r8,#0x7f800000
000b4c  d057              BEQ      |L1.3070|
;;;373    //			ptz = (D-A*(ptx-*pX1)-B*(pty-*pY1))/C;
;;;374    			ptz = ((*pD)-(*pA)*(ptx)-(*pB)*(pty))/(*pC);
000b4e  6ba0              LDR      r0,[r4,#0x38]  ; pB
000b50  9903              LDR      r1,[sp,#0xc]
000b52  6800              LDR      r0,[r0,#0]
000b54  f7fffffe          BL       __aeabi_fmul
000b58  4681              MOV      r9,r0
000b5a  6b60              LDR      r0,[r4,#0x34]  ; pA
000b5c  9904              LDR      r1,[sp,#0x10]
000b5e  6800              LDR      r0,[r0,#0]
000b60  f7fffffe          BL       __aeabi_fmul
000b64  6c21              LDR      r1,[r4,#0x40]  ; pD
000b66  6809              LDR      r1,[r1,#0]
000b68  f7fffffe          BL       __aeabi_frsub
000b6c  4649              MOV      r1,r9
000b6e  f7fffffe          BL       __aeabi_fsub
000b72  4641              MOV      r1,r8
000b74  f7fffffe          BL       __aeabi_fdiv
;;;375    			// прибавляем высоту датчика и pZ1
;;;376    			// ptz = ptz + *pHdat + *pZ1;
;;;377    			// вычисляем обсолютную координату z по позиции
;;;378    			dXYZImpTodXYZ(0,0,*(ms_Z.Pos),&ptx,&pty,&pzc);
000b78  9002              STR      r0,[sp,#8]
000b7a  a808              ADD      r0,sp,#0x20
000b7c  e9cd7000          STRD     r7,r0,[sp,#0]
000b80  68a8              LDR      r0,[r5,#8]  ; ms_Z
000b82  2100              MOVS     r1,#0
000b84  ab04              ADD      r3,sp,#0x10
000b86  6802              LDR      r2,[r0,#0]
000b88  4608              MOV      r0,r1
000b8a  f7fffffe          BL       dXYZImpTodXYZ
;;;379    			// вычислить отклонение по z координате
;;;380    			dz = pzc - ptz - *pHdat;
000b8e  9902              LDR      r1,[sp,#8]
000b90  9808              LDR      r0,[sp,#0x20]
000b92  460d              MOV      r5,r1
000b94  4681              MOV      r9,r0
000b96  f7fffffe          BL       __aeabi_fsub
000b9a  6da1              LDR      r1,[r4,#0x58]  ; pHdat
000b9c  6809              LDR      r1,[r1,#0]
000b9e  f7fffffe          BL       __aeabi_fsub
000ba2  4607              MOV      r7,r0
;;;381    			Msg("pzc %d ptz %d dz %d\r\n",OUTF1T(pzc),OUTF1T(ptz),OUTF1T(dz));
000ba4  46b0              MOV      r8,r6
000ba6  4631              MOV      r1,r6
000ba8  f7fffffe          BL       __aeabi_fmul
000bac  f7fffffe          BL       __aeabi_f2iz
000bb0  4606              MOV      r6,r0
000bb2  4641              MOV      r1,r8
000bb4  4628              MOV      r0,r5
000bb6  f7fffffe          BL       __aeabi_fmul
000bba  f7fffffe          BL       __aeabi_f2iz
000bbe  4605              MOV      r5,r0
000bc0  4641              MOV      r1,r8
000bc2  4648              MOV      r0,r9
000bc4  f7fffffe          BL       __aeabi_fmul
000bc8  f7fffffe          BL       __aeabi_f2iz
000bcc  4601              MOV      r1,r0
000bce  4633              MOV      r3,r6
000bd0  462a              MOV      r2,r5
000bd2  a08c              ADR      r0,|L1.3588|
000bd4  f7fffffe          BL       Msg
;;;382    			// прибавить к pZ1 pZ2 pZ3
;;;383    			*pZ1 += dz;
000bd8  6965              LDR      r5,[r4,#0x14]  ; pZ1
000bda  4639              MOV      r1,r7
000bdc  6828              LDR      r0,[r5,#0]
000bde  f7fffffe          BL       __aeabi_fadd
;;;384    			*pZ2 += dz;
000be2  6028              STR      r0,[r5,#0]
000be4  6a25              LDR      r5,[r4,#0x20]  ; pZ2
000be6  4639              MOV      r1,r7
000be8  6828              LDR      r0,[r5,#0]
000bea  f7fffffe          BL       __aeabi_fadd
;;;385    			*pZ3 += dz;
000bee  6028              STR      r0,[r5,#0]
000bf0  6ae5              LDR      r5,[r4,#0x2c]  ; pZ3
000bf2  4639              MOV      r1,r7
000bf4  f8d50000          LDR.W    r0,[r5,#0]
                  |L1.3064|
000bf8  f7fffffe          BL       __aeabi_fadd
000bfc  6028              STR      r0,[r5,#0]
                  |L1.3070|
;;;386    			// вычислить новую плоскостную коррекцию
;;;387    		} 
;;;388    		// С == 0 
;;;389    	} else {
;;;390    		// корекция только первой точки для расчета dXPos dYPos dZPos
;;;391    		// НЕ ПРОВЕРЕНО !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;;;392    		dXYZImpTodXYZ(*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos),&ptx,&pty,&ptz);
;;;393    		//dz = pzc - ptz - *pHdat;
;;;394    		dz = ptz - *pZ1 - *pHdat ;
;;;395    		Msg("ptz %d Hd %d dz %d pZ1 %d\r\n",OUTF1T(ptz),OUTF1T(*pHdat),OUTF1T(dz),OUTF1T(*pZ1));
;;;396    		*pZ1 += dz;
;;;397    	}
;;;398    	*pfZcomp = 0;
000bfe  6b20              LDR      r0,[r4,#0x30]  ; pfZcomp
000c00  2500              MOVS     r5,#0
000c02  7005              STRB     r5,[r0,#0]
;;;399    	InitZComp();
000c04  f7fffffe          BL       InitZComp
;;;400    	*pHTCorr = 0; // конец коррекции
000c08  4884              LDR      r0,|L1.3612|
000c0a  6800              LDR      r0,[r0,#0]  ; pHTCorr
000c0c  7005              STRB     r5,[r0,#0]
;;;401    }
000c0e  b009              ADD      sp,sp,#0x24
000c10  e50a              B        |L1.1576|
                  |L1.3090|
000c12  e9cd7a00          STRD     r7,r10,[sp,#0]
000c16  68a8              LDR      r0,[r5,#8]            ;392  ; ms_Z
000c18  6802              LDR      r2,[r0,#0]            ;392
000c1a  f8d80008          LDR      r0,[r8,#8]            ;392  ; ms_Y
000c1e  6801              LDR      r1,[r0,#0]            ;392
000c20  f8d90008          LDR      r0,[r9,#8]            ;392  ; ms_X
000c24  ab04              ADD      r3,sp,#0x10           ;392
000c26  6800              LDR      r0,[r0,#0]            ;392
000c28  f7fffffe          BL       dXYZImpTodXYZ
000c2c  6960              LDR      r0,[r4,#0x14]         ;394  ; pZ1
000c2e  6805              LDR      r5,[r0,#0]            ;394
000c30  9802              LDR      r0,[sp,#8]            ;394
000c32  4629              MOV      r1,r5                 ;394
000c34  4683              MOV      r11,r0                ;394
000c36  f7fffffe          BL       __aeabi_fsub
000c3a  6da1              LDR      r1,[r4,#0x58]         ;394  ; pHdat
000c3c  6809              LDR      r1,[r1,#0]            ;394
000c3e  4688              MOV      r8,r1                 ;394
000c40  f7fffffe          BL       __aeabi_fsub
000c44  4681              MOV      r9,r0                 ;394
000c46  46b2              MOV      r10,r6                ;395
000c48  4631              MOV      r1,r6                 ;395
000c4a  4628              MOV      r0,r5                 ;395
000c4c  f7fffffe          BL       __aeabi_fmul
000c50  f7fffffe          BL       __aeabi_f2iz
000c54  4607              MOV      r7,r0                 ;395
000c56  4651              MOV      r1,r10                ;395
000c58  4648              MOV      r0,r9                 ;395
000c5a  f7fffffe          BL       __aeabi_fmul
000c5e  f7fffffe          BL       __aeabi_f2iz
000c62  4606              MOV      r6,r0                 ;395
000c64  4651              MOV      r1,r10                ;395
000c66  4640              MOV      r0,r8                 ;395
000c68  f7fffffe          BL       __aeabi_fmul
000c6c  f7fffffe          BL       __aeabi_f2iz
000c70  4605              MOV      r5,r0                 ;395
000c72  4651              MOV      r1,r10                ;395
000c74  4658              MOV      r0,r11                ;395
000c76  f7fffffe          BL       __aeabi_fmul
000c7a  f7fffffe          BL       __aeabi_f2iz
000c7e  4601              MOV      r1,r0                 ;395
000c80  4633              MOV      r3,r6                 ;395
000c82  462a              MOV      r2,r5                 ;395
000c84  a066              ADR      r0,|L1.3616|
000c86  9700              STR      r7,[sp,#0]            ;395
000c88  f7fffffe          BL       Msg
000c8c  6965              LDR      r5,[r4,#0x14]         ;396  ; pZ1
000c8e  4649              MOV      r1,r9                 ;396
000c90  6828              LDR      r0,[r5,#0]            ;396
000c92  e7b1              B        |L1.3064|
;;;402    
                          ENDP

                  XYZToXYZImp PROC
;;;403    void XYZToXYZImp(float X,float Y,float Z,s32 * Xi,s32 * Yi,s32 * Zi){
000c94  e92d47f0          PUSH     {r4-r10,lr}
000c98  4604              MOV      r4,r0
;;;404    	*Xi = *dXPos + (X * (*pX_SPR))/(*pX_PG_MM);
000c9a  4868              LDR      r0,|L1.3644|
000c9c  e9dd5808          LDRD     r5,r8,[sp,#0x20]      ;403
000ca0  6800              LDR      r0,[r0,#0]  ; pX_SPR
000ca2  461e              MOV      r6,r3                 ;403
000ca4  4691              MOV      r9,r2                 ;403
000ca6  460f              MOV      r7,r1                 ;403
000ca8  6800              LDR      r0,[r0,#0]
000caa  f7fffffe          BL       __aeabi_ui2f
000cae  4621              MOV      r1,r4
000cb0  f7fffffe          BL       __aeabi_fmul
000cb4  4962              LDR      r1,|L1.3648|
000cb6  6809              LDR      r1,[r1,#0]  ; pX_PG_MM
000cb8  6809              LDR      r1,[r1,#0]
000cba  f7fffffe          BL       __aeabi_fdiv
000cbe  4604              MOV      r4,r0
000cc0  4860              LDR      r0,|L1.3652|
000cc2  6800              LDR      r0,[r0,#0]  ; dXPos
000cc4  6800              LDR      r0,[r0,#0]
000cc6  f7fffffe          BL       __aeabi_i2f
000cca  4621              MOV      r1,r4
000ccc  f7fffffe          BL       __aeabi_fadd
000cd0  f7fffffe          BL       __aeabi_f2iz
;;;405    	*Yi = *dYPos + (Y * (*pY_SPR))/(*pY_PG_MM);
000cd4  6030              STR      r0,[r6,#0]
000cd6  485c              LDR      r0,|L1.3656|
000cd8  6800              LDR      r0,[r0,#0]  ; pY_SPR
000cda  6800              LDR      r0,[r0,#0]
000cdc  f7fffffe          BL       __aeabi_ui2f
000ce0  4639              MOV      r1,r7
000ce2  f7fffffe          BL       __aeabi_fmul
000ce6  4959              LDR      r1,|L1.3660|
000ce8  6809              LDR      r1,[r1,#0]  ; pY_PG_MM
000cea  6809              LDR      r1,[r1,#0]
000cec  f7fffffe          BL       __aeabi_fdiv
000cf0  4604              MOV      r4,r0
000cf2  4857              LDR      r0,|L1.3664|
000cf4  6800              LDR      r0,[r0,#0]  ; dYPos
000cf6  6800              LDR      r0,[r0,#0]
000cf8  f7fffffe          BL       __aeabi_i2f
000cfc  4621              MOV      r1,r4
000cfe  f7fffffe          BL       __aeabi_fadd
000d02  f7fffffe          BL       __aeabi_f2iz
;;;406    // Эта формула правильна если MIN_POS >=0	
;;;407    //	*Zi = Z_MIN_POS + (Z * (*pZ_SPR))/(*pZ_PG_MM);
;;;408    // Эта формула если MIN_POS < 0 
;;;409    	*Zi = *dZPos + (Z * (*pZ_SPR))/(*pZ_PG_MM);
000d06  6028              STR      r0,[r5,#0]
000d08  4852              LDR      r0,|L1.3668|
000d0a  6800              LDR      r0,[r0,#0]  ; pZ_SPR
000d0c  6800              LDR      r0,[r0,#0]
000d0e  f7fffffe          BL       __aeabi_ui2f
000d12  4649              MOV      r1,r9
000d14  f7fffffe          BL       __aeabi_fmul
000d18  494f              LDR      r1,|L1.3672|
000d1a  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
000d1c  6809              LDR      r1,[r1,#0]
000d1e  f7fffffe          BL       __aeabi_fdiv
000d22  4604              MOV      r4,r0
000d24  484d              LDR      r0,|L1.3676|
000d26  6800              LDR      r0,[r0,#0]  ; dZPos
000d28  6800              LDR      r0,[r0,#0]
000d2a  f7fffffe          BL       __aeabi_i2f
000d2e  4621              MOV      r1,r4
000d30  f7fffffe          BL       __aeabi_fadd
000d34  f7fffffe          BL       __aeabi_f2iz
000d38  f8c80000          STR      r0,[r8,#0]
                  |L1.3388|
;;;410    // компенсация по Z
;;;411    //	*Zi = *dZPos + ( ZComp(X,Y,Z)) * (*pZ_SPR))/(*pZ_PG_MM);
;;;412    }
000d3c  e8bd87f0          POP      {r4-r10,pc}
;;;413    
                          ENDP

                  XYZToXYZImpZcomp PROC
;;;414    void XYZToXYZImpZcomp(float X,float Y,float Z,s32 * Xi,s32 * Yi,s32 * Zi){
000d40  e92d47f0          PUSH     {r4-r10,lr}
000d44  4680              MOV      r8,r0
;;;415    	*Xi = *dXPos + (X * (*pX_SPR))/(*pX_PG_MM);
000d46  483d              LDR      r0,|L1.3644|
000d48  e9dd6408          LDRD     r6,r4,[sp,#0x20]      ;414
000d4c  6800              LDR      r0,[r0,#0]  ; pX_SPR
000d4e  461d              MOV      r5,r3                 ;414
000d50  4691              MOV      r9,r2                 ;414
000d52  468a              MOV      r10,r1                ;414
000d54  6800              LDR      r0,[r0,#0]
000d56  f7fffffe          BL       __aeabi_ui2f
000d5a  4641              MOV      r1,r8
000d5c  f7fffffe          BL       __aeabi_fmul
000d60  4937              LDR      r1,|L1.3648|
000d62  6809              LDR      r1,[r1,#0]  ; pX_PG_MM
000d64  6809              LDR      r1,[r1,#0]
000d66  f7fffffe          BL       __aeabi_fdiv
000d6a  4607              MOV      r7,r0
000d6c  4835              LDR      r0,|L1.3652|
000d6e  6800              LDR      r0,[r0,#0]  ; dXPos
000d70  6800              LDR      r0,[r0,#0]
000d72  f7fffffe          BL       __aeabi_i2f
000d76  4639              MOV      r1,r7
000d78  e072              B        |L1.3680|
000d7a  0000              DCW      0x0000
                  |L1.3452|
                          DCD      ||.data||
                  |L1.3456|
                          DCD      mc_Z
                  |L1.3460|
000d84  53746172          DCB      "StartMoveZLowSpeed Index %d\r\n",0
000d88  744d6f76
000d8c  655a4c6f
000d90  77537065
000d94  65642049
000d98  6e646578
000d9c  2025640d
000da0  0a00    
000da2  00                DCB      0
000da3  00                DCB      0
                  |L1.3492|
                          DCD      ms_Z
                  |L1.3496|
000da8  41646450          DCB      "AddPoint ",0
000dac  6f696e74
000db0  2000    
000db2  00                DCB      0
000db3  00                DCB      0
                  |L1.3508|
                          DCD      ms_Y
                  |L1.3512|
                          DCD      ms_X
                  |L1.3516|
000dbc  78702025          DCB      "xp %d yp %d zp %d\r\n",0
000dc0  64207970
000dc4  20256420
000dc8  7a702025
000dcc  640d0a00
                  |L1.3536|
                          DCD      ||ti||
                  |L1.3540|
                          DCD      0x447a0000
                  |L1.3544|
000dd8  41502025          DCB      "AP %d %d %d %d\r\n",0
000ddc  64202564
000de0  20256420
000de4  25640d0a
000de8  00      
000de9  00                DCB      0
000dea  00                DCB      0
000deb  00                DCB      0
                  |L1.3564|
000dec  4854436f          DCB      "HTCorr ",0
000df0  72722000
                  |L1.3572|
000df4  70747820          DCB      "ptx %d pty %d\r\n",0
000df8  25642070
000dfc  74792025
000e00  640d0a00
                  |L1.3588|
000e04  707a6320          DCB      "pzc %d ptz %d dz %d\r\n",0
000e08  25642070
000e0c  747a2025
000e10  6420647a
000e14  2025640d
000e18  0a00    
000e1a  00                DCB      0
000e1b  00                DCB      0
                  |L1.3612|
                          DCD      pHTCorr
                  |L1.3616|
000e20  70747a20          DCB      "ptz %d Hd %d dz %d pZ1 %d\r\n",0
000e24  25642048
000e28  64202564
000e2c  20647a20
000e30  25642070
000e34  5a312025
000e38  640d0a00
                  |L1.3644|
                          DCD      pX_SPR
                  |L1.3648|
                          DCD      pX_PG_MM
                  |L1.3652|
                          DCD      dXPos
                  |L1.3656|
                          DCD      pY_SPR
                  |L1.3660|
                          DCD      pY_PG_MM
                  |L1.3664|
                          DCD      dYPos
                  |L1.3668|
                          DCD      pZ_SPR
                  |L1.3672|
                          DCD      pZ_PG_MM
                  |L1.3676|
                          DCD      dZPos
                  |L1.3680|
000e60  f7fffffe          BL       __aeabi_fadd
000e64  f7fffffe          BL       __aeabi_f2iz
;;;416    	*Yi = *dYPos + (Y * (*pY_SPR))/(*pY_PG_MM);
000e68  6028              STR      r0,[r5,#0]
000e6a  48fd              LDR      r0,|L1.4704|
000e6c  6800              LDR      r0,[r0,#0]  ; pY_SPR
000e6e  6800              LDR      r0,[r0,#0]
000e70  f7fffffe          BL       __aeabi_ui2f
000e74  4651              MOV      r1,r10
000e76  f7fffffe          BL       __aeabi_fmul
000e7a  49fa              LDR      r1,|L1.4708|
000e7c  6809              LDR      r1,[r1,#0]  ; pY_PG_MM
000e7e  6809              LDR      r1,[r1,#0]
000e80  f7fffffe          BL       __aeabi_fdiv
000e84  4607              MOV      r7,r0
000e86  48f8              LDR      r0,|L1.4712|
000e88  6800              LDR      r0,[r0,#0]  ; dYPos
000e8a  6800              LDR      r0,[r0,#0]
000e8c  f7fffffe          BL       __aeabi_i2f
000e90  4639              MOV      r1,r7
000e92  f7fffffe          BL       __aeabi_fadd
000e96  f7fffffe          BL       __aeabi_f2iz
;;;417    // Эта формула правильна если MIN_POS >=0	
;;;418    //	*Zi = Z_MIN_POS + (Z * (*pZ_SPR))/(*pZ_PG_MM);
;;;419    // Эта формула если MIN_POS < 0 
;;;420    //	*Zi = *dZPos + (Z * (*pZ_SPR))/(*pZ_PG_MM);
;;;421    // компенсация по Z
;;;422    	*Zi = *dZPos + (ZComp(X,Y,Z) * (*pZ_SPR))/(*pZ_PG_MM);
000e9a  6030              STR      r0,[r6,#0]
000e9c  48f3              LDR      r0,|L1.4716|
000e9e  6800              LDR      r0,[r0,#0]  ; pZ_SPR
000ea0  6800              LDR      r0,[r0,#0]
000ea2  f7fffffe          BL       __aeabi_ui2f
000ea6  4607              MOV      r7,r0
000ea8  464a              MOV      r2,r9
000eaa  4651              MOV      r1,r10
000eac  4640              MOV      r0,r8
000eae  f7fffffe          BL       ZComp
000eb2  4639              MOV      r1,r7
000eb4  f7fffffe          BL       __aeabi_fmul
000eb8  49ed              LDR      r1,|L1.4720|
000eba  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
000ebc  6809              LDR      r1,[r1,#0]
000ebe  f7fffffe          BL       __aeabi_fdiv
000ec2  4607              MOV      r7,r0
000ec4  48eb              LDR      r0,|L1.4724|
000ec6  6800              LDR      r0,[r0,#0]  ; dZPos
000ec8  6800              LDR      r0,[r0,#0]
000eca  f7fffffe          BL       __aeabi_i2f
000ece  4639              MOV      r1,r7
000ed0  f7fffffe          BL       __aeabi_fadd
000ed4  f7fffffe          BL       __aeabi_f2iz
;;;423    	if ((*Zi) > Z_MAX_POS) (*Zi) = Z_MAX_POS;
000ed8  49e7              LDR      r1,|L1.4728|
000eda  6020              STR      r0,[r4,#0]
000edc  6809              LDR      r1,[r1,#0]  ; vZ_MAX_POS
000ede  4288              CMP      r0,r1
000ee0  dc01              BGT      |L1.3814|
;;;424    	if ((*Zi) < 0) (*Zi) = 0;
000ee2  4601              MOV      r1,r0
000ee4  e000              B        |L1.3816|
                  |L1.3814|
000ee6  6021              STR      r1,[r4,#0]            ;423
                  |L1.3816|
000ee8  2000              MOVS     r0,#0                 ;423
000eea  2900              CMP      r1,#0
000eec  da00              BGE      |L1.3824|
000eee  6020              STR      r0,[r4,#0]
                  |L1.3824|
;;;425    	if ((*Xi) > X_MAX_POS) (*Zi) = X_MAX_POS;
000ef0  49e2              LDR      r1,|L1.4732|
000ef2  682a              LDR      r2,[r5,#0]
000ef4  6809              LDR      r1,[r1,#0]  ; vX_MAX_POS
000ef6  428a              CMP      r2,r1
000ef8  dd00              BLE      |L1.3836|
000efa  6021              STR      r1,[r4,#0]
                  |L1.3836|
;;;426    	if ((*Xi) < 0) (*Xi) = 0;
000efc  6829              LDR      r1,[r5,#0]
000efe  2900              CMP      r1,#0
000f00  da00              BGE      |L1.3844|
000f02  6028              STR      r0,[r5,#0]
                  |L1.3844|
;;;427    	if ((*Yi) > Y_MAX_POS) (*Zi) = Y_MAX_POS;
000f04  49de              LDR      r1,|L1.4736|
000f06  6832              LDR      r2,[r6,#0]
000f08  6809              LDR      r1,[r1,#0]  ; vY_MAX_POS
000f0a  428a              CMP      r2,r1
000f0c  dd00              BLE      |L1.3856|
000f0e  6021              STR      r1,[r4,#0]
                  |L1.3856|
;;;428    	if ((*Yi) < 0) (*Yi) = 0;
000f10  6831              LDR      r1,[r6,#0]
000f12  2900              CMP      r1,#0
000f14  da00              BGE      |L1.3864|
000f16  6030              STR      r0,[r6,#0]
                  |L1.3864|
;;;429    }
000f18  e710              B        |L1.3388|
;;;430    
                          ENDP

                  Brezenheim PROC
;;;446    
;;;447    void Brezenheim	(s32 * e1,s32 * e2,
000f1a  e92d4ff0          PUSH     {r4-r11,lr}
;;;448    				s32 *Xi,	s32 *Yi,	s32 *Zi,
;;;449    				s32 dXi,	s32 dYi,	s32 dZi,
;;;450    				s32 signX,	s32 signY,	s32 signZ,
;;;451    				u8 *stepX,	u8 *stepY,	u8 *stepZ)
;;;452    {
000f1e  ad0a              ADD      r5,sp,#0x28
;;;453    	s32 e12,e22;  
;;;454    	*stepX=0;	
000f20  f8ddb040          LDR      r11,[sp,#0x40]
000f24  e8950610          LDM      r5,{r4,r9,r10}        ;452
000f28  2500              MOVS     r5,#0
000f2a  f8dde048          LDR      lr,[sp,#0x48]
000f2e  f88b5000          STRB     r5,[r11,#0]
;;;455    	*stepY=0;	
000f32  9e11              LDR      r6,[sp,#0x44]
;;;456    	*stepZ=0;	
;;;457        e12 = *e1 * 2;
;;;458        e22 = *e2 * 2;
;;;459        if ((e12 > -dYi)&&(e22 > -dZi))  {
000f34  f1c90c00          RSB      r12,r9,#0
;;;460        	*e1 = *e1 - dYi;
;;;461        	*e2 = *e2 - dZi;
;;;462          *Xi += signX;
;;;463    			*stepX = 1;
000f38  2701              MOVS     r7,#1
000f3a  7035              STRB     r5,[r6,#0]            ;455
000f3c  f88e5000          STRB     r5,[lr,#0]            ;456
000f40  6805              LDR      r5,[r0,#0]            ;457
000f42  46a8              MOV      r8,r5                 ;457
000f44  006e              LSLS     r6,r5,#1              ;457
000f46  680d              LDR      r5,[r1,#0]            ;458
000f48  006d              LSLS     r5,r5,#1              ;458
000f4a  4566              CMP      r6,r12                ;459
000f4c  dd16              BLE      |L1.3964|
000f4e  f1ca0c00          RSB      r12,r10,#0            ;459
000f52  4565              CMP      r5,r12                ;459
000f54  dd12              BLE      |L1.3964|
000f56  eba80c09          SUB      r12,r8,r9             ;460
000f5a  f8c0c000          STR      r12,[r0,#0]           ;461
000f5e  f8d18000          LDR      r8,[r1,#0]            ;461
000f62  eba80c0a          SUB      r12,r8,r10            ;461
000f66  f8c1c000          STR      r12,[r1,#0]           ;462
000f6a  f8d28000          LDR      r8,[r2,#0]            ;462
000f6e  f8ddc034          LDR      r12,[sp,#0x34]        ;462
000f72  44c4              ADD      r12,r12,r8            ;462
000f74  f8c2c000          STR      r12,[r2,#0]
000f78  f88b7000          STRB     r7,[r11,#0]
                  |L1.3964|
;;;464        };
;;;465        if (e12 < dXi)  {
000f7c  42a6              CMP      r6,r4
000f7e  da08              BGE      |L1.3986|
;;;466          *e1 = *e1 + dXi;
000f80  6802              LDR      r2,[r0,#0]
000f82  4422              ADD      r2,r2,r4
;;;467          *Yi += signY;
000f84  6002              STR      r2,[r0,#0]
000f86  681a              LDR      r2,[r3,#0]
000f88  980e              LDR      r0,[sp,#0x38]
000f8a  4410              ADD      r0,r0,r2
;;;468    			*stepY = 1;
000f8c  6018              STR      r0,[r3,#0]
000f8e  9811              LDR      r0,[sp,#0x44]
000f90  7007              STRB     r7,[r0,#0]
                  |L1.3986|
;;;469        };
;;;470        if (e22 < dXi)  {
000f92  42a5              CMP      r5,r4
000f94  da0a              BGE      |L1.4012|
;;;471          *e2 = *e2 + dXi;
000f96  6808              LDR      r0,[r1,#0]
000f98  4420              ADD      r0,r0,r4
;;;472          *Zi += signZ;
000f9a  6008              STR      r0,[r1,#0]
000f9c  9809              LDR      r0,[sp,#0x24]
000f9e  6801              LDR      r1,[r0,#0]
000fa0  980f              LDR      r0,[sp,#0x3c]
000fa2  4401              ADD      r1,r1,r0
000fa4  9809              LDR      r0,[sp,#0x24]
;;;473    			*stepZ = 1;
000fa6  6001              STR      r1,[r0,#0]
000fa8  f88e7000          STRB     r7,[lr,#0]
                  |L1.4012|
;;;474        };
;;;475    //	Msg("e1 %d e2 %d\r\n", *e1,*e2);
;;;476    //	Msg("e12 %d e22 %d\r\n", e12,e22);
;;;477    //	Msg("Xi	%d Yi %d Zi %d\r\n",*Xi,*Yi,*Zi);
;;;478    //	Msg("dXi %d dYi %d dZi %d\r\n",dXi,dYi,dZi);
;;;479    //	Msg("signX %d signY %d signZ %d\r\n",signX,signY,signZ);
;;;480    //	Msg("stepX %d stepY %d stepZ %d\r\n",*stepX,*stepY,*stepZ);
;;;481    }
000fac  e8bd8ff0          POP      {r4-r11,pc}
;;;482    
                          ENDP

                  DecItCount PROC
;;;504    
;;;505    int DecItCount(float Vc){
000fb0  b570              PUSH     {r4-r6,lr}
;;;506    	itc = 1;
000fb2  4cb4              LDR      r4,|L1.4740|
000fb4  2101              MOVS     r1,#1
;;;507    	Vct = Vc;
;;;508    	con = *(fmvc.Vaccel)*(*eb).Tb/K1;
000fb6  66a1              STR      r1,[r4,#0x68]  ; itc
000fb8  65e0              STR      r0,[r4,#0x5c]  ; Vct
000fba  48b3              LDR      r0,|L1.4744|
000fbc  6800              LDR      r0,[r0,#0]  ; eb
000fbe  f8d000b0          LDR      r0,[r0,#0xb0]
000fc2  f7fffffe          BL       __aeabi_ui2f
000fc6  4db1              LDR      r5,|L1.4748|
000fc8  68e9              LDR      r1,[r5,#0xc]  ; fmvc
000fca  6809              LDR      r1,[r1,#0]
000fcc  f7fffffe          BL       __aeabi_fmul
000fd0  49af              LDR      r1,|L1.4752|
000fd2  f7fffffe          BL       __aeabi_fdiv
;;;509    	while (Vct > *(fmvc.Vmin)){
000fd6  6620              STR      r0,[r4,#0x60]  ; con
000fd8  e00b              B        |L1.4082|
                  |L1.4058|
;;;510    		Vct = Vct - con/Vct;
000fda  6de1              LDR      r1,[r4,#0x5c]  ; Vct
000fdc  6e20              LDR      r0,[r4,#0x60]  ; con
000fde  460e              MOV      r6,r1
000fe0  f7fffffe          BL       __aeabi_fdiv
000fe4  4631              MOV      r1,r6
000fe6  f7fffffe          BL       __aeabi_frsub
;;;511    		itc++;
000fea  65e0              STR      r0,[r4,#0x5c]  ; Vct
000fec  6ea0              LDR      r0,[r4,#0x68]  ; itc
000fee  1c40              ADDS     r0,r0,#1
000ff0  66a0              STR      r0,[r4,#0x68]  ; itc
                  |L1.4082|
000ff2  68a8              LDR      r0,[r5,#8]            ;509  ; fmvc
000ff4  6801              LDR      r1,[r0,#0]            ;509
000ff6  6de0              LDR      r0,[r4,#0x5c]         ;509  ; Vct
000ff8  f7fffffe          BL       __aeabi_cfrcmple
000ffc  d3ed              BCC      |L1.4058|
;;;512    	}	
;;;513    	return itc;
000ffe  6ea0              LDR      r0,[r4,#0x68]  ; itc
;;;514    }
001000  e451              B        |L1.2214|
;;;515    
                          ENDP

                  FMove_HandlerQuick PROC
;;;516    u8 f=1;
;;;517    void	FMove_HandlerQuick(void){
001002  e92d4ff0          PUSH     {r4-r11,lr}
;;;518    // 	u8 stepX,stepY,stepZ,ChDir;
;;;519    //	float Vct,Vc2,con;
;;;520    //	int itc;
;;;521    	s32 ex,ey,ez;
;;;522    	//float St; // путь торможения
;;;523    	float	dV,dVmax; // приращение скорости, максимальное приращение скорости
;;;524    	u32		T;
;;;525    	if (fmvs.Level==0)  {
001006  f8df8284          LDR      r8,|L1.4748|
;;;526    		if (fmvc.Enable==0)  { 
;;;527    			// движение запрещено мониторинг
;;;528    			if (ClrF) {
;;;529    				ClrF = 0;
;;;530    				// принудительный сброс сигналов step
;;;531    				Q1ClrPin(MOTOR_X_STEP);	QClrPin(MOTOR_Yl_STEP);	QClrPin(MOTOR_Yr_STEP);	QClrPin(MOTOR_Z_STEP);
;;;532    				//Msg("B0\r\n");
;;;533    			}	
;;;534    			Busy = 0;
;;;535    			cm=0; cc=0; cd = 0;
;;;536    			Tacc = 0; Tdec = 0; 
;;;537    			Sti = 0;
;;;538    #ifdef 	MOVE_D
;;;539    			if (f) {Msg("Sti0\r\n");f=0;}
;;;540    #endif
;;;541    //			TCS_SetInterval(tcs_FMove,2500000);		
;;;542    			TCS_SetInterval(tcs_FMove,2500000);		
;;;543    		} else 	{
;;;544    			f=1;
;;;545    			// движение разрешено
;;;546    			// проверяем наличие исполняемого болка
;;;547    			if (eb==NULL) {
;;;548    				// ждем пока не Null
;;;549    				Msg("eb=Null\r\n");
;;;550    				fmvc.Enable = 0;// Busy = 0;
;;;551    //				Msg("E1\r\n");
;;;552    				TCS_SetInterval(tcs_FMove,2500000);
;;;553    			} else 	{ //(eb==NULL) {
;;;554    				// здесь блок есть и его можно попытаться выполнить
;;;555    				if ((*eb).Nomove) {	
;;;556    					// к сожалению блок не выпоним тк приращения по всем координатам равны 0 
;;;557    					// и нужен следующий блок
;;;558    					Msg("Nomove\r\n");
;;;559    					*pRCS = rcsEndExecute; 	
;;;560    					fmvc.Enable = 0;//	Busy = 0;
;;;561    //					Msg("E2\r\n");
;;;562    					TCS_SetInterval(tcs_FMove,25000);
;;;563    				} else { //((*eb).Nomove) {	
;;;564    					ClrF = 0; dV = 0; dVmax = 0;
;;;565    					// проверка отктонения Xi ms_X.Pos ...
;;;566    					ex=(*eb).Xi-(*ms_X.Pos);
;;;567    					ey=(*eb).Yi-(*ms_Y.Pos);
;;;568    					ez=(*eb).Zi-(*ms_Z.Pos);
;;;569    					//ex=1;
;;;570    					if (ex || ey || ez) { 
;;;571    							Msg("e %d %d %d\r\n",ex,ey,ez);
;;;572    							//Msg("Zsi %d Zdi %d\r\n",(*eb).Zsi,(*eb).Zdi);
;;;573    					}
;;;574    					// здесь блок достоверно можно выполнить. хотя бы одно приращение не =0
;;;575    					// установка необходимых направлений
;;;576    					*(ms_X.Dir) = (*eb).signX;	
;;;577    					if (*(ms_X.Dir) == 1) QSetPin(MOTOR_X_DIR);	else QClrPin(MOTOR_X_DIR);
;;;578    					*(ms_Y.Dir) = (*eb).signY;
;;;579    					if (*(ms_Y.Dir) == 1) {	QSetPin(MOTOR_Yl_DIR); QSetPin(MOTOR_Yr_DIR);	} 
;;;580    					else {QClrPin(MOTOR_Yl_DIR);QClrPin(MOTOR_Yr_DIR);}
;;;581    					*(ms_Z.Dir) = (*eb).signZ;
;;;582    					if (*(ms_Z.Dir) == 1) QSetPin(MOTOR_Z_DIR); else QClrPin(MOTOR_Z_DIR);
;;;583    					// Это Брезенхейм
;;;584    					switch ((*eb).Lax) {
;;;585           			case 0:	// XYZ
;;;586    							Brezenheim(	&(*eb).e1,&(*eb).e2,
;;;587    										&(*eb).Xi,&(*eb).Yi,&(*eb).Zi,
;;;588    										(*eb).dXi,(*eb).dYi,(*eb).dZi,
;;;589    								   	(*eb).signX,(*eb).signY,(*eb).signZ,
;;;590    										&stepX,&stepY,&stepZ
;;;591    									  );
;;;592    						break;
;;;593    						case 1:	// YXZ
;;;594    							Brezenheim(	&(*eb).e1,&(*eb).e2,
;;;595    										&(*eb).Yi,&(*eb).Xi,&(*eb).Zi,
;;;596    										(*eb).dYi,(*eb).dXi,(*eb).dZi,
;;;597    									   	(*eb).signY,(*eb).signX,(*eb).signZ,
;;;598    										&stepY,&stepX,&stepZ
;;;599    									  );
;;;600    						break;
;;;601             		case 2: // ZXY
;;;602    							Brezenheim(	&(*eb).e1,&(*eb).e2,
;;;603    										&(*eb).Zi,&(*eb).Xi,&(*eb).Yi,
;;;604    										(*eb).dZi,(*eb).dXi,(*eb).dYi,
;;;605    								   	(*eb).signZ,(*eb).signX,(*eb).signY,
;;;606    										&stepZ,&stepX,&stepY
;;;607    									  );
;;;608    						break;
;;;609    					}//switch
;;;610    					// выдача необходимых импульсов
;;;611    /*					
;;;612    					if (stepX) { *(ms_X.Pos) = (*eb).Xi; BR_ms_X_Pos = *(ms_X.Pos); QSetPin(MOTOR_X_STEP);}
;;;613    					if (stepY) { *(ms_Y.Pos) = (*eb).Yi; BR_ms_Y_Pos = *(ms_Y.Pos); QSetPin(MOTOR_Yl_STEP); QSetPin(MOTOR_Yr_STEP);}
;;;614    					if (stepZ) { *(ms_Z.Pos) = (*eb).Zi; BR_ms_Z_Pos = *(ms_Z.Pos); QSetPin(MOTOR_Z_STEP); }
;;;615    */				
;;;616    					if (stepX) { *(ms_X.Pos) = (*eb).Xi; BR_ms_X_Pos = *(ms_X.Pos);}
00100a  4fa2              LDR      r7,|L1.4756|
00100c  f108081c          ADD      r8,r8,#0x1c           ;525
001010  2601              MOVS     r6,#1                 ;544
001012  f8980008          LDRB     r0,[r8,#8]            ;525  ; fmvs
001016  f8df9274          LDR      r9,|L1.4748|
00101a  4c9a              LDR      r4,|L1.4740|
00101c  f8dfb268          LDR      r11,|L1.4744|
001020  b08b              SUB      sp,sp,#0x2c           ;517
001022  2500              MOVS     r5,#0                 ;528
001024  b3c0              CBZ      r0,|L1.4248|
;;;617    					if (stepY) { *(ms_Y.Pos) = (*eb).Yi; BR_ms_Y_Pos = *(ms_Y.Pos);}
;;;618    					if (stepZ) { *(ms_Z.Pos) = (*eb).Zi; BR_ms_Z_Pos = *(ms_Z.Pos);}
;;;619    					// выдачу импульсов заменяем на сброс в связи с изменившейся логикой 
;;;620    					Q1ClrPin(MOTOR_X_STEP);	QClrPin(MOTOR_Yl_STEP);	QClrPin(MOTOR_Yr_STEP);	QClrPin(MOTOR_Z_STEP);
;;;621    //					(*eb).dS = 	stepX*(*pX_PG_MM)/(*pX_SPR) +\
;;;622    //											stepY*(*pY_PG_MM)/(*pY_SPR)	+\
;;;623    //											stepZ*(*pZ_PG_MM)/(*pZ_SPR);
;;;624    #ifdef MOVE_D
;;;625    					// исходные данные
;;;626    //					Msg("Sr %d\t\t\tVc %d dS %d\r\n",\
;;;627    //					OUTF1T(Sr),OUTF1T(*(fmvs.Vc)),OUTF1T((*eb).dS));
;;;628    #endif
;;;629    					// расчет периода частоты
;;;630    					// расчет периода по предварительновычисленной величине Tb и текущей скорости
;;;631    		   		T = (int)((*eb).Tb*1.0/(*(fmvs.Vc)));
;;;632    					Vin = *(fmvs.Vc);
;;;633    					// новый расчет периода
;;;634    					// Vf = Fv(*(fmvs.Vc)); // частотная скорость из линейной
;;;635    					// Af = Fa(*(fmvc.Vaccel)); // частотное ускорение из линейного 
;;;636    					//T = (int)(1*(-Vf+ sqrt(sqr(Vf) + 2 * (Af))/(Af)));
;;;637    					//Vnew = sqrt(V*V+2*A); // ускорение
;;;638    					//Vnew = sqrt(V*V-2*A); // торможение
;;;639    					// ОТЛАДКА !!!
;;;640    	   			fmvs.LPOFF = CLPOFF(T,*(fmvc.LenOnPulse));
;;;641    		  		fmvs.Level = 1;
;;;642    					// расчет пути торможения от текущей скорости подачи
;;;643    					//*************************************
;;;644    					// вычисляем путь торможения по формуле sqrt(v)/2a
;;;645    					// умножение на 1.1 для уменьшения погрешности определения
;;;646    //					St = 1.0*(sqr(*(fmvs.Vc)))/(2* (*(fmvc.Vaccel)));
;;;647    //					// оцениваем примерное количесво итераций для итерационного алгоритма
;;;648    //					if ((St/(*eb).dS) < 90.0) {
;;;649    //						// тут можно применить итерационный алгоритм расчета пути торможения
;;;650    //						itc = 1; 
;;;651    //						con = (*(fmvc.Vaccel)*(*eb).Tb/K1);
;;;652    //						Vct = *(fmvs.Vc);
;;;653    //						while ((Vct > *(fmvc.Vmin))){	Vct = Vct - con/Vct;	itc++;}	
;;;654    //						St = (*eb).dS * itc;
;;;655    //					}
;;;656    					// если итерационный алгоритм применять нельзя то используем вычисленное значение
;;;657    					//***********************************
;;;658    					Sr = Sr - (*eb).dS; /// !!! уменьшить разведанный путь
;;;659    					if (Sr < 0) Sr = 0;
;;;660    					if (Sri) Sri--;
;;;661    					// сравнение с текущим разведанным путем Sr
;;;662    //					if ((St) < Sr) {
;;;663    //					if ((Sti+11) < Sri) {
;;;664    					if ((Sti) < Sri) {
;;;665    						// разгон и движение с постоянной скоростью
;;;666    						if (fmvc.Enable == 1) {
;;;667    							// признак корректной остановки
;;;668    							if (*(fmvs.Vc) > *(fmvc.Vmin)) {
;;;669    								*pCorrStop = 0 ;
;;;670    								BR_pCorrStop = 0;
;;;671    							} else { // (*(fmvs.Vc) <= *(fmvc.Vmin))
;;;672    								*pCorrStop = 1 ;
;;;673    								BR_pCorrStop = 1;
;;;674    							}
;;;675    							if (*(fmvs.Vc) < (fmvc.Vmax)) {
;;;676    								// вычисление скорости для следующей итерации при ускорении
;;;677    								// по ускорению и времени
;;;678    								dV = *(fmvc.Vaccel) * (T * 1.0 / K1); 
;;;679    								// ограничение приращения по скорости в 100 Гц
;;;680    								dVmax = 100*1.0*(*eb).Tb/K1; if (dV > dVmax) dV = dVmax;
;;;681    								*(fmvs.Vc) = *(fmvs.Vc) + dV;
;;;682    								Sti++;
;;;683    								Tacc+=T;
;;;684    								// новое ускорение
;;;685    								//Vf = sqrt(sqr(Vf)+2*Af); 
;;;686    								// *(fmvs.Vc) = Fc(Vf); // обратное получение линейной скорости из чатотной
;;;687    								cc++; if (cm < cc) cm=cc;
;;;688    								if (*(fmvs.Vc) > fmvc.Vmax) *(fmvs.Vc) = fmvc.Vmax; // ограничили сверху
;;;689    							} else {
;;;690    								// если скорость уменьшили в процессе движения
;;;691    								if (*(fmvs.Vc) > (fmvc.Vmax)) {
;;;692    									// вычисление скорости для следующей итерации при замедлении
;;;693    									// по текущей и минимальной скорости и количеству итераци для торможения
;;;694    									if (Sti>1) dV = (*(fmvs.Vc) - *(fmvc.Vmin))/(Sti-1); 
;;;695    									else dV = (*(fmvs.Vc) - *(fmvc.Vmin))/1; 
;;;696    									// ограничение приращения по скорости в 100 Гц
;;;697    									dVmax = 100*1.0*(*eb).Tb/K1; if (dV > dVmax) dV = dVmax;
;;;698    									
;;;699    									// торможение до максимальной скорости
;;;700    									*(fmvs.Vc) = *(fmvs.Vc) - dV; 
;;;701    									if (Sti) Sti--;
;;;702    									// новое торможение
;;;703    //									if (sqr(Vf) > 2*Af)
;;;704    //										Vf = sqrt(sqr(Vf)-2*Af); 
;;;705    //									else Vf = 0;
;;;706    								// *(fmvs.Vc) = Fc(Vf); // обратное получение линейной скорости из чатотной
;;;707    									Tdec+=T; cd++;
;;;708    									if (cc) cc--;
;;;709    									if (*(fmvs.Vc) < fmvc.Vmax) *(fmvs.Vc) = fmvc.Vmax; // ограничили снизу
;;;710    								}
;;;711    							} 
;;;712    						} else { //fmvc.Enable == 2
;;;713    							// только торможение
;;;714    							if (*(fmvs.Vc) > *(fmvc.Vmin)) {
;;;715    								// вычисление скорости для следующей итерации при замедлении
;;;716    								// по текущей и минимальной скорости и количеству итераци для торможения
;;;717    								if (Sti>1) dV = (*(fmvs.Vc) - *(fmvc.Vmin))/(Sti-1); 
;;;718    								else dV = (*(fmvs.Vc) - *(fmvc.Vmin))/1; 
;;;719    								// ограничение приращения по скорости в 100 Гц
;;;720    								dVmax = 100*1.0*(*eb).Tb/K1; if (dV > dVmax) dV = dVmax;
;;;721    								*(fmvs.Vc) = *(fmvs.Vc) - dV; 
;;;722    								if (Sti) Sti--;
;;;723    								// новое торможение
;;;724    //									if (sqr(Vf) > 2*Af)
;;;725    //										Vf = sqrt(sqr(Vf)-2*Af); 
;;;726    //									else Vf = 0;
;;;727    								// *(fmvs.Vc) = Fc(Vf); // обратное получение линейной скорости из чатотной
;;;728    								Tdec+=T; cd++;
;;;729    								if (cc)cc--; 
;;;730    								if (*(fmvs.Vc) < *(fmvc.Vmin)) *(fmvs.Vc) = *(fmvc.Vmin); // ограничили снизу
;;;731    							} else {
;;;732    								// корректная остановка
;;;733    								Msg("CorrStop G1\r\n");
;;;734    								*pCorrStop = 1;
;;;735    								BR_pCorrStop = *pCorrStop;
;;;736    								ClrF = 1;
;;;737    								fmvc.Enable = 0;	//Busy = 0;
;;;738    //								Msg("E3\r\n");
;;;739    								// поднять Z на максимум
;;;740    								*(mc_Z.ReqPos) = Z_MAX_POS;
;;;741    								*(mc_Z.MovePos) = 1;
;;;742    								// остановить шпиндель и выключить охлаждение
;;;743    								FIStop();		QClrPin(COOLER1); QClrPin(COOLER2); 
;;;744    							}
;;;745    						}
;;;746    					} else {
;;;747    						// торможение до минимально скорости
;;;748    						if (fmvc.Enable == 2) {
;;;749    							if (*(fmvs.Vc) <= *(fmvc.Vmin)){
;;;750    								Msg("CorrStop G1\r\n");
;;;751    								*pCorrStop = 1 ;
;;;752    								BR_pCorrStop = 1;
;;;753    								ClrF = 1;
;;;754    								fmvc.Enable = 0;//	Busy = 0;
;;;755    //								Msg("E4\r\n");
;;;756    							}
;;;757    						} 
;;;758    						if (*(fmvs.Vc) > *(fmvc.Vmin)) {
;;;759    							// вычисление скорости для следующей итерации при замедлении
;;;760    							// по текущей и минимальной скорости и количеству итераци для торможения
;;;761    							if (Sti>1) dV = (*(fmvs.Vc) - *(fmvc.Vmin))/(Sti-1); 
;;;762    							else dV = (*(fmvs.Vc) - *(fmvc.Vmin))/1; 
;;;763    							// ограничение приращения по скорости в 100 Гц
;;;764    							dVmax = 100*1.0*(*eb).Tb/K1; if (dV > dVmax) dV = dVmax;
;;;765    							*(fmvs.Vc) = *(fmvs.Vc) - dV; 
;;;766    							if (Sti) Sti--;
;;;767    							// новое торможение
;;;768    //									if (sqr(Vf) > 2*Af)
;;;769    //										Vf = sqrt(sqr(Vf)-2*Af); 
;;;770    //									else Vf = 0;
;;;771    								// *(fmvs.Vc) = Fc(Vf); // обратное получение линейной скорости из частотной
;;;772    							Tdec+=T; cd++;
;;;773    							if (cc)cc--;
;;;774    							if (*(fmvs.Vc) < *(fmvc.Vmin)) *(fmvs.Vc) = *(fmvc.Vmin); // ограничили снизу
;;;775    						} 
;;;776    					}
;;;777    					// работа со скоростью
;;;778    					fmvc.Vmax = *(fmvc.V)*(*(fmvc.Vmul)/100);
;;;779    #ifdef MOVE_D
;;;780    //					Msg("Sr %d St %d Vc %d dV %d T %d F %d\r\n",\
;;;781    //					OUTF1T(Sr),OUTF1T(St),OUTF1T(*(fmvs.Vc)),OUTF1T(dV),OUTF1(T*1.0/25),OUTF1T(1.0/(T*1.0/25000)));
;;;782    					Msg("dVm %d dV %d Vs %d T %d F %d Sri %d Sti %d Sr %d",\
;;;783    					OUTF1T(dVmax),OUTF1T(dV),OUTF1T(Vin),OUTF1(T*1.0/25),OUTF1T(1.0/(T*1.0/25000)),Sri,Sti,OUTF1T(Sr));
;;;784    					
;;;785    
;;;786    #endif
;;;787    					// уход на следующую итерацию
;;;788    					// запустить таймер на следующую итерацию
;;;789    					TCS_SetInterval(tcs_FMove,fmvs.LPOFF);
;;;790    				} //else ((*eb).Nomove) {	
;;;791    			} // else (eb==NULL) {
;;;792    		} //else (fmvc.Enable==0)  { 
;;;793    	} else { // Level != 0
;;;794    		// сброс всех импульсов
;;;795    /*		
;;;796    		QClrPin(MOTOR_X_STEP);
;;;797    		QClrPin(MOTOR_Yl_STEP);
;;;798    		QClrPin(MOTOR_Yr_STEP);
;;;799    		QClrPin(MOTOR_Z_STEP);
;;;800    */
;;;801    		// заменяем сброс импульсов на установку нужных
;;;802    		if (stepX) { Q1SetPin(MOTOR_X_STEP);}
001026  7920              LDRB     r0,[r4,#4]  ; stepX
001028  b110              CBZ      r0,|L1.4144|
00102a  2000              MOVS     r0,#0
00102c  f7fffffe          BL       Q1SetPin
                  |L1.4144|
;;;803    		if (stepY) { QSetPin(MOTOR_Yl_STEP); QSetPin(MOTOR_Yr_STEP);}
001030  7960              LDRB     r0,[r4,#5]  ; stepY
001032  b128              CBZ      r0,|L1.4160|
001034  2003              MOVS     r0,#3
001036  f7fffffe          BL       QSetPin
00103a  2006              MOVS     r0,#6
00103c  f7fffffe          BL       QSetPin
                  |L1.4160|
;;;804    		if (stepZ) { QSetPin(MOTOR_Z_STEP); }
001040  79a0              LDRB     r0,[r4,#6]  ; stepZ
001042  b110              CBZ      r0,|L1.4170|
001044  2009              MOVS     r0,#9
001046  f7fffffe          BL       QSetPin
                  |L1.4170|
;;;805    		fmvs.Level = 0;
00104a  f8885008          STRB     r5,[r8,#8]
;;;806    //		TCS_SetInterval(tcs_FMove,*(fmvc.LenOffPulse));
;;;807    		// условие окончания движения
;;;808    		if (((*eb).Xi==(*eb).Xdi)&&((*eb).Yi==(*eb).Ydi)&&((*eb).Zi==(*eb).Zdi)){
00104e  f8db0000          LDR      r0,[r11,#0]  ; eb
001052  46c2              MOV      r10,r8                ;805
001054  46d8              MOV      r8,r11
001056  6f02              LDR      r2,[r0,#0x70]
001058  6d81              LDR      r1,[r0,#0x58]
00105a  4291              CMP      r1,r2
                  |L1.4188|
00105c  d11b              BNE      |L1.4246|
00105e  6f42              LDR      r2,[r0,#0x74]
001060  6dc1              LDR      r1,[r0,#0x5c]
001062  4291              CMP      r1,r2
001064  d1fa              BNE      |L1.4188|
001066  6f82              LDR      r2,[r0,#0x78]
001068  6e01              LDR      r1,[r0,#0x60]
00106a  4291              CMP      r1,r2
00106c  d1f6              BNE      |L1.4188|
;;;809    			//Msg("Vout %d\r\n",OUTF(*(fmvs.Vc)));
;;;810    			if ((*eb).Nonstop) {
00106e  7a00              LDRB     r0,[r0,#8]
001070  2800              CMP      r0,#0
001072  d07d              BEQ      |L1.4464|
;;;811    				eb = NULL;
;;;812    				qbDelFirst();
001074  f8c85000          STR      r5,[r8,#0]  ; eb
001078  f7fffffe          BL       qbDelFirst
;;;813    				eb = qbFirstBlock();
00107c  f7fffffe          BL       qbFirstBlock
;;;814    				if (eb==NULL) {
001080  f8c80000          STR      r0,[r8,#0]  ; eb
001084  2800              CMP      r0,#0
001086  d074              BEQ      |L1.4466|
;;;815    					Msg("ebNull\r\n");
;;;816    					ClrF = 1;
;;;817    					fmvc.Enable = 0;//	Busy = 0;
;;;818    //					Msg("E5\r\n");
;;;819    					//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;820    				} else {
;;;821    					*pCurCadr = (*eb).NumLine;
001088  4983              LDR      r1,|L1.4760|
00108a  6800              LDR      r0,[r0,#0]
00108c  6809              LDR      r1,[r1,#0]  ; pCurCadr
;;;822    #ifdef MOVE_D					
;;;823    					Msg("RI%d:G%d Xd %d Yd %d Zd %d NS %d\r\n",(*eb).NumLine,(*eb).sGo,OUTF1T((*eb).Xd),OUTF1T((*eb).Yd),OUTF1T((*eb).Zd),(*eb).Nonstop);
;;;824    #endif		
;;;825    					//Msg("t%d: %s",(*eb).NumLine,(*eb).s);
;;;826    					//Msg("X %d %d Y %d %d Z %d %d\r\n",(*eb).Xsi,(*eb).Xdi,(*eb).Ysi,(*eb).Ydi,(*eb).Zsi,(*eb).Zdi);
;;;827    					//Msg("tb %d \r\n",(*eb).Tb);
;;;828    					memcpy((void*)&(BR_pCurCadr),(void*)pCurCadr,4);
00108e  6008              STR      r0,[r1,#0]
001090  4980              LDR      r1,|L1.4756|
001092  3154              ADDS     r1,r1,#0x54
001094  6008              STR      r0,[r1,#0]
                  |L1.4246|
001096  e34e              B        |L1.5942|
                  |L1.4248|
001098  e7ff              B        |L1.4250|
                  |L1.4250|
00109a  f8990018          LDRB     r0,[r9,#0x18]         ;526  ; fmvc
00109e  f8dfa1fc          LDR      r10,|L1.4764|
0010a2  b1a0              CBZ      r0,|L1.4302|
0010a4  2001              MOVS     r0,#1                 ;544
0010a6  70e0              STRB     r0,[r4,#3]            ;544
0010a8  f8db0000          LDR      r0,[r11,#0]           ;547  ; eb
0010ac  465e              MOV      r6,r11                ;547
0010ae  b340              CBZ      r0,|L1.4354|
0010b0  f89010a8          LDRB     r1,[r0,#0xa8]         ;555
0010b4  b381              CBZ      r1,|L1.4376|
0010b6  a07a              ADR      r0,|L1.4768|
0010b8  f7fffffe          BL       Msg
0010bc  497b              LDR      r1,|L1.4780|
0010be  2010              MOVS     r0,#0x10              ;559
0010c0  6809              LDR      r1,[r1,#0]            ;559  ; pRCS
0010c2  7008              STRB     r0,[r1,#0]            ;559
0010c4  f8895018          STRB     r5,[r9,#0x18]         ;560
0010c8  f24611a8          MOV      r1,#0x61a8            ;562
0010cc  e335              B        |L1.5946|
                  |L1.4302|
0010ce  78a0              LDRB     r0,[r4,#2]            ;528  ; ClrF
0010d0  b160              CBZ      r0,|L1.4332|
0010d2  70a5              STRB     r5,[r4,#2]            ;529
0010d4  2000              MOVS     r0,#0                 ;531
0010d6  f7fffffe          BL       Q1ClrPin
0010da  2003              MOVS     r0,#3                 ;531
0010dc  f7fffffe          BL       QClrPin
0010e0  2006              MOVS     r0,#6                 ;531
0010e2  f7fffffe          BL       QClrPin
0010e6  2009              MOVS     r0,#9                 ;531
0010e8  f7fffffe          BL       QClrPin
                  |L1.4332|
0010ec  4870              LDR      r0,|L1.4784|
0010ee  7005              STRB     r5,[r0,#0]            ;534
0010f0  66e5              STR      r5,[r4,#0x6c]         ;535  ; cm
0010f2  6725              STR      r5,[r4,#0x70]         ;535  ; cc
0010f4  4863              LDR      r0,|L1.4740|
0010f6  6765              STR      r5,[r4,#0x74]         ;536  ; cd
0010f8  67a5              STR      r5,[r4,#0x78]         ;536  ; Tacc
0010fa  3080              ADDS     r0,r0,#0x80           ;537
0010fc  67e5              STR      r5,[r4,#0x7c]         ;537  ; Tdec
0010fe  6005              STR      r5,[r0,#0]            ;542  ; Sti
001100  e004              B        |L1.4364|
                  |L1.4354|
001102  a06c              ADR      r0,|L1.4788|
001104  f7fffffe          BL       Msg
001108  f8895018          STRB     r5,[r9,#0x18]         ;550
                  |L1.4364|
00110c  495f              LDR      r1,|L1.4748|
00110e  391c              SUBS     r1,r1,#0x1c           ;542
001110  f8c1a004          STR      r10,[r1,#4]           ;542  ; tcs_FMove
                  |L1.4372|
;;;829    //					if ((*eb).Nonstop) {
;;;830    //						//TCS_SetInterval(tcs_FMove,fmvs.LPON); //???
;;;831    //					} else {
;;;832    //						(*pRCS)=rcsGetBlock;
;;;833    //						ClrF = 1;
;;;834    //						fmvc.Enable = 0;//						Busy = 0;
;;;835    ////						Msg("E6\r\n");
;;;836    //						//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;837    //					}
;;;838    					//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;839    #ifdef MOVE_D					
;;;840    //					Msg("NS %d En %d\r\n",(*eb).Nonstop,fmvc.Enable);
;;;841    #endif		
;;;842    				}
;;;843    				//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;844    			} else {
;;;845    				*pRCS = rcsEndExecute; 	
;;;846    				ClrF = 1;
;;;847    				fmvc.Enable = 0;//				Busy = 0;
;;;848    //				Msg("E7\r\n"); StartTimeTC(T1);
;;;849    				*pCorrStop = 1;
;;;850    				BR_pCorrStop = *pCorrStop;
;;;851    				//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;852    			}
;;;853    			//TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;854    		} else {
;;;855    			// двигаемся дальше
;;;856    			//TCS_SetInterval(tcs_FMove,fmvs.LPON); 
;;;857    		}
;;;858    		TCS_SetInterval(tcs_FMove,fmvs.LPON);
;;;859    	} // Level == 0
;;;860    }
001114  b00b              ADD      sp,sp,#0x2c
001116  e749              B        |L1.4012|
                  |L1.4376|
001118  e7ff              B        |L1.4378|
                  |L1.4378|
00111a  4969              LDR      r1,|L1.4800|
00111c  70a5              STRB     r5,[r4,#2]            ;564
00111e  6d82              LDR      r2,[r0,#0x58]         ;566
001120  6889              LDR      r1,[r1,#8]            ;566  ; ms_X
001122  46aa              MOV      r10,r5                ;564
001124  46a3              MOV      r11,r4                ;564
001126  6809              LDR      r1,[r1,#0]            ;566
001128  4c66              LDR      r4,|L1.4804|
00112a  1a51              SUBS     r1,r2,r1              ;566
00112c  6dc2              LDR      r2,[r0,#0x5c]         ;567
00112e  68a3              LDR      r3,[r4,#8]            ;567  ; ms_Y
001130  681b              LDR      r3,[r3,#0]            ;567
001132  1ad2              SUBS     r2,r2,r3              ;567
001134  6e03              LDR      r3,[r0,#0x60]         ;568
001136  4864              LDR      r0,|L1.4808|
001138  6880              LDR      r0,[r0,#8]            ;568  ; ms_Z
00113a  6800              LDR      r0,[r0,#0]            ;568
00113c  1a1b              SUBS     r3,r3,r0              ;568
00113e  ea410002          ORR      r0,r1,r2              ;570
001142  4318              ORRS     r0,r0,r3              ;570
001144  d002              BEQ      |L1.4428|
001146  a061              ADR      r0,|L1.4812|
001148  f7fffffe          BL       Msg
                  |L1.4428|
00114c  6830              LDR      r0,[r6,#0]            ;576  ; eb
00114e  f8901088          LDRB     r1,[r0,#0x88]         ;576
001152  485b              LDR      r0,|L1.4800|
001154  6842              LDR      r2,[r0,#4]            ;576  ; ms_X
001156  7011              STRB     r1,[r2,#0]            ;576
001158  6840              LDR      r0,[r0,#4]            ;577  ; ms_X
00115a  7800              LDRB     r0,[r0,#0]            ;577
00115c  2801              CMP      r0,#1                 ;577
00115e  f04f0001          MOV      r0,#1                 ;577
001162  d02f              BEQ      |L1.4548|
001164  f7fffffe          BL       QClrPin
                  |L1.4456|
001168  6830              LDR      r0,[r6,#0]            ;578  ; eb
00116a  f890008c          LDRB     r0,[r0,#0x8c]         ;578
00116e  e001              B        |L1.4468|
                  |L1.4464|
001170  e2d5              B        |L1.5918|
                  |L1.4466|
001172  e2cd              B        |L1.5904|
                  |L1.4468|
001174  6861              LDR      r1,[r4,#4]            ;578  ; ms_Y
001176  7008              STRB     r0,[r1,#0]            ;578
001178  6860              LDR      r0,[r4,#4]            ;579  ; ms_Y
00117a  7800              LDRB     r0,[r0,#0]            ;579
00117c  2801              CMP      r0,#1                 ;579
00117e  f04f0004          MOV      r0,#4                 ;580
001182  d022              BEQ      |L1.4554|
001184  f7fffffe          BL       QClrPin
001188  2007              MOVS     r0,#7                 ;580
00118a  f7fffffe          BL       QClrPin
                  |L1.4494|
00118e  6830              LDR      r0,[r6,#0]            ;581  ; eb
001190  f8901090          LDRB     r1,[r0,#0x90]         ;581
001194  484c              LDR      r0,|L1.4808|
001196  6842              LDR      r2,[r0,#4]            ;581  ; ms_Z
001198  7011              STRB     r1,[r2,#0]            ;581
00119a  6840              LDR      r0,[r0,#4]            ;582  ; ms_Z
00119c  7800              LDRB     r0,[r0,#0]            ;582
00119e  2801              CMP      r0,#1                 ;582
0011a0  f04f000a          MOV      r0,#0xa               ;582
0011a4  d017              BEQ      |L1.4566|
0011a6  f7fffffe          BL       QClrPin
                  |L1.4522|
0011aa  6830              LDR      r0,[r6,#0]            ;584  ; eb
0011ac  4b35              LDR      r3,|L1.4740|
0011ae  1d9b              ADDS     r3,r3,#6              ;586
0011b0  f890509c          LDRB     r5,[r0,#0x9c]         ;584
0011b4  1e59              SUBS     r1,r3,#1              ;586
0011b6  1e4a              SUBS     r2,r1,#1              ;586
0011b8  b185              CBZ      r5,|L1.4572|
0011ba  2d01              CMP      r5,#1                 ;584
0011bc  d023              BEQ      |L1.4614|
0011be  2d02              CMP      r5,#2                 ;584
0011c0  d13f              BNE      |L1.4674|
0011c2  e0cb              B        |L1.4956|
                  |L1.4548|
0011c4  f7fffffe          BL       QSetPin
0011c8  e7ce              B        |L1.4456|
                  |L1.4554|
0011ca  f7fffffe          BL       QSetPin
0011ce  2007              MOVS     r0,#7                 ;579
0011d0  f7fffffe          BL       QSetPin
0011d4  e7db              B        |L1.4494|
                  |L1.4566|
0011d6  f7fffffe          BL       QSetPin
0011da  e7e6              B        |L1.4522|
                  |L1.4572|
0011dc  f8d05090          LDR      r5,[r0,#0x90]         ;586
0011e0  9506              STR      r5,[sp,#0x18]         ;586
0011e2  9309              STR      r3,[sp,#0x24]         ;586
0011e4  e9cd2107          STRD     r2,r1,[sp,#0x1c]      ;586
0011e8  f1000580          ADD      r5,r0,#0x80           ;586
0011ec  f10d0808          ADD      r8,sp,#8              ;586
0011f0  cd2e              LDM      r5,{r1-r3,r5}         ;586
0011f2  e888002e          STM      r8,{r1-r3,r5}         ;586
0011f6  f1000160          ADD      r1,r0,#0x60           ;586
0011fa  6fc2              LDR      r2,[r0,#0x7c]         ;586
0011fc  1f0b              SUBS     r3,r1,#4              ;586
0011fe  e9cd1200          STRD     r1,r2,[sp,#0]         ;586
001202  1f1a              SUBS     r2,r3,#4              ;586
001204  e018              B        |L1.4664|
                  |L1.4614|
001206  f8d05090          LDR      r5,[r0,#0x90]         ;594
00120a  f10d081c          ADD      r8,sp,#0x1c           ;594
00120e  9506              STR      r5,[sp,#0x18]         ;594
001210  e888000e          STM      r8,{r1-r3}            ;594
001214  e9d02521          LDRD     r2,r5,[r0,#0x84]      ;594
001218  f10d0808          ADD      r8,sp,#8              ;594
00121c  6fc1              LDR      r1,[r0,#0x7c]         ;594
00121e  f8d0308c          LDR      r3,[r0,#0x8c]         ;594
001222  e888002e          STM      r8,{r1-r3,r5}         ;594
001226  f8d02080          LDR      r2,[r0,#0x80]         ;594
00122a  f1000160          ADD      r1,r0,#0x60           ;594
00122e  e9cd1200          STRD     r1,r2,[sp,#0]         ;594
001232  f1000358          ADD      r3,r0,#0x58           ;594
001236  1f0a              SUBS     r2,r1,#4              ;594
                  |L1.4664|
001238  f1000198          ADD      r1,r0,#0x98           ;586
00123c  3094              ADDS     r0,r0,#0x94           ;586
00123e  f7fffffe          BL       Brezenheim
                  |L1.4674|
001242  f89b1004          LDRB     r1,[r11,#4]           ;616  ; stepX
001246  b139              CBZ      r1,|L1.4696|
001248  6831              LDR      r1,[r6,#0]            ;616  ; eb
00124a  6d8a              LDR      r2,[r1,#0x58]         ;616
00124c  491c              LDR      r1,|L1.4800|
00124e  688b              LDR      r3,[r1,#8]            ;616  ; ms_X
001250  601a              STR      r2,[r3,#0]            ;616
001252  6889              LDR      r1,[r1,#8]            ;616  ; ms_X
001254  6809              LDR      r1,[r1,#0]            ;616
001256  6479              STR      r1,[r7,#0x44]         ;616
                  |L1.4696|
001258  f89b1005          LDRB     r1,[r11,#5]           ;617  ; stepY
00125c  b3f1              CBZ      r1,|L1.4828|
00125e  e03e              B        |L1.4830|
                  |L1.4704|
                          DCD      pY_SPR
                  |L1.4708|
                          DCD      pY_PG_MM
                  |L1.4712|
                          DCD      dYPos
                  |L1.4716|
                          DCD      pZ_SPR
                  |L1.4720|
                          DCD      pZ_PG_MM
                  |L1.4724|
                          DCD      dZPos
                  |L1.4728|
                          DCD      vZ_MAX_POS
                  |L1.4732|
                          DCD      vX_MAX_POS
                  |L1.4736|
                          DCD      vY_MAX_POS
                  |L1.4740|
                          DCD      ||.data||
                  |L1.4744|
                          DCD      ||eb||
                  |L1.4748|
                          DCD      ||.bss||+0x1c
                  |L1.4752|
                          DCD      0x4bbebc20
                  |L1.4756|
                          DCD      0x40024000
                  |L1.4760|
                          DCD      pCurCadr
                  |L1.4764|
                          DCD      0x002625a0
                  |L1.4768|
0012a0  4e6f6d6f          DCB      "Nomove\r\n",0
0012a4  76650d0a
0012a8  00      
0012a9  00                DCB      0
0012aa  00                DCB      0
0012ab  00                DCB      0
                  |L1.4780|
                          DCD      pRCS
                  |L1.4784|
                          DCD      Busy
                  |L1.4788|
0012b4  65623d4e          DCB      "eb=Null\r\n",0
0012b8  756c6c0d
0012bc  0a00    
0012be  00                DCB      0
0012bf  00                DCB      0
                  |L1.4800|
                          DCD      ms_X
                  |L1.4804|
                          DCD      ms_Y
                  |L1.4808|
                          DCD      ms_Z
                  |L1.4812|
0012cc  65202564          DCB      "e %d %d %d\r\n",0
0012d0  20256420
0012d4  25640d0a
0012d8  00      
0012d9  00                DCB      0
0012da  00                DCB      0
0012db  00                DCB      0
                  |L1.4828|
0012dc  e006              B        |L1.4844|
                  |L1.4830|
0012de  6831              LDR      r1,[r6,#0]            ;617  ; eb
0012e0  68a2              LDR      r2,[r4,#8]            ;617  ; ms_Y
0012e2  6dc9              LDR      r1,[r1,#0x5c]         ;617
0012e4  6011              STR      r1,[r2,#0]            ;617
0012e6  68a1              LDR      r1,[r4,#8]            ;617  ; ms_Y
0012e8  6809              LDR      r1,[r1,#0]            ;617
0012ea  64b9              STR      r1,[r7,#0x48]         ;617
                  |L1.4844|
0012ec  48f8              LDR      r0,|L1.5840|
0012ee  7980              LDRB     r0,[r0,#6]            ;618  ; stepZ
0012f0  b138              CBZ      r0,|L1.4866|
0012f2  6830              LDR      r0,[r6,#0]            ;618  ; eb
0012f4  6e01              LDR      r1,[r0,#0x60]         ;618
0012f6  48f7              LDR      r0,|L1.5844|
0012f8  6882              LDR      r2,[r0,#8]            ;618  ; ms_Z
0012fa  6011              STR      r1,[r2,#0]            ;618
0012fc  6880              LDR      r0,[r0,#8]            ;618  ; ms_Z
0012fe  6800              LDR      r0,[r0,#0]            ;618
001300  64f8              STR      r0,[r7,#0x4c]         ;618
                  |L1.4866|
001302  2000              MOVS     r0,#0                 ;620
001304  f7fffffe          BL       Q1ClrPin
001308  2003              MOVS     r0,#3                 ;620
00130a  f7fffffe          BL       QClrPin
00130e  2006              MOVS     r0,#6                 ;620
001310  f7fffffe          BL       QClrPin
001314  2009              MOVS     r0,#9                 ;620
001316  f7fffffe          BL       QClrPin
00131a  48ef              LDR      r0,|L1.5848|
00131c  68c5              LDR      r5,[r0,#0xc]          ;631  ; fmvs
00131e  682c              LDR      r4,[r5,#0]            ;631
001320  4620              MOV      r0,r4                 ;631
001322  f7fffffe          BL       __aeabi_f2d
001326  4680              MOV      r8,r0                 ;631
001328  48ec              LDR      r0,|L1.5852|
00132a  468b              MOV      r11,r1                ;631
00132c  6800              LDR      r0,[r0,#0]            ;631  ; eb
00132e  9000              STR      r0,[sp,#0]            ;631
001330  f8d000b0          LDR      r0,[r0,#0xb0]         ;631
001334  f7fffffe          BL       __aeabi_ui2d
001338  4642              MOV      r2,r8                 ;631
00133a  465b              MOV      r3,r11                ;631
00133c  f7fffffe          BL       __aeabi_ddiv
001340  f7fffffe          BL       __aeabi_d2iz
001344  4606              MOV      r6,r0                 ;631
001346  4620              MOV      r0,r4                 ;631
001348  4ce1              LDR      r4,|L1.5840|
00134a  6660              STR      r0,[r4,#0x64]         ;640  ; Vin
00134c  f8d90000          LDR      r0,[r9,#0]            ;640  ; fmvc
001350  6800              LDR      r0,[r0,#0]            ;640
001352  1c41              ADDS     r1,r0,#1              ;640
001354  42b1              CMP      r1,r6                 ;640
001356  d21a              BCS      |L1.5006|
001358  1a31              SUBS     r1,r6,r0              ;640
00135a  e019              B        |L1.5008|
                  |L1.4956|
00135c  f8d0508c          LDR      r5,[r0,#0x8c]         ;602
001360  e9cd2108          STRD     r2,r1,[sp,#0x20]      ;602
001364  e9cd5306          STRD     r5,r3,[sp,#0x18]      ;602
001368  e9d0121f          LDRD     r1,r2,[r0,#0x7c]      ;602
00136c  f10d0808          ADD      r8,sp,#8              ;602
001370  f8d05088          LDR      r5,[r0,#0x88]         ;602
001374  f8d03090          LDR      r3,[r0,#0x90]         ;602
001378  e888002e          STM      r8,{r1-r3,r5}         ;602
00137c  f100015c          ADD      r1,r0,#0x5c           ;602
001380  f8d02084          LDR      r2,[r0,#0x84]         ;602
001384  1f0b              SUBS     r3,r1,#4              ;602
001386  e9cd1200          STRD     r1,r2,[sp,#0]         ;602
00138a  1d0a              ADDS     r2,r1,#4              ;602
00138c  e754              B        |L1.4664|
                  |L1.5006|
00138e  2101              MOVS     r1,#1                 ;640
                  |L1.5008|
001390  f8df8344          LDR      r8,|L1.5848|
001394  f8dfb348          LDR      r11,|L1.5856|
001398  f8c81004          STR      r1,[r8,#4]            ;641  ; fmvs
00139c  2101              MOVS     r1,#1                 ;641
00139e  f8881008          STRB     r1,[r8,#8]            ;641
0013a2  9800              LDR      r0,[sp,#0]            ;658
0013a4  f8d010ac          LDR      r1,[r0,#0xac]         ;658
0013a8  f8db0000          LDR      r0,[r11,#0]           ;658  ; Sr
0013ac  f7fffffe          BL       __aeabi_fsub
0013b0  f8cb0000          STR      r0,[r11,#0]           ;658  ; Sr
0013b4  f8db0000          LDR      r0,[r11,#0]           ;659  ; Sr
0013b8  f1104fff          CMN      r0,#0x7f800000        ;659
0013bc  d301              BCC      |L1.5058|
0013be  f8cba000          STR      r10,[r11,#0]          ;659  ; Sr
                  |L1.5058|
0013c2  48c8              LDR      r0,|L1.5860|
0013c4  6801              LDR      r1,[r0,#0]            ;660  ; Sri
0013c6  b111              CBZ      r1,|L1.5070|
0013c8  6801              LDR      r1,[r0,#0]            ;660  ; Sri
0013ca  1e49              SUBS     r1,r1,#1              ;660
0013cc  6001              STR      r1,[r0,#0]            ;660  ; Sri
                  |L1.5070|
0013ce  f8dfb300          LDR      r11,|L1.5840|
0013d2  6800              LDR      r0,[r0,#0]            ;664  ; Sri
0013d4  f10b0b80          ADD      r11,r11,#0x80         ;664
0013d8  f8db1000          LDR      r1,[r11,#0]           ;664  ; Sti
0013dc  4281              CMP      r1,r0                 ;664
0013de  d27d              BCS      |L1.5340|
0013e0  f8991018          LDRB     r1,[r9,#0x18]         ;666  ; fmvc
0013e4  f8d90008          LDR      r0,[r9,#8]            ;714  ; fmvc
0013e8  2901              CMP      r1,#1                 ;666
0013ea  6801              LDR      r1,[r0,#0]            ;714
0013ec  6828              LDR      r0,[r5,#0]            ;666
0013ee  d01e              BEQ      |L1.5166|
0013f0  f7fffffe          BL       __aeabi_cfrcmple
0013f4  d373              BCC      |L1.5342|
0013f6  a0bc              ADR      r0,|L1.5864|
0013f8  f7fffffe          BL       Msg
0013fc  49be              LDR      r1,|L1.5880|
0013fe  2001              MOVS     r0,#1                 ;734
001400  6809              LDR      r1,[r1,#0]            ;734  ; pCorrStop
001402  7008              STRB     r0,[r1,#0]            ;734
001404  f8870070          STRB     r0,[r7,#0x70]         ;735
001408  49bc              LDR      r1,|L1.5884|
00140a  70a0              STRB     r0,[r4,#2]            ;736
00140c  f889a018          STRB     r10,[r9,#0x18]        ;737
001410  680a              LDR      r2,[r1,#0]            ;740  ; vZ_MAX_POS
001412  49bb              LDR      r1,|L1.5888|
001414  68cb              LDR      r3,[r1,#0xc]          ;740  ; mc_Z
001416  601a              STR      r2,[r3,#0]            ;741
001418  6a09              LDR      r1,[r1,#0x20]         ;741  ; mc_Z
00141a  7008              STRB     r0,[r1,#0]            ;741
00141c  f7fffffe          BL       FIStop
001420  200c              MOVS     r0,#0xc               ;743
001422  f7fffffe          BL       QClrPin
001426  200d              MOVS     r0,#0xd               ;743
001428  f7fffffe          BL       QClrPin
00142c  e11c              B        |L1.5736|
                  |L1.5166|
00142e  f7fffffe          BL       __aeabi_cfrcmple
001432  d201              BCS      |L1.5176|
001434  4650              MOV      r0,r10                ;669
001436  e000              B        |L1.5178|
                  |L1.5176|
001438  2001              MOVS     r0,#1                 ;672
                  |L1.5178|
00143a  49af              LDR      r1,|L1.5880|
00143c  6809              LDR      r1,[r1,#0]            ;672  ; pCorrStop
00143e  7008              STRB     r0,[r1,#0]            ;672
001440  f8870070          STRB     r0,[r7,#0x70]         ;673
001444  f8d8000c          LDR      r0,[r8,#0xc]          ;675  ; fmvs
001448  464d              MOV      r5,r9                 ;675
00144a  f8d91014          LDR      r1,[r9,#0x14]         ;675  ; fmvc
00144e  6800              LDR      r0,[r0,#0]            ;675
001450  f7fffffe          BL       __aeabi_cfcmple
001454  d251              BCS      |L1.5370|
001456  4630              MOV      r0,r6                 ;678
001458  f7fffffe          BL       __aeabi_ui2d
00145c  2200              MOVS     r2,#0                 ;678
00145e  4ba9              LDR      r3,|L1.5892|
001460  f7fffffe          BL       __aeabi_ddiv
001464  4607              MOV      r7,r0                 ;678
001466  68e8              LDR      r0,[r5,#0xc]          ;678  ; fmvc
001468  468a              MOV      r10,r1                ;678
00146a  46a9              MOV      r9,r5                 ;678
00146c  6800              LDR      r0,[r0,#0]            ;678
00146e  f7fffffe          BL       __aeabi_f2d
001472  463a              MOV      r2,r7                 ;678
001474  4653              MOV      r3,r10                ;678
001476  f7fffffe          BL       __aeabi_dmul
00147a  f7fffffe          BL       __aeabi_d2f
00147e  4605              MOV      r5,r0                 ;678
001480  4896              LDR      r0,|L1.5852|
001482  6800              LDR      r0,[r0,#0]            ;680  ; eb
001484  f8d000b0          LDR      r0,[r0,#0xb0]         ;680
001488  f7fffffe          BL       __aeabi_ui2d
00148c  2200              MOVS     r2,#0                 ;680
00148e  4b9e              LDR      r3,|L1.5896|
001490  f7fffffe          BL       __aeabi_dmul
001494  2200              MOVS     r2,#0                 ;680
001496  4b9b              LDR      r3,|L1.5892|
001498  f7fffffe          BL       __aeabi_ddiv
00149c  f7fffffe          BL       __aeabi_d2f
0014a0  4607              MOV      r7,r0                 ;680
0014a2  4601              MOV      r1,r0                 ;680
0014a4  4628              MOV      r0,r5                 ;680
0014a6  f7fffffe          BL       __aeabi_cfrcmple
0014aa  d200              BCS      |L1.5294|
0014ac  463d              MOV      r5,r7                 ;680
                  |L1.5294|
0014ae  f8d8700c          LDR      r7,[r8,#0xc]          ;681  ; fmvs
0014b2  4629              MOV      r1,r5                 ;681
0014b4  6838              LDR      r0,[r7,#0]            ;681
0014b6  f7fffffe          BL       __aeabi_fadd
0014ba  6038              STR      r0,[r7,#0]            ;682
0014bc  f8db1000          LDR      r1,[r11,#0]           ;682  ; Sti
0014c0  1c49              ADDS     r1,r1,#1              ;682
0014c2  f8cb1000          STR      r1,[r11,#0]           ;683  ; Sti
0014c6  6fa0              LDR      r0,[r4,#0x78]         ;683  ; Tacc
0014c8  4430              ADD      r0,r0,r6              ;683
0014ca  67a0              STR      r0,[r4,#0x78]         ;687  ; Tacc
0014cc  6f20              LDR      r0,[r4,#0x70]         ;687  ; cc
0014ce  1c40              ADDS     r0,r0,#1              ;687
0014d0  6720              STR      r0,[r4,#0x70]         ;687  ; cc
0014d2  6ee1              LDR      r1,[r4,#0x6c]         ;687  ; cm
0014d4  4281              CMP      r1,r0                 ;687
0014d6  da00              BGE      |L1.5338|
0014d8  66e0              STR      r0,[r4,#0x6c]         ;687  ; cm
                  |L1.5338|
0014da  e001              B        |L1.5344|
                  |L1.5340|
0014dc  e0d3              B        |L1.5766|
                  |L1.5342|
0014de  e0f2              B        |L1.5830|
                  |L1.5344|
0014e0  f8d8000c          LDR      r0,[r8,#0xc]          ;688  ; fmvs
0014e4  464d              MOV      r5,r9                 ;688
0014e6  4644              MOV      r4,r8                 ;688
0014e8  f8d91014          LDR      r1,[r9,#0x14]         ;688  ; fmvc
0014ec  6800              LDR      r0,[r0,#0]            ;688
0014ee  f7fffffe          BL       __aeabi_cfrcmple
0014f2  d271              BCS      |L1.5592|
0014f4  6968              LDR      r0,[r5,#0x14]         ;688  ; fmvc
0014f6  68e1              LDR      r1,[r4,#0xc]          ;688  ; fmvs
0014f8  e0b5              B        |L1.5734|
                  |L1.5370|
0014fa  f8d8000c          LDR      r0,[r8,#0xc]          ;691  ; fmvs
0014fe  46a9              MOV      r9,r5                 ;691
001500  6969              LDR      r1,[r5,#0x14]         ;691  ; fmvc
001502  6800              LDR      r0,[r0,#0]            ;691
001504  f7fffffe          BL       __aeabi_cfrcmple
001508  d266              BCS      |L1.5592|
00150a  f8db0000          LDR      r0,[r11,#0]           ;694  ; Sti
00150e  2801              CMP      r0,#1                 ;694
001510  d90f              BLS      |L1.5426|
001512  1e40              SUBS     r0,r0,#1              ;694
001514  f7fffffe          BL       __aeabi_ui2f
001518  4605              MOV      r5,r0                 ;694
00151a  f8d90008          LDR      r0,[r9,#8]            ;694  ; fmvc
00151e  6801              LDR      r1,[r0,#0]            ;694
001520  f8d8000c          LDR      r0,[r8,#0xc]          ;694  ; fmvs
001524  6800              LDR      r0,[r0,#0]            ;694
001526  f7fffffe          BL       __aeabi_fsub
00152a  4629              MOV      r1,r5                 ;694
00152c  f7fffffe          BL       __aeabi_fdiv
001530  e007              B        |L1.5442|
                  |L1.5426|
001532  f8d90008          LDR      r0,[r9,#8]            ;695  ; fmvc
001536  6801              LDR      r1,[r0,#0]            ;695
001538  f8d8000c          LDR      r0,[r8,#0xc]          ;695  ; fmvs
00153c  6800              LDR      r0,[r0,#0]            ;695
00153e  f7fffffe          BL       __aeabi_fsub
                  |L1.5442|
001542  4605              MOV      r5,r0                 ;695
001544  4865              LDR      r0,|L1.5852|
001546  6800              LDR      r0,[r0,#0]            ;697  ; eb
001548  f8d000b0          LDR      r0,[r0,#0xb0]         ;697
00154c  f7fffffe          BL       __aeabi_ui2d
001550  2200              MOVS     r2,#0                 ;697
001552  4b6d              LDR      r3,|L1.5896|
001554  f7fffffe          BL       __aeabi_dmul
001558  2200              MOVS     r2,#0                 ;697
00155a  4b6a              LDR      r3,|L1.5892|
00155c  f7fffffe          BL       __aeabi_ddiv
001560  f7fffffe          BL       __aeabi_d2f
001564  4607              MOV      r7,r0                 ;697
001566  4601              MOV      r1,r0                 ;697
001568  4628              MOV      r0,r5                 ;697
00156a  f7fffffe          BL       __aeabi_cfrcmple
00156e  d200              BCS      |L1.5490|
001570  463d              MOV      r5,r7                 ;697
                  |L1.5490|
001572  f8d8700c          LDR      r7,[r8,#0xc]          ;700  ; fmvs
001576  4629              MOV      r1,r5                 ;700
001578  6838              LDR      r0,[r7,#0]            ;700
00157a  f7fffffe          BL       __aeabi_fsub
00157e  6038              STR      r0,[r7,#0]            ;701
001580  f8db1000          LDR      r1,[r11,#0]           ;701  ; Sti
001584  b111              CBZ      r1,|L1.5516|
001586  1e49              SUBS     r1,r1,#1              ;701
001588  f8cb1000          STR      r1,[r11,#0]           ;701  ; Sti
                  |L1.5516|
00158c  6fe0              LDR      r0,[r4,#0x7c]         ;707  ; Tdec
00158e  4430              ADD      r0,r0,r6              ;707
001590  67e0              STR      r0,[r4,#0x7c]         ;707  ; Tdec
001592  6f60              LDR      r0,[r4,#0x74]         ;707  ; cd
001594  1c40              ADDS     r0,r0,#1              ;707
001596  6760              STR      r0,[r4,#0x74]         ;708  ; cd
001598  6f20              LDR      r0,[r4,#0x70]         ;708  ; cc
00159a  b108              CBZ      r0,|L1.5536|
00159c  1e40              SUBS     r0,r0,#1              ;708
00159e  6720              STR      r0,[r4,#0x70]         ;708  ; cc
                  |L1.5536|
0015a0  f8d8000c          LDR      r0,[r8,#0xc]          ;709  ; fmvs
0015a4  464c              MOV      r4,r9                 ;709
0015a6  4645              MOV      r5,r8                 ;709
0015a8  f8d91014          LDR      r1,[r9,#0x14]         ;709  ; fmvc
0015ac  6800              LDR      r0,[r0,#0]            ;709
0015ae  f7fffffe          BL       __aeabi_cfcmple
0015b2  d259              BCS      |L1.5736|
0015b4  6960              LDR      r0,[r4,#0x14]         ;709  ; fmvc
0015b6  e055              B        |L1.5732|
                  |L1.5560|
0015b8  1e40              SUBS     r0,r0,#1              ;709
0015ba  f7fffffe          BL       __aeabi_ui2f
0015be  4605              MOV      r5,r0                 ;717
0015c0  f8d90008          LDR      r0,[r9,#8]            ;717  ; fmvc
0015c4  6801              LDR      r1,[r0,#0]            ;717
0015c6  f8d8000c          LDR      r0,[r8,#0xc]          ;717  ; fmvs
0015ca  6800              LDR      r0,[r0,#0]            ;717
0015cc  f7fffffe          BL       __aeabi_fsub
0015d0  4629              MOV      r1,r5                 ;717
0015d2  f7fffffe          BL       __aeabi_fdiv
0015d6  e009              B        |L1.5612|
                  |L1.5592|
0015d8  e046              B        |L1.5736|
0015da  bf00              NOP                            ;718
                  |L1.5596|
0015dc  f8d90008          LDR      r0,[r9,#8]            ;718  ; fmvc
0015e0  6801              LDR      r1,[r0,#0]            ;718
0015e2  f8d8000c          LDR      r0,[r8,#0xc]          ;718  ; fmvs
0015e6  6800              LDR      r0,[r0,#0]            ;718
0015e8  f7fffffe          BL       __aeabi_fsub
                  |L1.5612|
0015ec  4605              MOV      r5,r0                 ;762
0015ee  483b              LDR      r0,|L1.5852|
0015f0  6800              LDR      r0,[r0,#0]            ;720  ; eb
0015f2  f8d000b0          LDR      r0,[r0,#0xb0]         ;720
0015f6  f7fffffe          BL       __aeabi_ui2d
0015fa  2200              MOVS     r2,#0                 ;720
0015fc  4b42              LDR      r3,|L1.5896|
0015fe  f7fffffe          BL       __aeabi_dmul
001602  2200              MOVS     r2,#0                 ;720
001604  4b3f              LDR      r3,|L1.5892|
001606  f7fffffe          BL       __aeabi_ddiv
00160a  f7fffffe          BL       __aeabi_d2f
00160e  4607              MOV      r7,r0                 ;720
001610  4601              MOV      r1,r0                 ;720
001612  4628              MOV      r0,r5                 ;720
001614  f7fffffe          BL       __aeabi_cfrcmple
001618  d200              BCS      |L1.5660|
00161a  463d              MOV      r5,r7                 ;720
                  |L1.5660|
00161c  f8d8700c          LDR      r7,[r8,#0xc]          ;765  ; fmvs
001620  4629              MOV      r1,r5                 ;765
001622  6838              LDR      r0,[r7,#0]            ;765
001624  f7fffffe          BL       __aeabi_fsub
001628  6038              STR      r0,[r7,#0]            ;766
00162a  f8db1000          LDR      r1,[r11,#0]           ;766  ; Sti
00162e  b111              CBZ      r1,|L1.5686|
001630  1e49              SUBS     r1,r1,#1              ;766
001632  f8cb1000          STR      r1,[r11,#0]           ;766  ; Sti
                  |L1.5686|
001636  6fe0              LDR      r0,[r4,#0x7c]         ;728  ; Tdec
001638  4430              ADD      r0,r0,r6              ;728
00163a  67e0              STR      r0,[r4,#0x7c]         ;728  ; Tdec
00163c  6f60              LDR      r0,[r4,#0x74]         ;728  ; cd
00163e  1c40              ADDS     r0,r0,#1              ;728
001640  6760              STR      r0,[r4,#0x74]         ;729  ; cd
001642  6f20              LDR      r0,[r4,#0x70]         ;729  ; cc
001644  b108              CBZ      r0,|L1.5706|
001646  1e40              SUBS     r0,r0,#1              ;729
001648  6720              STR      r0,[r4,#0x70]         ;729  ; cc
                  |L1.5706|
00164a  f8d90008          LDR      r0,[r9,#8]            ;774  ; fmvc
00164e  464c              MOV      r4,r9                 ;774
001650  4645              MOV      r5,r8                 ;774
001652  6801              LDR      r1,[r0,#0]            ;774
001654  f8d8000c          LDR      r0,[r8,#0xc]          ;774  ; fmvs
001658  6800              LDR      r0,[r0,#0]            ;774
00165a  f7fffffe          BL       __aeabi_cfcmple
00165e  d203              BCS      |L1.5736|
001660  68a0              LDR      r0,[r4,#8]            ;774  ; fmvc
001662  6800              LDR      r0,[r0,#0]            ;774
                  |L1.5732|
001664  68e9              LDR      r1,[r5,#0xc]          ;709  ; fmvs
                  |L1.5734|
001666  6008              STR      r0,[r1,#0]            ;774
                  |L1.5736|
001668  f8d90010          LDR      r0,[r9,#0x10]         ;778  ; fmvc
00166c  464c              MOV      r4,r9                 ;778
00166e  4927              LDR      r1,|L1.5900|
001670  6800              LDR      r0,[r0,#0]            ;778
001672  f7fffffe          BL       __aeabi_fdiv
001676  6861              LDR      r1,[r4,#4]            ;778  ; fmvc
001678  6809              LDR      r1,[r1,#0]            ;778
00167a  f7fffffe          BL       __aeabi_fmul
00167e  6160              STR      r0,[r4,#0x14]         ;789  ; fmvc
001680  f8d81004          LDR      r1,[r8,#4]            ;789  ; fmvs
001684  e059              B        |L1.5946|
                  |L1.5766|
001686  f8990018          LDRB     r0,[r9,#0x18]         ;748  ; fmvc
00168a  2802              CMP      r0,#2                 ;748
00168c  d112              BNE      |L1.5812|
00168e  f8d90008          LDR      r0,[r9,#8]            ;749  ; fmvc
001692  6801              LDR      r1,[r0,#0]            ;749
001694  6828              LDR      r0,[r5,#0]            ;749
001696  f7fffffe          BL       __aeabi_cfcmple
00169a  d80b              BHI      |L1.5812|
00169c  a012              ADR      r0,|L1.5864|
00169e  f7fffffe          BL       Msg
0016a2  4915              LDR      r1,|L1.5880|
0016a4  2001              MOVS     r0,#1                 ;751
0016a6  6809              LDR      r1,[r1,#0]            ;751  ; pCorrStop
0016a8  7008              STRB     r0,[r1,#0]            ;751
0016aa  f8870070          STRB     r0,[r7,#0x70]         ;752
0016ae  70a0              STRB     r0,[r4,#2]            ;753
0016b0  f889a018          STRB     r10,[r9,#0x18]        ;754
                  |L1.5812|
0016b4  f8d90008          LDR      r0,[r9,#8]            ;758  ; fmvc
0016b8  6801              LDR      r1,[r0,#0]            ;758
0016ba  f8d8000c          LDR      r0,[r8,#0xc]          ;758  ; fmvs
0016be  6800              LDR      r0,[r0,#0]            ;758
0016c0  f7fffffe          BL       __aeabi_cfrcmple
0016c4  d2d0              BCS      |L1.5736|
                  |L1.5830|
0016c6  f8db0000          LDR      r0,[r11,#0]           ;761  ; Sti
0016ca  2801              CMP      r0,#1                 ;761
0016cc  d986              BLS      |L1.5596|
0016ce  e773              B        |L1.5560|
                  |L1.5840|
                          DCD      ||.data||
                  |L1.5844|
                          DCD      ms_Z
                  |L1.5848|
                          DCD      ||.bss||+0x38
                  |L1.5852|
                          DCD      ||eb||
                  |L1.5856|
                          DCD      ||Sr||
                  |L1.5860|
                          DCD      ||Sri||
                  |L1.5864|
0016e8  436f7272          DCB      "CorrStop G1\r\n",0
0016ec  53746f70
0016f0  2047310d
0016f4  0a00    
0016f6  00                DCB      0
0016f7  00                DCB      0
                  |L1.5880|
                          DCD      pCorrStop
                  |L1.5884|
                          DCD      vZ_MAX_POS
                  |L1.5888|
                          DCD      mc_Z
                  |L1.5892|
                          DCD      0x4177d784
                  |L1.5896|
                          DCD      0x40590000
                  |L1.5900|
                          DCD      0x42c80000
                  |L1.5904|
001710  a00b              ADR      r0,|L1.5952|
001712  f7fffffe          BL       Msg
001716  70a6              STRB     r6,[r4,#2]            ;816
001718  f8895018          STRB     r5,[r9,#0x18]         ;817
00171c  e00b              B        |L1.5942|
                  |L1.5918|
00171e  490b              LDR      r1,|L1.5964|
001720  2010              MOVS     r0,#0x10              ;845
001722  6809              LDR      r1,[r1,#0]            ;845  ; pRCS
001724  7008              STRB     r0,[r1,#0]            ;845
001726  480a              LDR      r0,|L1.5968|
001728  70a6              STRB     r6,[r4,#2]            ;846
00172a  f8895018          STRB     r5,[r9,#0x18]         ;847
00172e  6800              LDR      r0,[r0,#0]            ;849  ; pCorrStop
001730  7006              STRB     r6,[r0,#0]            ;849
001732  f8876070          STRB     r6,[r7,#0x70]         ;850
                  |L1.5942|
001736  f8da1000          LDR      r1,[r10,#0]           ;858  ; fmvs
                  |L1.5946|
00173a  4806              LDR      r0,|L1.5972|
00173c  6041              STR      r1,[r0,#4]            ;858  ; tcs_FMove
00173e  e4e9              B        |L1.4372|
;;;861    /*
                          ENDP

                  |L1.5952|
001740  65624e75          DCB      "ebNull\r\n",0
001744  6c6c0d0a
001748  00      
001749  00                DCB      0
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
                          DCD      pRCS
                  |L1.5968|
                          DCD      pCorrStop
                  |L1.5972|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tcs_FMove
                          %        28
                  fmvc
                          %        28
                  fmvs
                          %        16

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  4c657665          DCB      "Level %d Dir %d Pos %d Lacc %d FrCur %d Tcur %d LPON %d"
000004  6c202564
000008  20446972
00000c  20256420
000010  506f7320
000014  2564204c
000018  61636320
00001c  25642046
000020  72437572
000024  20256420
000028  54637572
00002c  20256420
000030  4c504f4e
000034  202564  
000037  204c504f          DCB      " LPOFF %d Posit %d StagePos %d\r\n",0
00003b  46462025
00003f  6420506f
000043  73697420
000047  25642053
00004b  74616765
00004f  506f7320
000053  25640d0a
000057  00      

                          AREA ||.data||, DATA, ALIGN=3

                  fStartMoveZLowSpeed
000000  00                DCB      0x00
                  SendPointCount
000001  00                DCB      0x00
                  ClrF
000002  00                DCB      0x00
                  f
000003  01                DCB      0x01
                  stepX
000004  00                DCB      0x00
                  stepY
000005  00                DCB      0x00
                  stepZ
000006  0000              DCB      0x00,0x00
                  Index
                          DCD      0x00000001
                  pX1
                          DCD      0x00000000
                  pY1
                          DCD      0x00000000
                  pZ1
                          DCD      0x00000000
                  pX2
                          DCD      0x00000000
                  pY2
                          DCD      0x00000000
                  pZ2
                          DCD      0x00000000
                  pX3
                          DCD      0x00000000
                  pY3
                          DCD      0x00000000
                  pZ3
                          DCD      0x00000000
                  pfZcomp
                          DCD      0x00000000
                  ||pA||
                          DCD      0x00000000
                  ||pB||
                          DCD      0x00000000
                  ||pC||
                          DCD      0x00000000
                  ||pD||
                          DCD      0x00000000
                  ||dz||
                          DCD      0x00000000
                  SaveZPos
                          DCD      0x00000000
                  ||px||
                          DCD      0x00000000
                  ||py||
                          DCD      0x00000000
                  ||pz||
                          DCD      0x00000000
                  pHdat
                          DCD      0x00000000
                  Vct
                          DCD      0x00000000
                  ||con||
                          DCD      0x00000000
                  Vin
                          DCD      0x00000000
                  itc
                          DCD      0x00000000
                  ||cm||
                          DCD      0x00000000
                  ||cc||
                          DCD      0x00000000
                  ||cd||
                          DCD      0x00000000
                  Tacc
                          DCD      0x00000000
                  Tdec
                          DCD      0x00000000
                  ||Sti||
                          DCD      0x00000000
                          DCD      0x00000000
                  save_mc_Z_FrReq
                          %        8
                  save_mc_Z_FrMax
                          %        8

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  ||dS||
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  ||St1||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Main\\Motors.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Motors_c_ZComp____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_Motors_c_ZComp____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Motors_c_ZComp____REVSH|
#line 462
|__asm___8_Motors_c_ZComp____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_Motors_c_ZComp____RRX|
#line 649
|__asm___8_Motors_c_ZComp____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\timers.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\timers.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\Main -I.\Drivers -I.\Drivers\include -I.\UCNC -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\timers.crf UCNC\Timers.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Init_TCS PROC
;;;22     
;;;23     void Init_TCS(volatile TIMER_CONTROL_STRUCT* TCS,u8 t,u8 mr,TTimerHandler h){
000000  b510              PUSH     {r4,lr}
;;;24     	LPC_TIM_TypeDef       * pT;
;;;25     	TCS->handler = h;
000002  6103              STR      r3,[r0,#0x10]
000004  b189              CBZ      r1,|L1.42|
;;;26     	pT = 0;
;;;27     	switch (t) {	
000006  2901              CMP      r1,#1
000008  d012              BEQ      |L1.48|
00000a  2902              CMP      r1,#2
00000c  d012              BEQ      |L1.52|
00000e  2903              CMP      r1,#3
000010  d13a              BNE      |L1.136|
;;;28     		case 0:pT=LPC_TIM0; break;
;;;29     		case 1:pT=LPC_TIM1; break;		
;;;30     		case 2:pT=LPC_TIM2; break;
;;;31     		case 3:pT=LPC_TIM3; break;
000012  4bfb              LDR      r3,|L1.1024|
                  |L1.20|
;;;32     	}
;;;33     	if (!pT) return;
;;;34     	TCS->pTC=&(pT->TC);
000014  f1030408          ADD      r4,r3,#8
000018  60c4              STR      r4,[r0,#0xc]
;;;35      	switch (mr){
00001a  b16a              CBZ      r2,|L1.56|
00001c  2a01              CMP      r2,#1
00001e  d00d              BEQ      |L1.60|
000020  2a02              CMP      r2,#2
000022  d020              BEQ      |L1.102|
000024  2a03              CMP      r2,#3
000026  d10b              BNE      |L1.64|
000028  e01f              B        |L1.106|
                  |L1.42|
00002a  f04f2340          MOV      r3,#0x40004000        ;28
00002e  e7f1              B        |L1.20|
                  |L1.48|
000030  4bf4              LDR      r3,|L1.1028|
000032  e7ef              B        |L1.20|
                  |L1.52|
000034  4bf4              LDR      r3,|L1.1032|
000036  e7ed              B        |L1.20|
                  |L1.56|
000038  3318              ADDS     r3,r3,#0x18           ;30
;;;36     		case 0:	TCS->pMR=&(pT->MR0); break;
00003a  e000              B        |L1.62|
                  |L1.60|
00003c  331c              ADDS     r3,r3,#0x1c
                  |L1.62|
00003e  6083              STR      r3,[r0,#8]
                  |L1.64|
;;;37     		case 1: TCS->pMR=&(pT->MR1); break;
;;;38     		case 2:	TCS->pMR=&(pT->MR2); break;
;;;39     		case 3: TCS->pMR=&(pT->MR3); break;
;;;40     	}
;;;41     	switch (t*10+mr) {
000040  eb010181          ADD      r1,r1,r1,LSL #2
000044  eb020241          ADD      r2,r2,r1,LSL #1
;;;42     		case 00: T0MR0 = TCS; break;
000048  49f0              LDR      r1,|L1.1036|
00004a  2a14              CMP      r2,#0x14              ;41
00004c  d02b              BEQ      |L1.166|
00004e  dc0e              BGT      |L1.110|
000050  2a0e              CMP      r2,#0xe               ;41
000052  d219              BCS      |L1.136|
000054  e8dff002          TBB      [pc,r2]               ;41
000058  17191b1d          DCB      0x17,0x19,0x1b,0x1d
00005c  18181818          DCB      0x18,0x18,0x18,0x18
000060  18181f21          DCB      0x18,0x18,0x1f,0x21
000064  2325              DCB      0x23,0x25
                  |L1.102|
000066  3320              ADDS     r3,r3,#0x20           ;41
000068  e7e9              B        |L1.62|
                  |L1.106|
00006a  3324              ADDS     r3,r3,#0x24           ;38
00006c  e7e7              B        |L1.62|
                  |L1.110|
00006e  3a15              SUBS     r2,r2,#0x15           ;39
000070  2a0d              CMP      r2,#0xd               ;41
000072  d209              BCS      |L1.136|
000074  e8dff002          TBB      [pc,r2]               ;41
000078  191b1d08          DCB      0x19,0x1b,0x1d,0x08
00007c  08080808          DCB      0x08,0x08,0x08,0x08
000080  081f2123          DCB      0x08,0x1f,0x21,0x23
000084  2500              DCB      0x25,0x00
000086  6008              STR      r0,[r1,#0]  ; T0MR0
                  |L1.136|
;;;43     		case 01: T0MR1 = TCS; break;
;;;44     		case 02: T0MR2 = TCS; break;
;;;45     		case 03: T0MR3 = TCS; break;
;;;46     
;;;47     		case 10: T1MR0 = TCS; break;
;;;48     		case 11: T1MR1 = TCS; break;
;;;49     		case 12: T1MR2 = TCS; break;
;;;50     		case 13: T1MR3 = TCS; break;
;;;51     
;;;52     		case 20: T2MR0 = TCS; break;
;;;53     		case 21: T2MR1 = TCS; break;
;;;54     		case 22: T2MR2 = TCS; break;
;;;55     		case 23: T2MR3 = TCS; break;
;;;56     
;;;57     		case 30: T3MR0 = TCS; break;
;;;58     		case 31: T3MR1 = TCS; break;
;;;59     		case 32: T3MR2 = TCS; break;
;;;60     		case 33: T3MR3 = TCS; break;
;;;61     	}
;;;62     }
000088  bd10              POP      {r4,pc}
00008a  6048              STR      r0,[r1,#4]            ;43  ; T0MR1
00008c  bd10              POP      {r4,pc}
00008e  6088              STR      r0,[r1,#8]            ;44  ; T0MR2
000090  bd10              POP      {r4,pc}
000092  60c8              STR      r0,[r1,#0xc]          ;45  ; T0MR3
000094  bd10              POP      {r4,pc}
000096  6108              STR      r0,[r1,#0x10]         ;47  ; T1MR0
000098  bd10              POP      {r4,pc}
00009a  6148              STR      r0,[r1,#0x14]         ;48  ; T1MR1
00009c  bd10              POP      {r4,pc}
00009e  6188              STR      r0,[r1,#0x18]         ;49  ; T1MR2
0000a0  bd10              POP      {r4,pc}
0000a2  61c8              STR      r0,[r1,#0x1c]         ;50  ; T1MR3
0000a4  bd10              POP      {r4,pc}
                  |L1.166|
0000a6  6208              STR      r0,[r1,#0x20]         ;52  ; T2MR0
0000a8  bd10              POP      {r4,pc}
0000aa  6248              STR      r0,[r1,#0x24]         ;53  ; T2MR1
0000ac  bd10              POP      {r4,pc}
0000ae  6288              STR      r0,[r1,#0x28]         ;54  ; T2MR2
0000b0  bd10              POP      {r4,pc}
0000b2  62c8              STR      r0,[r1,#0x2c]         ;55  ; T2MR3
0000b4  bd10              POP      {r4,pc}
0000b6  6308              STR      r0,[r1,#0x30]         ;57  ; T3MR0
0000b8  bd10              POP      {r4,pc}
0000ba  6348              STR      r0,[r1,#0x34]         ;58  ; T3MR1
0000bc  bd10              POP      {r4,pc}
0000be  6388              STR      r0,[r1,#0x38]         ;59  ; T3MR2
0000c0  bd10              POP      {r4,pc}
0000c2  63c8              STR      r0,[r1,#0x3c]         ;60  ; T3MR3
0000c4  bd10              POP      {r4,pc}
;;;63     
                          ENDP

                  InitTimer PROC
;;;72     // таймер 1 Ќ≈Ћ№«я !!! инициализировать этой процедурой 
;;;73     void InitTimer(u8 num){
0000c6  e92d41f0          PUSH     {r4-r8,lr}
0000ca  b086              SUB      sp,sp,#0x18
0000cc  f1b00800          SUBS     r8,r0,#0
0000d0  d044              BEQ      |L1.348|
;;;74     	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;75     	TIM_MATCHCFG_Type TIM_MatchConfigStruct;
;;;76     	LPC_TIM_TypeDef       * pT;
;;;77     	IRQn_Type IRQn;
;;;78     	pT = 0;
;;;79     	// выбор ссылки на управл€ющую структуру и номер IRQ
;;;80     	switch (num) {	
0000d2  2801              CMP      r0,#1
0000d4  d046              BEQ      |L1.356|
0000d6  2802              CMP      r0,#2
0000d8  d047              BEQ      |L1.362|
0000da  f1b80f03          CMP      r8,#3
0000de  d13a              BNE      |L1.342|
;;;81     		case 0:pT=LPC_TIM0; IRQn=TIMER0_IRQn; break;
;;;82     		case 1:pT=LPC_TIM1; IRQn=TIMER1_IRQn; break;
;;;83     		case 2:pT=LPC_TIM2; IRQn=TIMER2_IRQn; break;
;;;84     		case 3:pT=LPC_TIM3; IRQn=TIMER3_IRQn; break;
0000e0  4cc7              LDR      r4,|L1.1024|
0000e2  2504              MOVS     r5,#4
                  |L1.228|
;;;85     	}
;;;86     	if (pT==0) return;
;;;87     //  интервал счета 0,04 мкс * pv
;;;88     	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_TICKVAL; 
0000e4  2600              MOVS     r6,#0
;;;89     	TIM_ConfigStruct.PrescaleValue	= (u32)1/*pv*/;	
0000e6  2701              MOVS     r7,#1
0000e8  f88d600c          STRB     r6,[sp,#0xc]          ;88
;;;90     	TIM_Init(pT, TIM_TIMER_MODE,&TIM_ConfigStruct);
0000ec  aa03              ADD      r2,sp,#0xc
0000ee  4631              MOV      r1,r6
0000f0  4620              MOV      r0,r4
0000f2  9704              STR      r7,[sp,#0x10]
0000f4  f7fffffe          BL       TIM_Init
;;;91     
;;;92     	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
0000f8  f88d7001          STRB     r7,[sp,#1]
;;;93     	TIM_MatchConfigStruct.ResetOnMatch = FALSE;
0000fc  f88d6003          STRB     r6,[sp,#3]
;;;94     	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
;;;95     	TIM_MatchConfigStruct.ExtMatchOutputType =TIM_EXTMATCH_NOTHING;
;;;96     	TIM_MatchConfigStruct.MatchValue   = (u32)2500000/*mv*/; 
000100  48c3              LDR      r0,|L1.1040|
000102  f88d6002          STRB     r6,[sp,#2]            ;94
;;;97     	TIM_MatchConfigStruct.MatchChannel = 0;
000106  9002              STR      r0,[sp,#8]
000108  f88d6004          STRB     r6,[sp,#4]            ;95
00010c  f88d6000          STRB     r6,[sp,#0]
;;;98     	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
000110  4669              MOV      r1,sp
000112  4620              MOV      r0,r4
000114  f7fffffe          BL       TIM_ConfigMatch
;;;99     	TIM_MatchConfigStruct.MatchChannel = 1;
000118  f88d7000          STRB     r7,[sp,#0]
;;;100    	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
00011c  4669              MOV      r1,sp
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       TIM_ConfigMatch
;;;101    
;;;102    	TIM_MatchConfigStruct.MatchChannel = 2;
000124  2002              MOVS     r0,#2
000126  f88d0000          STRB     r0,[sp,#0]
;;;103    	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
00012a  4669              MOV      r1,sp
00012c  4620              MOV      r0,r4
00012e  f7fffffe          BL       TIM_ConfigMatch
;;;104    
;;;105    	TIM_MatchConfigStruct.MatchChannel = 3;
000132  2003              MOVS     r0,#3
000134  f88d0000          STRB     r0,[sp,#0]
;;;106    	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
000138  4669              MOV      r1,sp
00013a  4620              MOV      r0,r4
00013c  f7fffffe          BL       TIM_ConfigMatch
;;;107    	NVIC_EnableIRQ(IRQn);
000140  4628              MOV      r0,r5
000142  f7fffffe          BL       __NVIC_EnableIRQ
;;;108    	NVIC_SetPriority(IRQn, num);
000146  4641              MOV      r1,r8
000148  4628              MOV      r0,r5
00014a  f7fffffe          BL       __NVIC_SetPriority
;;;109    	TIM_Cmd(pT,ENABLE);
00014e  2101              MOVS     r1,#1
000150  4620              MOV      r0,r4
000152  f7fffffe          BL       TIM_Cmd
                  |L1.342|
;;;110    }
000156  b006              ADD      sp,sp,#0x18
000158  e8bd81f0          POP      {r4-r8,pc}
                  |L1.348|
00015c  f04f2440          MOV      r4,#0x40004000        ;81
000160  2501              MOVS     r5,#1                 ;81
000162  e7bf              B        |L1.228|
                  |L1.356|
000164  4ca7              LDR      r4,|L1.1028|
000166  2502              MOVS     r5,#2                 ;82
000168  e7bc              B        |L1.228|
                  |L1.362|
00016a  4ca7              LDR      r4,|L1.1032|
00016c  2503              MOVS     r5,#3                 ;83
00016e  e7b9              B        |L1.228|
;;;111    
                          ENDP

                  InitTimer1 PROC
;;;112    // инициализаци€ таймера врежиме сброса по прерыванию и только с MR0
;;;113    void InitTimer1(u8 num){
000170  e92d41f0          PUSH     {r4-r8,lr}
000174  b086              SUB      sp,sp,#0x18
000176  f1b00800          SUBS     r8,r0,#0
00017a  d02e              BEQ      |L1.474|
;;;114    	TIM_TIMERCFG_Type TIM_ConfigStruct;
;;;115    	TIM_MATCHCFG_Type TIM_MatchConfigStruct;
;;;116    	LPC_TIM_TypeDef       * pT;
;;;117    	IRQn_Type IRQn;
;;;118    	pT = 0;
;;;119    	// выбор ссылки на управл€ющую структуру и номер IRQ
;;;120    	switch (num) {	
00017c  2801              CMP      r0,#1
00017e  d030              BEQ      |L1.482|
000180  2802              CMP      r0,#2
000182  d031              BEQ      |L1.488|
000184  f1b80f03          CMP      r8,#3
000188  d1e5              BNE      |L1.342|
;;;121    		case 0:pT=LPC_TIM0; IRQn=TIMER0_IRQn; break;
;;;122    		case 1:pT=LPC_TIM1; IRQn=TIMER1_IRQn; break;
;;;123    		case 2:pT=LPC_TIM2; IRQn=TIMER2_IRQn; break;
;;;124    		case 3:pT=LPC_TIM3; IRQn=TIMER3_IRQn; break;
00018a  4c9d              LDR      r4,|L1.1024|
00018c  2504              MOVS     r5,#4
                  |L1.398|
;;;125    	}
;;;126    	if (pT==0) return;
;;;127    //  интервал счета 0,04 мкс * pv
;;;128    	TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_TICKVAL; 
00018e  2600              MOVS     r6,#0
;;;129    	TIM_ConfigStruct.PrescaleValue	= (u32)1/*pv*/;	
000190  2701              MOVS     r7,#1
000192  f88d600c          STRB     r6,[sp,#0xc]          ;128
;;;130    	TIM_Init(pT, TIM_TIMER_MODE,&TIM_ConfigStruct);
000196  aa03              ADD      r2,sp,#0xc
000198  4631              MOV      r1,r6
00019a  4620              MOV      r0,r4
00019c  9704              STR      r7,[sp,#0x10]
00019e  f7fffffe          BL       TIM_Init
;;;131    
;;;132    	TIM_MatchConfigStruct.IntOnMatch   = TRUE;
0001a2  f88d7001          STRB     r7,[sp,#1]
;;;133    //	TIM_MatchConfigStruct.ResetOnMatch = FALSE;
;;;134    	TIM_MatchConfigStruct.ResetOnMatch = TRUE;
0001a6  f88d7003          STRB     r7,[sp,#3]
;;;135    	TIM_MatchConfigStruct.StopOnMatch  = FALSE;
;;;136    	TIM_MatchConfigStruct.ExtMatchOutputType =TIM_EXTMATCH_NOTHING;
;;;137    	TIM_MatchConfigStruct.MatchValue   = (u32)2500000/*mv*/; 
0001aa  4899              LDR      r0,|L1.1040|
0001ac  f88d6002          STRB     r6,[sp,#2]            ;135
;;;138    	
;;;139    	TIM_MatchConfigStruct.MatchChannel = 0;
0001b0  9002              STR      r0,[sp,#8]
0001b2  f88d6004          STRB     r6,[sp,#4]            ;136
0001b6  f88d6000          STRB     r6,[sp,#0]
;;;140    	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
0001ba  4669              MOV      r1,sp
0001bc  4620              MOV      r0,r4
0001be  f7fffffe          BL       TIM_ConfigMatch
;;;141    	
;;;142    //	TIM_MatchConfigStruct.MatchChannel = 1;
;;;143    //	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
;;;144    
;;;145    //	TIM_MatchConfigStruct.MatchChannel = 2;
;;;146    //	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
;;;147    
;;;148    //	TIM_MatchConfigStruct.MatchChannel = 3;
;;;149    //	TIM_ConfigMatch(pT,&TIM_MatchConfigStruct);
;;;150    
;;;151    	NVIC_EnableIRQ(IRQn);
0001c2  4628              MOV      r0,r5
0001c4  f7fffffe          BL       __NVIC_EnableIRQ
;;;152    	NVIC_SetPriority(IRQn, num);
0001c8  4641              MOV      r1,r8
0001ca  4628              MOV      r0,r5
0001cc  f7fffffe          BL       __NVIC_SetPriority
;;;153    	TIM_Cmd(pT,ENABLE);
0001d0  2101              MOVS     r1,#1
0001d2  4620              MOV      r0,r4
0001d4  f7fffffe          BL       TIM_Cmd
;;;154    }
0001d8  e7bd              B        |L1.342|
                  |L1.474|
0001da  f04f2440          MOV      r4,#0x40004000        ;121
0001de  2501              MOVS     r5,#1                 ;121
0001e0  e7d5              B        |L1.398|
                  |L1.482|
0001e2  4c88              LDR      r4,|L1.1028|
0001e4  2502              MOVS     r5,#2                 ;122
0001e6  e7d2              B        |L1.398|
                  |L1.488|
0001e8  4c87              LDR      r4,|L1.1032|
0001ea  2503              MOVS     r5,#3                 ;123
0001ec  e7cf              B        |L1.398|
;;;155    
                          ENDP

                  TIMER0_IRQHandler PROC
;;;156    
;;;157    void TIMER0_IRQHandler(void)
0001ee  b570              PUSH     {r4-r6,lr}
;;;158    {
;;;159    	u32 dt,ir;
;;;160    	
;;;161      ir = LPC_TIM0->IR;
0001f0  f04f2440          MOV      r4,#0x40004000
0001f4  6826              LDR      r6,[r4,#0]
;;;162    	if (ir & TIM_IR_CLR(TIM_MR0_INT))
;;;163    	{	// отработка таймера
;;;164    //	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
;;;165    		LPC_TIM0->IR = TIM_IR_CLR(TIM_MR0_INT);	
;;;166    		if (T0MR0) {
0001f6  4d85              LDR      r5,|L1.1036|
0001f8  07f0              LSLS     r0,r6,#31             ;162
0001fa  d021              BEQ      |L1.576|
0001fc  2001              MOVS     r0,#1                 ;165
0001fe  6020              STR      r0,[r4,#0]            ;165
000200  6828              LDR      r0,[r5,#0]  ; T0MR0
000202  b1e8              CBZ      r0,|L1.576|
;;;167    			if (T0MR0->enabled) {
000204  7801              LDRB     r1,[r0,#0]
000206  b1d9              CBZ      r1,|L1.576|
;;;168    				(*(T0MR0->handler))();
000208  6900              LDR      r0,[r0,#0x10]
00020a  4780              BLX      r0
;;;169    				NEXT_INT(LPC_TIM0,MR0,T0MR0,35,15);
00020c  69a0              LDR      r0,[r4,#0x18]
00020e  68a1              LDR      r1,[r4,#8]
000210  4288              CMP      r0,r1
000212  68a0              LDR      r0,[r4,#8]
000214  69a1              LDR      r1,[r4,#0x18]
000216  d201              BCS      |L1.540|
000218  1a40              SUBS     r0,r0,r1
00021a  e001              B        |L1.544|
                  |L1.540|
00021c  43c9              MVNS     r1,r1
00021e  4408              ADD      r0,r0,r1
                  |L1.544|
000220  6829              LDR      r1,[r5,#0]  ; T0MR0
000222  684b              LDR      r3,[r1,#4]
000224  f1000223          ADD      r2,r0,#0x23
000228  4293              CMP      r3,r2
00022a  d903              BLS      |L1.564|
00022c  69a0              LDR      r0,[r4,#0x18]
00022e  6849              LDR      r1,[r1,#4]
000230  4408              ADD      r0,r0,r1
000232  e004              B        |L1.574|
                  |L1.564|
000234  6148              STR      r0,[r1,#0x14]
000236  6848              LDR      r0,[r1,#4]
000238  6188              STR      r0,[r1,#0x18]
00023a  68a0              LDR      r0,[r4,#8]
00023c  300f              ADDS     r0,r0,#0xf
                  |L1.574|
00023e  61a0              STR      r0,[r4,#0x18]
                  |L1.576|
;;;170    			}
;;;171    		}
;;;172    	}
;;;173    	if (ir & TIM_IR_CLR(TIM_MR1_INT))
000240  07b0              LSLS     r0,r6,#30
000242  d521              BPL      |L1.648|
;;;174    	{	// отработка таймера
;;;175    		LPC_TIM0->IR = TIM_IR_CLR(TIM_MR1_INT);		
000244  2002              MOVS     r0,#2
000246  6020              STR      r0,[r4,#0]
;;;176    		if (T0MR1) {
000248  6868              LDR      r0,[r5,#4]  ; T0MR1
00024a  b1e8              CBZ      r0,|L1.648|
;;;177    			if (T0MR1->enabled) {
00024c  7801              LDRB     r1,[r0,#0]
00024e  b1d9              CBZ      r1,|L1.648|
;;;178    				(*(T0MR1->handler))();
000250  6900              LDR      r0,[r0,#0x10]
000252  4780              BLX      r0
;;;179    				NEXT_INT(LPC_TIM0,MR1,T0MR1,35,15);
000254  69e0              LDR      r0,[r4,#0x1c]
000256  68a1              LDR      r1,[r4,#8]
000258  4288              CMP      r0,r1
00025a  68a0              LDR      r0,[r4,#8]
00025c  69e1              LDR      r1,[r4,#0x1c]
00025e  d201              BCS      |L1.612|
000260  1a40              SUBS     r0,r0,r1
000262  e001              B        |L1.616|
                  |L1.612|
000264  43c9              MVNS     r1,r1
000266  4408              ADD      r0,r0,r1
                  |L1.616|
000268  6869              LDR      r1,[r5,#4]  ; T0MR1
00026a  684b              LDR      r3,[r1,#4]
00026c  f1000223          ADD      r2,r0,#0x23
000270  4293              CMP      r3,r2
000272  d903              BLS      |L1.636|
000274  69e0              LDR      r0,[r4,#0x1c]
000276  6849              LDR      r1,[r1,#4]
000278  4408              ADD      r0,r0,r1
00027a  e004              B        |L1.646|
                  |L1.636|
00027c  6148              STR      r0,[r1,#0x14]
00027e  6848              LDR      r0,[r1,#4]
000280  6188              STR      r0,[r1,#0x18]
000282  68a0              LDR      r0,[r4,#8]
000284  300f              ADDS     r0,r0,#0xf
                  |L1.646|
000286  61e0              STR      r0,[r4,#0x1c]
                  |L1.648|
;;;180    			}
;;;181    		}
;;;182    	}
;;;183    	if (ir & TIM_IR_CLR(TIM_MR2_INT))
000288  0770              LSLS     r0,r6,#29
00028a  d521              BPL      |L1.720|
;;;184    	{	// отработка таймера
;;;185    		LPC_TIM0->IR = TIM_IR_CLR(TIM_MR2_INT);	
00028c  2004              MOVS     r0,#4
00028e  6020              STR      r0,[r4,#0]
;;;186    		if (T0MR2) {
000290  68a8              LDR      r0,[r5,#8]  ; T0MR2
000292  b1e8              CBZ      r0,|L1.720|
;;;187    			if (T0MR2->enabled) {
000294  7801              LDRB     r1,[r0,#0]
000296  b1d9              CBZ      r1,|L1.720|
;;;188    				(*(T0MR2->handler))();
000298  6900              LDR      r0,[r0,#0x10]
00029a  4780              BLX      r0
;;;189    				NEXT_INT(LPC_TIM0,MR2,T0MR2,35,15);
00029c  6a20              LDR      r0,[r4,#0x20]
00029e  68a1              LDR      r1,[r4,#8]
0002a0  4288              CMP      r0,r1
0002a2  68a0              LDR      r0,[r4,#8]
0002a4  6a21              LDR      r1,[r4,#0x20]
0002a6  d201              BCS      |L1.684|
0002a8  1a40              SUBS     r0,r0,r1
0002aa  e001              B        |L1.688|
                  |L1.684|
0002ac  43c9              MVNS     r1,r1
0002ae  4408              ADD      r0,r0,r1
                  |L1.688|
0002b0  68a9              LDR      r1,[r5,#8]  ; T0MR2
0002b2  684b              LDR      r3,[r1,#4]
0002b4  f1000223          ADD      r2,r0,#0x23
0002b8  4293              CMP      r3,r2
0002ba  d903              BLS      |L1.708|
0002bc  6a20              LDR      r0,[r4,#0x20]
0002be  6849              LDR      r1,[r1,#4]
0002c0  4408              ADD      r0,r0,r1
0002c2  e004              B        |L1.718|
                  |L1.708|
0002c4  6148              STR      r0,[r1,#0x14]
0002c6  6848              LDR      r0,[r1,#4]
0002c8  6188              STR      r0,[r1,#0x18]
0002ca  68a0              LDR      r0,[r4,#8]
0002cc  300f              ADDS     r0,r0,#0xf
                  |L1.718|
0002ce  6220              STR      r0,[r4,#0x20]
                  |L1.720|
;;;190    			}
;;;191    		}
;;;192    	}
;;;193    	if (ir & TIM_IR_CLR(TIM_MR3_INT))
0002d0  0730              LSLS     r0,r6,#28
0002d2  d523              BPL      |L1.796|
;;;194    	{	// отработка таймера
;;;195    		LPC_TIM0->IR = TIM_IR_CLR(TIM_MR3_INT);	
0002d4  2008              MOVS     r0,#8
0002d6  6020              STR      r0,[r4,#0]
;;;196    		if (T0MR3) {
0002d8  68e8              LDR      r0,[r5,#0xc]  ; T0MR3
0002da  2800              CMP      r0,#0
0002dc  d01e              BEQ      |L1.796|
;;;197    			if (T0MR3->enabled) {
0002de  7801              LDRB     r1,[r0,#0]
0002e0  2900              CMP      r1,#0
0002e2  d01b              BEQ      |L1.796|
;;;198    				(*(T0MR3->handler))();
0002e4  6900              LDR      r0,[r0,#0x10]
0002e6  4780              BLX      r0
;;;199    				NEXT_INT(LPC_TIM0,MR3,T0MR3,35,15);
0002e8  6a60              LDR      r0,[r4,#0x24]
0002ea  68a1              LDR      r1,[r4,#8]
0002ec  4288              CMP      r0,r1
0002ee  68a0              LDR      r0,[r4,#8]
0002f0  6a61              LDR      r1,[r4,#0x24]
0002f2  d201              BCS      |L1.760|
0002f4  1a40              SUBS     r0,r0,r1
0002f6  e001              B        |L1.764|
                  |L1.760|
0002f8  43c9              MVNS     r1,r1
0002fa  4408              ADD      r0,r0,r1
                  |L1.764|
0002fc  68e9              LDR      r1,[r5,#0xc]  ; T0MR3
0002fe  684b              LDR      r3,[r1,#4]
000300  f1000223          ADD      r2,r0,#0x23
000304  4293              CMP      r3,r2
000306  d903              BLS      |L1.784|
000308  6a60              LDR      r0,[r4,#0x24]
00030a  6849              LDR      r1,[r1,#4]
00030c  4408              ADD      r0,r0,r1
00030e  e004              B        |L1.794|
                  |L1.784|
000310  6148              STR      r0,[r1,#0x14]
000312  6848              LDR      r0,[r1,#4]
000314  6188              STR      r0,[r1,#0x18]
000316  68a0              LDR      r0,[r4,#8]
000318  300f              ADDS     r0,r0,#0xf
                  |L1.794|
00031a  6260              STR      r0,[r4,#0x24]
                  |L1.796|
;;;200    			}
;;;201    		}
;;;202    	}
;;;203    	
;;;204    }
00031c  bd70              POP      {r4-r6,pc}
;;;205    
                          ENDP

                  TIMER1_IRQHandler PROC
;;;206    // новый
;;;207    void TIMER1_IRQHandler(void)
00031e  4939              LDR      r1,|L1.1028|
;;;208    {
;;;209    	// это жестка€ заточка таймера 1 под подсчет задержек
;;;210    	// инициализироватьс€ таймер должен так
;;;211    	//							 num	ROM	emr0	emr1	emr2	emr3	pr
;;;212    	// InitTimerMod1(1,		1,	1,		0,		0,		0,		1);
;;;213    	LPC_TIM1->IR = TIM_IR_CLR(TIM_MR0_INT); // сброс
000320  2001              MOVS     r0,#1
000322  6008              STR      r0,[r1,#0]
;;;214    	// тут вызов
;;;215    	TI_Handler();
000324  f7ffbffe          B.W      TI_Handler
;;;216    /*
;;;217    	// этот код нужно открыть если использовать таймер 1 с циклическим счетом TC 
;;;218    	// и со всеми регистрами MR
;;;219    	u32 dt,ir;
;;;220    	ir = LPC_TIM1->IR;
;;;221    	if (ir & TIM_IR_CLR(TIM_MR0_INT))
;;;222    	{	// отработка таймера
;;;223    		LPC_TIM1->IR = TIM_IR_CLR(TIM_MR0_INT);
;;;224    		if (T1MR0) {
;;;225    			if (T1MR0->enabled) {
;;;226    				(*(T1MR0->handler))();
;;;227    				NEXT_INT(LPC_TIM1,MR0,T1MR0,35,15);
;;;228    			}
;;;229    		}
;;;230    	}
;;;231    	if (ir & TIM_IR_CLR(TIM_MR1_INT)) // проверка
;;;232    	{	// отработка таймера
;;;233    		LPC_TIM1->IR = TIM_IR_CLR(TIM_MR1_INT); // сброс
;;;234    		if (T1MR1) {
;;;235    			if (T1MR1->enabled) {
;;;236    				(*(T1MR1->handler))();
;;;237    				NEXT_INT(LPC_TIM1,MR1,T1MR1,35,15);
;;;238    			}
;;;239    		}
;;;240    	}
;;;241    
;;;242    	if (ir & TIM_IR_CLR(TIM_MR2_INT))
;;;243    	{	// отработка таймера
;;;244    		LPC_TIM1->IR = TIM_IR_CLR(TIM_MR2_INT); // сброс
;;;245    		if (T1MR2) {
;;;246    			if (T1MR2->enabled) {
;;;247    				(*(T1MR2->handler))();
;;;248    				NEXT_INT(LPC_TIM1,MR2,T1MR2,35,15);
;;;249    			}
;;;250    		}
;;;251    	}
;;;252    
;;;253    	if (ir & TIM_IR_CLR(TIM_MR3_INT))
;;;254    	{	// отработка таймера
;;;255    		LPC_TIM1->IR = TIM_IR_CLR(TIM_MR3_INT); // сброс
;;;256    		if (T1MR3) {
;;;257    			if (T1MR3->enabled) {
;;;258    				(*(T1MR3->handler))();
;;;259    				NEXT_INT(LPC_TIM1,MR3,T1MR3,35,15);
;;;260    			}
;;;261    		}
;;;262    	}
;;;263    */	
;;;264    	
;;;265    }
;;;266    
                          ENDP

                  TIMER2_IRQHandler PROC
;;;267    // новый
;;;268    void TIMER2_IRQHandler(void)
000328  b570              PUSH     {r4-r6,lr}
;;;269    {
;;;270    	u32 dt;
;;;271    	if (TIM_GetIntStatus(LPC_TIM2, TIM_MR0_INT)== SET)
00032a  4c37              LDR      r4,|L1.1032|
00032c  2100              MOVS     r1,#0
00032e  4620              MOV      r0,r4
000330  f7fffffe          BL       TIM_GetIntStatus
;;;272    	{	// отработка таймера
;;;273    		if (T2MR0) {
000334  4d35              LDR      r5,|L1.1036|
000336  2801              CMP      r0,#1                 ;271
000338  d123              BNE      |L1.898|
00033a  6a28              LDR      r0,[r5,#0x20]  ; T2MR0
00033c  b1e8              CBZ      r0,|L1.890|
;;;274    			if (T2MR0->enabled) {
00033e  7801              LDRB     r1,[r0,#0]
000340  b1d9              CBZ      r1,|L1.890|
;;;275    				(*(T2MR0->handler))();
000342  6900              LDR      r0,[r0,#0x10]
000344  4780              BLX      r0
;;;276    				NEXT_INT(LPC_TIM2,MR0,T2MR0,35,15);
000346  69a0              LDR      r0,[r4,#0x18]
000348  68a1              LDR      r1,[r4,#8]
00034a  4288              CMP      r0,r1
00034c  68a0              LDR      r0,[r4,#8]
00034e  69a1              LDR      r1,[r4,#0x18]
000350  d201              BCS      |L1.854|
000352  1a41              SUBS     r1,r0,r1
000354  e001              B        |L1.858|
                  |L1.854|
000356  43c9              MVNS     r1,r1
000358  4401              ADD      r1,r1,r0
                  |L1.858|
00035a  6a28              LDR      r0,[r5,#0x20]  ; T2MR0
00035c  6843              LDR      r3,[r0,#4]
00035e  f1010223          ADD      r2,r1,#0x23
000362  4293              CMP      r3,r2
000364  d903              BLS      |L1.878|
000366  69a1              LDR      r1,[r4,#0x18]
000368  6840              LDR      r0,[r0,#4]
00036a  4408              ADD      r0,r0,r1
00036c  e004              B        |L1.888|
                  |L1.878|
00036e  6141              STR      r1,[r0,#0x14]
000370  6841              LDR      r1,[r0,#4]
000372  6181              STR      r1,[r0,#0x18]
000374  68a0              LDR      r0,[r4,#8]
000376  300f              ADDS     r0,r0,#0xf
                  |L1.888|
000378  61a0              STR      r0,[r4,#0x18]
                  |L1.890|
;;;277    			}
;;;278    		}
;;;279    		TIM_ClearIntPending(LPC_TIM2, TIM_MR0_INT);
00037a  2100              MOVS     r1,#0
00037c  4620              MOV      r0,r4
00037e  f7fffffe          BL       TIM_ClearIntPending
                  |L1.898|
;;;280    	}
;;;281    
;;;282    	if (TIM_GetIntStatus(LPC_TIM2, TIM_MR1_INT)== SET)
000382  2101              MOVS     r1,#1
000384  4620              MOV      r0,r4
000386  f7fffffe          BL       TIM_GetIntStatus
00038a  2801              CMP      r0,#1
00038c  d123              BNE      |L1.982|
;;;283    	{	// отработка таймера
;;;284    		if (T2MR1) {
00038e  6a68              LDR      r0,[r5,#0x24]  ; T2MR1
000390  b1e8              CBZ      r0,|L1.974|
;;;285    			if (T2MR1->enabled) {
000392  7801              LDRB     r1,[r0,#0]
000394  b1d9              CBZ      r1,|L1.974|
;;;286    				(*(T2MR1->handler))();
000396  6900              LDR      r0,[r0,#0x10]
000398  4780              BLX      r0
;;;287    				NEXT_INT(LPC_TIM2,MR1,T2MR1,35,15);
00039a  69e0              LDR      r0,[r4,#0x1c]
00039c  68a1              LDR      r1,[r4,#8]
00039e  4288              CMP      r0,r1
0003a0  68a0              LDR      r0,[r4,#8]
0003a2  69e1              LDR      r1,[r4,#0x1c]
0003a4  d201              BCS      |L1.938|
0003a6  1a40              SUBS     r0,r0,r1
0003a8  e001              B        |L1.942|
                  |L1.938|
0003aa  43c9              MVNS     r1,r1
0003ac  4408              ADD      r0,r0,r1
                  |L1.942|
0003ae  6a69              LDR      r1,[r5,#0x24]  ; T2MR1
0003b0  684b              LDR      r3,[r1,#4]
0003b2  f1000223          ADD      r2,r0,#0x23
0003b6  4293              CMP      r3,r2
0003b8  d903              BLS      |L1.962|
0003ba  69e0              LDR      r0,[r4,#0x1c]
0003bc  6849              LDR      r1,[r1,#4]
0003be  4408              ADD      r0,r0,r1
0003c0  e004              B        |L1.972|
                  |L1.962|
0003c2  6148              STR      r0,[r1,#0x14]
0003c4  6848              LDR      r0,[r1,#4]
0003c6  6188              STR      r0,[r1,#0x18]
0003c8  68a0              LDR      r0,[r4,#8]
0003ca  300f              ADDS     r0,r0,#0xf
                  |L1.972|
0003cc  61e0              STR      r0,[r4,#0x1c]
                  |L1.974|
;;;288    			}
;;;289    		}
;;;290    		TIM_ClearIntPending(LPC_TIM2, TIM_MR1_INT);
0003ce  2101              MOVS     r1,#1
0003d0  4620              MOV      r0,r4
0003d2  f7fffffe          BL       TIM_ClearIntPending
                  |L1.982|
;;;291    	}
;;;292    
;;;293    	if (TIM_GetIntStatus(LPC_TIM2, TIM_MR2_INT)== SET)
0003d6  2102              MOVS     r1,#2
0003d8  4620              MOV      r0,r4
0003da  f7fffffe          BL       TIM_GetIntStatus
0003de  2801              CMP      r0,#1
0003e0  d12e              BNE      |L1.1088|
;;;294    	{	// отработка таймера
;;;295    		if (T2MR2) {
0003e2  6aa8              LDR      r0,[r5,#0x28]  ; T2MR2
0003e4  b340              CBZ      r0,|L1.1080|
;;;296    			if (T2MR2->enabled) {
0003e6  7801              LDRB     r1,[r0,#0]
0003e8  b331              CBZ      r1,|L1.1080|
;;;297    				(*(T2MR2->handler))();
0003ea  6900              LDR      r0,[r0,#0x10]
0003ec  4780              BLX      r0
;;;298    				NEXT_INT(LPC_TIM2,MR2,T2MR2,35,15);
0003ee  6a20              LDR      r0,[r4,#0x20]
0003f0  68a1              LDR      r1,[r4,#8]
0003f2  4288              CMP      r0,r1
0003f4  68a0              LDR      r0,[r4,#8]
0003f6  6a21              LDR      r1,[r4,#0x20]
0003f8  d20c              BCS      |L1.1044|
0003fa  1a41              SUBS     r1,r0,r1
0003fc  e00c              B        |L1.1048|
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      0x40094000
                  |L1.1028|
                          DCD      0x40008000
                  |L1.1032|
                          DCD      0x40090000
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      0x002625a0
                  |L1.1044|
000414  43c9              MVNS     r1,r1
000416  4401              ADD      r1,r1,r0
                  |L1.1048|
000418  6aaa              LDR      r2,[r5,#0x28]  ; T2MR2
00041a  6853              LDR      r3,[r2,#4]
00041c  f1010023          ADD      r0,r1,#0x23
000420  4283              CMP      r3,r0
000422  d903              BLS      |L1.1068|
000424  6a20              LDR      r0,[r4,#0x20]
000426  6851              LDR      r1,[r2,#4]
000428  4408              ADD      r0,r0,r1
00042a  e004              B        |L1.1078|
                  |L1.1068|
00042c  6151              STR      r1,[r2,#0x14]
00042e  6850              LDR      r0,[r2,#4]
000430  6190              STR      r0,[r2,#0x18]
000432  68a0              LDR      r0,[r4,#8]
000434  300f              ADDS     r0,r0,#0xf
                  |L1.1078|
000436  6220              STR      r0,[r4,#0x20]
                  |L1.1080|
;;;299    			}
;;;300    		}
;;;301    		TIM_ClearIntPending(LPC_TIM2, TIM_MR2_INT);
000438  2102              MOVS     r1,#2
00043a  4620              MOV      r0,r4
00043c  f7fffffe          BL       TIM_ClearIntPending
                  |L1.1088|
;;;302    	}
;;;303    
;;;304    	if (TIM_GetIntStatus(LPC_TIM2, TIM_MR3_INT)== SET)
000440  2103              MOVS     r1,#3
000442  4620              MOV      r0,r4
000444  f7fffffe          BL       TIM_GetIntStatus
000448  2801              CMP      r0,#1
00044a  d125              BNE      |L1.1176|
;;;305    	{	// отработка таймера
;;;306    		if (T2MR3) {
00044c  6ae8              LDR      r0,[r5,#0x2c]  ; T2MR3
00044e  b1e8              CBZ      r0,|L1.1164|
;;;307    			if (T2MR3->enabled) {
000450  7801              LDRB     r1,[r0,#0]
000452  b1d9              CBZ      r1,|L1.1164|
;;;308    				(*(T2MR3->handler))();
000454  6900              LDR      r0,[r0,#0x10]
000456  4780              BLX      r0
;;;309    				NEXT_INT(LPC_TIM2,MR3,T2MR3,35,15);
000458  6a60              LDR      r0,[r4,#0x24]
00045a  68a1              LDR      r1,[r4,#8]
00045c  4288              CMP      r0,r1
00045e  68a0              LDR      r0,[r4,#8]
000460  6a61              LDR      r1,[r4,#0x24]
000462  d201              BCS      |L1.1128|
000464  1a41              SUBS     r1,r0,r1
000466  e001              B        |L1.1132|
                  |L1.1128|
000468  43c9              MVNS     r1,r1
00046a  4401              ADD      r1,r1,r0
                  |L1.1132|
00046c  6ae8              LDR      r0,[r5,#0x2c]  ; T2MR3
00046e  6843              LDR      r3,[r0,#4]
000470  f1010223          ADD      r2,r1,#0x23
000474  4293              CMP      r3,r2
000476  d903              BLS      |L1.1152|
000478  6a61              LDR      r1,[r4,#0x24]
00047a  6840              LDR      r0,[r0,#4]
00047c  4408              ADD      r0,r0,r1
00047e  e004              B        |L1.1162|
                  |L1.1152|
000480  6141              STR      r1,[r0,#0x14]
000482  6841              LDR      r1,[r0,#4]
000484  6181              STR      r1,[r0,#0x18]
000486  68a0              LDR      r0,[r4,#8]
000488  300f              ADDS     r0,r0,#0xf
                  |L1.1162|
00048a  6260              STR      r0,[r4,#0x24]
                  |L1.1164|
;;;310    			}
;;;311    		}
;;;312    		TIM_ClearIntPending(LPC_TIM2, TIM_MR3_INT);
00048c  4620              MOV      r0,r4
00048e  e8bd4070          POP      {r4-r6,lr}
000492  2103              MOVS     r1,#3
000494  f7ffbffe          B.W      TIM_ClearIntPending
                  |L1.1176|
;;;313    	}
;;;314    }
000498  bd70              POP      {r4-r6,pc}
;;;315    
                          ENDP

                  TIMER3_IRQHandler PROC
;;;317    // новый
;;;318    void TIMER3_IRQHandler(void)
00049a  b570              PUSH     {r4-r6,lr}
;;;319    {
;;;320    	u32 dt;
;;;321    	if (TIM_GetIntStatus(LPC_TIM3, TIM_MR0_INT)== SET)
00049c  4c64              LDR      r4,|L1.1584|
00049e  2100              MOVS     r1,#0
0004a0  4620              MOV      r0,r4
0004a2  f7fffffe          BL       TIM_GetIntStatus
;;;322    	{	// отработка таймера
;;;323    		if (T3MR0) {
0004a6  4d63              LDR      r5,|L1.1588|
0004a8  2801              CMP      r0,#1                 ;321
0004aa  d123              BNE      |L1.1268|
0004ac  6b28              LDR      r0,[r5,#0x30]  ; T3MR0
0004ae  b1e8              CBZ      r0,|L1.1260|
;;;324    			if (T3MR0->enabled) {
0004b0  7801              LDRB     r1,[r0,#0]
0004b2  b1d9              CBZ      r1,|L1.1260|
;;;325    				(*(T3MR0->handler))();
0004b4  6900              LDR      r0,[r0,#0x10]
0004b6  4780              BLX      r0
;;;326    				NEXT_INT(LPC_TIM3,MR0,T3MR0,35,15);
0004b8  69a0              LDR      r0,[r4,#0x18]
0004ba  68a1              LDR      r1,[r4,#8]
0004bc  4288              CMP      r0,r1
0004be  68a0              LDR      r0,[r4,#8]
0004c0  69a1              LDR      r1,[r4,#0x18]
0004c2  d201              BCS      |L1.1224|
0004c4  1a41              SUBS     r1,r0,r1
0004c6  e001              B        |L1.1228|
                  |L1.1224|
0004c8  43c9              MVNS     r1,r1
0004ca  4401              ADD      r1,r1,r0
                  |L1.1228|
0004cc  6b28              LDR      r0,[r5,#0x30]  ; T3MR0
0004ce  6843              LDR      r3,[r0,#4]
0004d0  f1010223          ADD      r2,r1,#0x23
0004d4  4293              CMP      r3,r2
0004d6  d903              BLS      |L1.1248|
0004d8  69a1              LDR      r1,[r4,#0x18]
0004da  6840              LDR      r0,[r0,#4]
0004dc  4408              ADD      r0,r0,r1
0004de  e004              B        |L1.1258|
                  |L1.1248|
0004e0  6141              STR      r1,[r0,#0x14]
0004e2  6841              LDR      r1,[r0,#4]
0004e4  6181              STR      r1,[r0,#0x18]
0004e6  68a0              LDR      r0,[r4,#8]
0004e8  300f              ADDS     r0,r0,#0xf
                  |L1.1258|
0004ea  61a0              STR      r0,[r4,#0x18]
                  |L1.1260|
;;;327    			}
;;;328    		}
;;;329    		TIM_ClearIntPending(LPC_TIM3, TIM_MR0_INT);
0004ec  2100              MOVS     r1,#0
0004ee  4620              MOV      r0,r4
0004f0  f7fffffe          BL       TIM_ClearIntPending
                  |L1.1268|
;;;330    	}
;;;331    
;;;332    	if (TIM_GetIntStatus(LPC_TIM3, TIM_MR1_INT)== SET)
0004f4  2101              MOVS     r1,#1
0004f6  4620              MOV      r0,r4
0004f8  f7fffffe          BL       TIM_GetIntStatus
0004fc  2801              CMP      r0,#1
0004fe  d123              BNE      |L1.1352|
;;;333    	{	// отработка таймера
;;;334    		if (T3MR1) {
000500  6b68              LDR      r0,[r5,#0x34]  ; T3MR1
000502  b1e8              CBZ      r0,|L1.1344|
;;;335    			if (T3MR1->enabled) {
000504  7801              LDRB     r1,[r0,#0]
000506  b1d9              CBZ      r1,|L1.1344|
;;;336    				(*(T3MR1->handler))();
000508  6900              LDR      r0,[r0,#0x10]
00050a  4780              BLX      r0
;;;337    				NEXT_INT(LPC_TIM3,MR1,T3MR1,35,15);
00050c  69e0              LDR      r0,[r4,#0x1c]
00050e  68a1              LDR      r1,[r4,#8]
000510  4288              CMP      r0,r1
000512  68a0              LDR      r0,[r4,#8]
000514  69e1              LDR      r1,[r4,#0x1c]
000516  d201              BCS      |L1.1308|
000518  1a40              SUBS     r0,r0,r1
00051a  e001              B        |L1.1312|
                  |L1.1308|
00051c  43c9              MVNS     r1,r1
00051e  4408              ADD      r0,r0,r1
                  |L1.1312|
000520  6b69              LDR      r1,[r5,#0x34]  ; T3MR1
000522  684b              LDR      r3,[r1,#4]
000524  f1000223          ADD      r2,r0,#0x23
000528  4293              CMP      r3,r2
00052a  d903              BLS      |L1.1332|
00052c  69e0              LDR      r0,[r4,#0x1c]
00052e  6849              LDR      r1,[r1,#4]
000530  4408              ADD      r0,r0,r1
000532  e004              B        |L1.1342|
                  |L1.1332|
000534  6148              STR      r0,[r1,#0x14]
000536  6848              LDR      r0,[r1,#4]
000538  6188              STR      r0,[r1,#0x18]
00053a  68a0              LDR      r0,[r4,#8]
00053c  300f              ADDS     r0,r0,#0xf
                  |L1.1342|
00053e  61e0              STR      r0,[r4,#0x1c]
                  |L1.1344|
;;;338    			}
;;;339    		}
;;;340    		TIM_ClearIntPending(LPC_TIM3, TIM_MR1_INT);
000540  2101              MOVS     r1,#1
000542  4620              MOV      r0,r4
000544  f7fffffe          BL       TIM_ClearIntPending
                  |L1.1352|
;;;341    	}
;;;342    
;;;343    	if (TIM_GetIntStatus(LPC_TIM3, TIM_MR2_INT)== SET)
000548  2102              MOVS     r1,#2
00054a  4620              MOV      r0,r4
00054c  f7fffffe          BL       TIM_GetIntStatus
000550  2801              CMP      r0,#1
000552  d123              BNE      |L1.1436|
;;;344    	{	// отработка таймера
;;;345    		if (T3MR2) {
000554  6ba8              LDR      r0,[r5,#0x38]  ; T3MR2
000556  b1e8              CBZ      r0,|L1.1428|
;;;346    			if (T3MR2->enabled) {
000558  7801              LDRB     r1,[r0,#0]
00055a  b1d9              CBZ      r1,|L1.1428|
;;;347    				(*(T3MR2->handler))();
00055c  6900              LDR      r0,[r0,#0x10]
00055e  4780              BLX      r0
;;;348    				NEXT_INT(LPC_TIM3,MR2,T3MR2,35,15);
000560  6a20              LDR      r0,[r4,#0x20]
000562  68a1              LDR      r1,[r4,#8]
000564  4288              CMP      r0,r1
000566  68a0              LDR      r0,[r4,#8]
000568  6a21              LDR      r1,[r4,#0x20]
00056a  d201              BCS      |L1.1392|
00056c  1a41              SUBS     r1,r0,r1
00056e  e001              B        |L1.1396|
                  |L1.1392|
000570  43c9              MVNS     r1,r1
000572  4401              ADD      r1,r1,r0
                  |L1.1396|
000574  6baa              LDR      r2,[r5,#0x38]  ; T3MR2
000576  6853              LDR      r3,[r2,#4]
000578  f1010023          ADD      r0,r1,#0x23
00057c  4283              CMP      r3,r0
00057e  d903              BLS      |L1.1416|
000580  6a20              LDR      r0,[r4,#0x20]
000582  6851              LDR      r1,[r2,#4]
000584  4408              ADD      r0,r0,r1
000586  e004              B        |L1.1426|
                  |L1.1416|
000588  6151              STR      r1,[r2,#0x14]
00058a  6850              LDR      r0,[r2,#4]
00058c  6190              STR      r0,[r2,#0x18]
00058e  68a0              LDR      r0,[r4,#8]
000590  300f              ADDS     r0,r0,#0xf
                  |L1.1426|
000592  6220              STR      r0,[r4,#0x20]
                  |L1.1428|
;;;349    			}
;;;350    		}
;;;351    		TIM_ClearIntPending(LPC_TIM3, TIM_MR2_INT);
000594  2102              MOVS     r1,#2
000596  4620              MOV      r0,r4
000598  f7fffffe          BL       TIM_ClearIntPending
                  |L1.1436|
;;;352    	}
;;;353    
;;;354    	if (TIM_GetIntStatus(LPC_TIM3, TIM_MR3_INT)== SET)
00059c  2103              MOVS     r1,#3
00059e  4620              MOV      r0,r4
0005a0  f7fffffe          BL       TIM_GetIntStatus
0005a4  2801              CMP      r0,#1
0005a6  d125              BNE      |L1.1524|
;;;355    	{	// отработка таймера
;;;356    		if (T3MR3) {
0005a8  6be8              LDR      r0,[r5,#0x3c]  ; T3MR3
0005aa  b1e8              CBZ      r0,|L1.1512|
;;;357    			if (T3MR3->enabled) {
0005ac  7801              LDRB     r1,[r0,#0]
0005ae  b1d9              CBZ      r1,|L1.1512|
;;;358    				(*(T3MR3->handler))();
0005b0  6900              LDR      r0,[r0,#0x10]
0005b2  4780              BLX      r0
;;;359    				NEXT_INT(LPC_TIM3,MR3,T3MR3,35,15);
0005b4  6a60              LDR      r0,[r4,#0x24]
0005b6  68a1              LDR      r1,[r4,#8]
0005b8  4288              CMP      r0,r1
0005ba  68a0              LDR      r0,[r4,#8]
0005bc  6a61              LDR      r1,[r4,#0x24]
0005be  d201              BCS      |L1.1476|
0005c0  1a41              SUBS     r1,r0,r1
0005c2  e001              B        |L1.1480|
                  |L1.1476|
0005c4  43c9              MVNS     r1,r1
0005c6  4401              ADD      r1,r1,r0
                  |L1.1480|
0005c8  6be8              LDR      r0,[r5,#0x3c]  ; T3MR3
0005ca  6843              LDR      r3,[r0,#4]
0005cc  f1010223          ADD      r2,r1,#0x23
0005d0  4293              CMP      r3,r2
0005d2  d903              BLS      |L1.1500|
0005d4  6a61              LDR      r1,[r4,#0x24]
0005d6  6840              LDR      r0,[r0,#4]
0005d8  4408              ADD      r0,r0,r1
0005da  e004              B        |L1.1510|
                  |L1.1500|
0005dc  6141              STR      r1,[r0,#0x14]
0005de  6841              LDR      r1,[r0,#4]
0005e0  6181              STR      r1,[r0,#0x18]
0005e2  68a0              LDR      r0,[r4,#8]
0005e4  300f              ADDS     r0,r0,#0xf
                  |L1.1510|
0005e6  6260              STR      r0,[r4,#0x24]
                  |L1.1512|
;;;360    			}
;;;361    		}
;;;362    		TIM_ClearIntPending(LPC_TIM3, TIM_MR3_INT);
0005e8  4620              MOV      r0,r4
0005ea  e8bd4070          POP      {r4-r6,lr}
0005ee  2103              MOVS     r1,#3
0005f0  f7ffbffe          B.W      TIM_ClearIntPending
                  |L1.1524|
;;;363    	}
;;;364    }
0005f4  bd70              POP      {r4-r6,pc}
                          ENDP

                  __NVIC_EnableIRQ PROC
;;;1495    */
;;;1496   __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
0005f6  2800              CMP      r0,#0
;;;1497   {
0005f8  db09              BLT      |L1.1550|
;;;1498     if ((int32_t)(IRQn) >= 0)
;;;1499     {
;;;1500       NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
0005fa  f000021f          AND      r2,r0,#0x1f
0005fe  2101              MOVS     r1,#1
000600  4091              LSLS     r1,r1,r2
000602  0940              LSRS     r0,r0,#5
000604  0080              LSLS     r0,r0,#2
000606  f10020e0          ADD      r0,r0,#0xe000e000
00060a  f8c01100          STR      r1,[r0,#0x100]
                  |L1.1550|
;;;1501     }
;;;1502   }
00060e  4770              BX       lr
;;;1503   
                          ENDP

                  __NVIC_SetPriority PROC
;;;1623    */
;;;1624   __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000610  06c9              LSLS     r1,r1,#27
;;;1625   {
;;;1626     if ((int32_t)(IRQn) >= 0)
;;;1627     {
;;;1628       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000612  0e09              LSRS     r1,r1,#24
000614  2800              CMP      r0,#0                 ;1626
000616  db04              BLT      |L1.1570|
000618  f10020e0          ADD      r0,r0,#0xe000e000     ;1625
00061c  f8801400          STRB     r1,[r0,#0x400]
;;;1629     }
;;;1630     else
;;;1631     {
;;;1632       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1633     }
;;;1634   }
000620  4770              BX       lr
                  |L1.1570|
000622  f000000f          AND      r0,r0,#0xf            ;1632
000626  f10020e0          ADD      r0,r0,#0xe000e000     ;1632
00062a  f8801d14          STRB     r1,[r0,#0xd14]        ;1632
00062e  4770              BX       lr
;;;1635   
                          ENDP

                  |L1.1584|
                          DCD      0x40094000
                  |L1.1588|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  T0MR0
                          DCD      0x00000000
                  T0MR1
                          DCD      0x00000000
                  T0MR2
                          DCD      0x00000000
                  T0MR3
                          DCD      0x00000000
                  T1MR0
                          DCD      0x00000000
                  T1MR1
                          DCD      0x00000000
                  T1MR2
                          DCD      0x00000000
                  T1MR3
                          DCD      0x00000000
                  T2MR0
                          DCD      0x00000000
                  T2MR1
                          DCD      0x00000000
                  T2MR2
                          DCD      0x00000000
                  T2MR3
                          DCD      0x00000000
                  T3MR0
                          DCD      0x00000000
                  T3MR1
                          DCD      0x00000000
                  T3MR2
                          DCD      0x00000000
                  T3MR3
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "UCNC\\Timers.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Timers_c_T0MR0____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_Timers_c_T0MR0____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Timers_c_T0MR0____REVSH|
#line 462
|__asm___8_Timers_c_T0MR0____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_Timers_c_T0MR0____RRX|
#line 649
|__asm___8_Timers_c_T0MR0____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\queue.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\queue.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\queue.crf Main\queue.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  InitQueue PROC
;;;16     
;;;17     void InitQueue(void){
000000  f64041ea          MOV      r1,#0xcea
;;;18     	// инициализация очереди
;;;19     	memset((void*)&qu,0,sizeof qu);
000004  48f9              LDR      r0,|L1.1004|
000006  f7ffbffe          B.W      __aeabi_memclr
;;;20     }
;;;21     
                          ENDP

                  ProcessingAnswer PROC
;;;22     void ProcessingAnswer(void){
00000a  e92d41f0          PUSH     {r4-r8,lr}
;;;23     // обработка квитанции
;;;24     	u8 Addr,Cmd;
;;;25     	//Msg("RS485ProcAnswerOk\r\n");
;;;26     	if (qu.aqu[qu.head].transit) {
00000e  4cf7              LDR      r4,|L1.1004|
000010  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
000014  eb0001c0          ADD      r1,r0,r0,LSL #3
000018  ebc11080          RSB      r0,r1,r0,LSL #6
00001c  eb040040          ADD      r0,r4,r0,LSL #1
000020  f890006c          LDRB     r0,[r0,#0x6c]
000024  b1c0              CBZ      r0,|L1.88|
;;;27     		// ответ на запрос транзитных данных по UART1
;;;28     		mbByteToPack(0,0x44);
000026  2144              MOVS     r1,#0x44
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       mbByteToPack
;;;29     		mbByteToPack(0,cmDataToU1);
00002e  2167              MOVS     r1,#0x67
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       mbByteToPack
;;;30     		mbBufferToPack(0,qu.aqu[qu.head].qbuf,qu.aqu[qu.head].qlen);
000036  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
00003a  eb0001c0          ADD      r1,r0,r0,LSL #3
00003e  ebc11080          RSB      r0,r1,r0,LSL #6
000042  eb040140          ADD      r1,r4,r0,LSL #1
000046  2000              MOVS     r0,#0
000048  f8b12066          LDRH     r2,[r1,#0x66]
00004c  3134              ADDS     r1,r1,#0x34
00004e  f7fffffe          BL       mbBufferToPack
;;;31     		mbSendPack(0);
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       mbSendPack
                  |L1.88|
;;;32     	}
;;;33     
;;;34     	if ((*(qu.aqu[qu.head].qbuf+1)&0x80)==0x80) {
000058  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
;;;35     		EAddr = *(qu.aqu[qu.head].qbuf);
;;;36     		ECmd = *(qu.aqu[qu.head].qbuf+1);
;;;37     		ECode = *(qu.aqu[qu.head].qbuf+2);
;;;38     		// регистрация в зависимости от состояния настроечных регистров
;;;39     		if (*pAECmdDump) {
;;;40     			Msg("CmdErr ");
;;;41     			Dump(qu.aqu[qu.head].buf,qu.aqu[qu.head].len);
;;;42     			Msg("\r\n");
;;;43     		}
;;;44     		if (*pAEMsg) {
;;;45     			Msg("Answer Error. Addr %2X, Cmd  %2X, Code %2X.\r\n",EAddr,ECmd,ECode);
;;;46     		}
;;;47     		if (*pAEAnswDump) {
;;;48     			Msg("AnswErr ");
;;;49     			Dump(qu.aqu[qu.head].qbuf,qu.aqu[qu.head].qlen);
;;;50     			Msg("\r\n");
;;;51     		}
;;;52     		if (EAddr == (*pAddrKPCtrl)) {
;;;53     			if (*pKP_NA_Max) {
;;;54     				if ((*pKP_NA_Max) < KP_NA_Count) {
00005c  4de4              LDR      r5,|L1.1008|
00005e  eb0001c0          ADD      r1,r0,r0,LSL #3       ;34
000062  ebc11080          RSB      r0,r1,r0,LSL #6       ;34
000066  eb040140          ADD      r1,r4,r0,LSL #1       ;34
00006a  4ee2              LDR      r6,|L1.1012|
00006c  f8910035          LDRB     r0,[r1,#0x35]         ;34
000070  0602              LSLS     r2,r0,#24             ;34
000072  d557              BPL      |L1.292|
000074  4fe0              LDR      r7,|L1.1016|
000076  f8112f34          LDRB     r2,[r1,#0x34]!        ;35
00007a  703a              STRB     r2,[r7,#0]            ;35
00007c  7078              STRB     r0,[r7,#1]            ;36
00007e  7888              LDRB     r0,[r1,#2]            ;37
000080  70b8              STRB     r0,[r7,#2]            ;37
000082  48de              LDR      r0,|L1.1020|
000084  6800              LDR      r0,[r0,#0]            ;39  ; pAECmdDump
000086  7800              LDRB     r0,[r0,#0]            ;39
000088  b180              CBZ      r0,|L1.172|
00008a  a0dd              ADR      r0,|L1.1024|
00008c  f7fffffe          BL       Msg
000090  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;41  ; qu
000094  eb0001c0          ADD      r1,r0,r0,LSL #3       ;41
000098  ebc11080          RSB      r0,r1,r0,LSL #6       ;41
00009c  eb040040          ADD      r0,r4,r0,LSL #1       ;41
0000a0  8e41              LDRH     r1,[r0,#0x32]         ;41
0000a2  f7fffffe          BL       Dump
0000a6  a0d8              ADR      r0,|L1.1032|
0000a8  f7fffffe          BL       Msg
                  |L1.172|
0000ac  48d7              LDR      r0,|L1.1036|
0000ae  6800              LDR      r0,[r0,#0]            ;44  ; pAEMsg
0000b0  7800              LDRB     r0,[r0,#0]            ;44
0000b2  b128              CBZ      r0,|L1.192|
0000b4  78bb              LDRB     r3,[r7,#2]            ;45  ; ECode
0000b6  787a              LDRB     r2,[r7,#1]            ;45  ; ECmd
0000b8  7839              LDRB     r1,[r7,#0]            ;45  ; EAddr
0000ba  a0d5              ADR      r0,|L1.1040|
0000bc  f7fffffe          BL       Msg
                  |L1.192|
0000c0  48df              LDR      r0,|L1.1088|
0000c2  6800              LDR      r0,[r0,#0]            ;47  ; pAEAnswDump
0000c4  7800              LDRB     r0,[r0,#0]            ;47
0000c6  b190              CBZ      r0,|L1.238|
0000c8  a0de              ADR      r0,|L1.1092|
0000ca  f7fffffe          BL       Msg
0000ce  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;49  ; qu
0000d2  eb0001c0          ADD      r1,r0,r0,LSL #3       ;49
0000d6  ebc11080          RSB      r0,r1,r0,LSL #6       ;49
0000da  eb040040          ADD      r0,r4,r0,LSL #1       ;49
0000de  f8b01066          LDRH     r1,[r0,#0x66]         ;49
0000e2  3034              ADDS     r0,r0,#0x34           ;49
0000e4  f7fffffe          BL       Dump
0000e8  a0c7              ADR      r0,|L1.1032|
0000ea  f7fffffe          BL       Msg
                  |L1.238|
0000ee  6830              LDR      r0,[r6,#0]            ;52  ; pAddrKPCtrl
0000f0  7839              LDRB     r1,[r7,#0]            ;52  ; EAddr
0000f2  7800              LDRB     r0,[r0,#0]            ;52
0000f4  4288              CMP      r0,r1                 ;52
0000f6  d113              BNE      |L1.288|
0000f8  48d5              LDR      r0,|L1.1104|
0000fa  6800              LDR      r0,[r0,#0]            ;53  ; pKP_NA_Max
0000fc  7801              LDRB     r1,[r0,#0]            ;53
0000fe  2900              CMP      r1,#0                 ;53
000100  d00e              BEQ      |L1.288|
000102  7828              LDRB     r0,[r5,#0]  ; KP_NA_Count
000104  4281              CMP      r1,r0
000106  d209              BCS      |L1.284|
;;;55     					Msg("КР Error. \r\n");
000108  a0d2              ADR      r0,|L1.1108|
00010a  f7fffffe          BL       Msg
;;;56     					// сброс регистров в 0
;;;57     					memset((u8*)pYmove,0,14);
00010e  48d5              LDR      r0,|L1.1124|
000110  210e              MOVS     r1,#0xe
000112  6800              LDR      r0,[r0,#0]  ; pYmove
000114  e8bd41f0          POP      {r4-r8,lr}
000118  f7ffbffe          B.W      __aeabi_memclr
                  |L1.284|
00011c  1c40              ADDS     r0,r0,#1
;;;58     				} else {
;;;59     					KP_NA_Count++;
00011e  7028              STRB     r0,[r5,#0]
                  |L1.288|
;;;60     				}
;;;61     			}
;;;62     		}
;;;63     	} else {
;;;64     		// логирование правильно полученных квитанций
;;;65     		Addr = *(qu.aqu[qu.head].qbuf);
;;;66     		Cmd = *(qu.aqu[qu.head].qbuf+1);
;;;67     		// сброс аварийных счетчиков
;;;68     		if (Addr == (*pAddrKPCtrl)) { KP_NA_Count=0; *pLinkKP = 1;}
;;;69     
;;;70     		if (*pACmdDump) {
;;;71     			Msg("CmdOk ");
;;;72     			Dump(qu.aqu[qu.head].buf,qu.aqu[qu.head].len);
;;;73     			Msg("\r\n");
;;;74     		}
;;;75     		if (*pAMsg) {
;;;76     			Msg("Answer Ok. Addr %2X, Cmd  %2X.\r\n",Addr,Cmd);
;;;77     		}
;;;78     		if (*pAAnswDump) {
;;;79     			Msg("AnswOk ");
;;;80     			Dump(qu.aqu[qu.head].qbuf,qu.aqu[qu.head].qlen);
;;;81     			Msg("\r\n");
;;;82     		}
;;;83     		// проверка адреса
;;;84     		if (*(qu.aqu[qu.head].qbuf) == *pAddrKPCtrl) {
;;;85     			// квитанция пульта
;;;86     			KPAnswer(qu.aqu[qu.head].qbuf,qu.aqu[qu.head].qlen);
;;;87     		} else {
;;;88     				Msg("Unknown device answer (%X).\r\n",*(qu.aqu[qu.head].qbuf));
;;;89     				Dump(qu.aqu[qu.head].qbuf,qu.aqu[qu.head].qlen);
;;;90     		}
;;;91     	}
;;;92     }	
000120  e8bd81f0          POP      {r4-r8,pc}
                  |L1.292|
000124  4680              MOV      r8,r0                 ;66
000126  6830              LDR      r0,[r6,#0]            ;68  ; pAddrKPCtrl
000128  f8917034          LDRB     r7,[r1,#0x34]         ;65
00012c  7800              LDRB     r0,[r0,#0]            ;68
00012e  42b8              CMP      r0,r7                 ;68
000130  d105              BNE      |L1.318|
000132  49cd              LDR      r1,|L1.1128|
000134  2000              MOVS     r0,#0                 ;68
000136  7028              STRB     r0,[r5,#0]            ;68
000138  6809              LDR      r1,[r1,#0]            ;68  ; pLinkKP
00013a  2001              MOVS     r0,#1                 ;68
00013c  7008              STRB     r0,[r1,#0]            ;68
                  |L1.318|
00013e  48cb              LDR      r0,|L1.1132|
000140  6800              LDR      r0,[r0,#0]            ;70  ; pACmdDump
000142  7800              LDRB     r0,[r0,#0]            ;70
000144  b180              CBZ      r0,|L1.360|
000146  a0ca              ADR      r0,|L1.1136|
000148  f7fffffe          BL       Msg
00014c  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;72  ; qu
000150  eb0001c0          ADD      r1,r0,r0,LSL #3       ;72
000154  ebc11080          RSB      r0,r1,r0,LSL #6       ;72
000158  eb040040          ADD      r0,r4,r0,LSL #1       ;72
00015c  8e41              LDRH     r1,[r0,#0x32]         ;72
00015e  f7fffffe          BL       Dump
000162  a0a9              ADR      r0,|L1.1032|
000164  f7fffffe          BL       Msg
                  |L1.360|
000168  48c3              LDR      r0,|L1.1144|
00016a  6800              LDR      r0,[r0,#0]            ;75  ; pAMsg
00016c  7800              LDRB     r0,[r0,#0]            ;75
00016e  b120              CBZ      r0,|L1.378|
000170  4642              MOV      r2,r8                 ;76
000172  4639              MOV      r1,r7                 ;76
000174  a0c1              ADR      r0,|L1.1148|
000176  f7fffffe          BL       Msg
                  |L1.378|
00017a  48c9              LDR      r0,|L1.1184|
00017c  6800              LDR      r0,[r0,#0]            ;78  ; pAAnswDump
00017e  7800              LDRB     r0,[r0,#0]            ;78
000180  b190              CBZ      r0,|L1.424|
000182  a0c8              ADR      r0,|L1.1188|
000184  f7fffffe          BL       Msg
000188  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;80  ; qu
00018c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;80
000190  ebc11080          RSB      r0,r1,r0,LSL #6       ;80
000194  eb040040          ADD      r0,r4,r0,LSL #1       ;80
000198  f8b01066          LDRH     r1,[r0,#0x66]         ;80
00019c  3034              ADDS     r0,r0,#0x34           ;80
00019e  f7fffffe          BL       Dump
0001a2  a099              ADR      r0,|L1.1032|
0001a4  f7fffffe          BL       Msg
                  |L1.424|
0001a8  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;84  ; qu
0001ac  6832              LDR      r2,[r6,#0]            ;84  ; pAddrKPCtrl
0001ae  eb0001c0          ADD      r1,r0,r0,LSL #3       ;84
0001b2  ebc11080          RSB      r0,r1,r0,LSL #6       ;84
0001b6  eb040040          ADD      r0,r4,r0,LSL #1       ;84
0001ba  7812              LDRB     r2,[r2,#0]            ;84
0001bc  f8901034          LDRB     r1,[r0,#0x34]         ;84
0001c0  4291              CMP      r1,r2                 ;84
0001c2  d106              BNE      |L1.466|
0001c4  f8b01066          LDRH     r1,[r0,#0x66]         ;86
0001c8  e8bd41f0          POP      {r4-r8,lr}            ;86
0001cc  3034              ADDS     r0,r0,#0x34           ;86
0001ce  f7ffbffe          B.W      KPAnswer
                  |L1.466|
0001d2  a0b6              ADR      r0,|L1.1196|
0001d4  f7fffffe          BL       Msg
0001d8  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;89  ; qu
0001dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;89
0001e0  ebc11080          RSB      r0,r1,r0,LSL #6       ;89
0001e4  eb040040          ADD      r0,r4,r0,LSL #1       ;89
0001e8  f8b01066          LDRH     r1,[r0,#0x66]         ;89
0001ec  e8bd41f0          POP      {r4-r8,lr}            ;89
0001f0  3034              ADDS     r0,r0,#0x34           ;89
0001f2  f7ffbffe          B.W      Dump
;;;93     
                          ENDP

                  ProcessingNoAnswer PROC
;;;94     void ProcessingNoAnswer(void){
0001f6  b570              PUSH     {r4-r6,lr}
;;;95     // обработка отсутствия квитанции
;;;96     	u8 Addr,Cmd;
;;;97     	//Msg("485 NoAnsw");
;;;98     
;;;99     	Addr = *(qu.aqu[qu.head].buf);
0001f8  4c7c              LDR      r4,|L1.1004|
0001fa  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
0001fe  eb0001c0          ADD      r1,r0,r0,LSL #3
000202  ebc11080          RSB      r0,r1,r0,LSL #6
000206  f8145010          LDRB     r5,[r4,r0,LSL #1]
;;;100    	Cmd = *(qu.aqu[qu.head].buf+1);
00020a  eb040040          ADD      r0,r4,r0,LSL #1
00020e  7846              LDRB     r6,[r0,#1]
;;;101    	
;;;102    	if (*pANCmdDump) {
000210  48ae              LDR      r0,|L1.1228|
000212  6800              LDR      r0,[r0,#0]  ; pANCmdDump
000214  7800              LDRB     r0,[r0,#0]
000216  b180              CBZ      r0,|L1.570|
;;;103    		Msg("CmdNA ");
000218  a0ad              ADR      r0,|L1.1232|
00021a  f7fffffe          BL       Msg
;;;104    		Dump(qu.aqu[qu.head].buf,qu.aqu[qu.head].len);
00021e  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
000222  eb0001c0          ADD      r1,r0,r0,LSL #3
000226  ebc11080          RSB      r0,r1,r0,LSL #6
00022a  eb040040          ADD      r0,r4,r0,LSL #1
00022e  8e41              LDRH     r1,[r0,#0x32]
000230  f7fffffe          BL       Dump
;;;105    		Msg("\r\n");
000234  a074              ADR      r0,|L1.1032|
000236  f7fffffe          BL       Msg
                  |L1.570|
;;;106    	}
;;;107    	if (*pANMsg) {
00023a  48a7              LDR      r0,|L1.1240|
00023c  6800              LDR      r0,[r0,#0]  ; pANMsg
00023e  7800              LDRB     r0,[r0,#0]
000240  b120              CBZ      r0,|L1.588|
;;;108    		Msg("No Answer. Addr %2X, Cmd  %2X.\r\n",Addr,Cmd);
000242  4632              MOV      r2,r6
000244  4629              MOV      r1,r5
000246  a0a5              ADR      r0,|L1.1244|
000248  f7fffffe          BL       Msg
                  |L1.588|
;;;109    	}
;;;110    	
;;;111    	if (qu.aqu[qu.head].repcount) qu.aqu[qu.head].repcount--;
00024c  f8b40ce4          LDRH     r0,[r4,#0xce4]  ; qu
000250  eb0001c0          ADD      r1,r0,r0,LSL #3
000254  ebc11080          RSB      r0,r1,r0,LSL #6
000258  eb040040          ADD      r0,r4,r0,LSL #1
00025c  f8901068          LDRB     r1,[r0,#0x68]
000260  b111              CBZ      r1,|L1.616|
000262  1e49              SUBS     r1,r1,#1
000264  f8801068          STRB     r1,[r0,#0x68]
                  |L1.616|
;;;112    	if (Addr == (*pAddrKPCtrl)) {
000268  4862              LDR      r0,|L1.1012|
00026a  6800              LDR      r0,[r0,#0]  ; pAddrKPCtrl
00026c  7800              LDRB     r0,[r0,#0]
00026e  42a8              CMP      r0,r5
000270  d116              BNE      |L1.672|
;;;113    		if (*pKP_NA_Max) {
000272  4877              LDR      r0,|L1.1104|
000274  6800              LDR      r0,[r0,#0]  ; pKP_NA_Max
000276  7802              LDRB     r2,[r0,#0]
000278  2a00              CMP      r2,#0
00027a  d011              BEQ      |L1.672|
;;;114    			if ((*pKP_NA_Max) < KP_NA_Count) {
00027c  485c              LDR      r0,|L1.1008|
00027e  7801              LDRB     r1,[r0,#0]  ; KP_NA_Count
000280  428a              CMP      r2,r1
000282  d20b              BCS      |L1.668|
;;;115    //				Msg("КР silent. \r\n");
;;;116    				*pLinkKP = 0;
000284  4a78              LDR      r2,|L1.1128|
000286  2100              MOVS     r1,#0
000288  6812              LDR      r2,[r2,#0]  ; pLinkKP
00028a  7011              STRB     r1,[r2,#0]
;;;117    				KP_NA_Count = 0;
00028c  7001              STRB     r1,[r0,#0]
;;;118    				// сброс регистров в 0
;;;119    				memset((u8*)pYmove,0,14);
00028e  4875              LDR      r0,|L1.1124|
000290  210e              MOVS     r1,#0xe
000292  6800              LDR      r0,[r0,#0]  ; pYmove
000294  e8bd4070          POP      {r4-r6,lr}
000298  f7ffbffe          B.W      __aeabi_memclr
                  |L1.668|
00029c  1c49              ADDS     r1,r1,#1
;;;120    			} else {
;;;121    				KP_NA_Count++;
00029e  7001              STRB     r1,[r0,#0]
                  |L1.672|
;;;122    			}
;;;123    		}
;;;124    	}
;;;125    }
0002a0  bd70              POP      {r4-r6,pc}
;;;126    
                          ENDP

                  DeleteCurrentItem PROC
;;;127    void DeleteCurrentItem(){
0002a2  4852              LDR      r0,|L1.1004|
;;;128    // удаляем запись из очереди
;;;129    	//memset((void*)&(qu.aqu[qu.head]),0,sizeof qu.aqu[qu.head]);
;;;130    	//Msg("del h %d \r\n",qu.head);
;;;131    	qu.head++;	// сдвигаем указатель на следующий элемент
0002a4  f8b01ce4          LDRH     r1,[r0,#0xce4]  ; qu
0002a8  1c49              ADDS     r1,r1,#1
0002aa  b289              UXTH     r1,r1
;;;132    	qu.head %= quMaxItemCount; // закольцовываем список
0002ac  221e              MOVS     r2,#0x1e
0002ae  fbb1f3f2          UDIV     r3,r1,r2
0002b2  fb021113          MLS      r1,r2,r3,r1
0002b6  f8a01ce4          STRH     r1,[r0,#0xce4]
;;;133    	//Msg("h %d \r\n",qu.head);
;;;134    }
0002ba  4770              BX       lr
;;;135    
                          ENDP

                  quPackCount PROC
;;;221    
;;;222    u8 quPackCount(void){
0002bc  484b              LDR      r0,|L1.1004|
;;;223    // количество элементов в очереди
;;;224    	if (qu.head < qu.tail) {
0002be  f8b01ce4          LDRH     r1,[r0,#0xce4]  ; qu
0002c2  f8b02ce6          LDRH     r2,[r0,#0xce6]  ; qu
;;;225    		return (qu.tail-qu.head);
0002c6  1a50              SUBS     r0,r2,r1
0002c8  4291              CMP      r1,r2                 ;224
0002ca  d201              BCS      |L1.720|
                  |L1.716|
0002cc  b2c0              UXTB     r0,r0
;;;226    	} else {
;;;227    		if (qu.head > qu.tail) {
;;;228    			return qu.tail+quMaxItemCount-qu.head;
;;;229    		} else {
;;;230    			//if (qu.head == qu.tail)
;;;231    			return 0;
;;;232    		} 
;;;233    	}
;;;234    }
0002ce  4770              BX       lr
                  |L1.720|
0002d0  d902              BLS      |L1.728|
0002d2  f100001e          ADD      r0,r0,#0x1e           ;227
0002d6  e7f9              B        |L1.716|
                  |L1.728|
0002d8  f04f0000          MOV      r0,#0                 ;231
0002dc  4770              BX       lr
;;;235    
                          ENDP

                  QueueProcessing PROC
;;;136    
;;;137    void QueueProcessing(void){
0002de  e92d41f0          PUSH     {r4-r8,lr}
;;;138    // обработка очереди
;;;139    	if (!EndTI(tiQTest)) return;
0002e2  4d87              LDR      r5,|L1.1280|
0002e4  68a8              LDR      r0,[r5,#8]  ; ti
0002e6  2801              CMP      r0,#1
0002e8  d136              BNE      |L1.856|
;;;140    //	Msg("QP");
;;;141    //	StartTI(tiQTest,tiMsToTick(1000));
;;;142    //	return;
;;;143    	switch (qu.stage) {
0002ea  4c40              LDR      r4,|L1.1004|
0002ec  2600              MOVS     r6,#0
;;;144    		case 0: // готовность к передаче очередного пакета
;;;145    //			Msg("PC %d ",quPackCount());
;;;146    			if (quPackCount()) {
;;;147    				// запускам таймаут
;;;148    				StartTI(tiQueue,tiMsToTick(qu.aqu[qu.head].timeout));
;;;149    				WaitFlag = 0; // сбрасываем флаг ожидания
0002ee  4b85              LDR      r3,|L1.1284|
0002f0  f8940ce8          LDRB     r0,[r4,#0xce8]        ;143  ; qu
;;;150    				// передаем пакет
;;;151    				mbBufferToPack(1,qu.aqu[qu.head].buf,qu.aqu[qu.head].len);
;;;152    				mbSendPack(1);
;;;153    
;;;154    //				// так не должно быть ПРОБА!!!
;;;155    //				// но работает поэтому оставляем
;;;156    				StartTI(tiLensSmdWait,tiMsToTick(10));
;;;157    				while (!EndTI(tiLensSmdWait)) ;
;;;158    //				Msg("s0 to %d len %d ",qu.aqu[qu.head].timeout,qu.aqu[qu.head].len);
;;;159    
;;;160    				// переходим на стадию ожидания квитанции
;;;161    				qu.stage = 1;
;;;162    //				Msg("h %d ",qu.head);
;;;163    				StartTI(tiQTest,tiMsToTick(40));
;;;164    				// отладка 
;;;165    //				StartTI(tiQTest,tiMsToTick(100));
;;;166    			} else {
;;;167    				StartTI(tiQTest,tiMsToTick(5));
0002f4  2765              MOVS     r7,#0x65
0002f6  b150              CBZ      r0,|L1.782|
0002f8  2801              CMP      r0,#1                 ;143
0002fa  d12d              BNE      |L1.856|
;;;168    				// отладка 
;;;169    //				StartTI(tiQTest,tiMsToTick(100));
;;;170    			}
;;;171    			break;
;;;172    		case 1: // ожидание квитанции на переданный пакет
;;;173    			StartTI(tiQTest,tiMsToTick(5));
0002fc  60af              STR      r7,[r5,#8]  ; ti
;;;174    			// отладка 
;;;175    			//StartTI(tiQTest,tiMsToTick(100));
;;;176    			if (WaitFlag) {
0002fe  7818              LDRB     r0,[r3,#0]  ; WaitFlag
000300  b368              CBZ      r0,|L1.862|
;;;177    //				Msg("WF %d\r\n",WaitFlag);
;;;178    				qu.stage = 2;
000302  2002              MOVS     r0,#2
000304  f8840ce8          STRB     r0,[r4,#0xce8]
;;;179    				ProcessingAnswer();
000308  f7fffffe          BL       ProcessingAnswer
;;;180    				// удаляем запись из очереди
;;;181    				DeleteCurrentItem();
;;;182    				// передаем следующий пакет
;;;183    				qu.stage = 0; 
00030c  e037              B        |L1.894|
                  |L1.782|
00030e  f7fffffe          BL       quPackCount
000312  b310              CBZ      r0,|L1.858|
000314  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;148  ; qu
000318  2701              MOVS     r7,#1                 ;148
00031a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;148
00031e  ebc11080          RSB      r0,r1,r0,LSL #6       ;148
000322  eb040140          ADD      r1,r4,r0,LSL #1       ;148
000326  f8b1006a          LDRH     r0,[r1,#0x6a]         ;148
00032a  eb000080          ADD      r0,r0,r0,LSL #2       ;148
00032e  eb070080          ADD      r0,r7,r0,LSL #2       ;148
000332  6268              STR      r0,[r5,#0x24]         ;148  ; ti
000334  701e              STRB     r6,[r3,#0]            ;149
000336  8e4a              LDRH     r2,[r1,#0x32]         ;151
000338  4638              MOV      r0,r7                 ;151
00033a  f7fffffe          BL       mbBufferToPack
00033e  2001              MOVS     r0,#1                 ;152
000340  f7fffffe          BL       mbSendPack
000344  20c9              MOVS     r0,#0xc9              ;156
000346  60e8              STR      r0,[r5,#0xc]          ;156  ; ti
                  |L1.840|
000348  68e8              LDR      r0,[r5,#0xc]          ;157  ; ti
00034a  2801              CMP      r0,#1                 ;157
00034c  d1fc              BNE      |L1.840|
00034e  f8847ce8          STRB     r7,[r4,#0xce8]        ;161
000352  f2403021          MOV      r0,#0x321             ;163
000356  60a8              STR      r0,[r5,#8]            ;163  ; ti
                  |L1.856|
;;;184    			}
;;;185    			else {
;;;186    				if (EndTI(tiQueue)) {
;;;187    					//Msg("rc %d\r\n",qu.aqu[qu.head].repcount);
;;;188    					ProcessingNoAnswer();
;;;189    					// проверяем на истечение повторов
;;;190    					if (qu.aqu[qu.head].repcount==0) {
;;;191    						// удаляем запись из очереди
;;;192    						DeleteCurrentItem();
;;;193    					}
;;;194    					// передаем следующий пакет или текущий, если он не удален
;;;195    					qu.stage = 0; 
;;;196    				}
;;;197    			}
;;;198    			break;
;;;199    /*
;;;200    		case 2: // есть квитанция. обрабатываем
;;;201    			ProcessingAnswer();
;;;202    			// удаляем запись из очереди
;;;203    			DeleteCurrentItem();
;;;204    			// передаем следующий пакет
;;;205    			qu.stage = 0; 
;;;206    			break;
;;;207    		case 3: // нет квитанции. обрабатываем
;;;208    			ProcessingNoAnswer();
;;;209    			// проверяем на истечение повторов
;;;210    			if (qu.aqu[qu.head].repcount==0) {
;;;211    				// удаляем запись из очереди
;;;212    				DeleteCurrentItem();
;;;213    			}
;;;214    			// передаем следующий пакет или текущий, если он не удален
;;;215    			qu.stage = 0; 
;;;216    			break;
;;;217    */
;;;218    	}
;;;219    
;;;220    }
000358  e6e2              B        |L1.288|
                  |L1.858|
00035a  60af              STR      r7,[r5,#8]            ;167  ; ti
00035c  e6e0              B        |L1.288|
                  |L1.862|
00035e  6a68              LDR      r0,[r5,#0x24]         ;186  ; ti
000360  2801              CMP      r0,#1                 ;186
000362  d1f9              BNE      |L1.856|
000364  f7fffffe          BL       ProcessingNoAnswer
000368  f8b40ce4          LDRH     r0,[r4,#0xce4]        ;190  ; qu
00036c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;190
000370  ebc11080          RSB      r0,r1,r0,LSL #6       ;190
000374  eb040040          ADD      r0,r4,r0,LSL #1       ;190
000378  f8900068          LDRB     r0,[r0,#0x68]         ;190
00037c  b908              CBNZ     r0,|L1.898|
                  |L1.894|
00037e  f7fffffe          BL       DeleteCurrentItem
                  |L1.898|
000382  f8846ce8          STRB     r6,[r4,#0xce8]        ;195
000386  e6cb              B        |L1.288|
;;;221    
                          ENDP

                  quAddPack PROC
;;;235    
;;;236    s8	quAddPack(u8 * buffer,u16 len,u8 transit){
000388  e92d41f0          PUSH     {r4-r8,lr}
00038c  4690              MOV      r8,r2
00038e  460e              MOV      r6,r1
000390  4607              MOV      r7,r0
;;;237    // добавление пакета в очередь
;;;238    	u16 i;
;;;239    	// проверить есть ли место в очереди
;;;240    	// Msg("%d \r\n",quPackCount());
;;;241    	if (quPackCount() < (quMaxItemCount-1)) {
000392  f7fffffe          BL       quPackCount
000396  281d              CMP      r0,#0x1d
000398  d227              BCS      |L1.1002|
;;;242    		i = qu.tail; // чтобы не таскать qu.tail
00039a  4d14              LDR      r5,|L1.1004|
;;;243    		//Dump(buffer,len);
;;;244    		memcpy(qu.aqu[i].buf,buffer,len);
00039c  4632              MOV      r2,r6
00039e  f8b50ce6          LDRH     r0,[r5,#0xce6]        ;242  ; qu
0003a2  eb0001c0          ADD      r1,r0,r0,LSL #3
0003a6  ebc11080          RSB      r0,r1,r0,LSL #6
0003aa  eb050440          ADD      r4,r5,r0,LSL #1
0003ae  4639              MOV      r1,r7
0003b0  4620              MOV      r0,r4
0003b2  f7fffffe          BL       __aeabi_memcpy
;;;245    		qu.aqu[i].len = len;
;;;246    		qu.aqu[i].repcount = *pQURepCount;
0003b6  4854              LDR      r0,|L1.1288|
0003b8  8666              STRH     r6,[r4,#0x32]         ;245
;;;247    		qu.aqu[i].timeout = *pQUTimeout;
;;;248    		qu.aqu[i].transit = transit;
;;;249    		//Msg("ap %d %d\r\n",i,qu.aqu[i].buf[0]);
;;;250    		qu.tail++;	// сдвигаем указатель на следующий свободный элемент
;;;251    		qu.tail %= quMaxItemCount; // закольцовываем список
0003ba  211e              MOVS     r1,#0x1e
0003bc  6800              LDR      r0,[r0,#0]            ;246  ; pQURepCount
0003be  7800              LDRB     r0,[r0,#0]            ;246
0003c0  f8840068          STRB     r0,[r4,#0x68]         ;246
0003c4  4851              LDR      r0,|L1.1292|
0003c6  6800              LDR      r0,[r0,#0]            ;247  ; pQUTimeout
0003c8  8800              LDRH     r0,[r0,#0]            ;247
0003ca  f8a4006a          STRH     r0,[r4,#0x6a]         ;247
0003ce  f884806c          STRB     r8,[r4,#0x6c]         ;248
0003d2  f8b50ce6          LDRH     r0,[r5,#0xce6]        ;250  ; qu
0003d6  1c40              ADDS     r0,r0,#1              ;250
0003d8  b280              UXTH     r0,r0                 ;250
0003da  fbb0f2f1          UDIV     r2,r0,r1
0003de  fb010012          MLS      r0,r1,r2,r0
0003e2  f8a50ce6          STRH     r0,[r5,#0xce6]
;;;252    		//Msg("t %d\r\n",qu.tail);
;;;253    		return 0;
0003e6  2000              MOVS     r0,#0
;;;254    	} else {
;;;255    		// нет места
;;;256    		Msg("dp %d\r\n",*buffer);
;;;257    		if (*pDropCmd) {
;;;258    			Msg("Drop Cmd ");
;;;259    			Dump(buffer,len);
;;;260    			Msg("\r\n");
;;;261    		}
;;;262    		return -1;
;;;263    	}
;;;264    }
0003e8  e69a              B        |L1.288|
                  |L1.1002|
0003ea  e091              B        |L1.1296|
                  |L1.1004|
                          DCD      ||.bss||
                  |L1.1008|
                          DCD      KP_NA_Count
                  |L1.1012|
                          DCD      pAddrKPCtrl
                  |L1.1016|
                          DCD      ||.data||
                  |L1.1020|
                          DCD      pAECmdDump
                  |L1.1024|
000400  436d6445          DCB      "CmdErr ",0
000404  72722000
                  |L1.1032|
000408  0d0a00            DCB      "\r\n",0
00040b  00                DCB      0
                  |L1.1036|
                          DCD      pAEMsg
                  |L1.1040|
000410  416e7377          DCB      "Answer Error. Addr %2X, Cmd  %2X, Code %2X.\r\n",0
000414  65722045
000418  72726f72
00041c  2e204164
000420  64722025
000424  32582c20
000428  436d6420
00042c  20253258
000430  2c20436f
000434  64652025
000438  32582e0d
00043c  0a00    
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
                          DCD      pAEAnswDump
                  |L1.1092|
000444  416e7377          DCB      "AnswErr ",0
000448  45727220
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L1.1104|
                          DCD      pKP_NA_Max
                  |L1.1108|
000454  cad02045          DCB      202,208," Error. \r\n",0
000458  72726f72
00045c  2e200d0a
000460  00      
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L1.1124|
                          DCD      pYmove
                  |L1.1128|
                          DCD      pLinkKP
                  |L1.1132|
                          DCD      pACmdDump
                  |L1.1136|
000470  436d644f          DCB      "CmdOk ",0
000474  6b2000  
000477  00                DCB      0
                  |L1.1144|
                          DCD      pAMsg
                  |L1.1148|
00047c  416e7377          DCB      "Answer Ok. Addr %2X, Cmd  %2X.\r\n",0
000480  6572204f
000484  6b2e2041
000488  64647220
00048c  2532582c
000490  20436d64
000494  20202532
000498  582e0d0a
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L1.1184|
                          DCD      pAAnswDump
                  |L1.1188|
0004a4  416e7377          DCB      "AnswOk ",0
0004a8  4f6b2000
                  |L1.1196|
0004ac  556e6b6e          DCB      "Unknown device answer (%X).\r\n",0
0004b0  6f776e20
0004b4  64657669
0004b8  63652061
0004bc  6e737765
0004c0  72202825
0004c4  58292e0d
0004c8  0a00    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
                          DCD      pANCmdDump
                  |L1.1232|
0004d0  436d644e          DCB      "CmdNA ",0
0004d4  412000  
0004d7  00                DCB      0
                  |L1.1240|
                          DCD      pANMsg
                  |L1.1244|
0004dc  4e6f2041          DCB      "No Answer. Addr %2X, Cmd  %2X.\r\n",0
0004e0  6e737765
0004e4  722e2041
0004e8  64647220
0004ec  2532582c
0004f0  20436d64
0004f4  20202532
0004f8  582e0d0a
0004fc  00      
0004fd  00                DCB      0
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L1.1280|
                          DCD      ||ti||
                  |L1.1284|
                          DCD      WaitFlag
                  |L1.1288|
                          DCD      pQURepCount
                  |L1.1292|
                          DCD      pQUTimeout
                  |L1.1296|
000510  7839              LDRB     r1,[r7,#0]            ;256
000512  a032              ADR      r0,|L1.1500|
000514  f7fffffe          BL       Msg
000518  4832              LDR      r0,|L1.1508|
00051a  6800              LDR      r0,[r0,#0]            ;257  ; pDropCmd
00051c  7800              LDRB     r0,[r0,#0]            ;257
00051e  b150              CBZ      r0,|L1.1334|
000520  a031              ADR      r0,|L1.1512|
000522  f7fffffe          BL       Msg
000526  4631              MOV      r1,r6                 ;259
000528  4638              MOV      r0,r7                 ;259
00052a  f7fffffe          BL       Dump
00052e  f2af1028          ADR      r0,|L1.1032|
000532  f7fffffe          BL       Msg
                  |L1.1334|
000536  f04f30ff          MOV      r0,#0xffffffff        ;262
00053a  e5f1              B        |L1.288|
;;;265    
                          ENDP

                  quInsPack PROC
;;;266    s8	quInsPack(u8 * buffer,u16 len,u8 transit,u8 ofs){
00053c  e92d41f0          PUSH     {r4-r8,lr}
000540  4616              MOV      r6,r2
000542  460d              MOV      r5,r1
000544  4607              MOV      r7,r0
000546  b153              CBZ      r3,|L1.1374|
;;;267    // вставка пакета в очередь
;;;268    	u16 i;
;;;269    	if (ofs < 1) return -1;
;;;270    	// проверить есть ли место в очереди
;;;271    	// Msg("%d \r\n",quPackCount());
;;;272    	if (quPackCount() < ofs+1) {
000548  f7fffffe          BL       quPackCount
00054c  1c59              ADDS     r1,r3,#1
00054e  4288              CMP      r0,r1
000550  d208              BCS      |L1.1380|
;;;273    		// очередь пуста
;;;274    		// просто добавляем пакет
;;;275    		return quAddPack(buffer,len,transit);
000552  4632              MOV      r2,r6
000554  4629              MOV      r1,r5
000556  4638              MOV      r0,r7
000558  e8bd41f0          POP      {r4-r8,lr}
00055c  e7fe              B        quAddPack
                  |L1.1374|
00055e  f04f30ff          MOV      r0,#0xffffffff        ;269
;;;276    	}
;;;277    	// очередь не пуста
;;;278    	// заменяем первый не обработанный пакет очереди на наш
;;;279    	i = (qu.head+ofs) % quMaxItemCount; 
;;;280    	//Dump(buffer,len);
;;;281    	memcpy(qu.aqu[i].buf,buffer,len);
;;;282    	qu.aqu[i].len = len;
;;;283    	qu.aqu[i].repcount = *pQURepCount;
;;;284    	qu.aqu[i].timeout = *pQUTimeout;
;;;285    	qu.aqu[i].transit = transit;
;;;286    	return 0;
;;;287    }
000562  e5dd              B        |L1.288|
                  |L1.1380|
000564  4823              LDR      r0,|L1.1524|
000566  221e              MOVS     r2,#0x1e              ;279
000568  f8b01ce4          LDRH     r1,[r0,#0xce4]        ;279  ; qu
00056c  4419              ADD      r1,r1,r3              ;279
00056e  fbb1f3f2          UDIV     r3,r1,r2              ;279
000572  fb021113          MLS      r1,r2,r3,r1           ;279
000576  eb0102c1          ADD      r2,r1,r1,LSL #3       ;281
00057a  ebc21181          RSB      r1,r2,r1,LSL #6       ;281
00057e  eb000441          ADD      r4,r0,r1,LSL #1       ;281
000582  462a              MOV      r2,r5                 ;281
000584  4639              MOV      r1,r7                 ;281
000586  4620              MOV      r0,r4                 ;281
000588  f7fffffe          BL       __aeabi_memcpy
00058c  481a              LDR      r0,|L1.1528|
00058e  8665              STRH     r5,[r4,#0x32]         ;282
000590  6800              LDR      r0,[r0,#0]            ;283  ; pQURepCount
000592  7800              LDRB     r0,[r0,#0]            ;283
000594  f8840068          STRB     r0,[r4,#0x68]         ;283
000598  4818              LDR      r0,|L1.1532|
00059a  6800              LDR      r0,[r0,#0]            ;284  ; pQUTimeout
00059c  8800              LDRH     r0,[r0,#0]            ;284
00059e  f8a4006a          STRH     r0,[r4,#0x6a]         ;284
0005a2  f884606c          STRB     r6,[r4,#0x6c]         ;285
0005a6  2000              MOVS     r0,#0                 ;286
0005a8  e5ba              B        |L1.288|
;;;288    
                          ENDP

                  quFixAnswer PROC
;;;289    void quFixAnswer(u8 * buffer,u16 len){
0005aa  b570              PUSH     {r4-r6,lr}
0005ac  460c              MOV      r4,r1
0005ae  4603              MOV      r3,r0
;;;290    	u16 i;
;;;291    	if (quPackCount() > 0) {
0005b0  f7fffffe          BL       quPackCount
0005b4  2800              CMP      r0,#0
0005b6  d010              BEQ      |L1.1498|
;;;292    		i = qu.head; // чтобы не таскать qu.head
0005b8  480e              LDR      r0,|L1.1524|
0005ba  f8b01ce4          LDRH     r1,[r0,#0xce4]  ; qu
;;;293    		memcpy(qu.aqu[i].qbuf,buffer,len);
0005be  eb0102c1          ADD      r2,r1,r1,LSL #3
0005c2  ebc21181          RSB      r1,r2,r1,LSL #6
0005c6  eb000541          ADD      r5,r0,r1,LSL #1
0005ca  f1050034          ADD      r0,r5,#0x34
0005ce  4622              MOV      r2,r4
0005d0  4619              MOV      r1,r3
0005d2  f7fffffe          BL       __aeabi_memcpy
;;;294    		qu.aqu[i].qlen = len;
0005d6  f8a54066          STRH     r4,[r5,#0x66]
                  |L1.1498|
;;;295    	}
;;;296    }
0005da  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP

                  |L1.1500|
0005dc  64702025          DCB      "dp %d\r\n",0
0005e0  640d0a00
                  |L1.1508|
                          DCD      pDropCmd
                  |L1.1512|
0005e8  44726f70          DCB      "Drop Cmd ",0
0005ec  20436d64
0005f0  2000    
0005f2  00                DCB      0
0005f3  00                DCB      0
                  |L1.1524|
                          DCD      ||.bss||
                  |L1.1528|
                          DCD      pQURepCount
                  |L1.1532|
                          DCD      pQUTimeout

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ||qu||
                          %        3306

                          AREA ||.data||, DATA, ALIGN=0

                  EAddr
000000  00                DCB      0x00
                  ECmd
000001  00                DCB      0x00
                  ECode
000002  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Main\\queue.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_queue_c_EAddr____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___7_queue_c_EAddr____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_queue_c_EAddr____REVSH|
#line 462
|__asm___7_queue_c_EAddr____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_queue_c_EAddr____RRX|
#line 649
|__asm___7_queue_c_EAddr____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

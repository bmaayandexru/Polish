; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\main.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\main.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\main.crf Main\Main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PinsErrorHandler PROC
;;;50     
;;;51     void PinsErrorHandler(TPinError * pe){
000000  4770              BX       lr
;;;52     // обработчик ошибок работы с виртуальными пинами
;;;53     }
;;;54     
                          ENDP

                  Test_Handler PROC
;;;55     void Test_Handler(void) {
000002  4770              BX       lr
;;;56     //	static u8 f=0;
;;;57     //	if (f)	SetPin(OUT20);
;;;58     //	else ClrPin(OUT20);
;;;59     //	f=1-f;
;;;60     //	TCS_SetInterval(tcs_MotorR,tmMsToTick(500));
;;;61     //	TCS_Start(tcs_MotorR);
;;;62     }
;;;63     
                          ENDP

                  OutNextTableLine PROC
;;;64     
;;;65     void	OutNextTableLine(void){
000004  e92d43f0          PUSH     {r4-r9,lr}
;;;66     	u32 ofs;
;;;67     	char 	name[20];	// имя
;;;68     	u8 i;
;;;69     
;;;70     	if (CurVarIndex >= iva) {
000008  4dc4              LDR      r5,|L1.796|
00000a  49c5              LDR      r1,|L1.800|
00000c  b087              SUB      sp,sp,#0x1c           ;65
00000e  6828              LDR      r0,[r5,#0]  ; CurVarIndex
000010  8809              LDRH     r1,[r1,#0]  ; iva
000012  4288              CMP      r0,r1
000014  d305              BCC      |L1.34|
;;;71     		OutAllocTable=0;
000016  49c3              LDR      r1,|L1.804|
000018  2000              MOVS     r0,#0
00001a  7008              STRB     r0,[r1,#0]
                  |L1.28|
;;;72     	} else {
;;;73     		// выводим текущую строку
;;;74     		ofs = (u32)&regs[0];
;;;75     
;;;76     		strcpy(name,va[CurVarIndex].name);
;;;77     
;;;78     		for (i=0;i<strlen(name);i++)
;;;79     		  if (name[i] == '.') name[i] = '_';
;;;80     
;;;81     		// исходная строка
;;;82     		Msg("o%s \t = %5d;// %5d, %1d, %8X",name,(u32)(va[CurVarIndex].p)-ofs,va[CurVarIndex].len,va[CurVarIndex].attr,va[CurVarIndex].handle);				
;;;83     
;;;84     //		Msg("%d, o%s \t = ; ",CurVarIndex,name);				
;;;85     //		Msg("1");	
;;;86     		CurVarIndex++;
;;;87     	}
;;;88     }
00001c  b007              ADD      sp,sp,#0x1c
00001e  e8bd83f0          POP      {r4-r9,pc}
                  |L1.34|
000022  4fc2              LDR      r7,|L1.812|
000024  eb0000c0          ADD      r0,r0,r0,LSL #3       ;76
000028  eb070180          ADD      r1,r7,r0,LSL #2       ;76
00002c  4ebe              LDR      r6,|L1.808|
00002e  a802              ADD      r0,sp,#8              ;76
000030  f7fffffe          BL       strcpy
000034  2400              MOVS     r4,#0                 ;78
000036  f10d0808          ADD      r8,sp,#8              ;67
00003a  f04f095f          MOV      r9,#0x5f              ;79
00003e  e007              B        |L1.80|
                  |L1.64|
000040  f8181004          LDRB     r1,[r8,r4]            ;79
000044  292e              CMP      r1,#0x2e              ;79
000046  d101              BNE      |L1.76|
000048  f8089004          STRB     r9,[r8,r4]            ;79
                  |L1.76|
00004c  1c64              ADDS     r4,r4,#1              ;79
00004e  b2e4              UXTB     r4,r4                 ;78
                  |L1.80|
000050  a802              ADD      r0,sp,#8              ;78
000052  f7fffffe          BL       strlen
000056  42a0              CMP      r0,r4                 ;78
000058  d8f2              BHI      |L1.64|
00005a  6828              LDR      r0,[r5,#0]            ;82  ; CurVarIndex
00005c  eb0000c0          ADD      r0,r0,r0,LSL #3       ;82
000060  eb070080          ADD      r0,r7,r0,LSL #2       ;82
000064  e9d01207          LDRD     r1,r2,[r0,#0x1c]      ;82
000068  e9cd1200          STRD     r1,r2,[sp,#0]         ;82
00006c  8b03              LDRH     r3,[r0,#0x18]         ;82
00006e  6940              LDR      r0,[r0,#0x14]         ;82
000070  a902              ADD      r1,sp,#8              ;82
000072  1b82              SUBS     r2,r0,r6              ;82
000074  a0ae              ADR      r0,|L1.816|
000076  f7fffffe          BL       Msg
00007a  6828              LDR      r0,[r5,#0]            ;86  ; CurVarIndex
00007c  1c40              ADDS     r0,r0,#1              ;86
00007e  6028              STR      r0,[r5,#0]            ;86  ; CurVarIndex
000080  e7cc              B        |L1.28|
;;;89     
                          ENDP

                  SysTick_Handler PROC
;;;90     void SysTick_Handler (void) {
000082  4770              BX       lr
;;;91     // SysTick_Handler запущен с интервалом 1000 мкс
;;;92     //	UART1_Thread();
;;;93     }
;;;94     
                          ENDP

                  NMI_Handler PROC
;;;95     void NMI_Handler(void) 				{} //; NMI Handler
000084  4770              BX       lr
;;;96     void HardFault_Handler(void) 	{} //; Hard Fault Handler
                          ENDP

                  HardFault_Handler PROC
000086  4770              BX       lr
;;;97     void MemManage_Handler(void) 	{} //; MPU Fault Handler
                          ENDP

                  MemManage_Handler PROC
000088  4770              BX       lr
;;;98     void BusFault_Handler(void) 	{
                          ENDP

                  BusFault_Handler PROC
00008a  4770              BX       lr
;;;99     //LPC_GPIO1->FIOSET = 1;
;;;100    } //; Bus Fault Handler
;;;101    void UsageFault_Handler(void) {} //; Usage Fault Handler
                          ENDP

                  UsageFault_Handler PROC
00008c  4770              BX       lr
;;;102    void SVC_Handler (void) 			{} //; SVCall Handler
                          ENDP

                  SVC_Handler PROC
00008e  4770              BX       lr
;;;103    void DebugMon_Handler (void) 	{} //; Debug Monitor Handler
                          ENDP

                  DebugMon_Handler PROC
000090  4770              BX       lr
;;;104    void PendSV_Handler(void) 		{} //; PendSV Handler
                          ENDP

                  PendSV_Handler PROC
000092  4770              BX       lr
;;;105    
                          ENDP

                  lpc1768_mpu_config PROC
;;;850    
;;;851    void lpc1768_mpu_config(void)
000094  4aae              LDR      r2,|L1.848|
;;;852    {
000096  b510              PUSH     {r4,lr}
;;;853       /* Disable MPU */
;;;854       MPU->CTRL = 0;
000098  2000              MOVS     r0,#0
00009a  6010              STR      r0,[r2,#0]
;;;855       /* Configure region 0 to cover 512KB Flash (Normal, Non-Shared, Executable, Read-only) */
;;;856       MPU->RBAR = 0x00000000 | REGION_Valid | 0;
00009c  48ac              LDR      r0,|L1.848|
00009e  2110              MOVS     r1,#0x10
0000a0  3008              ADDS     r0,r0,#8
0000a2  6001              STR      r1,[r0,#0]
;;;857       MPU->RASR = REGION_Enabled |  REGION_512K | RO;
0000a4  1d01              ADDS     r1,r0,#4
0000a6  4bab              LDR      r3,|L1.852|
0000a8  600b              STR      r3,[r1,#0]
;;;858       /* Configure region 1 to cover CPU 32KB SRAM (Normal, Non-Shared, Executable, Full Access) */
;;;859       MPU->RBAR = 0x10000000 | REGION_Valid | 1;
0000aa  4bab              LDR      r3,|L1.856|
0000ac  6003              STR      r3,[r0,#0]
;;;860       MPU->RASR = REGION_Enabled |  REGION_32K | FULL_ACCESS;
0000ae  4bab              LDR      r3,|L1.860|
0000b0  600b              STR      r3,[r1,#0]
;;;861       /* Configure region 2 to cover AHB 32KB SRAM (Normal, Non-Shared, Executable, Full Access) */
;;;862       MPU->RBAR = 0x2007C000 | REGION_Valid | 2;
0000b2  4cab              LDR      r4,|L1.864|
0000b4  6004              STR      r4,[r0,#0]
;;;863       MPU->RASR = REGION_Enabled | REGION_32K | FULL_ACCESS;
0000b6  600b              STR      r3,[r1,#0]
;;;864       /* Configure region 3 to cover 16KB GPIO (Device, Non-Shared, Full Access Device, Full Access) */
;;;865       MPU->RBAR = 0x2009C000 | REGION_Valid | 3;
0000b8  4baa              LDR      r3,|L1.868|
0000ba  6003              STR      r3,[r0,#0]
;;;866       MPU->RASR = REGION_Enabled | REGION_16K | FULL_ACCESS;
0000bc  4ba7              LDR      r3,|L1.860|
0000be  1e9b              SUBS     r3,r3,#2
0000c0  600b              STR      r3,[r1,#0]
;;;867       /* Configure region 4 to cover 512KB APB Peripherials (Device, Non-Shared, Full Access Device, Full Access) */
;;;868       MPU->RBAR = 0x40000000 | REGION_Valid | 4;
0000c2  4ba9              LDR      r3,|L1.872|
0000c4  6003              STR      r3,[r0,#0]
;;;869       MPU->RASR = REGION_Enabled |  REGION_1M | FULL_ACCESS;
0000c6  4ba5              LDR      r3,|L1.860|
0000c8  330a              ADDS     r3,r3,#0xa
0000ca  600b              STR      r3,[r1,#0]
;;;870       /* Configure region 5 to cover 2MB AHB Peripherials (Device, Non-Shared, Full Access Device, Full Access) */
;;;871       MPU->RBAR = 0x50000000 | REGION_Valid | 5;
0000cc  4ca7              LDR      r4,|L1.876|
0000ce  6004              STR      r4,[r0,#0]
;;;872       MPU->RASR = REGION_Enabled |  REGION_2M | FULL_ACCESS;
0000d0  1c9c              ADDS     r4,r3,#2
0000d2  600c              STR      r4,[r1,#0]
;;;873       /* Configure region 6 to cover the 1MB PPB (Privileged, XN, Read-Write) */
;;;874       MPU->RBAR = 0xE0000000 | REGION_Valid | 6;
0000d4  4ca6              LDR      r4,|L1.880|
0000d6  6004              STR      r4,[r0,#0]
;;;875       MPU->RASR = REGION_Enabled | REGION_1M | FULL_ACCESS;
0000d8  600b              STR      r3,[r1,#0]
;;;876       /* Enable MPU */
;;;877    
;;;878       MPU->CTRL = 1;
0000da  2001              MOVS     r0,#1
0000dc  6010              STR      r0,[r2,#0]
;;;879       __ISB();
0000de  f3bf8f6f          ISB      
;;;880      __DSB();
0000e2  f3bf8f4f          DSB      
;;;881    }		
0000e6  bd10              POP      {r4,pc}
;;;882    		
                          ENDP

                  main PROC
;;;883    int main(void)
0000e8  b51c              PUSH     {r2-r4,lr}
0000ea  f7fffffe          BL       SystemInit
0000ee  2500              MOVS     r5,#0
0000f0  2403              MOVS     r4,#3
0000f2  f44f3661          MOV      r6,#0x38400
0000f6  462b              MOV      r3,r5
0000f8  4632              MOV      r2,r6
0000fa  4629              MOV      r1,r5
0000fc  4628              MOV      r0,r5
0000fe  e9cd4500          STRD     r4,r5,[sp,#0]
000102  f7fffffe          BL       UARTx_Init
000106  e9cd4500          STRD     r4,r5,[sp,#0]
00010a  f44f5416          MOV      r4,#0x2580
00010e  2101              MOVS     r1,#1
000110  2300              MOVS     r3,#0
000112  4622              MOV      r2,r4
000114  4608              MOV      r0,r1
000116  f7fffffe          BL       UARTx_Init
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       InitTimer
000120  2001              MOVS     r0,#1
000122  f7fffffe          BL       InitTimer1
000126  f7fffffe          BL       FLASH_Init
00012a  b662              CPSIE    i
;;;884    {
;;;885    	u64 ver;//,test;
;;;886    	s8 res;
;;;887    //	static u32 f,xx;
;;;888    	// инициализация платформы
;;;889    	// универсально для всех проектов !!!!
;;;890    	
;;;891    
;;;892    	InitPlatform();	
;;;893    		
;;;894    	// только фрезер
;;;895    	AllocFrzRegisters();
00012c  f7fffffe          BL       AllocFrzRegisters
;;;896    	InitFrzRegisters();
000130  f7fffffe          BL       InitFrzRegisters
;;;897    	InitFrzTimers();
000134  f7fffffe          BL       InitFrzTimers
;;;898    	InitQExBlks();
000138  f7fffffe          BL       InitQExBlks
;;;899    	
;;;900    	mbSetHandler(0,mbFrzPackHandler0);
00013c  498d              LDR      r1,|L1.884|
00013e  2000              MOVS     r0,#0
000140  f7fffffe          BL       mbSetHandler
;;;901    	mbSetSpeed(0,UART0_SPEED);
000144  4631              MOV      r1,r6
000146  2000              MOVS     r0,#0
000148  f7fffffe          BL       mbSetSpeed
;;;902    	mbSetHandler(1,mbFrzPackHandler1);
00014c  498a              LDR      r1,|L1.888|
00014e  2001              MOVS     r0,#1
000150  f7fffffe          BL       mbSetHandler
;;;903    	mbSetSpeed(1,UART1_SPEED);
000154  4621              MOV      r1,r4
000156  2001              MOVS     r0,#1
000158  f7fffffe          BL       mbSetSpeed
00015c  487c              LDR      r0,|L1.848|
00015e  3888              SUBS     r0,r0,#0x88
000160  6800              LDR      r0,[r0,#0]
000162  f3c02102          UBFX     r1,r0,#8,#3
;;;904    	Msg("PG %d\r\n",NVIC_GetPriorityGrouping());
000166  a085              ADR      r0,|L1.892|
000168  f7fffffe          BL       Msg
;;;905    	res = FS_Init();
00016c  f7fffffe          BL       FS_Init
000170  0001              MOVS     r1,r0
;;;906    	if (res==FS_RESULT_OK) {
000172  d053              BEQ      |L1.540|
;;;907    		Msg("FS Init Ok.\r\n");
;;;908    	   	// загрузка файла регистров
;;;909    #ifndef __NOT_LOAD_PARAMS__		
;;;910    		LoadRegsFromFile();
;;;911    		InitFrzRegsAfterLoad();
;;;912    		// формирование таблицы быстрых пинов
;;;913    		FormQPinTable();
;;;914    		// восстановление из backup-регистров
;;;915    		LoadFrzBackupRegs();
;;;916    #endif		
;;;917    		// коррекция регистров для чтения после загрузки
;;;918    	}
;;;919    	else Msg("FS Init Fault. Err\r\n",res);
000174  a083              ADR      r0,|L1.900|
000176  f7fffffe          BL       Msg
;;;920    	//Msg("sizeof block %d\r\n",sizeof (*eb));
;;;921    	InitPrgStreams();
00017a  bf00              NOP      
                  |L1.380|
00017c  f7fffffe          BL       InitPrgStreams
;;;922    
;;;923    	InitVirtualPins(); // все
000180  f7fffffe          BL       InitVirtualPins
;;;924    
;;;925    	FIInit();
000184  f7fffffe          BL       FIInit
;;;926    	KPInit();
000188  f7fffffe          BL       KPInit
;;;927    // а также вызвать после обхода трех точек
;;;928    	InitZComp();
00018c  f7fffffe          BL       InitZComp
;;;929    	StartTI(tiTest,tiMsToTick(200));  // DebugFrzMoveHandler
000190  4c82              LDR      r4,|L1.924|
000192  f64079a1          MOV      r9,#0xfa1
000196  f8c49004          STR      r9,[r4,#4]  ; ti
;;;930    	StartTI(tiOutAT,tiMsToTick(200)); // все
00019a  f8c49010          STR      r9,[r4,#0x10]  ; ti
;;;931    	StartTI(tiPrgExe,tiMsToTick(200)); // все
00019e  f8c49014          STR      r9,[r4,#0x14]  ; ti
;;;932    	StartTI(tiTest2,tiMsToTick(1000)); // все
0001a2  f6446121          MOV      r1,#0x4e21
0001a6  62a1              STR      r1,[r4,#0x28]  ; ti
;;;933    	StartTI(tiQTest,tiMsToTick(100));
0001a8  f24071d1          MOV      r1,#0x7d1
0001ac  60a1              STR      r1,[r4,#8]  ; ti
;;;934    	StartTI(tiFQTest,tiMsToTick(100));
0001ae  63a1              STR      r1,[r4,#0x38]  ; ti
;;;935    	StartTI(tiFQGetPult,tiMsToTick(500));
0001b0  f2427211          MOV      r2,#0x2711
0001b4  62e2              STR      r2,[r4,#0x2c]  ; ti
;;;936    	StartTI(tiFQGetPress,tiMsToTick(2000));
0001b6  f6494241          MOV      r2,#0x9c41
0001ba  6362              STR      r2,[r4,#0x34]  ; ti
;;;937    	StartTI(tiRecBlock,tiMsToTick(200));
0001bc  f8c49044          STR      r9,[r4,#0x44]  ; ti
;;;938    
;;;939    	StartTI(tiTestTime,tiMsToTick(100));
0001c0  63e1              STR      r1,[r4,#0x3c]  ; ti
;;;940    	StartTI(tiPrgExeNonStop,tiMsToTick(10));
0001c2  20c9              MOVS     r0,#0xc9
0001c4  6420              STR      r0,[r4,#0x40]  ; ti
;;;941    
;;;942    	StartTime(timeXdir);
0001c6  4976              LDR      r1,|L1.928|
0001c8  f04f0801          MOV      r8,#1
0001cc  f8c1800c          STR      r8,[r1,#0xc]  ; time
;;;943    	StartTime(timeXback);
0001d0  f8c18010          STR      r8,[r1,#0x10]  ; time
;;;944    	StartTime(timeYdir);
0001d4  f8c18014          STR      r8,[r1,#0x14]  ; time
;;;945    	StartTime(timeYback);
0001d8  f8c18018          STR      r8,[r1,#0x18]  ; time
;;;946    	StartTime(timeZdir);
0001dc  f8c1801c          STR      r8,[r1,#0x1c]  ; time
;;;947    	StartTime(timeZback);
0001e0  f8c18020          STR      r8,[r1,#0x20]  ; time
;;;948    	
;;;949    	ver = VERSION;
;;;950    //	Msg("Init ok.(%08X) frezer \r\n",ver);
;;;951    	Msg("Init ok.(%08X) frezer 1\r\n",ver);
0001e4  4a6f              LDR      r2,|L1.932|
0001e6  2300              MOVS     r3,#0
0001e8  a06f              ADR      r0,|L1.936|
0001ea  f7fffffe          BL       Msg
0001ee  4e4d              LDR      r6,|L1.804|
;;;952    #ifdef __NOT_LOAD_PARAMS__
;;;953    	Msg("Firmware Not Load regs.bin\r\n");
;;;954    #endif	
;;;955    //LPC_TIM1->MR0 = 5000;
;;;956    //LPC_TIM1->TC = 10;
;;;957     //  while (1) {
;;;958    	// ver = 3000000;
;;;959    	//	ver = sqrt(ver+10);
;;;960    	//	 ver = 4000000;
;;;961    	//	ver = sqrt(ver * ver ); 
;;;962    	//	 if (F == 1) {
;;;963    		 
;;;964    	//			QClrPin(MOTOR_X_DIR);
;;;965    	//		} else {
;;;966    	//			QSetPin(MOTOR_X_DIR);
;;;967    	//		}
;;;968    	//	F = 1-F;	
;;;969    	// }
;;;970    	
;;;971    	while (1) {
;;;972    // ОТКРЫТЬ!!!		
;;;973    			mbFrzUARTs();	  		// все
;;;974    			
;;;975    			OutAllocateTable();	// все
;;;976    			
;;;977    			RunPrgFrz();			// все
;;;978    #ifdef MOVE_D
;;;979    			DebugFrzMoveHandler();	 // все
;;;980    #endif
;;;981    			ButtonsToRegs(); // значения кнопок в регистры
;;;982    	
;;;983    			if (*pPrgRun) {
0001f0  4f74              LDR      r7,|L1.964|
0001f2  f8dfb1d4          LDR      r11,|L1.968|
0001f6  f8dfa1d4          LDR      r10,|L1.972|
0001fa  bf00              NOP      
                  |L1.508|
0001fc  f7fffffe          BL       UART0_Thread
000200  f7fffffe          BL       SMsg
000204  f7fffffe          BL       UART1_Thread
000208  f7fffffe          BL       FormQueue
00020c  f7fffffe          BL       QueueProcessing
000210  7830              LDRB     r0,[r6,#0]  ; OutAllocTable
000212  b198              CBZ      r0,|L1.572|
000214  6920              LDR      r0,[r4,#0x10]  ; ti
000216  2801              CMP      r0,#1
000218  d00c              BEQ      |L1.564|
00021a  e00f              B        |L1.572|
                  |L1.540|
00021c  a06c              ADR      r0,|L1.976|
00021e  f7fffffe          BL       Msg
000222  f7fffffe          BL       LoadRegsFromFile
000226  f7fffffe          BL       InitFrzRegsAfterLoad
00022a  f7fffffe          BL       FormQPinTable
00022e  f7fffffe          BL       LoadFrzBackupRegs
000232  e7a3              B        |L1.380|
                  |L1.564|
000234  f7fffffe          BL       OutNextTableLine
000238  f8c49010          STR      r9,[r4,#0x10]         ;915  ; ti
                  |L1.572|
00023c  f7fffffe          BL       RunPrgFrz
000240  f7fffffe          BL       ButtonsToRegs
000244  6838              LDR      r0,[r7,#0]  ; pPrgRun
000246  7800              LDRB     r0,[r0,#0]
000248  b1b0              CBZ      r0,|L1.632|
00024a  2020              MOVS     r0,#0x20
00024c  f7fffffe          BL       QGetPin
000250  b140              CBZ      r0,|L1.612|
000252  f89b0000          LDRB     r0,[r11,#0]  ; _ZZ13CrushWaterFrzE1f
000256  2800              CMP      r0,#0
000258  d0d0              BEQ      |L1.508|
00025a  f7fffffe          BL       CrushWaterHandlerFrz
00025e  f88b5000          STRB     r5,[r11,#0]
000262  e7cb              B        |L1.508|
                  |L1.612|
000264  f89b1000          LDRB     r1,[r11,#0]  ; _ZZ13CrushWaterFrzE1f
000268  2900              CMP      r1,#0
00026a  d1c7              BNE      |L1.508|
00026c  485c              LDR      r0,|L1.992|
00026e  f88b8000          STRB     r8,[r11,#0]
000272  6800              LDR      r0,[r0,#0]  ; pCrushWater
000274  7005              STRB     r5,[r0,#0]
000276  e7c1              B        |L1.508|
                  |L1.632|
;;;984    				// здесь действия когда запущена программа
;;;985    				// аварийные паузы например
;;;986    				// проверка на отсутствие воды
;;;987    				CrushWaterFrz();
;;;988    			} else {
;;;989    				if (!fmvc.Enable) {
000278  485a              LDR      r0,|L1.996|
00027a  7e00              LDRB     r0,[r0,#0x18]  ; fmvc
00027c  b908              CBNZ     r0,|L1.642|
;;;990    					MoveByRegs();
00027e  f7fffffe          BL       MoveByRegs
                  |L1.642|
000282  4859              LDR      r0,|L1.1000|
000284  6800              LDR      r0,[r0,#0]  ; pByPass
000286  7800              LDRB     r0,[r0,#0]
000288  b188              CBZ      r0,|L1.686|
00028a  f8da0000          LDR      r0,[r10,#0]  ; pBtn5
00028e  8800              LDRH     r0,[r0,#0]
000290  2864              CMP      r0,#0x64
000292  4856              LDR      r0,|L1.1004|
000294  d002              BEQ      |L1.668|
000296  7801              LDRB     r1,[r0,#0]  ; _ZZ9ByPassFrzE2f1
000298  b139              CBZ      r1,|L1.682|
00029a  e008              B        |L1.686|
                  |L1.668|
00029c  7800              LDRB     r0,[r0,#0]  ; _ZZ9ByPassFrzE2f1
00029e  b130              CBZ      r0,|L1.686|
0002a0  f7fffffe          BL       StartMoveZLowSpeed
0002a4  4851              LDR      r0,|L1.1004|
0002a6  7005              STRB     r5,[r0,#0]
0002a8  e001              B        |L1.686|
                  |L1.682|
0002aa  f8808000          STRB     r8,[r0,#0]
                  |L1.686|
;;;991    				}
;;;992    				ByPassFrz();
;;;993    				CheckPointFrz();
0002ae  f7fffffe          BL       CheckPointFrz
0002b2  484f              LDR      r0,|L1.1008|
0002b4  6800              LDR      r0,[r0,#0]  ; pHTCorr
0002b6  7800              LDRB     r0,[r0,#0]
0002b8  b188              CBZ      r0,|L1.734|
0002ba  f8da0000          LDR      r0,[r10,#0]  ; pBtn5
0002be  8800              LDRH     r0,[r0,#0]
0002c0  2864              CMP      r0,#0x64
0002c2  484c              LDR      r0,|L1.1012|
0002c4  d002              BEQ      |L1.716|
0002c6  7801              LDRB     r1,[r0,#0]  ; _ZZ9HTCorrFrzE2f2
0002c8  b139              CBZ      r1,|L1.730|
0002ca  e008              B        |L1.734|
                  |L1.716|
0002cc  7800              LDRB     r0,[r0,#0]  ; _ZZ9HTCorrFrzE2f2
0002ce  b130              CBZ      r0,|L1.734|
0002d0  f7fffffe          BL       StartMoveZLowSpeed
0002d4  4847              LDR      r0,|L1.1012|
0002d6  7005              STRB     r5,[r0,#0]
0002d8  e001              B        |L1.734|
                  |L1.730|
0002da  f8808000          STRB     r8,[r0,#0]
                  |L1.734|
;;;994    				HTCorrFrz();
;;;995    				HTCheckPointFrz();
0002de  f7fffffe          BL       HTCheckPointFrz
0002e2  4845              LDR      r0,|L1.1016|
0002e4  6800              LDR      r0,[r0,#0]  ; pZZeroDat
0002e6  7800              LDRB     r0,[r0,#0]
0002e8  b188              CBZ      r0,|L1.782|
0002ea  f8da0000          LDR      r0,[r10,#0]  ; pBtn5
0002ee  8800              LDRH     r0,[r0,#0]
0002f0  2864              CMP      r0,#0x64
0002f2  4842              LDR      r0,|L1.1020|
0002f4  d002              BEQ      |L1.764|
0002f6  7801              LDRB     r1,[r0,#0]  ; _ZZ11ZZeroDatFrzE2f2
0002f8  b139              CBZ      r1,|L1.778|
0002fa  e008              B        |L1.782|
                  |L1.764|
0002fc  7800              LDRB     r0,[r0,#0]  ; _ZZ11ZZeroDatFrzE2f2
0002fe  b130              CBZ      r0,|L1.782|
000300  f7fffffe          BL       StartMoveZLowSpeed
000304  483d              LDR      r0,|L1.1020|
000306  7005              STRB     r5,[r0,#0]
000308  e001              B        |L1.782|
                  |L1.778|
00030a  f8808000          STRB     r8,[r0,#0]
                  |L1.782|
;;;996    				ZZeroDatFrz();
;;;997    				ZZCheckPointFrz();
00030e  f7fffffe          BL       ZZCheckPointFrz
;;;998    				QGetPin(SENS_SET_POINT);
000312  201b              MOVS     r0,#0x1b
000314  f7fffffe          BL       QGetPin
000318  e770              B        |L1.508|
;;;999    				//ClrFivePoint();
;;;1000   			}
;;;1001   			// проверка работы таймеров
;;;1002   //			if (EndTI(tiTestTime)){
;;;1003   ////				if (T0MR0->dtfix) {
;;;1004   ////					Msg("T0MR0 %d %d\r\n",T0MR0->dtfix,T0MR0->intfix);
;;;1005   ////					T0MR0->dtfix=0;
;;;1006   ////				}	
;;;1007   //				CHECK_DTFIX(T0MR0,0,0);
;;;1008   //				CHECK_DTFIX(T0MR1,0,1);
;;;1009   //				CHECK_DTFIX(T0MR2,0,2);
;;;1010   //				CHECK_DTFIX(T0MR3,0,3);
;;;1011   //				CHECK_DTFIX(T1MR0,1,0);
;;;1012   //				CHECK_DTFIX(T1MR1,1,1);
;;;1013   //				CHECK_DTFIX(T1MR2,1,2);
;;;1014   //				CHECK_DTFIX(T1MR3,1,3);
;;;1015   //				CHECK_DTFIX(T2MR0,2,0);
;;;1016   //				CHECK_DTFIX(T2MR1,2,1);
;;;1017   //				CHECK_DTFIX(T2MR2,2,2);
;;;1018   //				CHECK_DTFIX(T2MR3,2,3);
;;;1019   //				CHECK_DTFIX(T3MR0,3,0);
;;;1020   //				CHECK_DTFIX(T3MR1,3,1);
;;;1021   //				CHECK_DTFIX(T3MR2,3,2);
;;;1022   //				CHECK_DTFIX(T3MR3,3,3);
;;;1023   ////				if (T1T0p) {Msg("T1T0p");T1T0p=0;}
;;;1024   ////				if (U1T0p) {Msg("U1T0p");U1T0p=0;}
;;;1025   ////				if (U0T0p) {Msg("U0T0p");U0T0p=0;}
;;;1026   //				Msg("M\r\n");
;;;1027   //				StartTI(tiTestTime,tiMsToTick(1000));
;;;1028   //			}
;;;1029       }// while (1)
;;;1030   
;;;1031   }
;;;1032   
                          ENDP

00031a  0000              DCW      0x0000
                  |L1.796|
                          DCD      CurVarIndex
                  |L1.800|
                          DCD      iva
                  |L1.804|
                          DCD      OutAllocTable
                  |L1.808|
                          DCD      regs
                  |L1.812|
                          DCD      ||va||
                  |L1.816|
000330  6f257320          DCB      "o%s \t = %5d;// %5d, %1d, %8X",0
000334  09203d20
000338  2535643b
00033c  2f2f2025
000340  35642c20
000344  2531642c
000348  20253858
00034c  00      
00034d  00                DCB      0
00034e  00                DCB      0
00034f  00                DCB      0
                  |L1.848|
                          DCD      0xe000ed94
                  |L1.852|
                          DCD      0x06000025
                  |L1.856|
                          DCD      0x10000011
                  |L1.860|
                          DCD      0x0300001d
                  |L1.864|
                          DCD      0x2007c012
                  |L1.868|
                          DCD      0x2009c013
                  |L1.872|
                          DCD      0x40000014
                  |L1.876|
                          DCD      0x50000015
                  |L1.880|
                          DCD      0xe0000016
                  |L1.884|
                          DCD      mbFrzPackHandler0
                  |L1.888|
                          DCD      mbFrzPackHandler1
                  |L1.892|
00037c  50472025          DCB      "PG %d\r\n",0
000380  640d0a00
                  |L1.900|
000384  46532049          DCB      "FS Init Fault. Err\r\n",0
000388  6e697420
00038c  4661756c
000390  742e2045
000394  72720d0a
000398  00      
000399  00                DCB      0
00039a  00                DCB      0
00039b  00                DCB      0
                  |L1.924|
                          DCD      ||ti||
                  |L1.928|
                          DCD      time
                  |L1.932|
                          DCD      0x01020124
                  |L1.936|
0003a8  496e6974          DCB      "Init ok.(%08X) frezer 1\r\n",0
0003ac  206f6b2e
0003b0  28253038
0003b4  58292066
0003b8  72657a65
0003bc  7220310d
0003c0  0a00    
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L1.964|
                          DCD      pPrgRun
                  |L1.968|
                          DCD      _ZZ13CrushWaterFrzE1f
                  |L1.972|
                          DCD      pBtn5
                  |L1.976|
0003d0  46532049          DCB      "FS Init Ok.\r\n",0
0003d4  6e697420
0003d8  4f6b2e0d
0003dc  0a00    
0003de  00                DCB      0
0003df  00                DCB      0
                  |L1.992|
                          DCD      pCrushWater
                  |L1.996|
                          DCD      fmvc
                  |L1.1000|
                          DCD      pByPass
                  |L1.1004|
                          DCD      _ZZ9ByPassFrzE2f1
                  |L1.1008|
                          DCD      pHTCorr
                  |L1.1012|
                          DCD      _ZZ9HTCorrFrzE2f2
                  |L1.1016|
                          DCD      pZZeroDat
                  |L1.1020|
                          DCD      _ZZ11ZZeroDatFrzE2f2

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||sb||
                          %        232
                  ||si||
                          %        50

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  586d2025          DCB      "Xm %d Ym %d Zm %d fmcE %d\r\n",0
000004  6420596d
000008  20256420
00000c  5a6d2025
000010  6420666d
000014  63452025
000018  640d0a00
00001c  52422564          DCB      "RB%d\r\n",0
000020  0d0a00  
000023  00                DCB      0
000024  58702025          DCB      "Xp %d Yp %d Zp %d\r\n",0
000028  64205970
00002c  20256420
000030  5a702025
000034  640d0a00
000038  52423220          DCB      "RB2 N%d: %s \r\n",0
00003c  4e25643a
000040  20257320
000044  0d0a00  
000047  00                DCB      0
000048  52423220          DCB      "RB2 G%d X %d %d Y %d %d Z %d %d\r\n",0
00004c  47256420
000050  58202564
000054  20256420
000058  59202564
00005c  20256420
000060  5a202564
000064  2025640d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
00006c  47302058          DCB      "G0 X%6.3f Y%6.3f S%.0f\r\n",0
000070  25362e33
000074  66205925
000078  362e3366
00007c  2053252e
000080  30660d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
000088  257300            DCB      "%s",0
00008b  00                DCB      0
00008c  4d33204d          DCB      "M3 M7\r\n",0
000090  370d0a00
000094  4730205a          DCB      "G0 Z160\r\n",0
000098  3136300d
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  47256420          DCB      "G%d Z%6.3f F%.0f\r\n",0
0000a4  5a25362e
0000a8  33662046
0000ac  252e3066
0000b0  0d0a00  
0000b3  00                DCB      0
0000b4  456e6420          DCB      "End RB%d\r\n",0
0000b8  52422564
0000bc  0d0a00  
0000bf  00                DCB      0
0000c0  25730d0a          DCB      "%s\r\n",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
0000c8  4572726f          DCB      "Error Set Point\r\n",0
0000cc  72205365
0000d0  7420506f
0000d4  696e740d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  5a5a6572          DCB      "ZZero Zpos %d dZpos %d\r\n",0
0000e0  6f205a70
0000e4  6f732025
0000e8  6420645a
0000ec  706f7320
0000f0  25640d0a
0000f4  00      

                          AREA ||.data||, DATA, ALIGN=0

                  F
000000  01                DCB      0x01

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  tmpCurCadr
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  Index1
000000  00                DCB      0x00
                  Index2
000001  00                DCB      0x00
                  Save_sGo
000002  0000              DCB      0x00,0x00
                  ||fb||
                          DCD      0x00000000
                  ||pb||
                          DCD      0x00000000
                  Save_Feed
                          DCD      0x00000000
                  Save_Speed
                          DCD      0x00000000

                          AREA ||i.StopPrg||, COMGROUP=StopPrg, CODE, READONLY, ALIGN=2

                  StopPrg PROC
;;;299    
;;;300    __inline void StopPrg(void){
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;301    //	Msg("StopPrg %d",*pPrgRun);
;;;302    	fStopPrg = 0;
000004  492d              LDR      r1,|L20.188|
;;;303    	if (*(mc_X.MovePos)==1) *(mc_X.MovePos) = 2;
000006  4e2e              LDR      r6,|L20.192|
000008  2000              MOVS     r0,#0                 ;302
00000a  7008              STRB     r0,[r1,#0]            ;302
00000c  6a31              LDR      r1,[r6,#0x20]  ; mc_X
00000e  780a              LDRB     r2,[r1,#0]
000010  2102              MOVS     r1,#2
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L20.26|
000016  6a32              LDR      r2,[r6,#0x20]  ; mc_X
000018  7011              STRB     r1,[r2,#0]
                  |L20.26|
;;;304    	if (*(mc_Y.MovePos)==1) *(mc_Y.MovePos) = 2;
00001a  4c2a              LDR      r4,|L20.196|
00001c  6a22              LDR      r2,[r4,#0x20]  ; mc_Y
00001e  7812              LDRB     r2,[r2,#0]
000020  2a01              CMP      r2,#1
000022  d101              BNE      |L20.40|
000024  6a22              LDR      r2,[r4,#0x20]  ; mc_Y
000026  7011              STRB     r1,[r2,#0]
                  |L20.40|
;;;305    	if (*(mc_Z.MovePos)==1) *(mc_Z.MovePos) = 2;
000028  4d27              LDR      r5,|L20.200|
00002a  6a2a              LDR      r2,[r5,#0x20]  ; mc_Z
00002c  7812              LDRB     r2,[r2,#0]
00002e  2a01              CMP      r2,#1
000030  d101              BNE      |L20.54|
000032  6a2a              LDR      r2,[r5,#0x20]  ; mc_Z
000034  7011              STRB     r1,[r2,#0]
                  |L20.54|
;;;306    	if (fmvc.Enable==1) fmvc.Enable = 2;
000036  4f25              LDR      r7,|L20.204|
000038  7e3a              LDRB     r2,[r7,#0x18]  ; fmvc
00003a  2a01              CMP      r2,#1
00003c  d100              BNE      |L20.64|
00003e  7639              STRB     r1,[r7,#0x18]
                  |L20.64|
;;;307    	*(mc_X.FrReq)=*(mc_X.FrMax);
000040  68b2              LDR      r2,[r6,#8]  ; mc_X
000042  6873              LDR      r3,[r6,#4]  ; mc_X
000044  e9d21200          LDRD     r1,r2,[r2,#0]
000048  e9c31200          STRD     r1,r2,[r3,#0]
;;;308    	*(mc_Y.FrReq)=*(mc_Y.FrMax);
00004c  68a1              LDR      r1,[r4,#8]  ; mc_Y
00004e  6863              LDR      r3,[r4,#4]  ; mc_Y
000050  e9d12100          LDRD     r2,r1,[r1,#0]
000054  e9c32100          STRD     r2,r1,[r3,#0]
;;;309    	*(mc_Z.FrReq)=*(mc_Z.FrMax);
000058  68aa              LDR      r2,[r5,#8]  ; mc_Z
00005a  686b              LDR      r3,[r5,#4]  ; mc_Z
00005c  e9d21200          LDRD     r1,r2,[r2,#0]
000060  e9c31200          STRD     r1,r2,[r3,#0]
;;;310    	// сброс регистра корректной остановки
;;;311    	*pCorrStop = 0;
000064  f8df8068          LDR      r8,|L20.208|
;;;312    	BR_pCorrStop = *pCorrStop;
000068  f8df9068          LDR      r9,|L20.212|
00006c  f8d81000          LDR      r1,[r8,#0]            ;311  ; pCorrStop
000070  7008              STRB     r0,[r1,#0]            ;311
000072  f8890070          STRB     r0,[r9,#0x70]
;;;313    	Msg("Xm %d Ym %d Zm %d fmcE %d\r\n",*(mc_X.MovePos),*(mc_Y.MovePos),*(mc_Z.MovePos),fmvc.Enable);
000076  7e38              LDRB     r0,[r7,#0x18]  ; fmvc
000078  9000              STR      r0,[sp,#0]
00007a  6a28              LDR      r0,[r5,#0x20]  ; mc_Z
00007c  7803              LDRB     r3,[r0,#0]
00007e  6a20              LDR      r0,[r4,#0x20]  ; mc_Y
000080  7802              LDRB     r2,[r0,#0]
000082  6a30              LDR      r0,[r6,#0x20]  ; mc_X
000084  7801              LDRB     r1,[r0,#0]
000086  4814              LDR      r0,|L20.216|
000088  f7fffffe          BL       Msg
;;;314    	// если движения не было то восстанавливаем корректную остановку
;;;315    	if ((*(mc_X.MovePos)==0)&&
00008c  6a30              LDR      r0,[r6,#0x20]  ; mc_X
00008e  7800              LDRB     r0,[r0,#0]
000090  2800              CMP      r0,#0
000092  d110              BNE      |L20.182|
;;;316    			(*(mc_Y.MovePos)==0)&&
000094  6a20              LDR      r0,[r4,#0x20]  ; mc_Y
000096  7800              LDRB     r0,[r0,#0]
000098  2800              CMP      r0,#0
00009a  d10c              BNE      |L20.182|
;;;317    			(*(mc_Z.MovePos)==0)&&
00009c  6a28              LDR      r0,[r5,#0x20]  ; mc_Z
00009e  7800              LDRB     r0,[r0,#0]
0000a0  2800              CMP      r0,#0
0000a2  d108              BNE      |L20.182|
;;;318    			(fmvc.Enable==0)) {
0000a4  7e38              LDRB     r0,[r7,#0x18]  ; fmvc
0000a6  2800              CMP      r0,#0
0000a8  d105              BNE      |L20.182|
;;;319    		*pCorrStop = 1;
0000aa  f8d81000          LDR      r1,[r8,#0]  ; pCorrStop
0000ae  2001              MOVS     r0,#1
0000b0  7008              STRB     r0,[r1,#0]
;;;320    		BR_pCorrStop = *pCorrStop;
0000b2  f8890070          STRB     r0,[r9,#0x70]
                  |L20.182|
;;;321    				
;;;322    	}			
;;;323    }
0000b6  e8bd83f8          POP      {r3-r9,pc}
;;;324    __inline void StartPrg(void){
                          ENDP

0000ba  0000              DCW      0x0000
                  |L20.188|
                          DCD      fStopPrg
                  |L20.192|
                          DCD      mc_X
                  |L20.196|
                          DCD      mc_Y
                  |L20.200|
                          DCD      mc_Z
                  |L20.204|
                          DCD      fmvc
                  |L20.208|
                          DCD      pCorrStop
                  |L20.212|
                          DCD      0x40024000
                  |L20.216|
                          DCD      ||.conststring||

                          AREA ||i.RecoverBlock||, COMGROUP=RecoverBlock, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RecoverBlock PROC
;;;344    
;;;345    __inline void RecoverBlock(){
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;346    	switch (*pRecoverBlock) {
000004  f8df8208          LDR      r8,|L27.528|
000008  2600              MOVS     r6,#0
;;;347    		case 1:
;;;348    			// первая стадия восстановления
;;;349    			Msg("RB%d\r\n",*pRecoverBlock);
;;;350    			Msg("Xp %d Yp %d Zp %d\r\n",(*ms_X.Pos),(*ms_Y.Pos),(*ms_Z.Pos));
;;;351    			InitQExBlks();// очистка очереди
;;;352    			InitPrgStreams();
;;;353    			*pNumReadLine = 0;
00000a  4f82              LDR      r7,|L27.532|
00000c  f8d80000          LDR      r0,[r8,#0]            ;346  ; pRecoverBlock
;;;354    			*pRecoverBlock = 2;
;;;355    		break;
;;;356    		case 2:
;;;357    			if (*pNumReadLine < (*pCurCadr-1)) {
;;;358    				// транслируем до предыдущего блока
;;;359    				// чтобы трансляция выполнялась
;;;360    				TranslatePrg();	//*pNumReadLine++
;;;361    				//Msg("rn %d",NumReadLine);
;;;362    				if (qbCount() > 3) qbDelFirst();
;;;363    			} else {
;;;364    				//Msg("RB%d\r\n",*pRecoverBlock);
;;;365    				*pRecoverBlock = 3;
;;;366    				// здесь последний блок наш искомый
;;;367    				// переред которым будут вставленны служебные кманды
;;;368    				fb = qbLastBlock();
;;;369    				// сохраняем статически в sb первый блок очереди
;;;370    				memcpy(&sb,fb,sizeof sb);
000010  4c81              LDR      r4,|L27.536|
000012  4d82              LDR      r5,|L27.540|
000014  7801              LDRB     r1,[r0,#0]            ;346
000016  290a              CMP      r1,#0xa               ;346
000018  d255              BCS      |L27.198|
00001a  e8dff001          TBB      [pc,r1]               ;346
00001e  5405              DCB      0x54,0x05
000020  1c56838b          DCB      0x1c,0x56,0x83,0x8b
000024  a3c7d1df          DCB      0xa3,0xc7,0xd1,0xdf
000028  487d              LDR      r0,|L27.544|
00002a  f7fffffe          BL       Msg
00002e  487d              LDR      r0,|L27.548|
000030  6880              LDR      r0,[r0,#8]            ;350  ; ms_Z
000032  6803              LDR      r3,[r0,#0]            ;350
000034  487c              LDR      r0,|L27.552|
000036  6880              LDR      r0,[r0,#8]            ;350  ; ms_Y
000038  6802              LDR      r2,[r0,#0]            ;350
00003a  487c              LDR      r0,|L27.556|
00003c  6880              LDR      r0,[r0,#8]            ;350  ; ms_X
00003e  6801              LDR      r1,[r0,#0]            ;350
000040  487b              LDR      r0,|L27.560|
000042  f7fffffe          BL       Msg
000046  f7fffffe          BL       InitQExBlks
00004a  f7fffffe          BL       InitPrgStreams
00004e  6838              LDR      r0,[r7,#0]            ;353  ; pNumReadLine
000050  6006              STR      r6,[r0,#0]            ;354
000052  2002              MOVS     r0,#2                 ;354
000054  e0be              B        |L27.468|
000056  6839              LDR      r1,[r7,#0]            ;357  ; pNumReadLine
000058  680a              LDR      r2,[r1,#0]            ;357
00005a  4976              LDR      r1,|L27.564|
00005c  6809              LDR      r1,[r1,#0]            ;357  ; pCurCadr
00005e  6809              LDR      r1,[r1,#0]            ;357
000060  1e49              SUBS     r1,r1,#1              ;357
000062  428a              CMP      r2,r1                 ;357
000064  da09              BGE      |L27.122|
000066  f7fffffe          BL       TranslatePrg
00006a  f7fffffe          BL       qbCount
00006e  2803              CMP      r0,#3                 ;362
000070  d929              BLS      |L27.198|
000072  e8bd47ff          POP      {r0-r10,lr}           ;362
000076  f7ffbffe          B.W      qbDelFirst
                  |L27.122|
00007a  2103              MOVS     r1,#3                 ;365
00007c  7001              STRB     r1,[r0,#0]            ;365
00007e  f7fffffe          BL       qbLastBlock
000082  4601              MOV      r1,r0
000084  6068              STR      r0,[r5,#4]  ; fb
000086  22e8              MOVS     r2,#0xe8
000088  4863              LDR      r0,|L27.536|
00008a  f7fffffe          BL       __aeabi_memcpy4
;;;371    				InitQExBlks();
00008e  f7fffffe          BL       InitQExBlks
;;;372    				// проверка значений ПОТОМ УБРАТЬ!!!!
;;;373    				Save_sGo=sb.sGo;
000092  f8940022          LDRB     r0,[r4,#0x22]  ; sb
000096  70a8              STRB     r0,[r5,#2]
;;;374    				Save_Feed=sb.Feed;
000098  68e0              LDR      r0,[r4,#0xc]  ; sb
;;;375    				Save_Speed=sb.Speed;
00009a  60e8              STR      r0,[r5,#0xc]  ; Save_Feed
00009c  6920              LDR      r0,[r4,#0x10]  ; sb
;;;376    				//Msg("RB2 G%d Xs %d Ys %d Zs %d Xd %d Yd %d Zd %d F %d S%d\r\n",sb.sGo,OUTF1T(sb.Xs),OUTF1T(sb.Ys),OUTF1T(sb.Zs),OUTF1T(sb.Xd),OUTF1T(sb.Yd),OUTF1T(sb.Zd),OUTF1(sb.Feed),OUTF1(sb.Speed));
;;;377    				Msg("RB2 N%d: %s \r\n",sb.NumLine,sb.s);
00009e  6128              STR      r0,[r5,#0x10]  ; Save_Speed
0000a0  4a5d              LDR      r2,|L27.536|
0000a2  4865              LDR      r0,|L27.568|
0000a4  32b4              ADDS     r2,r2,#0xb4
0000a6  6821              LDR      r1,[r4,#0]  ; sb
0000a8  f7fffffe          BL       Msg
0000ac  e9d4131d          LDRD     r1,r3,[r4,#0x74]
0000b0  e9d4021a          LDRD     r0,r2,[r4,#0x68]
0000b4  e88d000f          STM      sp,{r0-r3}
;;;378    				Msg("RB2 G%d X %d %d Y %d %d Z %d %d\r\n",sb.sGo,sb.Xsi,sb.Xdi,sb.Ysi,sb.Ydi,sb.Zsi,sb.Zdi);
0000b8  f8941022          LDRB     r1,[r4,#0x22]  ; sb
0000bc  485f              LDR      r0,|L27.572|
0000be  6f23              LDR      r3,[r4,#0x70]  ; sb
0000c0  6e62              LDR      r2,[r4,#0x64]  ; sb
0000c2  f7fffffe          BL       Msg
                  |L27.198|
;;;379    			}
;;;380    		break;
;;;381    		case 3:
;;;382    			Msg("RB%d\r\n",*pRecoverBlock);
;;;383    			memset(si,0,50);
;;;384    			sprintf(si,"G0 X%6.3f Y%6.3f S%.0f\r\n",sb.Xd,sb.Yd,sb.Speed); 
;;;385    			Msg("%s",si);
;;;386    			TranslatePrgLine(si);
;;;387    			*pRecoverBlock = 4; 
;;;388    		break;
;;;389    		case 4:
;;;390    			Msg("RB%d\r\n",*pRecoverBlock);
;;;391    			TranslatePrgLine("M3 M7\r\n");
;;;392    			*pRecoverBlock = 5; 
;;;393    		break;
;;;394    		case 5:
;;;395    			Msg("RB%d\r\n",*pRecoverBlock);
;;;396    			memset(si,0,50);
;;;397    			sprintf(si,"G0 Z160\r\n");
;;;398    			Msg("%s",si);
;;;399    			TranslatePrgLine(si);
;;;400    			*pRecoverBlock = 6; 
;;;401    		break;
;;;402    		case 6:
;;;403    			Msg("RB%d\r\n",*pRecoverBlock);
;;;404    			memset(si,0,50);
;;;405    			sprintf(si,"G%d Z%6.3f F%.0f\r\n",sb.sGo,sb.Zd,sb.Feed); 
;;;406    			TranslatePrgLine(si);
;;;407    			Msg("%s",si);
;;;408    			*pRecoverBlock = 7; 
;;;409    		break;
;;;410    		case 7:
;;;411    			(*pRCS) = rcsGetBlock;			
;;;412    			Msg("End RB%d\r\n",*pRecoverBlock);
;;;413    //			Msg("h %d t %d\r\n",qbFirstIndex(),qbLastFreeIndex());
;;;414    			// ничего добавлять не нужно !!!
;;;415    			//qbAddBlock(&sb); // добавили исходный блок
;;;416    			*pRecoverBlock = 0; 
;;;417    			//*pRecoverBlock = 8; 
;;;418    		break;
;;;419    		case 8:
;;;420    			Msg("RB%d\r\n",*pRecoverBlock);
;;;421    			Index1 = qbFirstIndex();
;;;422    			Index2 = qbLastFreeIndex();
;;;423    			*pRecoverBlock = 9; 
;;;424    		break;
;;;425    		case 9:
;;;426    			Msg("RB%d\r\n",*pRecoverBlock);
;;;427    		// вывести построчно всю очередь
;;;428    			if (Index1 != Index2) {
;;;429    				pb = qbGetBlockIndex(Index1);
;;;430    				Msg("%s\r\n",(*pb).s);
;;;431    				qbIncIndex(&Index1);
;;;432    			} else {
;;;433    				*pRecoverBlock = 0; 
;;;434    			}
;;;435    			// УБРАТЬ после реализации функций в комментах
;;;436    			// состояний 8 и 9
;;;437    			//*pRecoverBlock = 0; 
;;;438    		break;
;;;439    		case 10:
;;;440    		break;
;;;441    	}
;;;442    }
0000c6  e8bd87ff          POP      {r0-r10,pc}
0000ca  46c1              MOV      r9,r8                 ;382
0000cc  4854              LDR      r0,|L27.544|
0000ce  f7fffffe          BL       Msg
0000d2  4851              LDR      r0,|L27.536|
0000d4  2132              MOVS     r1,#0x32              ;383
0000d6  30e8              ADDS     r0,r0,#0xe8           ;383
0000d8  f7fffffe          BL       __aeabi_memclr4
0000dc  6920              LDR      r0,[r4,#0x10]         ;384  ; sb
0000de  f7fffffe          BL       __aeabi_f2d
0000e2  4607              MOV      r7,r0                 ;384
0000e4  4688              MOV      r8,r1                 ;384
0000e6  6d20              LDR      r0,[r4,#0x50]         ;384  ; sb
0000e8  f7fffffe          BL       __aeabi_f2d
0000ec  4605              MOV      r5,r0                 ;384
0000ee  460e              MOV      r6,r1                 ;384
0000f0  6ce0              LDR      r0,[r4,#0x4c]         ;384  ; sb
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  4602              MOV      r2,r0                 ;384
0000f8  e88d01e0          STM      sp,{r5-r8}            ;384
0000fc  4846              LDR      r0,|L27.536|
0000fe  460b              MOV      r3,r1                 ;384
000100  494f              LDR      r1,|L27.576|
000102  30e8              ADDS     r0,r0,#0xe8           ;384
000104  f7fffffe          BL       __2sprintf
000108  4943              LDR      r1,|L27.536|
00010a  484e              LDR      r0,|L27.580|
00010c  31e8              ADDS     r1,r1,#0xe8           ;385
00010e  f7fffffe          BL       Msg
000112  4841              LDR      r0,|L27.536|
000114  30e8              ADDS     r0,r0,#0xe8           ;386
000116  f7fffffe          BL       TranslatePrgLine
00011a  f8d90000          LDR      r0,[r9,#0]            ;387  ; pRecoverBlock
00011e  2104              MOVS     r1,#4                 ;387
000120  7001              STRB     r1,[r0,#0]            ;387
000122  e7d0              B        |L27.198|
000124  483e              LDR      r0,|L27.544|
000126  f7fffffe          BL       Msg
00012a  4847              LDR      r0,|L27.584|
00012c  f7fffffe          BL       TranslatePrgLine
000130  2005              MOVS     r0,#5                 ;392
000132  e04f              B        |L27.468|
000134  483a              LDR      r0,|L27.544|
000136  f7fffffe          BL       Msg
00013a  4837              LDR      r0,|L27.536|
00013c  2132              MOVS     r1,#0x32              ;396
00013e  30e8              ADDS     r0,r0,#0xe8           ;396
000140  f7fffffe          BL       __aeabi_memclr4
000144  4834              LDR      r0,|L27.536|
000146  4941              LDR      r1,|L27.588|
000148  30e8              ADDS     r0,r0,#0xe8           ;397
00014a  f7fffffe          BL       __2sprintf
00014e  4932              LDR      r1,|L27.536|
000150  483c              LDR      r0,|L27.580|
000152  31e8              ADDS     r1,r1,#0xe8           ;398
000154  f7fffffe          BL       Msg
000158  482f              LDR      r0,|L27.536|
00015a  30e8              ADDS     r0,r0,#0xe8           ;399
00015c  f7fffffe          BL       TranslatePrgLine
000160  2006              MOVS     r0,#6                 ;400
000162  e037              B        |L27.468|
000164  482e              LDR      r0,|L27.544|
000166  f7fffffe          BL       Msg
00016a  482b              LDR      r0,|L27.536|
00016c  2132              MOVS     r1,#0x32              ;404
00016e  30e8              ADDS     r0,r0,#0xe8           ;404
000170  f7fffffe          BL       __aeabi_memclr4
000174  68e0              LDR      r0,[r4,#0xc]          ;405  ; sb
000176  f7fffffe          BL       __aeabi_f2d
00017a  4605              MOV      r5,r0                 ;405
00017c  460e              MOV      r6,r1                 ;405
00017e  6d60              LDR      r0,[r4,#0x54]         ;405  ; sb
000180  f7fffffe          BL       __aeabi_f2d
000184  e88d0063          STM      sp,{r0,r1,r5,r6}      ;405
000188  4823              LDR      r0,|L27.536|
00018a  f8942022          LDRB     r2,[r4,#0x22]         ;405  ; sb
00018e  4930              LDR      r1,|L27.592|
000190  30e8              ADDS     r0,r0,#0xe8           ;405
000192  f7fffffe          BL       __2sprintf
000196  4820              LDR      r0,|L27.536|
000198  30e8              ADDS     r0,r0,#0xe8           ;406
00019a  f7fffffe          BL       TranslatePrgLine
00019e  491e              LDR      r1,|L27.536|
0001a0  4828              LDR      r0,|L27.580|
0001a2  31e8              ADDS     r1,r1,#0xe8           ;407
0001a4  f7fffffe          BL       Msg
0001a8  2007              MOVS     r0,#7                 ;408
0001aa  e013              B        |L27.468|
0001ac  4829              LDR      r0,|L27.596|
0001ae  6800              LDR      r0,[r0,#0]            ;411  ; pRCS
0001b0  7006              STRB     r6,[r0,#0]            ;411
0001b2  f8d80000          LDR      r0,[r8,#0]            ;412  ; pRecoverBlock
0001b6  7801              LDRB     r1,[r0,#0]            ;412
0001b8  4827              LDR      r0,|L27.600|
0001ba  f7fffffe          BL       Msg
0001be  e022              B        |L27.518|
0001c0  4817              LDR      r0,|L27.544|
0001c2  f7fffffe          BL       Msg
0001c6  f7fffffe          BL       qbFirstIndex
0001ca  7028              STRB     r0,[r5,#0]            ;421
0001cc  f7fffffe          BL       qbLastFreeIndex
0001d0  7068              STRB     r0,[r5,#1]            ;422
0001d2  2009              MOVS     r0,#9                 ;423
                  |L27.468|
0001d4  f8d81000          LDR      r1,[r8,#0]            ;423  ; pRecoverBlock
0001d8  7008              STRB     r0,[r1,#0]            ;423
0001da  e774              B        |L27.198|
0001dc  4810              LDR      r0,|L27.544|
0001de  f7fffffe          BL       Msg
0001e2  7828              LDRB     r0,[r5,#0]            ;428  ; Index1
0001e4  7869              LDRB     r1,[r5,#1]            ;428  ; Index2
0001e6  4288              CMP      r0,r1                 ;428
0001e8  d00d              BEQ      |L27.518|
0001ea  f7fffffe          BL       qbGetBlockIndex
0001ee  4601              MOV      r1,r0                 ;429
0001f0  60a8              STR      r0,[r5,#8]            ;430  ; pb
0001f2  481a              LDR      r0,|L27.604|
0001f4  31b4              ADDS     r1,r1,#0xb4           ;430
0001f6  f7fffffe          BL       Msg
0001fa  b004              ADD      sp,sp,#0x10           ;431
0001fc  4807              LDR      r0,|L27.540|
0001fe  e8bd47f0          POP      {r4-r10,lr}           ;431
000202  f7ffbffe          B.W      qbIncIndex
                  |L27.518|
000206  f8d80000          LDR      r0,[r8,#0]            ;433  ; pRecoverBlock
00020a  7006              STRB     r6,[r0,#0]            ;433
00020c  e75b              B        |L27.198|
;;;443    
                          ENDP

00020e  0000              DCW      0x0000
                  |L27.528|
                          DCD      pRecoverBlock
                  |L27.532|
                          DCD      pNumReadLine
                  |L27.536|
                          DCD      ||.bss||
                  |L27.540|
                          DCD      ||area_number.8||
                  |L27.544|
                          DCD      ||.conststring||+0x1c
                  |L27.548|
                          DCD      ms_Z
                  |L27.552|
                          DCD      ms_Y
                  |L27.556|
                          DCD      ms_X
                  |L27.560|
                          DCD      ||.conststring||+0x24
                  |L27.564|
                          DCD      pCurCadr
                  |L27.568|
                          DCD      ||.conststring||+0x38
                  |L27.572|
                          DCD      ||.conststring||+0x48
                  |L27.576|
                          DCD      ||.conststring||+0x6c
                  |L27.580|
                          DCD      ||.conststring||+0x88
                  |L27.584|
                          DCD      ||.conststring||+0x8c
                  |L27.588|
                          DCD      ||.conststring||+0x94
                  |L27.592|
                          DCD      ||.conststring||+0xa0
                  |L27.596|
                          DCD      pRCS
                  |L27.600|
                          DCD      ||.conststring||+0xb4
                  |L27.604|
                          DCD      ||.conststring||+0xc0

                          AREA ||i.RunPrgFrz||, COMGROUP=RunPrgFrz, CODE, READONLY, ALIGN=2

                  RunPrgFrz PROC
;;;443    
;;;444    __inline void RunPrgFrz(void){
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;445    	 // выполнение программы 
;;;446    	 // или восстановление до состояния на момент отключения
;;;447    #ifdef MOVE_D
;;;448    	if (EndTI(tiPrgExe)) {
;;;449    #endif
;;;450    		if (fSaveRegs) { SaveRegs(); fSaveRegs=0;}
000004  4c36              LDR      r4,|L34.224|
000006  2700              MOVS     r7,#0
000008  7820              LDRB     r0,[r4,#0]  ; fSaveRegs
00000a  b110              CBZ      r0,|L34.18|
00000c  f7fffffe          BL       SaveRegs
000010  7027              STRB     r7,[r4,#0]
                  |L34.18|
;;;451    		if (fStopPrg) StopPrg();
000012  4834              LDR      r0,|L34.228|
000014  7800              LDRB     r0,[r0,#0]  ; fStopPrg
000016  b108              CBZ      r0,|L34.28|
000018  f7fffffe          BL       StopPrg
                  |L34.28|
;;;452    		if (fStartPrg) StartPrg();
00001c  4832              LDR      r0,|L34.232|
00001e  4d33              LDR      r5,|L34.236|
000020  4c33              LDR      r4,|L34.240|
000022  7801              LDRB     r1,[r0,#0]  ; fStartPrg
000024  f8df80cc          LDR      r8,|L34.244|
000028  4e33              LDR      r6,|L34.248|
00002a  b1d9              CBZ      r1,|L34.100|
00002c  7007              STRB     r7,[r0,#0]
00002e  68a9              LDR      r1,[r5,#8]  ; mc_X
000030  e9d10100          LDRD     r0,r1,[r1,#0]
000034  686a              LDR      r2,[r5,#4]  ; mc_X
000036  e9c20100          STRD     r0,r1,[r2,#0]
00003a  68a1              LDR      r1,[r4,#8]  ; mc_Y
00003c  e9d10100          LDRD     r0,r1,[r1,#0]
000040  6862              LDR      r2,[r4,#4]  ; mc_Y
000042  e9c20100          STRD     r0,r1,[r2,#0]
000046  f8d82008          LDR      r2,[r8,#8]  ; mc_Z
00004a  f8d80004          LDR      r0,[r8,#4]  ; mc_Z
00004e  e9d21200          LDRD     r1,r2,[r2,#0]
000052  e9c01200          STRD     r1,r2,[r0,#0]
000056  4829              LDR      r0,|L34.252|
000058  6800              LDR      r0,[r0,#0]  ; pCurCadr
00005a  6800              LDR      r0,[r0,#0]
00005c  b1b8              CBZ      r0,|L34.142|
00005e  6831              LDR      r1,[r6,#0]  ; pRecoverBlock
000060  2001              MOVS     r0,#1
000062  7008              STRB     r0,[r1,#0]
                  |L34.100|
;;;453    		if (*pPrgRun) {
000064  4826              LDR      r0,|L34.256|
;;;454    			if (*pRecoverBlock) {
;;;455    				// первая и вторая стадии выполняется с максимальной скоростью
;;;456    //				if 	((*pRecoverBlock==1)||(*pRecoverBlock==2)) RecoverBlock();
;;;457    				// вторая стадия выполняется с максимальной скоростью
;;;458    				if 	(*pRecoverBlock==2) RecoverBlock();
;;;459    				// отстальные с интервалом в 300 мс
;;;460    				else {
;;;461    					if (EndTI(tiRecBlock)) {
;;;462    						RecoverBlock();
;;;463    						StartTI(tiRecBlock,tiMsToTick(300));
;;;464    					}
;;;465    				}
;;;466    			}
;;;467    			else {
;;;468    				TranslatePrg();// трансляция файла в очередь кадров
;;;469    				// замер скорости трансляции
;;;470    //				if (qbCount() > 2) qbDelFirst();
;;;471    //				if (EndTranslate) {
;;;472    //					Msg("End TrTime Msk %d Nl %d\r\n",tiTickToMks(GetTime(timeTrCalc)),NumReadLine);
;;;473    //					*pPrgRun = 0;
;;;474    //					*pPrgPause = 0;
;;;475    //				}
;;;476    				// ОТЛАДКА !!!
;;;477    //				if ((qbCount()>8)||EndTranslate)
;;;478    				// РАБОТА !!!
;;;479    				if ((qbCount()>2)||EndTranslate)
000066  4f27              LDR      r7,|L34.260|
000068  6800              LDR      r0,[r0,#0]            ;453  ; pPrgRun
00006a  7800              LDRB     r0,[r0,#0]            ;453
00006c  b300              CBZ      r0,|L34.176|
00006e  6830              LDR      r0,[r6,#0]            ;454  ; pRecoverBlock
000070  7800              LDRB     r0,[r0,#0]            ;454
000072  b370              CBZ      r0,|L34.210|
000074  2802              CMP      r0,#2                 ;458
000076  d00f              BEQ      |L34.152|
000078  4c23              LDR      r4,|L34.264|
00007a  6c60              LDR      r0,[r4,#0x44]         ;461  ; ti
00007c  2801              CMP      r0,#1                 ;461
00007e  d104              BNE      |L34.138|
000080  f7fffffe          BL       RecoverBlock
000084  f2417071          MOV      r0,#0x1771            ;463
000088  6460              STR      r0,[r4,#0x44]         ;463  ; ti
                  |L34.138|
;;;480    				RunNextCadrFrzMain(); // исполнение текущего кадра
;;;481    				SearchStopPoint(); // поиск точек останова 
;;;482    			}
;;;483    		} else {
;;;484    			// торможение при остановке
;;;485    			if 	((*(mc_X.MovePos) == 2) ||
;;;486    					(*(mc_Y.MovePos) == 2) ||
;;;487    					(*(mc_Z.MovePos) == 2) ||
;;;488    					(fmvc.Enable == 2))
;;;489    			{
;;;490    				TranslatePrg();// трансляция файла в очередь кадров
;;;491    				// РАБОТА !!!
;;;492    				if ((qbCount()>2)||EndTranslate)
;;;493    				RunNextCadrFrzMain(); // исполнение текущего кадра
;;;494    				SearchStopPoint(); // поиск точек останова 
;;;495    			}
;;;496    		}	
;;;497    #ifdef MOVE_D
;;;498    		StartTI(tiPrgExe,tiMsToTick(300));
;;;499    	}
;;;500    #endif
;;;501    }
00008a  e8bd81f0          POP      {r4-r8,pc}
                  |L34.142|
00008e  f7fffffe          BL       InitQExBlks
000092  f7fffffe          BL       InitPrgStreams
000096  e7e5              B        |L34.100|
                  |L34.152|
000098  e8bd41f0          POP      {r4-r8,lr}            ;458
00009c  f7ffbffe          B.W      RecoverBlock
                  |L34.160|
0000a0  7838              LDRB     r0,[r7,#0]            ;479  ; EndTranslate
0000a2  b108              CBZ      r0,|L34.168|
                  |L34.164|
0000a4  f7fffffe          BL       RunNextCadrFrzMain
                  |L34.168|
0000a8  e8bd41f0          POP      {r4-r8,lr}            ;494
0000ac  f7ffbffe          B.W      SearchStopPoint
                  |L34.176|
0000b0  6a28              LDR      r0,[r5,#0x20]         ;485  ; mc_X
0000b2  7800              LDRB     r0,[r0,#0]            ;485
0000b4  2802              CMP      r0,#2                 ;485
0000b6  d00c              BEQ      |L34.210|
0000b8  6a20              LDR      r0,[r4,#0x20]         ;486  ; mc_Y
0000ba  7800              LDRB     r0,[r0,#0]            ;486
0000bc  2802              CMP      r0,#2                 ;486
0000be  d008              BEQ      |L34.210|
0000c0  f8d80020          LDR      r0,[r8,#0x20]         ;487  ; mc_Z
0000c4  7800              LDRB     r0,[r0,#0]            ;487
0000c6  2802              CMP      r0,#2                 ;487
0000c8  d003              BEQ      |L34.210|
0000ca  4810              LDR      r0,|L34.268|
0000cc  7e00              LDRB     r0,[r0,#0x18]         ;488  ; fmvc
0000ce  2802              CMP      r0,#2                 ;488
0000d0  d1db              BNE      |L34.138|
                  |L34.210|
0000d2  f7fffffe          BL       TranslatePrg
0000d6  f7fffffe          BL       qbCount
0000da  2802              CMP      r0,#2                 ;492
0000dc  d8e2              BHI      |L34.164|
0000de  e7df              B        |L34.160|
;;;502    
                          ENDP

                  |L34.224|
                          DCD      fSaveRegs
                  |L34.228|
                          DCD      fStopPrg
                  |L34.232|
                          DCD      fStartPrg
                  |L34.236|
                          DCD      mc_X
                  |L34.240|
                          DCD      mc_Y
                  |L34.244|
                          DCD      mc_Z
                  |L34.248|
                          DCD      pRecoverBlock
                  |L34.252|
                          DCD      pCurCadr
                  |L34.256|
                          DCD      pPrgRun
                  |L34.260|
                          DCD      EndTranslate
                  |L34.264|
                          DCD      ||ti||
                  |L34.268|
                          DCD      fmvc

                          AREA ||i.BtnsMotorYHandler||, COMGROUP=BtnsMotorYHandler, CODE, READONLY, ALIGN=2

                  BtnsMotorYHandler PROC
;;;521    
;;;522    __inline void BtnsMotorYHandler(void){
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;523    // новый вариант
;;;524    // подготовка значения регитра управлением движения
;;;525    	static u8 fD=1;
;;;526    	static u8 fB=1;
;;;527    	if ((QGetPin(BTN_MOTOR_Y_DIR))&&(QGetPin(BTN_MOTOR_Y_BACK))){
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       QGetPin
;;;528    		// коллизия 
;;;529    		*pYmove = 0;
;;;530    		fD = 1;
;;;531    		fB = 1;
00000a  4e36              LDR      r6,|L41.228|
00000c  4d36              LDR      r5,|L41.232|
00000e  f8df90dc          LDR      r9,|L41.236|
000012  2700              MOVS     r7,#0
000014  f04f0801          MOV      r8,#1                 ;530
000018  b158              CBZ      r0,|L41.50|
00001a  2015              MOVS     r0,#0x15              ;527
00001c  f7fffffe          BL       QGetPin
000020  b138              CBZ      r0,|L41.50|
000022  6828              LDR      r0,[r5,#0]            ;529  ; pYmove
000024  8007              STRH     r7,[r0,#0]            ;529
000026  f8898000          STRB     r8,[r9,#0]            ;530
00002a  f8868000          STRB     r8,[r6,#0]
                  |L41.46|
;;;532    	} else {
;;;533    		if (QGetPin(BTN_MOTOR_Y_DIR)) {
;;;534    			// нажата только кнопка впред 
;;;535    			if (fD) {
;;;536    				fD = 0;
;;;537    //				Msg("PressADir\r\n");
;;;538    				if (GetTime(timeYdir) < tiMsToTick(*pDCTime*10)) {
;;;539    					// Double Click
;;;540    					*pYmove = 100;
;;;541    				} else {
;;;542    					// Single Click
;;;543    					*pYmove = (*pPercVmin);
;;;544    				}
;;;545    			}
;;;546    		} else {
;;;547    
;;;548    			if (QGetPin(BTN_MOTOR_Y_BACK)) {
;;;549    				// нажата только кнопка назад 
;;;550    				if (fB) {
;;;551    //					Msg("PressABack\r\n");
;;;552    					fB = 0;
;;;553    					if (GetTime(timeYback) < tiMsToTick(*pDCTime*10)) {
;;;554    						// Double Click
;;;555    						*pYmove = -100;
;;;556    					} else {
;;;557    						// Single Click
;;;558    						*pYmove = -(*pPercVmin);
;;;559    					}
;;;560    				}
;;;561    			} else {
;;;562    				if (!fB) {
;;;563    //					Msg("UpABack\r\n");
;;;564    					fB = 1;
;;;565    					*pYmove = 0;
;;;566    					StartTime(timeYback);
;;;567    				}
;;;568    				if (!fD) {
;;;569    					fD = 1;
;;;570    //					Msg("UpADir\r\n");
;;;571    					*pYmove = 0;
;;;572    					StartTime(timeYdir);
;;;573    				}
;;;574    			}
;;;575    		}
;;;576    	}
;;;577    }
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L41.50|
000032  2014              MOVS     r0,#0x14              ;533
000034  f7fffffe          BL       QGetPin
000038  f8dfa0b4          LDR      r10,|L41.240|
00003c  f8dfb0b4          LDR      r11,|L41.244|
000040  4c2d              LDR      r4,|L41.248|
000042  b1e0              CBZ      r0,|L41.126|
000044  f8991000          LDRB     r1,[r9,#0]            ;535  ; _ZZ17BtnsMotorYHandlerE2fD
000048  2900              CMP      r1,#0                 ;535
00004a  d0f0              BEQ      |L41.46|
00004c  f8897000          STRB     r7,[r9,#0]            ;536
000050  6960              LDR      r0,[r4,#0x14]         ;538  ; time
000052  b108              CBZ      r0,|L41.88|
000054  6960              LDR      r0,[r4,#0x14]         ;538  ; time
000056  1e40              SUBS     r0,r0,#1              ;538
                  |L41.88|
000058  f8da1000          LDR      r1,[r10,#0]           ;538  ; pDCTime
00005c  f9b11000          LDRSH    r1,[r1,#0]            ;538
000060  eb0102c1          ADD      r2,r1,r1,LSL #3       ;538
000064  eb021101          ADD      r1,r2,r1,LSL #4       ;538
000068  ebb00fc1          CMP      r0,r1,LSL #3          ;538
00006c  d201              BCS      |L41.114|
00006e  2064              MOVS     r0,#0x64              ;540
000070  e002              B        |L41.120|
                  |L41.114|
000072  f8db0000          LDR      r0,[r11,#0]           ;543  ; pPercVmin
000076  8800              LDRH     r0,[r0,#0]            ;543
                  |L41.120|
000078  6829              LDR      r1,[r5,#0]            ;540  ; pYmove
00007a  8008              STRH     r0,[r1,#0]            ;540
00007c  e7d7              B        |L41.46|
                  |L41.126|
00007e  2015              MOVS     r0,#0x15              ;548
000080  f7fffffe          BL       QGetPin
000084  2800              CMP      r0,#0                 ;548
000086  7830              LDRB     r0,[r6,#0]            ;562  ; _ZZ17BtnsMotorYHandlerE2fB
000088  d019              BEQ      |L41.190|
00008a  2800              CMP      r0,#0                 ;550
00008c  d0cf              BEQ      |L41.46|
00008e  7037              STRB     r7,[r6,#0]            ;552
000090  69a0              LDR      r0,[r4,#0x18]         ;553  ; time
000092  b108              CBZ      r0,|L41.152|
000094  69a0              LDR      r0,[r4,#0x18]         ;553  ; time
000096  1e40              SUBS     r0,r0,#1              ;553
                  |L41.152|
000098  f8da1000          LDR      r1,[r10,#0]           ;553  ; pDCTime
00009c  f9b11000          LDRSH    r1,[r1,#0]            ;553
0000a0  eb0102c1          ADD      r2,r1,r1,LSL #3       ;553
0000a4  eb021101          ADD      r1,r2,r1,LSL #4       ;553
0000a8  ebb00fc1          CMP      r0,r1,LSL #3          ;553
0000ac  d202              BCS      |L41.180|
0000ae  f06f0063          MVN      r0,#0x63              ;555
0000b2  e7e1              B        |L41.120|
                  |L41.180|
0000b4  f8db0000          LDR      r0,[r11,#0]           ;558  ; pPercVmin
0000b8  8800              LDRH     r0,[r0,#0]            ;558
0000ba  4240              RSBS     r0,r0,#0              ;558
0000bc  e7dc              B        |L41.120|
                  |L41.190|
0000be  b928              CBNZ     r0,|L41.204|
0000c0  f8868000          STRB     r8,[r6,#0]            ;564
0000c4  6829              LDR      r1,[r5,#0]            ;565  ; pYmove
0000c6  800f              STRH     r7,[r1,#0]            ;565
0000c8  f8c48018          STR      r8,[r4,#0x18]         ;566  ; time
                  |L41.204|
0000cc  f8991000          LDRB     r1,[r9,#0]            ;568  ; _ZZ17BtnsMotorYHandlerE2fD
0000d0  2900              CMP      r1,#0                 ;568
0000d2  d1ac              BNE      |L41.46|
0000d4  f8898000          STRB     r8,[r9,#0]            ;569
0000d8  6828              LDR      r0,[r5,#0]            ;571  ; pYmove
0000da  8007              STRH     r7,[r0,#0]            ;571
0000dc  f8c48014          STR      r8,[r4,#0x14]         ;572  ; time
0000e0  e7a5              B        |L41.46|
;;;578    //******************************************************
                          ENDP

0000e2  0000              DCW      0x0000
                  |L41.228|
                          DCD      _ZZ17BtnsMotorYHandlerE2fB
                  |L41.232|
                          DCD      pYmove
                  |L41.236|
                          DCD      _ZZ17BtnsMotorYHandlerE2fD
                  |L41.240|
                          DCD      pDCTime
                  |L41.244|
                          DCD      pPercVmin
                  |L41.248|
                          DCD      time

                          AREA ||i.BtnsMotorZHandler||, COMGROUP=BtnsMotorZHandler, CODE, READONLY, ALIGN=2

                  BtnsMotorZHandler PROC
;;;578    //******************************************************
;;;579    __inline void BtnsMotorZHandler(void){
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;580    // новый вариант
;;;581    // подготовка значения регитра управлением движения
;;;582    	static u8 fD=1;
;;;583    	static u8 fB=1;
;;;584    	if ((QGetPin(BTN_MOTOR_Z_DIR))&&(QGetPin(BTN_MOTOR_Z_BACK))){
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       QGetPin
;;;585    		// коллизия 
;;;586    		*pZmove = 0;
;;;587    		fD = 1;
;;;588    		fB = 1;
00000a  4e36              LDR      r6,|L48.228|
00000c  4d36              LDR      r5,|L48.232|
00000e  f8df90dc          LDR      r9,|L48.236|
000012  2700              MOVS     r7,#0
000014  f04f0801          MOV      r8,#1                 ;587
000018  b158              CBZ      r0,|L48.50|
00001a  2015              MOVS     r0,#0x15              ;584
00001c  f7fffffe          BL       QGetPin
000020  b138              CBZ      r0,|L48.50|
000022  6828              LDR      r0,[r5,#0]            ;586  ; pZmove
000024  8007              STRH     r7,[r0,#0]            ;586
000026  f8898000          STRB     r8,[r9,#0]            ;587
00002a  f8868000          STRB     r8,[r6,#0]
                  |L48.46|
;;;589    	} else {
;;;590    		if (QGetPin(BTN_MOTOR_Z_DIR)) {
;;;591    			// нажата только кнопка впред 
;;;592    			if (fD) {
;;;593    				fD = 0;
;;;594    //				Msg("PressADir\r\n");
;;;595    				if (GetTime(timeZdir) < tiMsToTick(*pDCTime*10)) {
;;;596    					// Double Click
;;;597    					*pZmove = 100;
;;;598    				} else {
;;;599    					// Single Click
;;;600    					*pZmove = (*pPercVmin);
;;;601    				}
;;;602    			}
;;;603    		} else {
;;;604    
;;;605    			if (QGetPin(BTN_MOTOR_Z_BACK)) {
;;;606    				// нажата только кнопка назад 
;;;607    				if (fB) {
;;;608    //					Msg("PressABack\r\n");
;;;609    					fB = 0;
;;;610    					if (GetTime(timeZback) < tiMsToTick(*pDCTime*10)) {
;;;611    						// Double Click
;;;612    						*pZmove = -100;
;;;613    					} else {
;;;614    						// Single Click
;;;615    						*pZmove = -(*pPercVmin);
;;;616    					}
;;;617    				}
;;;618    			} else {
;;;619    				if (!fB) {
;;;620    //					Msg("UpABack\r\n");
;;;621    					fB = 1;
;;;622    					*pZmove = 0;
;;;623    					StartTime(timeZback);
;;;624    				}
;;;625    				if (!fD) {
;;;626    					fD = 1;
;;;627    //					Msg("UpADir\r\n");
;;;628    					*pZmove = 0;
;;;629    					StartTime(timeZdir);
;;;630    				}
;;;631    			}
;;;632    		}
;;;633    	}
;;;634    }
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L48.50|
000032  2014              MOVS     r0,#0x14              ;590
000034  f7fffffe          BL       QGetPin
000038  f8dfa0b4          LDR      r10,|L48.240|
00003c  f8dfb0b4          LDR      r11,|L48.244|
000040  4c2d              LDR      r4,|L48.248|
000042  b1e0              CBZ      r0,|L48.126|
000044  f8991000          LDRB     r1,[r9,#0]            ;592  ; _ZZ17BtnsMotorZHandlerE2fD
000048  2900              CMP      r1,#0                 ;592
00004a  d0f0              BEQ      |L48.46|
00004c  f8897000          STRB     r7,[r9,#0]            ;593
000050  69e0              LDR      r0,[r4,#0x1c]         ;595  ; time
000052  b108              CBZ      r0,|L48.88|
000054  69e0              LDR      r0,[r4,#0x1c]         ;595  ; time
000056  1e40              SUBS     r0,r0,#1              ;595
                  |L48.88|
000058  f8da1000          LDR      r1,[r10,#0]           ;595  ; pDCTime
00005c  f9b11000          LDRSH    r1,[r1,#0]            ;595
000060  eb0102c1          ADD      r2,r1,r1,LSL #3       ;595
000064  eb021101          ADD      r1,r2,r1,LSL #4       ;595
000068  ebb00fc1          CMP      r0,r1,LSL #3          ;595
00006c  d201              BCS      |L48.114|
00006e  2064              MOVS     r0,#0x64              ;597
000070  e002              B        |L48.120|
                  |L48.114|
000072  f8db0000          LDR      r0,[r11,#0]           ;600  ; pPercVmin
000076  8800              LDRH     r0,[r0,#0]            ;600
                  |L48.120|
000078  6829              LDR      r1,[r5,#0]            ;597  ; pZmove
00007a  8008              STRH     r0,[r1,#0]            ;597
00007c  e7d7              B        |L48.46|
                  |L48.126|
00007e  2015              MOVS     r0,#0x15              ;605
000080  f7fffffe          BL       QGetPin
000084  2800              CMP      r0,#0                 ;605
000086  7830              LDRB     r0,[r6,#0]            ;619  ; _ZZ17BtnsMotorZHandlerE2fB
000088  d019              BEQ      |L48.190|
00008a  2800              CMP      r0,#0                 ;607
00008c  d0cf              BEQ      |L48.46|
00008e  7037              STRB     r7,[r6,#0]            ;609
000090  6a20              LDR      r0,[r4,#0x20]         ;610  ; time
000092  b108              CBZ      r0,|L48.152|
000094  6a20              LDR      r0,[r4,#0x20]         ;610  ; time
000096  1e40              SUBS     r0,r0,#1              ;610
                  |L48.152|
000098  f8da1000          LDR      r1,[r10,#0]           ;610  ; pDCTime
00009c  f9b11000          LDRSH    r1,[r1,#0]            ;610
0000a0  eb0102c1          ADD      r2,r1,r1,LSL #3       ;610
0000a4  eb021101          ADD      r1,r2,r1,LSL #4       ;610
0000a8  ebb00fc1          CMP      r0,r1,LSL #3          ;610
0000ac  d202              BCS      |L48.180|
0000ae  f06f0063          MVN      r0,#0x63              ;612
0000b2  e7e1              B        |L48.120|
                  |L48.180|
0000b4  f8db0000          LDR      r0,[r11,#0]           ;615  ; pPercVmin
0000b8  8800              LDRH     r0,[r0,#0]            ;615
0000ba  4240              RSBS     r0,r0,#0              ;615
0000bc  e7dc              B        |L48.120|
                  |L48.190|
0000be  b928              CBNZ     r0,|L48.204|
0000c0  f8868000          STRB     r8,[r6,#0]            ;621
0000c4  6829              LDR      r1,[r5,#0]            ;622  ; pZmove
0000c6  800f              STRH     r7,[r1,#0]            ;622
0000c8  f8c48020          STR      r8,[r4,#0x20]         ;623  ; time
                  |L48.204|
0000cc  f8991000          LDRB     r1,[r9,#0]            ;625  ; _ZZ17BtnsMotorZHandlerE2fD
0000d0  2900              CMP      r1,#0                 ;625
0000d2  d1ac              BNE      |L48.46|
0000d4  f8898000          STRB     r8,[r9,#0]            ;626
0000d8  6828              LDR      r0,[r5,#0]            ;628  ; pZmove
0000da  8007              STRH     r7,[r0,#0]            ;628
0000dc  f8c4801c          STR      r8,[r4,#0x1c]         ;629  ; time
0000e0  e7a5              B        |L48.46|
;;;635    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L48.228|
                          DCD      _ZZ17BtnsMotorZHandlerE2fB
                  |L48.232|
                          DCD      pZmove
                  |L48.236|
                          DCD      _ZZ17BtnsMotorZHandlerE2fD
                  |L48.240|
                          DCD      pDCTime
                  |L48.244|
                          DCD      pPercVmin
                  |L48.248|
                          DCD      time

                          AREA ||i.BtnsMotorXHandler||, COMGROUP=BtnsMotorXHandler, CODE, READONLY, ALIGN=2

                  BtnsMotorXHandler PROC
;;;637    
;;;638    __inline void	BtnsMotorXHandler(void){
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;639    	static u8 fD=1;
;;;640    	static u8 fB=1;
;;;641    	if ((QGetPin(BTN_MOTOR_X_DIR))&&(QGetPin(BTN_MOTOR_X_BACK))){
000004  2016              MOVS     r0,#0x16
000006  f7fffffe          BL       QGetPin
;;;642    		// коллизия 
;;;643    		*pXmove = 0;									
;;;644    		fD = 1;
;;;645    		fB = 1;
00000a  4e36              LDR      r6,|L55.228|
00000c  4d36              LDR      r5,|L55.232|
00000e  f8df90dc          LDR      r9,|L55.236|
000012  2700              MOVS     r7,#0
000014  f04f0801          MOV      r8,#1                 ;644
000018  b158              CBZ      r0,|L55.50|
00001a  2017              MOVS     r0,#0x17              ;641
00001c  f7fffffe          BL       QGetPin
000020  b138              CBZ      r0,|L55.50|
000022  6828              LDR      r0,[r5,#0]            ;643  ; pXmove
000024  8007              STRH     r7,[r0,#0]            ;643
000026  f8898000          STRB     r8,[r9,#0]            ;644
00002a  f8868000          STRB     r8,[r6,#0]
                  |L55.46|
;;;646    	} else {
;;;647    		if (QGetPin(BTN_MOTOR_X_DIR)) {
;;;648    			// нажата только кнопка впред 
;;;649    			if (fD) {
;;;650    				fD = 0;
;;;651    				//Msg("PressXDir\r\n");
;;;652    				if (GetTime(timeXdir) < tiMsToTick(*pDCTime*10)) {
;;;653    					// Double Click
;;;654    					*pXmove = 100;
;;;655    				} else {
;;;656    					// Single Click
;;;657    					*pXmove = (*pPercVmin);
;;;658    				}
;;;659    			}
;;;660    		} else {
;;;661    
;;;662    			if (QGetPin(BTN_MOTOR_X_BACK)) {
;;;663    				// нажата только кнопка назад 
;;;664    				if (fB) {
;;;665    					//Msg("PressXBack\r\n");
;;;666    					fB = 0;
;;;667    					if (GetTime(timeXback) < tiMsToTick(*pDCTime*10)) {
;;;668    						// Double Click
;;;669    						*pXmove = -100;
;;;670    					} else {
;;;671    						// Single Click
;;;672    						*pXmove = -(*pPercVmin);
;;;673    					}
;;;674    				}
;;;675    			} else {
;;;676    				if (!fB) {
;;;677    					//Msg("UpXBack\r\n");
;;;678    					fB = 1;
;;;679    					*pXmove = 0;
;;;680    					StartTime(timeXback);
;;;681    				}
;;;682    				if (!fD) {
;;;683    					fD = 1;
;;;684    					//Msg("UpXDir\r\n");
;;;685    					*pXmove = 0;
;;;686    					StartTime(timeXdir);
;;;687    				}
;;;688    			}
;;;689    		}
;;;690    	}
;;;691    }
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L55.50|
000032  2016              MOVS     r0,#0x16              ;647
000034  f7fffffe          BL       QGetPin
000038  f8dfa0b4          LDR      r10,|L55.240|
00003c  f8dfb0b4          LDR      r11,|L55.244|
000040  4c2d              LDR      r4,|L55.248|
000042  b1e0              CBZ      r0,|L55.126|
000044  f8991000          LDRB     r1,[r9,#0]            ;649  ; _ZZ17BtnsMotorXHandlerE2fD
000048  2900              CMP      r1,#0                 ;649
00004a  d0f0              BEQ      |L55.46|
00004c  f8897000          STRB     r7,[r9,#0]            ;650
000050  68e0              LDR      r0,[r4,#0xc]          ;652  ; time
000052  b108              CBZ      r0,|L55.88|
000054  68e0              LDR      r0,[r4,#0xc]          ;652  ; time
000056  1e40              SUBS     r0,r0,#1              ;652
                  |L55.88|
000058  f8da1000          LDR      r1,[r10,#0]           ;652  ; pDCTime
00005c  f9b11000          LDRSH    r1,[r1,#0]            ;652
000060  eb0102c1          ADD      r2,r1,r1,LSL #3       ;652
000064  eb021101          ADD      r1,r2,r1,LSL #4       ;652
000068  ebb00fc1          CMP      r0,r1,LSL #3          ;652
00006c  d201              BCS      |L55.114|
00006e  2064              MOVS     r0,#0x64              ;654
000070  e002              B        |L55.120|
                  |L55.114|
000072  f8db0000          LDR      r0,[r11,#0]           ;657  ; pPercVmin
000076  8800              LDRH     r0,[r0,#0]            ;657
                  |L55.120|
000078  6829              LDR      r1,[r5,#0]            ;654  ; pXmove
00007a  8008              STRH     r0,[r1,#0]            ;654
00007c  e7d7              B        |L55.46|
                  |L55.126|
00007e  2017              MOVS     r0,#0x17              ;662
000080  f7fffffe          BL       QGetPin
000084  2800              CMP      r0,#0                 ;662
000086  7830              LDRB     r0,[r6,#0]            ;676  ; _ZZ17BtnsMotorXHandlerE2fB
000088  d019              BEQ      |L55.190|
00008a  2800              CMP      r0,#0                 ;664
00008c  d0cf              BEQ      |L55.46|
00008e  7037              STRB     r7,[r6,#0]            ;666
000090  6920              LDR      r0,[r4,#0x10]         ;667  ; time
000092  b108              CBZ      r0,|L55.152|
000094  6920              LDR      r0,[r4,#0x10]         ;667  ; time
000096  1e40              SUBS     r0,r0,#1              ;667
                  |L55.152|
000098  f8da1000          LDR      r1,[r10,#0]           ;667  ; pDCTime
00009c  f9b11000          LDRSH    r1,[r1,#0]            ;667
0000a0  eb0102c1          ADD      r2,r1,r1,LSL #3       ;667
0000a4  eb021101          ADD      r1,r2,r1,LSL #4       ;667
0000a8  ebb00fc1          CMP      r0,r1,LSL #3          ;667
0000ac  d202              BCS      |L55.180|
0000ae  f06f0063          MVN      r0,#0x63              ;669
0000b2  e7e1              B        |L55.120|
                  |L55.180|
0000b4  f8db0000          LDR      r0,[r11,#0]           ;672  ; pPercVmin
0000b8  8800              LDRH     r0,[r0,#0]            ;672
0000ba  4240              RSBS     r0,r0,#0              ;672
0000bc  e7dc              B        |L55.120|
                  |L55.190|
0000be  b928              CBNZ     r0,|L55.204|
0000c0  f8868000          STRB     r8,[r6,#0]            ;678
0000c4  6829              LDR      r1,[r5,#0]            ;679  ; pXmove
0000c6  800f              STRH     r7,[r1,#0]            ;679
0000c8  f8c48010          STR      r8,[r4,#0x10]         ;680  ; time
                  |L55.204|
0000cc  f8991000          LDRB     r1,[r9,#0]            ;682  ; _ZZ17BtnsMotorXHandlerE2fD
0000d0  2900              CMP      r1,#0                 ;682
0000d2  d1ac              BNE      |L55.46|
0000d4  f8898000          STRB     r8,[r9,#0]            ;683
0000d8  6828              LDR      r0,[r5,#0]            ;685  ; pXmove
0000da  8007              STRH     r7,[r0,#0]            ;685
0000dc  f8c4800c          STR      r8,[r4,#0xc]          ;686  ; time
0000e0  e7a5              B        |L55.46|
;;;692    //*****************************************
                          ENDP

0000e2  0000              DCW      0x0000
                  |L55.228|
                          DCD      _ZZ17BtnsMotorXHandlerE2fB
                  |L55.232|
                          DCD      pXmove
                  |L55.236|
                          DCD      _ZZ17BtnsMotorXHandlerE2fD
                  |L55.240|
                          DCD      pDCTime
                  |L55.244|
                          DCD      pPercVmin
                  |L55.248|
                          DCD      time

                          AREA ||i.MoveByRegs||, COMGROUP=MoveByRegs, CODE, READONLY, ALIGN=2

                  MoveByRegs PROC
;;;723    
;;;724    __inline void MoveByRegs(void){
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;725    // обработка значения
;;;726    	if (*pXmove) {
000004  4852              LDR      r0,|L62.336|
;;;727    //		*(mc_X.ReqDir) = ((*pXmove) > 0) ? 1 : -1 ;
;;;728    		*(mc_X.ReqDir) = ((*pXmove) > 0) ? -1 : 1 ;
000006  4c53              LDR      r4,|L62.340|
000008  2501              MOVS     r5,#1
00000a  6801              LDR      r1,[r0,#0]            ;726  ; pXmove
;;;729    		*(mc_X.FrReq) = (u64)(*(mc_X.FrMax)*1.0*abs(*pXmove)/100);
00000c  f8dfa148          LDR      r10,|L62.344|
000010  2600              MOVS     r6,#0
000012  f9b11000          LDRSH    r1,[r1,#0]            ;726
000016  f04f37ff          MOV      r7,#0xffffffff        ;728
00001a  2900              CMP      r1,#0                 ;726
00001c  d025              BEQ      |L62.106|
00001e  dd01              BLE      |L62.36|
000020  4639              MOV      r1,r7                 ;728
000022  e001              B        |L62.40|
                  |L62.36|
000024  f04f0101          MOV      r1,#1                 ;728
                  |L62.40|
000028  69a2              LDR      r2,[r4,#0x18]         ;728  ; mc_X
00002a  7011              STRB     r1,[r2,#0]            ;728
00002c  6800              LDR      r0,[r0,#0]  ; pXmove
00002e  f9b00000          LDRSH    r0,[r0,#0]
000032  2800              CMP      r0,#0
000034  da00              BGE      |L62.56|
000036  4240              RSBS     r0,r0,#0
                  |L62.56|
000038  f7fffffe          BL       __aeabi_i2d
00003c  4689              MOV      r9,r1
00003e  68a1              LDR      r1,[r4,#8]  ; mc_X
000040  4680              MOV      r8,r0
000042  e9d10100          LDRD     r0,r1,[r1,#0]
000046  f7fffffe          BL       __aeabi_ul2d
00004a  4642              MOV      r2,r8
00004c  464b              MOV      r3,r9
00004e  f7fffffe          BL       __aeabi_dmul
000052  2200              MOVS     r2,#0
000054  4653              MOV      r3,r10
000056  f7fffffe          BL       __aeabi_ddiv
00005a  f7fffffe          BL       __aeabi_d2ulz
00005e  6862              LDR      r2,[r4,#4]  ; mc_X
000060  e9c20100          STRD     r0,r1,[r2,#0]
;;;730    		*(mc_X.MoveBtn) = 1;
000064  69e0              LDR      r0,[r4,#0x1c]  ; mc_X
000066  7005              STRB     r5,[r0,#0]
000068  e007              B        |L62.122|
                  |L62.106|
;;;731    	} else {
;;;732    		*(mc_X.MoveBtn) = 0;
00006a  69e0              LDR      r0,[r4,#0x1c]  ; mc_X
00006c  7006              STRB     r6,[r0,#0]
;;;733    		*(mc_X.FrReq) = *(mc_X.FrMax);
00006e  68a1              LDR      r1,[r4,#8]  ; mc_X
000070  e9d10100          LDRD     r0,r1,[r1,#0]
000074  6862              LDR      r2,[r4,#4]  ; mc_X
000076  e9c20100          STRD     r0,r1,[r2,#0]
                  |L62.122|
;;;734    	}
;;;735    // обработка значения
;;;736    	if (*pYmove) {
00007a  4838              LDR      r0,|L62.348|
;;;737    		*(mc_Y.ReqDir) = *pYmove > 0 ? 1 : -1 ;
00007c  4c38              LDR      r4,|L62.352|
00007e  6801              LDR      r1,[r0,#0]            ;736  ; pYmove
000080  f9b11000          LDRSH    r1,[r1,#0]            ;736
000084  2900              CMP      r1,#0                 ;736
000086  d025              BEQ      |L62.212|
000088  dd02              BLE      |L62.144|
00008a  f04f0101          MOV      r1,#1
00008e  e000              B        |L62.146|
                  |L62.144|
000090  4639              MOV      r1,r7
                  |L62.146|
000092  69a2              LDR      r2,[r4,#0x18]  ; mc_Y
000094  7011              STRB     r1,[r2,#0]
;;;738    		*(mc_Y.FrReq) = (u64)(*(mc_Y.FrMax) * (abs(*pYmove)*1.0/100));
000096  6800              LDR      r0,[r0,#0]  ; pYmove
000098  f9b00000          LDRSH    r0,[r0,#0]
00009c  2800              CMP      r0,#0
00009e  da00              BGE      |L62.162|
0000a0  4240              RSBS     r0,r0,#0
                  |L62.162|
0000a2  f7fffffe          BL       __aeabi_i2d
0000a6  2200              MOVS     r2,#0
0000a8  4653              MOV      r3,r10
0000aa  f7fffffe          BL       __aeabi_ddiv
0000ae  4689              MOV      r9,r1
0000b0  68a1              LDR      r1,[r4,#8]  ; mc_Y
0000b2  4680              MOV      r8,r0
0000b4  e9d10100          LDRD     r0,r1,[r1,#0]
0000b8  f7fffffe          BL       __aeabi_ul2d
0000bc  4642              MOV      r2,r8
0000be  464b              MOV      r3,r9
0000c0  f7fffffe          BL       __aeabi_dmul
0000c4  f7fffffe          BL       __aeabi_d2ulz
0000c8  6862              LDR      r2,[r4,#4]  ; mc_Y
0000ca  e9c20100          STRD     r0,r1,[r2,#0]
;;;739    		*(mc_Y.MoveBtn) = 1;
0000ce  69e0              LDR      r0,[r4,#0x1c]  ; mc_Y
0000d0  7005              STRB     r5,[r0,#0]
0000d2  e007              B        |L62.228|
                  |L62.212|
;;;740    	} else {
;;;741    		*(mc_Y.MoveBtn) = 0;
0000d4  69e0              LDR      r0,[r4,#0x1c]  ; mc_Y
0000d6  7006              STRB     r6,[r0,#0]
;;;742    		*(mc_Y.FrReq) = *(mc_Y.FrMax);
0000d8  68a0              LDR      r0,[r4,#8]  ; mc_Y
0000da  6862              LDR      r2,[r4,#4]  ; mc_Y
0000dc  e9d01000          LDRD     r1,r0,[r0,#0]
0000e0  e9c21000          STRD     r1,r0,[r2,#0]
                  |L62.228|
;;;743    	}
;;;744    
;;;745    	if (*pZmove) {
0000e4  481f              LDR      r0,|L62.356|
;;;746    		*(mc_Z.ReqDir) = *pZmove > 0 ? 1 : -1 ;
0000e6  4c20              LDR      r4,|L62.360|
0000e8  6801              LDR      r1,[r0,#0]            ;745  ; pZmove
0000ea  f9b11000          LDRSH    r1,[r1,#0]            ;745
0000ee  2900              CMP      r1,#0                 ;745
0000f0  d024              BEQ      |L62.316|
0000f2  dd01              BLE      |L62.248|
0000f4  f04f0701          MOV      r7,#1
                  |L62.248|
0000f8  69a1              LDR      r1,[r4,#0x18]  ; mc_Z
0000fa  700f              STRB     r7,[r1,#0]
;;;747    		*(mc_Z.FrReq) = (u64)(*(mc_Z.FrMax) * (abs(*pZmove)*1.0/100));
0000fc  6800              LDR      r0,[r0,#0]  ; pZmove
0000fe  f9b00000          LDRSH    r0,[r0,#0]
000102  2800              CMP      r0,#0
000104  da00              BGE      |L62.264|
000106  4240              RSBS     r0,r0,#0
                  |L62.264|
000108  f7fffffe          BL       __aeabi_i2d
00010c  2200              MOVS     r2,#0
00010e  4653              MOV      r3,r10
000110  f7fffffe          BL       __aeabi_ddiv
000114  460f              MOV      r7,r1
000116  68a1              LDR      r1,[r4,#8]  ; mc_Z
000118  4606              MOV      r6,r0
00011a  e9d10100          LDRD     r0,r1,[r1,#0]
00011e  f7fffffe          BL       __aeabi_ul2d
000122  4632              MOV      r2,r6
000124  463b              MOV      r3,r7
000126  f7fffffe          BL       __aeabi_dmul
00012a  f7fffffe          BL       __aeabi_d2ulz
00012e  6862              LDR      r2,[r4,#4]  ; mc_Z
000130  e9c20100          STRD     r0,r1,[r2,#0]
;;;748    		*(mc_Z.MoveBtn) = 1;
000134  69e0              LDR      r0,[r4,#0x1c]  ; mc_Z
000136  7005              STRB     r5,[r0,#0]
                  |L62.312|
;;;749    	} else {
;;;750    		*(mc_Z.MoveBtn) = 0;
;;;751    		*(mc_Z.FrReq) = *(mc_Z.FrMax);
;;;752    	}
;;;753    
;;;754    }
000138  e8bd87f0          POP      {r4-r10,pc}
                  |L62.316|
00013c  69e0              LDR      r0,[r4,#0x1c]         ;750  ; mc_Z
00013e  7006              STRB     r6,[r0,#0]            ;750
000140  68a1              LDR      r1,[r4,#8]            ;751  ; mc_Z
000142  e9d10100          LDRD     r0,r1,[r1,#0]         ;751
000146  6862              LDR      r2,[r4,#4]            ;751  ; mc_Z
000148  e9c20100          STRD     r0,r1,[r2,#0]         ;751
00014c  e7f4              B        |L62.312|
;;;755    
                          ENDP

00014e  0000              DCW      0x0000
                  |L62.336|
                          DCD      pXmove
                  |L62.340|
                          DCD      mc_X
                  |L62.344|
                          DCD      0x40590000
                  |L62.348|
                          DCD      pYmove
                  |L62.352|
                          DCD      mc_Y
                  |L62.356|
                          DCD      pZmove
                  |L62.360|
                          DCD      mc_Z

                          AREA ||i.FormQueue||, COMGROUP=FormQueue, CODE, READONLY, ALIGN=2

                  FormQueue PROC
;;;105    
;;;106    __inline void FormQueue(void){
000000  b570              PUSH     {r4-r6,lr}
;;;107    	if (*pUsesKP485) {
000002  4814              LDR      r0,|L69.84|
000004  6800              LDR      r0,[r0,#0]  ; pUsesKP485
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;106
00000a  d018              BEQ      |L69.62|
;;;108    		if (quPackCount() < (quMaxItemCount-1)) {
00000c  f7fffffe          BL       quPackCount
000010  281d              CMP      r0,#0x1d
000012  d214              BCS      |L69.62|
;;;109    			if (*pPrgRun) {
000014  4810              LDR      r0,|L69.88|
;;;110    				TITimer(tiFQGetPult,tiMsToTick(*pIntKPCtrl), 
000016  4c11              LDR      r4,|L69.92|
000018  2501              MOVS     r5,#1
00001a  6800              LDR      r0,[r0,#0]            ;109  ; pPrgRun
00001c  7800              LDRB     r0,[r0,#0]            ;109
00001e  2800              CMP      r0,#0                 ;109
;;;111    					{	// добавляем в очередь опрос регистров пульта
;;;112    						KPQuery();
;;;113    					},{}
;;;114    				);	
;;;115    			} else {
;;;116    				TITimer(tiFQGetPult,tiMsToTick(*pIntKPCtrlStop), 
000020  6ae0              LDR      r0,[r4,#0x2c]  ; ti
000022  d00d              BEQ      |L69.64|
000024  2801              CMP      r0,#1                 ;110
000026  d10a              BNE      |L69.62|
000028  4e0d              LDR      r6,|L69.96|
00002a  e00c              B        |L69.70|
                  |L69.44|
00002c  f7fffffe          BL       KPQuery
000030  6830              LDR      r0,[r6,#0]            ;110  ; pIntKPCtrl
000032  8800              LDRH     r0,[r0,#0]            ;110
000034  eb000080          ADD      r0,r0,r0,LSL #2       ;110
000038  eb050080          ADD      r0,r5,r0,LSL #2       ;110
00003c  62e0              STR      r0,[r4,#0x2c]         ;110  ; ti
                  |L69.62|
;;;117    					{	// добавляем в очередь опрос регистров пульта
;;;118    						KPQuery();
;;;119    					},{}
;;;120    				);	
;;;121    			}
;;;122    		}
;;;123    	}
;;;124    }
00003e  bd70              POP      {r4-r6,pc}
                  |L69.64|
000040  2801              CMP      r0,#1                 ;116
000042  d1fc              BNE      |L69.62|
000044  4e07              LDR      r6,|L69.100|
                  |L69.70|
000046  6830              LDR      r0,[r6,#0]            ;110  ; pIntKPCtrl
000048  8800              LDRH     r0,[r0,#0]            ;110
00004a  eb000080          ADD      r0,r0,r0,LSL #2       ;110
00004e  0080              LSLS     r0,r0,#2              ;110
000050  d1ec              BNE      |L69.44|
000052  bd70              POP      {r4-r6,pc}
;;;125    
                          ENDP

                  |L69.84|
                          DCD      pUsesKP485
                  |L69.88|
                          DCD      pPrgRun
                  |L69.92|
                          DCD      ||ti||
                  |L69.96|
                          DCD      pIntKPCtrl
                  |L69.100|
                          DCD      pIntKPCtrlStop

                          AREA ||i.ZZCheckPointFrz||, COMGROUP=ZZCheckPointFrz, CODE, READONLY, ALIGN=2

                  ZZCheckPointFrz PROC
;;;207    
;;;208    __inline void	ZZCheckPointFrz(void){
000000  b570              PUSH     {r4-r6,lr}
;;;209    	// обход контура
;;;210    	static u8 f5=1;
;;;211    	static u8 f6=1;
;;;212    	if (*pZZeroDat) {
000002  481a              LDR      r0,|L75.108|
000004  6800              LDR      r0,[r0,#0]  ; pZZeroDat
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;208
00000a  d021              BEQ      |L75.80|
;;;213         if (QGetPin(SENS_SET_POINT)) {	
00000c  201b              MOVS     r0,#0x1b
00000e  f7fffffe          BL       QGetPin
;;;214    			if (f5) { 
000012  4c17              LDR      r4,|L75.112|
000014  2500              MOVS     r5,#0                 ;213
;;;215    				// остановиться
;;;216    				*(mc_Z.MovePos)=0;
;;;217    				// выдать текущие координаты точки
;;;218    				ZZeroDat();
;;;219    				UpZ();
;;;220    				f5=0;
;;;221    			}
;;;222    		} else { if (!f5) f5=1;	}
000016  2601              MOVS     r6,#1
000018  2800              CMP      r0,#0                 ;213
00001a  7820              LDRB     r0,[r4,#0]  ; _ZZ15ZZCheckPointFrzE2f5
00001c  d009              BEQ      |L75.50|
00001e  b150              CBZ      r0,|L75.54|
000020  4814              LDR      r0,|L75.116|
000022  6a00              LDR      r0,[r0,#0x20]         ;216  ; mc_Z
000024  7005              STRB     r5,[r0,#0]            ;216
000026  f7fffffe          BL       ZZeroDat
00002a  f7fffffe          BL       UpZ
00002e  7025              STRB     r5,[r4,#0]            ;220
000030  e001              B        |L75.54|
                  |L75.50|
000032  b900              CBNZ     r0,|L75.54|
000034  7026              STRB     r6,[r4,#0]
                  |L75.54|
;;;223    		// проверка дошли ли до низа без датчика
;;;224    		if ((*(ms_Z.Pos)==0)&&(!QGetPin(SENS_SET_POINT))) {
000036  4810              LDR      r0,|L75.120|
000038  6880              LDR      r0,[r0,#8]  ; ms_Z
;;;225    			if (f6) { 
00003a  4c10              LDR      r4,|L75.124|
00003c  6800              LDR      r0,[r0,#0]            ;224
00003e  b918              CBNZ     r0,|L75.72|
000040  201b              MOVS     r0,#0x1b              ;224
000042  f7fffffe          BL       QGetPin
000046  b120              CBZ      r0,|L75.82|
                  |L75.72|
;;;226    				// дошли до низа без датчика
;;;227    				Msg("Error Set Point\r\n");
;;;228    				RecoveryZfreq();
;;;229    				UpZ();
;;;230    				f6=0;
;;;231    			}
;;;232    		} else { if (!f6) f6=1;	}
000048  7820              LDRB     r0,[r4,#0]  ; _ZZ15ZZCheckPointFrzE2f6
00004a  2800              CMP      r0,#0
00004c  d100              BNE      |L75.80|
00004e  7026              STRB     r6,[r4,#0]
                  |L75.80|
;;;233    	}
;;;234    }
000050  bd70              POP      {r4-r6,pc}
                  |L75.82|
000052  7820              LDRB     r0,[r4,#0]            ;225  ; _ZZ15ZZCheckPointFrzE2f6
000054  2800              CMP      r0,#0                 ;225
000056  d0fb              BEQ      |L75.80|
000058  4809              LDR      r0,|L75.128|
00005a  f7fffffe          BL       Msg
00005e  f7fffffe          BL       RecoveryZfreq
000062  f7fffffe          BL       UpZ
000066  7025              STRB     r5,[r4,#0]            ;230
000068  bd70              POP      {r4-r6,pc}
;;;235    
                          ENDP

00006a  0000              DCW      0x0000
                  |L75.108|
                          DCD      pZZeroDat
                  |L75.112|
                          DCD      _ZZ15ZZCheckPointFrzE2f5
                  |L75.116|
                          DCD      mc_Z
                  |L75.120|
                          DCD      ms_Z
                  |L75.124|
                          DCD      _ZZ15ZZCheckPointFrzE2f6
                  |L75.128|
                          DCD      ||.conststring||+0xc8

                          AREA ||i.CheckPointFrz||, COMGROUP=CheckPointFrz, CODE, READONLY, ALIGN=2

                  CheckPointFrz PROC
;;;235    
;;;236    __inline void	CheckPointFrz(void){
000000  b570              PUSH     {r4-r6,lr}
;;;237    	// обход контура
;;;238    	static u8 f3=1;
;;;239    	static u8 f4=1;
;;;240    	if (*pByPass) {
000002  481a              LDR      r0,|L81.108|
000004  6800              LDR      r0,[r0,#0]  ; pByPass
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;236
00000a  d021              BEQ      |L81.80|
;;;241        if (QGetPin(SENS_SET_POINT)) {	
00000c  201b              MOVS     r0,#0x1b
00000e  f7fffffe          BL       QGetPin
;;;242    			if (f3) { 
000012  4c17              LDR      r4,|L81.112|
000014  2500              MOVS     r5,#0                 ;241
;;;243    				// остановиться
;;;244    				*(mc_Z.MovePos)=0;
;;;245    				// выдать текущие координаты точки
;;;246    				AddPointFrz();
;;;247    				UpZ();
;;;248    				f3=0;
;;;249    			}
;;;250    		} else { if (!f3) f3=1;	}
000016  2601              MOVS     r6,#1
000018  2800              CMP      r0,#0                 ;241
00001a  7820              LDRB     r0,[r4,#0]  ; _ZZ13CheckPointFrzE2f3
00001c  d009              BEQ      |L81.50|
00001e  b150              CBZ      r0,|L81.54|
000020  4814              LDR      r0,|L81.116|
000022  6a00              LDR      r0,[r0,#0x20]         ;244  ; mc_Z
000024  7005              STRB     r5,[r0,#0]            ;244
000026  f7fffffe          BL       AddPointFrz
00002a  f7fffffe          BL       UpZ
00002e  7025              STRB     r5,[r4,#0]            ;248
000030  e001              B        |L81.54|
                  |L81.50|
000032  b900              CBNZ     r0,|L81.54|
000034  7026              STRB     r6,[r4,#0]
                  |L81.54|
;;;251    		// проверка дошли ли до низа без датчика
;;;252    		if ((*(ms_Z.Pos)==0)&&(!QGetPin(SENS_SET_POINT))) {
000036  4810              LDR      r0,|L81.120|
000038  6880              LDR      r0,[r0,#8]  ; ms_Z
;;;253    			if (f4) { 
00003a  4c10              LDR      r4,|L81.124|
00003c  6800              LDR      r0,[r0,#0]            ;252
00003e  b918              CBNZ     r0,|L81.72|
000040  201b              MOVS     r0,#0x1b              ;252
000042  f7fffffe          BL       QGetPin
000046  b120              CBZ      r0,|L81.82|
                  |L81.72|
;;;254    				// дошли до низа без датчика
;;;255    				Msg("Error Set Point\r\n");
;;;256    				RecoveryZfreq();
;;;257    				UpZ();
;;;258    				f4=0;
;;;259    			}
;;;260    		} else { if (!f4) f4=1;	}
000048  7820              LDRB     r0,[r4,#0]  ; _ZZ13CheckPointFrzE2f4
00004a  2800              CMP      r0,#0
00004c  d100              BNE      |L81.80|
00004e  7026              STRB     r6,[r4,#0]
                  |L81.80|
;;;261    	}
;;;262    }
000050  bd70              POP      {r4-r6,pc}
                  |L81.82|
000052  7820              LDRB     r0,[r4,#0]            ;253  ; _ZZ13CheckPointFrzE2f4
000054  2800              CMP      r0,#0                 ;253
000056  d0fb              BEQ      |L81.80|
000058  4809              LDR      r0,|L81.128|
00005a  f7fffffe          BL       Msg
00005e  f7fffffe          BL       RecoveryZfreq
000062  f7fffffe          BL       UpZ
000066  7025              STRB     r5,[r4,#0]            ;258
000068  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

00006a  0000              DCW      0x0000
                  |L81.108|
                          DCD      pByPass
                  |L81.112|
                          DCD      _ZZ13CheckPointFrzE2f3
                  |L81.116|
                          DCD      mc_Z
                  |L81.120|
                          DCD      ms_Z
                  |L81.124|
                          DCD      _ZZ13CheckPointFrzE2f4
                  |L81.128|
                          DCD      ||.conststring||+0xc8

                          AREA ||i.HTCheckPointFrz||, COMGROUP=HTCheckPointFrz, CODE, READONLY, ALIGN=2

                  HTCheckPointFrz PROC
;;;263    
;;;264    __inline void	HTCheckPointFrz(void){
000000  b570              PUSH     {r4-r6,lr}
;;;265    	// обход контура
;;;266    	static u8 f5=1;
;;;267    	static u8 f6=1;
;;;268    	if (*pHTCorr) {
000002  481a              LDR      r0,|L87.108|
000004  6800              LDR      r0,[r0,#0]  ; pHTCorr
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;264
00000a  d021              BEQ      |L87.80|
;;;269         if (QGetPin(SENS_SET_POINT)) {	
00000c  201b              MOVS     r0,#0x1b
00000e  f7fffffe          BL       QGetPin
;;;270    			if (f5) { 
000012  4c17              LDR      r4,|L87.112|
000014  2500              MOVS     r5,#0                 ;269
;;;271    				// остановиться
;;;272    				*(mc_Z.MovePos)=0;
;;;273    				// выдать текущие координаты точки
;;;274    				HTCorr();
;;;275    				UpZ();
;;;276    				f5=0;
;;;277    			}
;;;278    		} else { if (!f5) f5=1;	}
000016  2601              MOVS     r6,#1
000018  2800              CMP      r0,#0                 ;269
00001a  7820              LDRB     r0,[r4,#0]  ; _ZZ15HTCheckPointFrzE2f5
00001c  d009              BEQ      |L87.50|
00001e  b150              CBZ      r0,|L87.54|
000020  4814              LDR      r0,|L87.116|
000022  6a00              LDR      r0,[r0,#0x20]         ;272  ; mc_Z
000024  7005              STRB     r5,[r0,#0]            ;272
000026  f7fffffe          BL       HTCorr
00002a  f7fffffe          BL       UpZ
00002e  7025              STRB     r5,[r4,#0]            ;276
000030  e001              B        |L87.54|
                  |L87.50|
000032  b900              CBNZ     r0,|L87.54|
000034  7026              STRB     r6,[r4,#0]
                  |L87.54|
;;;279    		// проверка дошли ли до низа без датчика
;;;280    		if ((*(ms_Z.Pos)==0)&&(!QGetPin(SENS_SET_POINT))) {
000036  4810              LDR      r0,|L87.120|
000038  6880              LDR      r0,[r0,#8]  ; ms_Z
;;;281    			if (f6) { 
00003a  4c10              LDR      r4,|L87.124|
00003c  6800              LDR      r0,[r0,#0]            ;280
00003e  b918              CBNZ     r0,|L87.72|
000040  201b              MOVS     r0,#0x1b              ;280
000042  f7fffffe          BL       QGetPin
000046  b120              CBZ      r0,|L87.82|
                  |L87.72|
;;;282    				// дошли до низа без датчика
;;;283    				Msg("Error Set Point\r\n");
;;;284    				RecoveryZfreq();
;;;285    				UpZ();
;;;286    				f6=0;
;;;287    			}
;;;288    		} else { if (!f6) f6=1;	}
000048  7820              LDRB     r0,[r4,#0]  ; _ZZ15HTCheckPointFrzE2f6
00004a  2800              CMP      r0,#0
00004c  d100              BNE      |L87.80|
00004e  7026              STRB     r6,[r4,#0]
                  |L87.80|
;;;289    	}
;;;290    }
000050  bd70              POP      {r4-r6,pc}
                  |L87.82|
000052  7820              LDRB     r0,[r4,#0]            ;281  ; _ZZ15HTCheckPointFrzE2f6
000054  2800              CMP      r0,#0                 ;281
000056  d0fb              BEQ      |L87.80|
000058  4809              LDR      r0,|L87.128|
00005a  f7fffffe          BL       Msg
00005e  f7fffffe          BL       RecoveryZfreq
000062  f7fffffe          BL       UpZ
000066  7025              STRB     r5,[r4,#0]            ;286
000068  bd70              POP      {r4-r6,pc}
;;;291    
                          ENDP

00006a  0000              DCW      0x0000
                  |L87.108|
                          DCD      pHTCorr
                  |L87.112|
                          DCD      _ZZ15HTCheckPointFrzE2f5
                  |L87.116|
                          DCD      mc_Z
                  |L87.120|
                          DCD      ms_Z
                  |L87.124|
                          DCD      _ZZ15HTCheckPointFrzE2f6
                  |L87.128|
                          DCD      ||.conststring||+0xc8

                          AREA ||i.ButtonsToRegs||, COMGROUP=ButtonsToRegs, CODE, READONLY, ALIGN=2

                  ButtonsToRegs PROC
;;;703    
;;;704    __inline void ButtonsToRegs(void){
000000  b570              PUSH     {r4-r6,lr}
;;;705     	// значения кнопок в регистры
;;;706    	// пониженная скорость
;;;707    	if (*pUsesKP485==0) {
000002  4821              LDR      r0,|L93.136|
000004  6800              LDR      r0,[r0,#0]  ; pUsesKP485
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;704
00000a  d13c              BNE      |L93.134|
00000c  2018              MOVS     r0,#0x18              ;704
00000e  f7fffffe          BL       QGetPin
000012  491f              LDR      r1,|L93.144|
000014  2400              MOVS     r4,#0                 ;704
000016  2501              MOVS     r5,#1                 ;704
000018  2800              CMP      r0,#0                 ;704
00001a  4a1c              LDR      r2,|L93.140|
00001c  7808              LDRB     r0,[r1,#0]            ;704  ; _ZZ11Btn5HandlerE1f
00001e  d005              BEQ      |L93.44|
000020  b140              CBZ      r0,|L93.52|
000022  700c              STRB     r4,[r1,#0]            ;704
000024  6811              LDR      r1,[r2,#0]            ;704  ; pBtn5
000026  2064              MOVS     r0,#0x64              ;704
000028  8008              STRH     r0,[r1,#0]            ;704
00002a  e003              B        |L93.52|
                  |L93.44|
00002c  b910              CBNZ     r0,|L93.52|
00002e  700d              STRB     r5,[r1,#0]            ;704
000030  6810              LDR      r0,[r2,#0]            ;704  ; pBtn5
000032  8004              STRH     r4,[r0,#0]            ;704
                  |L93.52|
000034  2019              MOVS     r0,#0x19              ;704
000036  f7fffffe          BL       QGetPin
00003a  4917              LDR      r1,|L93.152|
00003c  2800              CMP      r0,#0                 ;704
00003e  4a15              LDR      r2,|L93.148|
000040  7808              LDRB     r0,[r1,#0]            ;704  ; _ZZ20BtnAxisSwitchHandlerE1f
000042  d011              BEQ      |L93.104|
000044  b190              CBZ      r0,|L93.108|
000046  700c              STRB     r4,[r1,#0]            ;704
000048  6810              LDR      r0,[r2,#0]            ;704  ; pAxisSwitch
00004a  f9b01000          LDRSH    r1,[r0,#0]            ;704
00004e  f1c10101          RSB      r1,r1,#1              ;704
000052  8001              STRH     r1,[r0,#0]            ;704
000054  4811              LDR      r0,|L93.156|
000056  6800              LDR      r0,[r0,#0]            ;704  ; pXmove
000058  8004              STRH     r4,[r0,#0]            ;704
00005a  4811              LDR      r0,|L93.160|
00005c  6800              LDR      r0,[r0,#0]            ;704  ; pYmove
00005e  8004              STRH     r4,[r0,#0]            ;704
000060  4810              LDR      r0,|L93.164|
000062  6800              LDR      r0,[r0,#0]            ;704  ; pZmove
000064  8004              STRH     r4,[r0,#0]            ;704
000066  e001              B        |L93.108|
                  |L93.104|
000068  b900              CBNZ     r0,|L93.108|
00006a  700d              STRB     r5,[r1,#0]            ;704
                  |L93.108|
;;;708    		//Msg("b");
;;;709    		Btn5Handler(); // кнопка 5
;;;710    		BtnAxisSwitchHandler(); // переключение осей кнопка 6
;;;711    		if (*pAxisSwitch){
00006c  6810              LDR      r0,[r2,#0]  ; pAxisSwitch
00006e  8800              LDRH     r0,[r0,#0]
000070  b118              CBZ      r0,|L93.122|
;;;712    			// кнопки управления координатой Z
;;;713    			BtnsMotorZHandler();
000072  e8bd4070          POP      {r4-r6,lr}
000076  f7ffbffe          B.W      BtnsMotorZHandler
                  |L93.122|
;;;714    		}
;;;715    		else {
;;;716    			// кнопки управления координатой Х
;;;717    			BtnsMotorXHandler();
00007a  f7fffffe          BL       BtnsMotorXHandler
;;;718    			// кнопки управления координатой Y
;;;719    			BtnsMotorYHandler();
00007e  e8bd4070          POP      {r4-r6,lr}
000082  f7ffbffe          B.W      BtnsMotorYHandler
                  |L93.134|
;;;720    		}
;;;721    	}
;;;722    }
000086  bd70              POP      {r4-r6,pc}
;;;723    
                          ENDP

                  |L93.136|
                          DCD      pUsesKP485
                  |L93.140|
                          DCD      pBtn5
                  |L93.144|
                          DCD      _ZZ11Btn5HandlerE1f
                  |L93.148|
                          DCD      pAxisSwitch
                  |L93.152|
                          DCD      _ZZ20BtnAxisSwitchHandlerE1f
                  |L93.156|
                          DCD      pXmove
                  |L93.160|
                          DCD      pYmove
                  |L93.164|
                          DCD      pZmove

                          AREA ||i.InitFrzTimers||, COMGROUP=InitFrzTimers, CODE, READONLY, ALIGN=2

                  InitFrzTimers PROC
;;;807    
;;;808    __inline void	InitFrzTimers(void){
000000  b570              PUSH     {r4-r6,lr}
;;;809    	// таймер подсчета интервалов и времен
;;;810    	// запуск первого таймера через регистры
;;;811    	LPC_TIM1->MR0 = 5000;
000002  4823              LDR      r0,|L99.144|
000004  f2413188          MOV      r1,#0x1388
000008  6181              STR      r1,[r0,#0x18]
;;;812    	LPC_TIM1->TC = 10;
00000a  210a              MOVS     r1,#0xa
00000c  6081              STR      r1,[r0,#8]
;;;813    
;;;814    // у нулевого таймера приоритет выше чем у первого
;;;815    	Init_TCS(&tcs_MotorX, tmove,  0,MotorX_Handler); // связывание структуры с таймером
00000e  2200              MOVS     r2,#0
000010  4b20              LDR      r3,|L99.148|
000012  4611              MOV      r1,r2
000014  4820              LDR      r0,|L99.152|
000016  f7fffffe          BL       Init_TCS
;;;816    	TCS_Start(tcs_MotorX);
00001a  481f              LDR      r0,|L99.152|
00001c  7801              LDRB     r1,[r0,#0]  ; tcs_MotorX
00001e  4c1f              LDR      r4,|L99.156|
000020  2501              MOVS     r5,#1
000022  b929              CBNZ     r1,|L99.48|
000024  68c1              LDR      r1,[r0,#0xc]  ; tcs_MotorX
000026  6809              LDR      r1,[r1,#0]
000028  6882              LDR      r2,[r0,#8]  ; tcs_MotorX
00002a  4421              ADD      r1,r1,r4
00002c  6011              STR      r1,[r2,#0]
00002e  7005              STRB     r5,[r0,#0]
                  |L99.48|
;;;817    	Init_TCS(&tcs_MotorY, tmove,  1,MotorY_Handler); // связывание структуры с таймером
000030  4b1b              LDR      r3,|L99.160|
000032  2201              MOVS     r2,#1
000034  2100              MOVS     r1,#0
000036  481b              LDR      r0,|L99.164|
000038  f7fffffe          BL       Init_TCS
;;;818    	TCS_Start(tcs_MotorY);
00003c  4819              LDR      r0,|L99.164|
00003e  7801              LDRB     r1,[r0,#0]  ; tcs_MotorY
000040  b929              CBNZ     r1,|L99.78|
000042  68c1              LDR      r1,[r0,#0xc]  ; tcs_MotorY
000044  6809              LDR      r1,[r1,#0]
000046  6882              LDR      r2,[r0,#8]  ; tcs_MotorY
000048  4421              ADD      r1,r1,r4
00004a  6011              STR      r1,[r2,#0]
00004c  7005              STRB     r5,[r0,#0]
                  |L99.78|
;;;819    	Init_TCS(&tcs_MotorZ, tmove,  2,MotorZ_Handler); // связывание структуры с таймером
00004e  4b16              LDR      r3,|L99.168|
000050  2202              MOVS     r2,#2
000052  2100              MOVS     r1,#0
000054  4815              LDR      r0,|L99.172|
000056  f7fffffe          BL       Init_TCS
;;;820    	TCS_Start(tcs_MotorZ);
00005a  4814              LDR      r0,|L99.172|
00005c  7801              LDRB     r1,[r0,#0]  ; tcs_MotorZ
00005e  b929              CBNZ     r1,|L99.108|
000060  68c1              LDR      r1,[r0,#0xc]  ; tcs_MotorZ
000062  6809              LDR      r1,[r1,#0]
000064  6882              LDR      r2,[r0,#8]  ; tcs_MotorZ
000066  4421              ADD      r1,r1,r4
000068  6011              STR      r1,[r2,#0]
00006a  7005              STRB     r5,[r0,#0]
                  |L99.108|
;;;821    #ifndef MOVE_D
;;;822    	Init_TCS(&tcs_FMove, tmove, 3,FMove_HandlerQuick); // связывание структуры с таймером
00006c  4b10              LDR      r3,|L99.176|
00006e  2203              MOVS     r2,#3
000070  2100              MOVS     r1,#0
000072  4810              LDR      r0,|L99.180|
000074  f7fffffe          BL       Init_TCS
;;;823    	TCS_Start(tcs_FMove);
000078  480e              LDR      r0,|L99.180|
00007a  7801              LDRB     r1,[r0,#0]  ; tcs_FMove
00007c  2900              CMP      r1,#0
00007e  d105              BNE      |L99.140|
000080  68c1              LDR      r1,[r0,#0xc]  ; tcs_FMove
000082  6809              LDR      r1,[r1,#0]
000084  6882              LDR      r2,[r0,#8]  ; tcs_FMove
000086  4421              ADD      r1,r1,r4
000088  6011              STR      r1,[r2,#0]
00008a  7005              STRB     r5,[r0,#0]
                  |L99.140|
;;;824    #endif
;;;825    
;;;826    }
00008c  bd70              POP      {r4-r6,pc}
;;;827    
                          ENDP

00008e  0000              DCW      0x0000
                  |L99.144|
                          DCD      0x40008000
                  |L99.148|
                          DCD      MotorX_Handler
                  |L99.152|
                          DCD      tcs_MotorX
                  |L99.156|
                          DCD      0x002625a0
                  |L99.160|
                          DCD      MotorY_Handler
                  |L99.164|
                          DCD      tcs_MotorY
                  |L99.168|
                          DCD      MotorZ_Handler
                  |L99.172|
                          DCD      tcs_MotorZ
                  |L99.176|
                          DCD      FMove_HandlerQuick
                  |L99.180|
                          DCD      tcs_FMove

                          AREA ||i.ZZeroDat||, COMGROUP=ZZeroDat, CODE, READONLY, ALIGN=2

                  ZZeroDat PROC
;;;199    
;;;200    __inline void	ZZeroDat(void){
000000  b570              PUSH     {r4-r6,lr}
;;;201    		*dZPos = *(ms_Z.Pos) - ((*pHdat)*(*pZ_SPR)/(*pZ_PG_MM));
000002  4815              LDR      r0,|L105.88|
000004  6800              LDR      r0,[r0,#0]  ; pZ_SPR
000006  6800              LDR      r0,[r0,#0]
000008  f7fffffe          BL       __aeabi_ui2f
00000c  4913              LDR      r1,|L105.92|
00000e  6809              LDR      r1,[r1,#0]  ; pHdat
000010  6809              LDR      r1,[r1,#0]
000012  f7fffffe          BL       __aeabi_fmul
000016  4912              LDR      r1,|L105.96|
000018  6809              LDR      r1,[r1,#0]  ; pZ_PG_MM
00001a  6809              LDR      r1,[r1,#0]
00001c  f7fffffe          BL       __aeabi_fdiv
000020  4d10              LDR      r5,|L105.100|
000022  4604              MOV      r4,r0
000024  68a8              LDR      r0,[r5,#8]  ; ms_Z
000026  6800              LDR      r0,[r0,#0]
000028  f7fffffe          BL       __aeabi_i2f
00002c  4621              MOV      r1,r4
00002e  f7fffffe          BL       __aeabi_fsub
000032  f7fffffe          BL       __aeabi_f2iz
000036  490c              LDR      r1,|L105.104|
000038  4602              MOV      r2,r0
00003a  6809              LDR      r1,[r1,#0]  ; dZPos
;;;202    		Msg("ZZero Zpos %d dZpos %d\r\n",*(ms_Z.Pos),*dZPos);
00003c  6008              STR      r0,[r1,#0]
00003e  68a8              LDR      r0,[r5,#8]  ; ms_Z
000040  6801              LDR      r1,[r0,#0]
000042  480a              LDR      r0,|L105.108|
000044  f7fffffe          BL       Msg
;;;203    		SaveRegs();
000048  f7fffffe          BL       SaveRegs
;;;204    		// конец обнуления координаты Z по датчику
;;;205    		*pZZeroDat=0;
00004c  4908              LDR      r1,|L105.112|
00004e  2000              MOVS     r0,#0
000050  6809              LDR      r1,[r1,#0]  ; pZZeroDat
000052  7008              STRB     r0,[r1,#0]
;;;206    }
000054  bd70              POP      {r4-r6,pc}
;;;207    
                          ENDP

000056  0000              DCW      0x0000
                  |L105.88|
                          DCD      pZ_SPR
                  |L105.92|
                          DCD      pHdat
                  |L105.96|
                          DCD      pZ_PG_MM
                  |L105.100|
                          DCD      ms_Z
                  |L105.104|
                          DCD      dZPos
                  |L105.108|
                          DCD      ||.conststring||+0xdc
                  |L105.112|
                          DCD      pZZeroDat

                          AREA ||.data__ZZ9ByPassFrzE2f1||, COMGROUP=_ZZ9ByPassFrzE2f1, DATA, ALIGN=0

                  _ZZ9ByPassFrzE2f1
000000  01                DCB      0x01

                          AREA ||.data__ZZ9HTCorrFrzE2f2||, COMGROUP=_ZZ9HTCorrFrzE2f2, DATA, ALIGN=0

                  _ZZ9HTCorrFrzE2f2
000000  01                DCB      0x01

                          AREA ||.data__ZZ11ZZeroDatFrzE2f2||, COMGROUP=_ZZ11ZZeroDatFrzE2f2, DATA, ALIGN=0

                  _ZZ11ZZeroDatFrzE2f2
000000  01                DCB      0x01

                          AREA ||.data__ZZ15ZZCheckPointFrzE2f5||, COMGROUP=_ZZ15ZZCheckPointFrzE2f5, DATA, ALIGN=0

                  _ZZ15ZZCheckPointFrzE2f5
000000  01                DCB      0x01

                          AREA ||.data__ZZ15ZZCheckPointFrzE2f6||, COMGROUP=_ZZ15ZZCheckPointFrzE2f6, DATA, ALIGN=0

                  _ZZ15ZZCheckPointFrzE2f6
000000  01                DCB      0x01

                          AREA ||.data__ZZ13CheckPointFrzE2f3||, COMGROUP=_ZZ13CheckPointFrzE2f3, DATA, ALIGN=0

                  _ZZ13CheckPointFrzE2f3
000000  01                DCB      0x01

                          AREA ||.data__ZZ13CheckPointFrzE2f4||, COMGROUP=_ZZ13CheckPointFrzE2f4, DATA, ALIGN=0

                  _ZZ13CheckPointFrzE2f4
000000  01                DCB      0x01

                          AREA ||.data__ZZ15HTCheckPointFrzE2f5||, COMGROUP=_ZZ15HTCheckPointFrzE2f5, DATA, ALIGN=0

                  _ZZ15HTCheckPointFrzE2f5
000000  01                DCB      0x01

                          AREA ||.data__ZZ15HTCheckPointFrzE2f6||, COMGROUP=_ZZ15HTCheckPointFrzE2f6, DATA, ALIGN=0

                  _ZZ15HTCheckPointFrzE2f6
000000  01                DCB      0x01

                          AREA ||.data__ZZ20BtnAxisSwitchHandlerE1f||, COMGROUP=_ZZ20BtnAxisSwitchHandlerE1f, DATA, ALIGN=0

                  _ZZ20BtnAxisSwitchHandlerE1f
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorYHandlerE2fD||, COMGROUP=_ZZ17BtnsMotorYHandlerE2fD, DATA, ALIGN=0

                  _ZZ17BtnsMotorYHandlerE2fD
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorYHandlerE2fB||, COMGROUP=_ZZ17BtnsMotorYHandlerE2fB, DATA, ALIGN=0

                  _ZZ17BtnsMotorYHandlerE2fB
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorZHandlerE2fD||, COMGROUP=_ZZ17BtnsMotorZHandlerE2fD, DATA, ALIGN=0

                  _ZZ17BtnsMotorZHandlerE2fD
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorZHandlerE2fB||, COMGROUP=_ZZ17BtnsMotorZHandlerE2fB, DATA, ALIGN=0

                  _ZZ17BtnsMotorZHandlerE2fB
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorXHandlerE2fD||, COMGROUP=_ZZ17BtnsMotorXHandlerE2fD, DATA, ALIGN=0

                  _ZZ17BtnsMotorXHandlerE2fD
000000  01                DCB      0x01

                          AREA ||.data__ZZ17BtnsMotorXHandlerE2fB||, COMGROUP=_ZZ17BtnsMotorXHandlerE2fB, DATA, ALIGN=0

                  _ZZ17BtnsMotorXHandlerE2fB
000000  01                DCB      0x01

                          AREA ||.data__ZZ11Btn5HandlerE1f||, COMGROUP=_ZZ11Btn5HandlerE1f, DATA, ALIGN=0

                  _ZZ11Btn5HandlerE1f
000000  01                DCB      0x01

                          AREA ||.data__ZZ13CrushWaterFrzE1f||, COMGROUP=_ZZ13CrushWaterFrzE1f, DATA, ALIGN=0

                  _ZZ13CrushWaterFrzE1f
000000  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "Main\\Main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_Main_c_F____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_Main_c_F____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_Main_c_F____REVSH|
#line 462
|__asm___6_Main_c_F____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_Main_c_F____RRX|
#line 649
|__asm___6_Main_c_F____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0

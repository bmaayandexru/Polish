; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\handlers.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\handlers.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\handlers.crf Main\Handlers.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  CheckPrgFile PROC
;;;59     
;;;60     u8 CheckPrgFile(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;61     	s8 	res;
;;;62     	u32	i;
;;;63     	u8 tmps[50];
;;;64     //	Msg("PRGH %d\r\n",*pPrgFileHandle);
;;;65     	if (*pPrgFileHandle >= 0) {
000002  4cf7              LDR      r4,|L1.992|
000004  b08d              SUB      sp,sp,#0x34           ;60
000006  69a1              LDR      r1,[r4,#0x18]  ; pPrgFileHandle
000008  f9910000          LDRSB    r0,[r1,#0]
00000c  2800              CMP      r0,#0
00000e  da2f              BGE      |L1.112|
;;;66     		// всё хорошо файл открыт
;;;67     		return 1;
;;;68     	} else {
;;;69     		// *pPrgFileHandle < 0 
;;;70     		res = FS_Assign((u8*)pPrgFileName,pPrgFileHandle);
000010  6960              LDR      r0,[r4,#0x14]  ; pPrgFileName
000012  f7fffffe          BL       FS_Assign
;;;71     		if (res == FS_RESULT_OK) {
000016  2800              CMP      r0,#0
000018  69a0              LDR      r0,[r4,#0x18]  ; pPrgFileHandle
00001a  d004              BEQ      |L1.38|
;;;72     			res = FS_Reset(*pPrgFileHandle);
;;;73     			if (res == FS_RESULT_OK) {
;;;74     				// перемотка до нужного кадра
;;;75     				i=0;
;;;76     				while (i < *pCurCadr) {
;;;77     					res = bFS_ReadLn(*pPrgFileHandle,tmps,50);
;;;78     					if (res) {
;;;79     						Msg("Err ReadLn PrgFile %s : %d\r\n",pPrgFileName,res);
;;;80     						// ошибка
;;;81     						return 0;
;;;82     					}
;;;83     					i++;
;;;84     				}
;;;85     				return 1;
;;;86     			} else {
;;;87     				Msg("Err Reset PrgFile %s : %d\r\n",pPrgFileName,res);
;;;88     				FS_Close(pPrgFileHandle);
;;;89     				return 0;
;;;90     			}
;;;91     		} else {
;;;92     			Msg("Err Assing PrgFile %s : %d\r\n",pPrgFileName,*pPrgFileHandle);
00001c  f9902000          LDRSB    r2,[r0,#0]
000020  a0f0              ADR      r0,|L1.996|
;;;93     			return 0;
000022  6961              LDR      r1,[r4,#0x14]  ; pPrgFileName
000024  e01c              B        |L1.96|
                  |L1.38|
000026  f9900000          LDRSB    r0,[r0,#0]            ;72
00002a  f7fffffe          BL       FS_Reset
00002e  0002              MOVS     r2,r0                 ;72
000030  d009              BEQ      |L1.70|
000032  a0f4              ADR      r0,|L1.1028|
000034  6961              LDR      r1,[r4,#0x14]         ;87  ; pPrgFileName
000036  f7fffffe          BL       Msg
00003a  69a0              LDR      r0,[r4,#0x18]         ;88  ; pPrgFileHandle
00003c  f7fffffe          BL       FS_Close
                  |L1.64|
000040  2000              MOVS     r0,#0
                  |L1.66|
;;;94     		}
;;;95     	}
;;;96     }
000042  b00d              ADD      sp,sp,#0x34
000044  bd30              POP      {r4,r5,pc}
                  |L1.70|
000046  2500              MOVS     r5,#0                 ;75
000048  e00e              B        |L1.104|
                  |L1.74|
00004a  69a0              LDR      r0,[r4,#0x18]         ;77  ; pPrgFileHandle
00004c  2232              MOVS     r2,#0x32              ;77
00004e  4669              MOV      r1,sp                 ;77
000050  f9900000          LDRSB    r0,[r0,#0]            ;77
000054  f7fffffe          BL       bFS_ReadLn
000058  0002              MOVS     r2,r0                 ;77
00005a  d004              BEQ      |L1.102|
00005c  a0f0              ADR      r0,|L1.1056|
00005e  6961              LDR      r1,[r4,#0x14]         ;79  ; pPrgFileName
                  |L1.96|
000060  f7fffffe          BL       Msg
000064  e7ec              B        |L1.64|
                  |L1.102|
000066  1c6d              ADDS     r5,r5,#1              ;79
                  |L1.104|
000068  6aa0              LDR      r0,[r4,#0x28]         ;76  ; pCurCadr
00006a  6800              LDR      r0,[r0,#0]            ;76
00006c  42a8              CMP      r0,r5                 ;76
00006e  d8ec              BHI      |L1.74|
                  |L1.112|
000070  2001              MOVS     r0,#1                 ;85
000072  e7e6              B        |L1.66|
;;;97     
                          ENDP

                  InitPrgStreams PROC
;;;98     u8 InitPrgStreams(void){
000074  b570              PUSH     {r4-r6,lr}
;;;99     	// открываем файл 
;;;100    	// устанавливаем указатели потоков на 0
;;;101    	s8 	res;
;;;102    //	Msg("PRGH %d\r\n",*pPrgFileHandle);
;;;103    	ts.Pos = 0;
000076  48da              LDR      r0,|L1.992|
000078  2500              MOVS     r5,#0
00007a  304c              ADDS     r0,r0,#0x4c
;;;104    	rs.Pos = 0;
;;;105    	if (*pPrgFileHandle >= 0) {
00007c  4cd8              LDR      r4,|L1.992|
00007e  6045              STR      r5,[r0,#4]            ;104  ; ts
000080  3008              ADDS     r0,r0,#8              ;104
000082  6045              STR      r5,[r0,#4]  ; rs
000084  69a1              LDR      r1,[r4,#0x18]  ; pPrgFileHandle
000086  f9910000          LDRSB    r0,[r1,#0]
00008a  2800              CMP      r0,#0
00008c  db0d              BLT      |L1.170|
;;;106    		// всё хорошо файл открыт
;;;107    		InitStream(&ts,*pPrgFileHandle);
00008e  4601              MOV      r1,r0
000090  f104004c          ADD      r0,r4,#0x4c
000094  f7fffffe          BL       InitStream
;;;108    		InitStream(&rs,*pPrgFileHandle);
000098  69a0              LDR      r0,[r4,#0x18]  ; pPrgFileHandle
00009a  f9901000          LDRSB    r1,[r0,#0]
00009e  f1040054          ADD      r0,r4,#0x54
0000a2  f7fffffe          BL       InitStream
;;;109    		Msg("Open Prg Streams 1\r\n");
0000a6  a0e6              ADR      r0,|L1.1088|
;;;110    		*pNumReadLine=0;
;;;111    		return 1;
0000a8  e02d              B        |L1.262|
                  |L1.170|
;;;112    	} else {
;;;113    		// *pPrgFileHandle < 0 
;;;114    		res = FS_Assign((u8*)pPrgFileName,pPrgFileHandle);
0000aa  6960              LDR      r0,[r4,#0x14]  ; pPrgFileName
0000ac  f7fffffe          BL       FS_Assign
;;;115    		if (res == FS_RESULT_OK) {
0000b0  2800              CMP      r0,#0
0000b2  69a0              LDR      r0,[r4,#0x18]  ; pPrgFileHandle
0000b4  d006              BEQ      |L1.196|
;;;116    			res = FS_Reset(*pPrgFileHandle);
;;;117    			if (res == FS_RESULT_OK) {
;;;118    				InitStream(&ts,*pPrgFileHandle);
;;;119    				InitStream(&rs,*pPrgFileHandle);
;;;120    				Msg("Open Prg Streams 2\r\n");
;;;121    				*pNumReadLine=0;
;;;122    				return 1;
;;;123    			} else {
;;;124    				FS_Close(pPrgFileHandle);
;;;125    				Msg("Err Reset PrgFile %s : %d h %d\r\n",pPrgFileName,res,*pPrgFileHandle);
;;;126    				//Msg("h %d\r\n",*pPrgFileHandle);
;;;127    				return 0;
;;;128    			}
;;;129    		} else {
;;;130    			Msg("Err Assing PrgFile %s : %d\r\n",pPrgFileName,*pPrgFileHandle);
0000b6  f9902000          LDRSB    r2,[r0,#0]
0000ba  a0ca              ADR      r0,|L1.996|
0000bc  6961              LDR      r1,[r4,#0x14]  ; pPrgFileName
0000be  f7fffffe          BL       Msg
;;;131    			return 0;
0000c2  e010              B        |L1.230|
                  |L1.196|
0000c4  f9900000          LDRSB    r0,[r0,#0]            ;116
0000c8  f7fffffe          BL       FS_Reset
0000cc  0006              MOVS     r6,r0                 ;116
0000ce  69a0              LDR      r0,[r4,#0x18]         ;117  ; pPrgFileHandle
0000d0  d00b              BEQ      |L1.234|
0000d2  f7fffffe          BL       FS_Close
0000d6  69a0              LDR      r0,[r4,#0x18]         ;125  ; pPrgFileHandle
0000d8  4632              MOV      r2,r6                 ;125
0000da  6961              LDR      r1,[r4,#0x14]         ;125  ; pPrgFileName
0000dc  f9903000          LDRSB    r3,[r0,#0]            ;125
0000e0  a0dd              ADR      r0,|L1.1112|
0000e2  f7fffffe          BL       Msg
                  |L1.230|
0000e6  2000              MOVS     r0,#0
;;;132    		}
;;;133    	}
;;;134    }
0000e8  bd70              POP      {r4-r6,pc}
                  |L1.234|
0000ea  f9901000          LDRSB    r1,[r0,#0]            ;118
0000ee  48bc              LDR      r0,|L1.992|
0000f0  304c              ADDS     r0,r0,#0x4c           ;118
0000f2  f7fffffe          BL       InitStream
0000f6  69a0              LDR      r0,[r4,#0x18]         ;119  ; pPrgFileHandle
0000f8  f9901000          LDRSB    r1,[r0,#0]            ;119
0000fc  48b8              LDR      r0,|L1.992|
0000fe  3054              ADDS     r0,r0,#0x54           ;119
000100  f7fffffe          BL       InitStream
000104  a0dd              ADR      r0,|L1.1148|
                  |L1.262|
000106  f7fffffe          BL       Msg
00010a  6ae0              LDR      r0,[r4,#0x2c]         ;121  ; pNumReadLine
00010c  6005              STR      r5,[r0,#0]            ;122
00010e  2001              MOVS     r0,#1                 ;122
000110  bd70              POP      {r4-r6,pc}
;;;135    
                          ENDP

                  ReadNextLine PROC
;;;136    u8 ReadNextLine(char * CadrLine){
000112  b570              PUSH     {r4-r6,lr}
;;;137    //	Msg("pCurCadr:%d, pPrgLineCount:%d\r\n",*pCurCadr,*pPrgLineCount);
;;;138    	if (*pCurCadr < *pPrgLineCount) {
000114  4cb2              LDR      r4,|L1.992|
000116  4605              MOV      r5,r0                 ;136
000118  6aa0              LDR      r0,[r4,#0x28]  ; pCurCadr
00011a  69e1              LDR      r1,[r4,#0x1c]  ; pPrgLineCount
00011c  6800              LDR      r0,[r0,#0]
00011e  6809              LDR      r1,[r1,#0]
000120  4288              CMP      r0,r1
000122  d20b              BCS      |L1.316|
;;;139    		if (CheckPrgFile()) {
000124  f7fffffe          BL       CheckPrgFile
000128  2800              CMP      r0,#0
00012a  d008              BEQ      |L1.318|
;;;140    			if (bFS_ReadLn(*pPrgFileHandle,(u8*)CadrLine,50)==0) return 1;
00012c  69a0              LDR      r0,[r4,#0x18]  ; pPrgFileHandle
00012e  2232              MOVS     r2,#0x32
000130  4629              MOV      r1,r5
000132  f9900000          LDRSB    r0,[r0,#0]
000136  f7fffffe          BL       bFS_ReadLn
00013a  b108              CBZ      r0,|L1.320|
                  |L1.316|
;;;141    			else return 0;
;;;142    			//текущая строка
;;;143    			//Msg("%d l %d ",*pCurCadr,strlen(afile[*pCurCadr]));
;;;144    			//memcpy(CadrLine,afile[*pCurCadr],strlen(afile[*pCurCadr]));
;;;145    		} else return 0;
;;;146    	} 
;;;147    	// конец файла
;;;148    	return 0;
00013c  2000              MOVS     r0,#0
                  |L1.318|
;;;149    }
00013e  bd70              POP      {r4-r6,pc}
                  |L1.320|
000140  2001              MOVS     r0,#1                 ;140
000142  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

                  ReadPrevLine PROC
;;;151    u8 ReadPrevLine(char * CadrLine){
000144  b570              PUSH     {r4-r6,lr}
;;;152    	if (*pCurCadr > -1) {
000146  4ca6              LDR      r4,|L1.992|
000148  4605              MOV      r5,r0                 ;151
00014a  6aa0              LDR      r0,[r4,#0x28]  ; pCurCadr
00014c  6800              LDR      r0,[r0,#0]
00014e  2800              CMP      r0,#0
000150  db0b              BLT      |L1.362|
;;;153    		if (CheckPrgFile()) {
000152  f7fffffe          BL       CheckPrgFile
000156  2800              CMP      r0,#0
000158  d008              BEQ      |L1.364|
;;;154    			if (bFS_BReadLn(*pPrgFileHandle,(u8*)CadrLine,50)==0) return 1;
00015a  69a0              LDR      r0,[r4,#0x18]  ; pPrgFileHandle
00015c  2232              MOVS     r2,#0x32
00015e  4629              MOV      r1,r5
000160  f9900000          LDRSB    r0,[r0,#0]
000164  f7fffffe          BL       bFS_BReadLn
000168  b108              CBZ      r0,|L1.366|
                  |L1.362|
;;;155    			else return 0;
;;;156    			//текущая строка
;;;157    			//Msg("%d l %d ",*pCurCadr,strlen(afile[*pCurCadr]));
;;;158    			//memcpy(CadrLine,afile[*pCurCadr],strlen(afile[*pCurCadr]));
;;;159    		} else return 0;
;;;160    		// текущая строка
;;;161    		//Msg("%d l %d ",*pCurCadr,strlen(afile[*pCurCadr]));
;;;162    		//memcpy(CadrLine,afile[*pCurCadr],strlen(afile[*pCurCadr]));
;;;163    		//return 1;
;;;164    	} 
;;;165    	// конец файла
;;;166    	return 0;
00016a  2000              MOVS     r0,#0
                  |L1.364|
;;;167    }
00016c  bd70              POP      {r4-r6,pc}
                  |L1.366|
00016e  2001              MOVS     r0,#1                 ;154
000170  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  TryStrToFloat PROC
;;;169    u8 TryStrToFloat(char * Param,float * f){
000172  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;170      int i;
;;;171      u8 minus;
;;;172      u8 frac;
;;;173      float c; // целая часть
;;;174      float d; // дробная часть
;;;175      u8 curd; // текущая цифра
;;;176      char ch;
;;;177      u8 cdd;// количество цифр дробной части
;;;178    
;;;179      minus = 0; // предполагаем положительное число
000176  2600              MOVS     r6,#0
000178  b081              SUB      sp,sp,#4              ;169
00017a  460f              MOV      r7,r1                 ;169
;;;180      frac = 0;  // начинаем с целой части, frac=1 когда находим разделитель
00017c  46b0              MOV      r8,r6
;;;181      c = 0; // целая часть
00017e  46b1              MOV      r9,r6
;;;182      d = 0; // дробная часть
000180  46b2              MOV      r10,r6
;;;183      cdd = 0; // кодичество цифр дробной части
000182  4634              MOV      r4,r6
;;;184      for (i=0;i < strlen(Param);i++) {
000184  4635              MOV      r5,r6
;;;185    	ch = *(Param+i);
;;;186    	switch (ch) {
;;;187          case '-':
;;;188            if (i > 1) return 0; // минус не в начале - ошибка
;;;189            else minus = 1; // фиксируем наличие минуса
;;;190          break;
;;;191          case '+':
;;;192            if (i > 1) return 0; // плюс не в начале - ошибка
;;;193            else minus = 0; // фиксируем наличие плюса, хотя и так minus=0
;;;194          break;
;;;195    			case '.':
;;;196          case ',':
;;;197            if (frac == 1) return 0; // второй разделитель - ошибка
;;;198            else frac=1; // фиксируем переход на дробную часть
;;;199          break;
;;;200          case '0':
;;;201          case '1':
;;;202          case '2':
;;;203          case '3':
;;;204          case '4':
;;;205          case '5':
;;;206          case '6':
;;;207          case '7':
;;;208          case '8':
;;;209    	  case '9':
;;;210            curd=ch-48;
;;;211            if (frac == 0) 
;;;212    			// целая часть
;;;213              	c = 10*c+curd;
000186  f8dfb30c          LDR      r11,|L1.1172|
00018a  e03c              B        |L1.518|
                  |L1.396|
00018c  9801              LDR      r0,[sp,#4]            ;185
00018e  5d40              LDRB     r0,[r0,r5]            ;185
000190  f1a0012b          SUB      r1,r0,#0x2b           ;186
000194  290f              CMP      r1,#0xf               ;186
000196  d245              BCS      |L1.548|
000198  e8dff001          TBB      [pc,r1]               ;186
00019c  0c100810          DCB      0x0c,0x10,0x08,0x10
0001a0  44161616          DCB      0x44,0x16,0x16,0x16
0001a4  16161616          DCB      0x16,0x16,0x16,0x16
0001a8  16161600          DCB      0x16,0x16,0x16,0x00
0001ac  2d01              CMP      r5,#1                 ;188
0001ae  dc39              BGT      |L1.548|
0001b0  2601              MOVS     r6,#1                 ;189
0001b2  e027              B        |L1.516|
0001b4  2d01              CMP      r5,#1                 ;192
0001b6  dc35              BGT      |L1.548|
0001b8  2600              MOVS     r6,#0                 ;193
0001ba  e023              B        |L1.516|
0001bc  f1b80f01          CMP      r8,#1                 ;197
0001c0  d030              BEQ      |L1.548|
0001c2  f04f0801          MOV      r8,#1                 ;198
0001c6  e01d              B        |L1.516|
0001c8  3830              SUBS     r0,r0,#0x30           ;198
0001ca  b2c0              UXTB     r0,r0                 ;210
0001cc  f1b80f00          CMP      r8,#0                 ;211
0001d0  d00d              BEQ      |L1.494|
;;;214            else {
;;;215              	// дробная часть
;;;216             	 d = 10*d+curd;
0001d2  f7fffffe          BL       __aeabi_ui2f
0001d6  9000              STR      r0,[sp,#0]
0001d8  4659              MOV      r1,r11
0001da  4650              MOV      r0,r10
0001dc  f7fffffe          BL       __aeabi_fmul
0001e0  9900              LDR      r1,[sp,#0]
0001e2  f7fffffe          BL       __aeabi_fadd
0001e6  1c64              ADDS     r4,r4,#1
0001e8  4682              MOV      r10,r0
;;;217    			 cdd++;
0001ea  b2e4              UXTB     r4,r4
0001ec  e00a              B        |L1.516|
                  |L1.494|
0001ee  f7fffffe          BL       __aeabi_ui2f
0001f2  9000              STR      r0,[sp,#0]            ;213
0001f4  4659              MOV      r1,r11                ;213
0001f6  4648              MOV      r0,r9                 ;213
0001f8  f7fffffe          BL       __aeabi_fmul
0001fc  9900              LDR      r1,[sp,#0]            ;213
0001fe  f7fffffe          BL       __aeabi_fadd
000202  4681              MOV      r9,r0                 ;213
                  |L1.516|
000204  1c6d              ADDS     r5,r5,#1              ;213
                  |L1.518|
000206  9801              LDR      r0,[sp,#4]            ;184
000208  f7fffffe          BL       strlen
00020c  42a8              CMP      r0,r5                 ;184
00020e  d8bd              BHI      |L1.396|
000210  465d              MOV      r5,r11                ;213
                  |L1.530|
;;;218    		}
;;;219          break;
;;;220    	  default: return 0; // ошибка
;;;221        }
;;;222      }
;;;223      // корректируем дробную часть
;;;224      while (cdd) { d/=10; cdd--;}
000212  b154              CBZ      r4,|L1.554|
000214  4629              MOV      r1,r5
000216  4650              MOV      r0,r10
000218  f7fffffe          BL       __aeabi_fdiv
00021c  1e64              SUBS     r4,r4,#1
00021e  4682              MOV      r10,r0
000220  b2e4              UXTB     r4,r4
000222  e7f6              B        |L1.530|
                  |L1.548|
000224  2000              MOVS     r0,#0                 ;220
                  |L1.550|
;;;225      *f=c+d;
;;;226      if (minus == 1) *f=-*f;
;;;227      return 1;
;;;228    }
000226  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.554|
00022a  4651              MOV      r1,r10                ;225
00022c  4648              MOV      r0,r9                 ;225
00022e  f7fffffe          BL       __aeabi_fadd
000232  6038              STR      r0,[r7,#0]            ;226
000234  b116              CBZ      r6,|L1.572|
000236  f0804000          EOR      r0,r0,#0x80000000     ;226
00023a  6038              STR      r0,[r7,#0]            ;226
                  |L1.572|
00023c  2001              MOVS     r0,#1                 ;227
00023e  e7f2              B        |L1.550|
;;;229    
                          ENDP

                  IsCmd PROC
;;;230    u8 IsCmd(char ch){
000240  2847              CMP      r0,#0x47
000242  d01f              BEQ      |L1.644|
;;;231       if (
;;;232       		(ch == 'G') ||
;;;233       		(ch == 'g') ||
000244  2867              CMP      r0,#0x67
000246  d01d              BEQ      |L1.644|
;;;234       		(ch == 'M') ||
000248  284d              CMP      r0,#0x4d
00024a  d01b              BEQ      |L1.644|
;;;235       		(ch == 'm') ||
00024c  286d              CMP      r0,#0x6d
00024e  d019              BEQ      |L1.644|
;;;236       		(ch == 'X') ||
000250  2858              CMP      r0,#0x58
000252  d017              BEQ      |L1.644|
;;;237       		(ch == 'x') ||
000254  2878              CMP      r0,#0x78
000256  d015              BEQ      |L1.644|
;;;238       		(ch == 'Y') ||
000258  2859              CMP      r0,#0x59
00025a  d013              BEQ      |L1.644|
;;;239       		(ch == 'y') ||
00025c  2879              CMP      r0,#0x79
00025e  d011              BEQ      |L1.644|
;;;240       		(ch == 'P') ||
000260  2850              CMP      r0,#0x50
000262  d00f              BEQ      |L1.644|
;;;241       		(ch == 'p') ||
000264  2870              CMP      r0,#0x70
000266  d00d              BEQ      |L1.644|
;;;242       		(ch == 'S') ||
000268  2853              CMP      r0,#0x53
00026a  d00b              BEQ      |L1.644|
;;;243       		(ch == 's') ||
00026c  2873              CMP      r0,#0x73
00026e  d009              BEQ      |L1.644|
;;;244       		(ch == 'F') ||
000270  2846              CMP      r0,#0x46
000272  d007              BEQ      |L1.644|
;;;245       		(ch == 'f')	||
000274  2866              CMP      r0,#0x66
000276  d005              BEQ      |L1.644|
;;;246       		(ch == 'Z') ||
000278  285a              CMP      r0,#0x5a
00027a  d003              BEQ      |L1.644|
;;;247       		(ch == 'z')
00027c  287a              CMP      r0,#0x7a
00027e  d001              BEQ      |L1.644|
;;;248    	  ) return 1;
;;;249       else return 0;
000280  2000              MOVS     r0,#0
;;;250    }
000282  4770              BX       lr
                  |L1.644|
000284  2001              MOVS     r0,#1                 ;248
000286  4770              BX       lr
;;;251    
                          ENDP

                  IsDigits PROC
;;;252    u8 IsDigits(char ch){
000288  2830              CMP      r0,#0x30
00028a  d01b              BEQ      |L1.708|
;;;253       if (
;;;254       		(ch == '0') ||
;;;255       		(ch == '1') ||
00028c  2831              CMP      r0,#0x31
00028e  d019              BEQ      |L1.708|
;;;256       		(ch == '2') ||
000290  2832              CMP      r0,#0x32
000292  d017              BEQ      |L1.708|
;;;257       		(ch == '3') ||
000294  2833              CMP      r0,#0x33
000296  d015              BEQ      |L1.708|
;;;258       		(ch == '4') ||
000298  2834              CMP      r0,#0x34
00029a  d013              BEQ      |L1.708|
;;;259       		(ch == '5') ||
00029c  2835              CMP      r0,#0x35
00029e  d011              BEQ      |L1.708|
;;;260       		(ch == '6') ||
0002a0  2836              CMP      r0,#0x36
0002a2  d00f              BEQ      |L1.708|
;;;261       		(ch == '7') ||
0002a4  2837              CMP      r0,#0x37
0002a6  d00d              BEQ      |L1.708|
;;;262       		(ch == '8') ||
0002a8  2838              CMP      r0,#0x38
0002aa  d00b              BEQ      |L1.708|
;;;263       		(ch == '9') ||
0002ac  2839              CMP      r0,#0x39
0002ae  d009              BEQ      |L1.708|
;;;264       		(ch == '-') ||
0002b0  282d              CMP      r0,#0x2d
0002b2  d007              BEQ      |L1.708|
;;;265       		(ch == '+') ||
0002b4  282b              CMP      r0,#0x2b
0002b6  d005              BEQ      |L1.708|
;;;266    		(ch == '.') ||
0002b8  282e              CMP      r0,#0x2e
0002ba  d003              BEQ      |L1.708|
;;;267       		(ch == ',')
0002bc  282c              CMP      r0,#0x2c
0002be  d001              BEQ      |L1.708|
;;;268    	  ) return 1;
;;;269       else return 0;
0002c0  2000              MOVS     r0,#0
;;;270    }
0002c2  4770              BX       lr
                  |L1.708|
0002c4  2001              MOVS     r0,#1                 ;268
0002c6  4770              BX       lr
;;;271    
                          ENDP

                  ApplyCmd PROC
;;;272    u8	ApplyCmd(char cmd,char * Param, TBlock * pBlock){
0002c8  b5f8              PUSH     {r3-r7,lr}
0002ca  4614              MOV      r4,r2
0002cc  460a              MOV      r2,r1
0002ce  4606              MOV      r6,r0
;;;273    	float fParam;
;;;274    	u16 iParam;
;;;275    	u8 res;
;;;276    
;;;277    //	Msg("app %c %s\r\n",cmd,Param);
;;;278    //	fParam=atof(Param);
;;;279    
;;;280    	if (!TryStrToFloat(Param,&fParam)) {
0002d0  4669              MOV      r1,sp
0002d2  4610              MOV      r0,r2
0002d4  f7fffffe          BL       TryStrToFloat
0002d8  b328              CBZ      r0,|L1.806|
;;;281    	    // ошибка в параметре
;;;282    		return TRE_PARAM_ERROR;
;;;283    	}
;;;284    //	Msg("s %s d %d \r\n",Param,(int)(fParam*1000));
;;;285    //	return 0;
;;;286    	res = 0; // предполагаем что всё хорошо
0002da  2700              MOVS     r7,#0
;;;287      	// здесь готовый fParam
;;;288    	if ((cmd == 'g') || (cmd == 'G')) {
;;;289    		//Msg("G");
;;;290    		// G - команды
;;;291    	    iParam=(u16)ceil(fParam);
;;;292    	    res=0; // предполагаем что всё хорошо
;;;293    		switch (iParam) {
;;;294    	    	case	0:
;;;295    			case	1: 
;;;296    		        // G0 и G1
;;;297    	    	    (*pBlock).sGo = iParam;
;;;298    				// ОТДАДКА УБРАТЬ !!!
;;;299    //				Msg("AC sGo %d",(*pBlock).sGo);
;;;300    	      	break;
;;;301    	      	case 4:
;;;302    	        	// G4
;;;303    	        	(*pBlock).cPause = 1;
0002dc  2501              MOVS     r5,#1
0002de  2e67              CMP      r6,#0x67              ;288
0002e0  d023              BEQ      |L1.810|
0002e2  2e47              CMP      r6,#0x47              ;288
0002e4  d021              BEQ      |L1.810|
;;;304    	      	break;
;;;305    			case 20:
;;;306    			case 21:
;;;307    	        // G20-G21
;;;308    	        	if (iParam == 20) (*pBlock).rMul = 25.3;  // дюймы
;;;309    	          	else (*pBlock).rMul = 1;    // мм
;;;310    	      	break;
;;;311    	      	case 90:
;;;312    			case 91:
;;;313    	        	// G90-G91
;;;314    	        	(*pBlock).rSetSizeReg = iParam-90;
;;;315    	      	break;
;;;316    	      	default: res = TRE_UNKNOWN_G; // неизвестная G-команда
;;;317    		}
;;;318    	} else {
;;;319    		if ((cmd == 'x') || (cmd == 'X')) {
0002e6  2e78              CMP      r6,#0x78
0002e8  d049              BEQ      |L1.894|
0002ea  2e58              CMP      r6,#0x58
0002ec  d047              BEQ      |L1.894|
;;;320    			//Msg("Х");
;;;321    			// X - параметр
;;;322    		    (*pBlock).Xr = fParam;
;;;323    		    (*pBlock).comX = 1;
;;;324    		} else {
;;;325    			if ((cmd == 'y') || (cmd == 'Y')) {
0002ee  2e79              CMP      r6,#0x79
0002f0  d04a              BEQ      |L1.904|
0002f2  2e59              CMP      r6,#0x59
0002f4  d048              BEQ      |L1.904|
;;;326    				//Msg("Y");
;;;327    			    // Y - параметр
;;;328    			    (*pBlock).Yr=fParam;
;;;329    			    (*pBlock).comY=1;
;;;330    			} else {
;;;331    				if ((cmd == 'z') || (cmd == 'Z')) {
0002f6  2e7a              CMP      r6,#0x7a
0002f8  d04b              BEQ      |L1.914|
0002fa  2e5a              CMP      r6,#0x5a
0002fc  d049              BEQ      |L1.914|
;;;332    				    (*pBlock).Zr=fParam;
;;;333    				    (*pBlock).comZ=1;
;;;334    				} else {
;;;335    					if ((cmd == 'm') || (cmd == 'M')) {
0002fe  2e6d              CMP      r6,#0x6d
000300  d04c              BEQ      |L1.924|
000302  2e4d              CMP      r6,#0x4d
000304  d04a              BEQ      |L1.924|
;;;336    						//Msg("M");
;;;337    					    // M - команды
;;;338    					    iParam=(u16)ceil(fParam);
;;;339    					    res=0; // предполагаем что всё хорошо
;;;340    						switch (iParam) {
;;;341    					      case 0:
;;;342    								case 2:
;;;343    								case 120:	
;;;344    					        (*pBlock).cStop = 1;
;;;345    					        (*pBlock).sStop = iParam;
;;;346    					      break;
;;;347    					      case 3:
;;;348    								case 4:
;;;349    					        // M3 M4
;;;350    					        (*pBlock).cSpindel = 1;
;;;351    					        (*pBlock).sSpindel = iParam-2;
;;;352    									// добавляем паузу для разгона т.к. частотник не успевает разгонать шпиндель
;;;353    									(*pBlock).cPause = 1;
;;;354    									(*pBlock).lPause = *pRunSpPause; 
;;;355    								break;
;;;356    								case 5:
;;;357    					        (*pBlock).cSpindel = 1;
;;;358    					        (*pBlock).sSpindel = 0;
;;;359    					      break;
;;;360    								case 7:
;;;361    					        (*pBlock).cCold = 1;
;;;362    					        (*pBlock).sCold1 = 1;
;;;363    					      break;
;;;364    					      case 8:
;;;365    					        (*pBlock).cCold = 1;
;;;366    					        (*pBlock).sCold2 = 1;
;;;367    					      break;
;;;368    					      case 9:
;;;369    					        (*pBlock).cCold = 1;
;;;370    					        (*pBlock).sCold1 = 0;
;;;371    					        (*pBlock).sCold2 = 0;
;;;372    					      break;
;;;373    					      default: res=TRE_UNKNOWN_M; // неизвестная M-команда
;;;374    					    }
;;;375    					} else {
;;;376    						if ((cmd == 'f') || (cmd == 'F')) {
;;;377    							///Msg("F");
;;;378    						    // F - команда
;;;379    						    (*pBlock).cFeed = 1;
;;;380    							if (fParam < 0) res = TRE_LESSZERO_F; // отрицательное значение подачи
000306  4964              LDR      r1,|L1.1176|
000308  2e66              CMP      r6,#0x66              ;376
00030a  d065              BEQ      |L1.984|
00030c  2e46              CMP      r6,#0x46              ;376
00030e  d063              BEQ      |L1.984|
;;;381    						    (*pBlock).Feed = fParam;
;;;382    						} else {
;;;383    							if ((cmd == 's') || (cmd == 'S')) {
000310  2e73              CMP      r6,#0x73
000312  d062              BEQ      |L1.986|
000314  2e53              CMP      r6,#0x53
000316  d060              BEQ      |L1.986|
;;;384    							//	Msg("S");
;;;385    							    // S - команда
;;;386    							    if (fParam < 0) res = TRE_LESSZERO_S; // отрицательное значение скорости
;;;387    							    (*pBlock).cSpindel = 1;  // команда изменения скорости устанавливает наличие команды шпинделя
;;;388    							    (*pBlock).Speed = fParam;
;;;389    							} else {
;;;390    								if ((cmd == 'p') || (cmd == 'P')) {
000318  2e70              CMP      r6,#0x70
00031a  d05f              BEQ      |L1.988|
00031c  2e50              CMP      r6,#0x50
00031e  d05d              BEQ      |L1.988|
;;;391    									//Msg("P");
;;;392    								    // P - параметр
;;;393    								    if (fParam < 0) res = TRE_LESSZERO_P; // отрицательное значение паузы
;;;394    								    (*pBlock).lPause = (u16)ceil(fParam);
;;;395    								} else { 
;;;396    								   	// неизвестная команда, но сюда никогда не зайдет
;;;397    									//Msg("Un");
;;;398    								   	res = TRE_UNKNOWN_CMD;
000320  2701              MOVS     r7,#1
                  |L1.802|
;;;399    								}
;;;400    							} // ((cmd == 's') || (cmd == 'S'))
;;;401    						} //((cmd == 'f') || (cmd == 'F'))
;;;402    					} //((cmd == 'm') || (cmd == 'M'))
;;;403    				} //((cmd == 'z') || (cmd == 'Z'))
;;;404    			}//((cmd == 'y') || (cmd == 'Y'))
;;;405    		}//((cmd == 'x') || (cmd == 'X'))
;;;406    	}//((cmd == 'g') || (cmd == 'G'))
;;;407    	return res;
000322  4638              MOV      r0,r7
;;;408    }
000324  bdf8              POP      {r3-r7,pc}
                  |L1.806|
000326  2002              MOVS     r0,#2                 ;282
000328  bdf8              POP      {r3-r7,pc}
                  |L1.810|
00032a  9800              LDR      r0,[sp,#0]            ;291
00032c  f7fffffe          BL       __aeabi_f2d
000330  f7fffffe          BL       ceil
000334  f7fffffe          BL       __aeabi_d2uiz
000338  b280              UXTH     r0,r0                 ;291
00033a  2814              CMP      r0,#0x14              ;293
00033c  d019              BEQ      |L1.882|
00033e  dc05              BGT      |L1.844|
000340  b160              CBZ      r0,|L1.860|
000342  2801              CMP      r0,#1                 ;293
000344  d00a              BEQ      |L1.860|
000346  2804              CMP      r0,#4                 ;293
000348  d106              BNE      |L1.856|
00034a  e00a              B        |L1.866|
                  |L1.844|
00034c  2815              CMP      r0,#0x15              ;293
00034e  d00a              BEQ      |L1.870|
000350  285a              CMP      r0,#0x5a              ;293
000352  d010              BEQ      |L1.886|
000354  285b              CMP      r0,#0x5b              ;293
000356  d00e              BEQ      |L1.886|
                  |L1.856|
000358  2703              MOVS     r7,#3                 ;316
00035a  e7e2              B        |L1.802|
                  |L1.860|
00035c  f8840022          STRB     r0,[r4,#0x22]         ;297
000360  e7df              B        |L1.802|
                  |L1.866|
000362  7665              STRB     r5,[r4,#0x19]         ;303
000364  e7dd              B        |L1.802|
                  |L1.870|
000366  2814              CMP      r0,#0x14              ;308
000368  d003              BEQ      |L1.882|
00036a  f04f507e          MOV      r0,#0x3f800000        ;309
                  |L1.878|
00036e  62a0              STR      r0,[r4,#0x28]         ;309
000370  e7d7              B        |L1.802|
                  |L1.882|
000372  484a              LDR      r0,|L1.1180|
000374  e7fb              B        |L1.878|
                  |L1.886|
000376  385a              SUBS     r0,r0,#0x5a           ;308
000378  f884002d          STRB     r0,[r4,#0x2d]         ;314
00037c  e7d1              B        |L1.802|
                  |L1.894|
00037e  9800              LDR      r0,[sp,#0]            ;322
000380  6420              STR      r0,[r4,#0x40]         ;323
000382  f884503c          STRB     r5,[r4,#0x3c]         ;323
000386  e7cc              B        |L1.802|
                  |L1.904|
000388  9800              LDR      r0,[sp,#0]            ;328
00038a  6460              STR      r0,[r4,#0x44]         ;329
00038c  f884503d          STRB     r5,[r4,#0x3d]         ;329
000390  e7c7              B        |L1.802|
                  |L1.914|
000392  9800              LDR      r0,[sp,#0]            ;332
000394  64a0              STR      r0,[r4,#0x48]         ;333
000396  f884503e          STRB     r5,[r4,#0x3e]         ;333
00039a  e7c2              B        |L1.802|
                  |L1.924|
00039c  9800              LDR      r0,[sp,#0]            ;338
00039e  f7fffffe          BL       __aeabi_f2d
0003a2  f7fffffe          BL       ceil
0003a6  f7fffffe          BL       __aeabi_d2uiz
0003aa  b280              UXTH     r0,r0                 ;338
0003ac  2100              MOVS     r1,#0                 ;338
0003ae  2805              CMP      r0,#5                 ;340
0003b0  d076              BEQ      |L1.1184|
0003b2  dc07              BGT      |L1.964|
0003b4  b198              CBZ      r0,|L1.990|
0003b6  2802              CMP      r0,#2                 ;340
0003b8  d076              BEQ      |L1.1192|
0003ba  2803              CMP      r0,#3                 ;340
0003bc  d078              BEQ      |L1.1200|
0003be  2804              CMP      r0,#4                 ;340
0003c0  d108              BNE      |L1.980|
0003c2  e075              B        |L1.1200|
                  |L1.964|
0003c4  2807              CMP      r0,#7                 ;340
0003c6  d07e              BEQ      |L1.1222|
0003c8  2808              CMP      r0,#8                 ;340
0003ca  d07f              BEQ      |L1.1228|
0003cc  2809              CMP      r0,#9                 ;340
0003ce  d06a              BEQ      |L1.1190|
0003d0  2878              CMP      r0,#0x78              ;340
0003d2  d069              BEQ      |L1.1192|
                  |L1.980|
0003d4  2704              MOVS     r7,#4                 ;373
0003d6  e7a4              B        |L1.802|
                  |L1.984|
0003d8  e07f              B        |L1.1242|
                  |L1.986|
0003da  e085              B        |L1.1256|
                  |L1.988|
0003dc  e08b              B        |L1.1270|
                  |L1.990|
0003de  e063              B        |L1.1192|
                  |L1.992|
                          DCD      ||.data||
                  |L1.996|
0003e4  45727220          DCB      "Err Assing PrgFile %s : %d\r\n",0
0003e8  41737369
0003ec  6e672050
0003f0  72674669
0003f4  6c652025
0003f8  73203a20
0003fc  25640d0a
000400  00      
000401  00                DCB      0
000402  00                DCB      0
000403  00                DCB      0
                  |L1.1028|
000404  45727220          DCB      "Err Reset PrgFile %s : %d\r\n",0
000408  52657365
00040c  74205072
000410  6746696c
000414  65202573
000418  203a2025
00041c  640d0a00
                  |L1.1056|
000420  45727220          DCB      "Err ReadLn PrgFile %s : %d\r\n",0
000424  52656164
000428  4c6e2050
00042c  72674669
000430  6c652025
000434  73203a20
000438  25640d0a
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
000440  4f70656e          DCB      "Open Prg Streams 1\r\n",0
000444  20507267
000448  20537472
00044c  65616d73
000450  20310d0a
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L1.1112|
000458  45727220          DCB      "Err Reset PrgFile %s : %d h %d\r\n",0
00045c  52657365
000460  74205072
000464  6746696c
000468  65202573
00046c  203a2025
000470  64206820
000474  25640d0a
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L1.1148|
00047c  4f70656e          DCB      "Open Prg Streams 2\r\n",0
000480  20507267
000484  20537472
000488  65616d73
00048c  20320d0a
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
                          DCD      0x41200000
                  |L1.1176|
                          DCD      0x80800000
                  |L1.1180|
                          DCD      0x41ca6666
                  |L1.1184|
0004a0  e00e              B        |L1.1216|
0004a2  e010              B        |L1.1222|
0004a4  e012              B        |L1.1228|
                  |L1.1190|
0004a6  e014              B        |L1.1234|
                  |L1.1192|
0004a8  f8045f20          STRB     r5,[r4,#0x20]!        ;344
0004ac  7060              STRB     r0,[r4,#1]            ;345
0004ae  e738              B        |L1.802|
                  |L1.1200|
0004b0  7525              STRB     r5,[r4,#0x14]         ;350
0004b2  1e80              SUBS     r0,r0,#2              ;350
0004b4  7560              STRB     r0,[r4,#0x15]         ;351
0004b6  48fa              LDR      r0,|L1.2208|
0004b8  7665              STRB     r5,[r4,#0x19]         ;353
0004ba  6c00              LDR      r0,[r0,#0x40]         ;354  ; pRunSpPause
0004bc  6800              LDR      r0,[r0,#0]            ;354
0004be  e025              B        |L1.1292|
                  |L1.1216|
0004c0  7525              STRB     r5,[r4,#0x14]         ;357
0004c2  7561              STRB     r1,[r4,#0x15]         ;358
0004c4  e72d              B        |L1.802|
                  |L1.1222|
0004c6  75a5              STRB     r5,[r4,#0x16]         ;361
0004c8  75e5              STRB     r5,[r4,#0x17]         ;362
0004ca  e72a              B        |L1.802|
                  |L1.1228|
0004cc  75a5              STRB     r5,[r4,#0x16]         ;365
0004ce  7625              STRB     r5,[r4,#0x18]         ;366
0004d0  e727              B        |L1.802|
                  |L1.1234|
0004d2  75a5              STRB     r5,[r4,#0x16]         ;369
0004d4  75e1              STRB     r1,[r4,#0x17]         ;370
0004d6  7621              STRB     r1,[r4,#0x18]         ;371
0004d8  e723              B        |L1.802|
                  |L1.1242|
0004da  7265              STRB     r5,[r4,#9]            ;379
0004dc  9800              LDR      r0,[sp,#0]            ;380
0004de  4288              CMP      r0,r1                 ;380
0004e0  d300              BCC      |L1.1252|
0004e2  2705              MOVS     r7,#5                 ;380
                  |L1.1252|
0004e4  60e0              STR      r0,[r4,#0xc]          ;381
0004e6  e71c              B        |L1.802|
                  |L1.1256|
0004e8  9800              LDR      r0,[sp,#0]            ;386
0004ea  4288              CMP      r0,r1                 ;386
0004ec  d300              BCC      |L1.1264|
0004ee  2706              MOVS     r7,#6                 ;386
                  |L1.1264|
0004f0  7525              STRB     r5,[r4,#0x14]         ;387
0004f2  6120              STR      r0,[r4,#0x10]         ;388
0004f4  e715              B        |L1.802|
                  |L1.1270|
0004f6  9800              LDR      r0,[sp,#0]            ;393
0004f8  4288              CMP      r0,r1                 ;393
0004fa  d300              BCC      |L1.1278|
0004fc  2707              MOVS     r7,#7                 ;393
                  |L1.1278|
0004fe  f7fffffe          BL       __aeabi_f2d
000502  f7fffffe          BL       ceil
000506  f7fffffe          BL       __aeabi_d2uiz
00050a  b280              UXTH     r0,r0                 ;394
                  |L1.1292|
00050c  61e0              STR      r0,[r4,#0x1c]         ;394
00050e  e708              B        |L1.802|
;;;409    
                          ENDP

                  InitFirstBlockFrz PROC
;;;410    void InitFirstBlockFrz(TBlock * ib){
000510  e92d41fc          PUSH     {r2-r8,lr}
000514  4604              MOV      r4,r0
;;;411    	// определение стартовых позиций для движение Xs,Xi,Ys,Yi,Zs,Zi
;;;412    //	Msg("IFB\r\n ");
;;;413      	memset((u8*)ib,0,sizeof (*ib));
000516  21e8              MOVS     r1,#0xe8
000518  f7fffffe          BL       __aeabi_memclr4
;;;414    	// размеры в мм
;;;415    	(*ib).Mul = 1;
00051c  f04f507e          MOV      r0,#0x3f800000
;;;416    	(*ib).rMul = 1;
000520  6260              STR      r0,[r4,#0x24]
;;;417      	XYZImpToXYZ(	*(ms_X.Pos),		*(ms_Y.Pos),		*(ms_Z.Pos),
000522  f1040138          ADD      r1,r4,#0x38
000526  62a0              STR      r0,[r4,#0x28]
000528  4dde              LDR      r5,|L1.2212|
00052a  1f08              SUBS     r0,r1,#4
00052c  e9cd0100          STRD     r0,r1,[sp,#0]
000530  68a8              LDR      r0,[r5,#8]  ; ms_Z
000532  4edd              LDR      r6,|L1.2216|
000534  6802              LDR      r2,[r0,#0]
000536  68b0              LDR      r0,[r6,#8]  ; ms_Y
000538  4fdc              LDR      r7,|L1.2220|
00053a  6801              LDR      r1,[r0,#0]
00053c  68b8              LDR      r0,[r7,#8]  ; ms_X
00053e  f1040330          ADD      r3,r4,#0x30
000542  6800              LDR      r0,[r0,#0]
000544  f7fffffe          BL       XYZImpToXYZ
;;;418       					&((*ib).Xs),	&((*ib).Ys),	&((*ib).Zs));
;;;419    	(*ib).Xsi = *(ms_X.Pos);
000548  68b8              LDR      r0,[r7,#8]  ; ms_X
00054a  6800              LDR      r0,[r0,#0]
;;;420    	(*ib).Ysi = *(ms_Y.Pos);
00054c  6660              STR      r0,[r4,#0x64]
00054e  68b0              LDR      r0,[r6,#8]  ; ms_Y
000550  6800              LDR      r0,[r0,#0]
;;;421    	(*ib).Zsi = *(ms_Z.Pos);
000552  66a0              STR      r0,[r4,#0x68]
000554  68a8              LDR      r0,[r5,#8]  ; ms_Z
000556  6800              LDR      r0,[r0,#0]
;;;422    	(*ib).Xi = *(ms_X.Pos);
000558  66e0              STR      r0,[r4,#0x6c]
00055a  68b8              LDR      r0,[r7,#8]  ; ms_X
00055c  6800              LDR      r0,[r0,#0]
;;;423    	(*ib).Yi = *(ms_Y.Pos);
00055e  65a0              STR      r0,[r4,#0x58]
000560  68b0              LDR      r0,[r6,#8]  ; ms_Y
000562  6800              LDR      r0,[r0,#0]
;;;424    	(*ib).Zi = *(ms_Z.Pos);
000564  65e0              STR      r0,[r4,#0x5c]
000566  68a8              LDR      r0,[r5,#8]  ; ms_Z
000568  6800              LDR      r0,[r0,#0]
00056a  6620              STR      r0,[r4,#0x60]
                  |L1.1388|
;;;425    
;;;426    //	Msg("Xs %d Ys %d Zs %d\r\n",OUTF((*ib).Xs),OUTF((*ib).Ys),OUTF((*ib).Zs));
;;;427    //	Msg("Xsi %d Ysi %d Zsi %d\r\n",((*ib).Xsi),((*ib).Ysi),((*ib).Zsi));
;;;428    
;;;429    }
00056c  e8bd81fc          POP      {r2-r8,pc}
;;;430    
                          ENDP

                  InitNextBlock PROC
;;;431    void InitNextBlock(TBlock * pBlock){
000570  6cc1              LDR      r1,[r0,#0x4c]
;;;432    	//Msg("INB \r\n");
;;;433    	// точка назначения становится текущей
;;;434      	(*pBlock).Xs = (*pBlock).Xd;
;;;435      	(*pBlock).Ys = (*pBlock).Yd;
000572  6301              STR      r1,[r0,#0x30]
000574  6d01              LDR      r1,[r0,#0x50]
;;;436      	(*pBlock).Zs = (*pBlock).Zd;
000576  6341              STR      r1,[r0,#0x34]
000578  6d41              LDR      r1,[r0,#0x54]
00057a  6381              STR      r1,[r0,#0x38]
;;;437    	//Msg("Xs %f Ys %f \r\n",(*pBlock).Xs,(*pBlock).Ys);
;;;438    }
00057c  4770              BX       lr
;;;439    
                          ENDP

                  InitBlockByPrev PROC
;;;440    void InitBlockByPrev(TBlock * ib,TBlock * prevb){
00057e  b570              PUSH     {r4-r6,lr}
000580  000c              MOVS     r4,r1
000582  4605              MOV      r5,r0
000584  d027              BEQ      |L1.1494|
;;;441    	//Msg("INB \r\n");
;;;442    	if (prevb!=NULL) {
;;;443    	  	memset((u8*)ib,0,sizeof (*pBlock));
000586  21e8              MOVS     r1,#0xe8
000588  f7fffffe          BL       __aeabi_memclr4
;;;444      		(*ib).Xs = (*prevb).Xd;
00058c  6ce0              LDR      r0,[r4,#0x4c]
;;;445      		(*ib).Ys = (*prevb).Yd;
00058e  6328              STR      r0,[r5,#0x30]
000590  6d20              LDR      r0,[r4,#0x50]
;;;446      		(*ib).Zs = (*prevb).Zd;
000592  6368              STR      r0,[r5,#0x34]
000594  6d60              LDR      r0,[r4,#0x54]
;;;447      		(*ib).Xsi = (*prevb).Xdi;			   
000596  63a8              STR      r0,[r5,#0x38]
000598  6f20              LDR      r0,[r4,#0x70]
;;;448      		(*ib).Ysi = (*prevb).Ydi;
00059a  6668              STR      r0,[r5,#0x64]
00059c  6f60              LDR      r0,[r4,#0x74]
;;;449      		(*ib).Zsi = (*prevb).Zdi;
00059e  66a8              STR      r0,[r5,#0x68]
0005a0  6fa0              LDR      r0,[r4,#0x78]
;;;450      		(*ib).sGo = (*prevb).sGo;
0005a2  66e8              STR      r0,[r5,#0x6c]
0005a4  f8940022          LDRB     r0,[r4,#0x22]
0005a8  f8850022          STRB     r0,[r5,#0x22]
;;;451      		(*ib).SetSizeReg = (*prevb).SetSizeReg;
0005ac  f894002c          LDRB     r0,[r4,#0x2c]
0005b0  f885002c          STRB     r0,[r5,#0x2c]
;;;452      		(*ib).Mul = (*prevb).Mul;
0005b4  6a60              LDR      r0,[r4,#0x24]
;;;453      		(*ib).rSetSizeReg = (*prevb).rSetSizeReg;
0005b6  6268              STR      r0,[r5,#0x24]
0005b8  f894002d          LDRB     r0,[r4,#0x2d]
0005bc  f885002d          STRB     r0,[r5,#0x2d]
;;;454      		(*ib).rMul = (*prevb).rMul;
0005c0  6aa0              LDR      r0,[r4,#0x28]
;;;455      		(*ib).Speed = (*prevb).Speed;
0005c2  62a8              STR      r0,[r5,#0x28]
0005c4  f8540f10          LDR      r0,[r4,#0x10]!
0005c8  f8450f10          STR      r0,[r5,#0x10]!
;;;456      		(*ib).Feed = (*prevb).Feed;
0005cc  f8540c04          LDR      r0,[r4,#-4]
0005d0  f8450c04          STR      r0,[r5,#-4]
;;;457    	//	Msg("psGo %d\r\n",(*prevb).sGo);
;;;458    	//	Msg("INB pZs %d pZd %d\r\n",(int)((*prevb).Zs),(int)((*prevb).Zd));
;;;459    	} else InitFirstBlockFrz(ib);
;;;460    //	Msg("ibsGo %d\r\n",(*ib).sGo);
;;;461    }
0005d4  bd70              POP      {r4-r6,pc}
                  |L1.1494|
0005d6  e8bd4070          POP      {r4-r6,lr}            ;459
0005da  e7fe              B        InitFirstBlockFrz
;;;462    
                          ENDP

                  CalcBlockFrz PROC
;;;464    
;;;465    void CalcBlockFrz(TBlock * pB,u8 exe){
0005dc  e92d41fc          PUSH     {r2-r8,lr}
0005e0  4688              MOV      r8,r1
;;;466    //	float Li;
;;;467    	// определение точек назначения Xd,Yd,Zd
;;;468    	// по текущим настройкам блока
;;;469    
;;;470      (*pB).SetSizeReg = (*pB).rSetSizeReg;
0005e2  f890102d          LDRB     r1,[r0,#0x2d]
0005e6  f880102c          STRB     r1,[r0,#0x2c]
;;;471      (*pB).Mul = (*pB).rMul;
0005ea  6a87              LDR      r7,[r0,#0x28]
0005ec  4604              MOV      r4,r0                 ;465
;;;472      if ((*pB).SetSizeReg == 0) {
;;;473        // абсолютные координаты
;;;474        if ((*pB).comX == 1) {
0005ee  6247              STR      r7,[r0,#0x24]
0005f0  f890003c          LDRB     r0,[r0,#0x3c]
;;;475          // была команда X
;;;476          (*pB).Xd = (*pB).Xr*(*pB).Mul;
;;;477        } else {
;;;478          // команды X не было
;;;479          (*pB).Xd = (*pB).Xs;
;;;480        }
;;;481        if ((*pB).comY == 1) {
0005f4  f894603d          LDRB     r6,[r4,#0x3d]
;;;482          // была команда Y
;;;483          (*pB).Yd = (*pB).Yr*(*pB).Mul;
;;;484        } else {
;;;485          // команды Y не было
;;;486          (*pB).Yd = (*pB).Ys;
;;;487        }
;;;488        if ((*pB).comZ == 1) {
0005f8  f894503e          LDRB     r5,[r4,#0x3e]
0005fc  b151              CBZ      r1,|L1.1556|
;;;489          // была команда Z
;;;490          (*pB).Zd = (*pB).Zr*(*pB).Mul;
;;;491        } else {
;;;492          // команды z не было
;;;493          (*pB).Zd = (*pB).Zs;
;;;494        }
;;;495      } else {
;;;496        // относительные координаты
;;;497        if ((*pB).comX == 1) {
0005fe  2801              CMP      r0,#1
000600  d023              BEQ      |L1.1610|
;;;498          // была команда X
;;;499          (*pB).Xd = (*pB).Xs+(*pB).Xr*(*pB).Mul;
;;;500        } else {
;;;501          // команды X не было
;;;502          (*pB).Xd = (*pB).Xs;
000602  6b20              LDR      r0,[r4,#0x30]
                  |L1.1540|
;;;503        }
;;;504        if ((*pB).comY == 1) {
000604  64e0              STR      r0,[r4,#0x4c]
000606  2e01              CMP      r6,#1
000608  d027              BEQ      |L1.1626|
;;;505          // была команда Y
;;;506          (*pB).Yd = (*pB).Ys + (*pB).Yr*(*pB).Mul;
;;;507        } else {
;;;508          // команды Y не было
;;;509          (*pB).Yd = (*pB).Ys;
00060a  6b60              LDR      r0,[r4,#0x34]
                  |L1.1548|
;;;510        }
;;;511        if ((*pB).comZ == 1) {
00060c  6520              STR      r0,[r4,#0x50]
00060e  2d01              CMP      r5,#1
000610  d02b              BEQ      |L1.1642|
000612  e009              B        |L1.1576|
                  |L1.1556|
000614  2801              CMP      r0,#1                 ;474
000616  d009              BEQ      |L1.1580|
000618  6b20              LDR      r0,[r4,#0x30]         ;479
                  |L1.1562|
00061a  64e0              STR      r0,[r4,#0x4c]         ;481
00061c  2e01              CMP      r6,#1                 ;481
00061e  d00a              BEQ      |L1.1590|
000620  6b60              LDR      r0,[r4,#0x34]         ;486
                  |L1.1570|
000622  6520              STR      r0,[r4,#0x50]         ;488
000624  2d01              CMP      r5,#1                 ;488
000626  d00b              BEQ      |L1.1600|
                  |L1.1576|
000628  6ba0              LDR      r0,[r4,#0x38]         ;493
00062a  e025              B        |L1.1656|
                  |L1.1580|
00062c  4639              MOV      r1,r7                 ;476
00062e  6c20              LDR      r0,[r4,#0x40]         ;476
000630  f7fffffe          BL       __aeabi_fmul
000634  e7f1              B        |L1.1562|
                  |L1.1590|
000636  4639              MOV      r1,r7                 ;483
000638  6c60              LDR      r0,[r4,#0x44]         ;483
00063a  f7fffffe          BL       __aeabi_fmul
00063e  e7f0              B        |L1.1570|
                  |L1.1600|
000640  4639              MOV      r1,r7                 ;490
000642  6ca0              LDR      r0,[r4,#0x48]         ;490
000644  f7fffffe          BL       __aeabi_fmul
000648  e016              B        |L1.1656|
                  |L1.1610|
00064a  4639              MOV      r1,r7                 ;499
00064c  6c20              LDR      r0,[r4,#0x40]         ;499
00064e  f7fffffe          BL       __aeabi_fmul
000652  6b21              LDR      r1,[r4,#0x30]         ;499
000654  f7fffffe          BL       __aeabi_fadd
000658  e7d4              B        |L1.1540|
                  |L1.1626|
00065a  4639              MOV      r1,r7                 ;506
00065c  6c60              LDR      r0,[r4,#0x44]         ;506
00065e  f7fffffe          BL       __aeabi_fmul
000662  6b61              LDR      r1,[r4,#0x34]         ;506
000664  f7fffffe          BL       __aeabi_fadd
000668  e7d0              B        |L1.1548|
                  |L1.1642|
;;;512          // была команда Z
;;;513          (*pB).Zd = (*pB).Zs + (*pB).Zr*(*pB).Mul;
00066a  4639              MOV      r1,r7
00066c  6ca0              LDR      r0,[r4,#0x48]
00066e  f7fffffe          BL       __aeabi_fmul
000672  6ba1              LDR      r1,[r4,#0x38]
000674  f7fffffe          BL       __aeabi_fadd
                  |L1.1656|
;;;514        } else {
;;;515          // команды Z не было
;;;516          (*pB).Zd = (*pB).Zs;
;;;517        }
;;;518      }
;;;519    
;;;520    //	Msg("\t\t\t\tsGo %d N %D\r\n",(*pB).sGo,(*pB).NumLine);
;;;521    //	Msg("\t\t\t\tXs %d Ys %d Zs %d \r\n",OUTF((*pB).Xs),OUTF((*pB).Ys),OUTF((*pB).Zs));
;;;522    //	Msg("\t\t\t\tXd %d Yd %d Zd %d \r\n",OUTF((*pB).Xd),OUTF((*pB).Yd),OUTF((*pB).Zd));
;;;523    
;;;524      //return;
;;;525    //  if (((*pB).sGo == 1)&&(exe)) {
;;;526    //	Msg("%d",exe);	
;;;527      if (exe) {
000678  6560              STR      r0,[r4,#0x54]
00067a  f1b80f00          CMP      r8,#0
00067e  d045              BEQ      |L1.1804|
;;;528      	// вычисление служебной информации для алгоримта брозенхейма
;;;529    		XYZToXYZImpZcomp((*pB).Xd,(*pB).Yd,(*pB).Zd,
000680  f1040178          ADD      r1,r4,#0x78
000684  1f08              SUBS     r0,r1,#4
000686  e9cd0100          STRD     r0,r1,[sp,#0]
00068a  3828              SUBS     r0,r0,#0x28
00068c  f1040370          ADD      r3,r4,#0x70
000690  c807              LDM      r0,{r0-r2}
000692  f7fffffe          BL       XYZToXYZImpZcomp
;;;530    											&(*pB).Xdi,&(*pB).Ydi,&(*pB).Zdi);
;;;531    //	XYZToXYZImp((*pB).Xd,(*pB).Yd,(*pB).Zd,
;;;532    //  				  &(*pB).Xdi,&(*pB).Ydi,&(*pB).Zdi);
;;;533      	(*pB).Xi = (*pB).Xsi;
000696  6e60              LDR      r0,[r4,#0x64]
;;;534      	(*pB).Yi = (*pB).Ysi;
000698  65a0              STR      r0,[r4,#0x58]
00069a  6ea1              LDR      r1,[r4,#0x68]
;;;535    		(*pB).Zi = (*pB).Zsi;
00069c  65e1              STR      r1,[r4,#0x5c]
00069e  6ee1              LDR      r1,[r4,#0x6c]
;;;536      	(*pB).dXi = abss32((*pB).Xdi - (*pB).Xsi);
0006a0  6621              STR      r1,[r4,#0x60]
0006a2  6f21              LDR      r1,[r4,#0x70]
0006a4  1a08              SUBS     r0,r1,r0
0006a6  f7fffffe          BL       abss32
;;;537      	(*pB).dYi = abss32((*pB).Ydi - (*pB).Ysi);
0006aa  67e0              STR      r0,[r4,#0x7c]
0006ac  6ea1              LDR      r1,[r4,#0x68]
0006ae  6f60              LDR      r0,[r4,#0x74]
0006b0  1a40              SUBS     r0,r0,r1
0006b2  f7fffffe          BL       abss32
;;;538    		(*pB).dZi = abss32((*pB).Zdi - (*pB).Zsi);
0006b6  f8c40080          STR      r0,[r4,#0x80]
0006ba  6ee1              LDR      r1,[r4,#0x6c]
0006bc  6fa0              LDR      r0,[r4,#0x78]
0006be  1a40              SUBS     r0,r0,r1
0006c0  f7fffffe          BL       abss32
;;;539    	if (((*pB).dXi==0)&&((*pB).dYi==0)&&((*pB).dZi==0)) {
0006c4  f8c40084          STR      r0,[r4,#0x84]
0006c8  6fe1              LDR      r1,[r4,#0x7c]
0006ca  b919              CBNZ     r1,|L1.1748|
0006cc  f8d41080          LDR      r1,[r4,#0x80]
0006d0  b901              CBNZ     r1,|L1.1748|
0006d2  b148              CBZ      r0,|L1.1768|
                  |L1.1748|
;;;540    		// блок без движения все приращения нулевые
;;;541    		// его просто нужно пропустить
;;;542    		(*pB).Nomove = (1&& (!(*pB).cFeed)  && (!(*pB).cSpindel) && (!(*pB).cCold) && \
;;;543    				 			(!(*pB).cPause) && (!(*pB).cStop)    && ((*pB).sGo==1));
;;;544    
;;;545    //		Msg("B");
;;;546    	} else {
;;;547    		// блок с движением можно продолжить расчеты
;;;548    	 	(*pB).Nomove = 0; 
0006d4  2700              MOVS     r7,#0
0006d6  f88470a8          STRB     r7,[r4,#0xa8]
;;;549    		// определение направлений движения
;;;550    		(*pB).signX = (*pB).Xsi < (*pB).Xdi ? 1 : -1;
0006da  6f22              LDR      r2,[r4,#0x70]
0006dc  6e61              LDR      r1,[r4,#0x64]
0006de  1e78              SUBS     r0,r7,#1
0006e0  4291              CMP      r1,r2
0006e2  da14              BGE      |L1.1806|
0006e4  2101              MOVS     r1,#1
0006e6  e013              B        |L1.1808|
                  |L1.1768|
0006e8  7a60              LDRB     r0,[r4,#9]            ;542
0006ea  b960              CBNZ     r0,|L1.1798|
0006ec  7d20              LDRB     r0,[r4,#0x14]         ;542
0006ee  b950              CBNZ     r0,|L1.1798|
0006f0  7da0              LDRB     r0,[r4,#0x16]         ;542
0006f2  b940              CBNZ     r0,|L1.1798|
0006f4  7e60              LDRB     r0,[r4,#0x19]         ;543
0006f6  b930              CBNZ     r0,|L1.1798|
0006f8  f8940020          LDRB     r0,[r4,#0x20]         ;543
0006fc  b918              CBNZ     r0,|L1.1798|
0006fe  f8940022          LDRB     r0,[r4,#0x22]         ;543
000702  2801              CMP      r0,#1                 ;543
000704  d000              BEQ      |L1.1800|
                  |L1.1798|
000706  2000              MOVS     r0,#0                 ;543
                  |L1.1800|
000708  f88400a8          STRB     r0,[r4,#0xa8]         ;543
                  |L1.1804|
;;;551        (*pB).signY = (*pB).Ysi < (*pB).Ydi ? 1 : -1;
;;;552    		(*pB).signZ = (*pB).Zsi < (*pB).Zdi ? 1 : -1;
;;;553    //*****************************************
;;;554    		(*pB).dS=sqrt(sqr((*pB).Xd-(*pB).Xs)+sqr((*pB).Yd-(*pB).Ys)+sqr((*pB).Zd-(*pB).Zs));
;;;555    		
;;;556    //    L = sqrt(	(double)((*pB).dXi*(*pB).dXi*1.0)+
;;;557    //							(double)((*pB).dYi*(*pB).dYi*1.0)+
;;;558    //							(double)((*pB).dZi*(*pB).dZi*1.0)
;;;559    //						);
;;;560        (*pB).Li = sqrt(	sqr((*pB).dXi*1.0)+
;;;561    							sqr((*pB).dYi*1.0)+
;;;562    							sqr((*pB).dZi*1.0)
;;;563    						);
;;;564    		if (((*pB).dXi >= (*pB).dYi)&&((*pB).dXi >= (*pB).dZi))  {
;;;565    			// ведущая ось X
;;;566    			(*pB).Lax = 0;
;;;567       		(*pB).e1 = (*pB).dXi - (*pB).dYi;
;;;568      		(*pB).e2 = (*pB).dXi - (*pB).dZi;
;;;569    			(*pB).dS = (*pB).dS/(*pB).dXi;
;;;570    			(*pB).Laxi = (*pB).dXi;
;;;571    		} else {
;;;572      			if (((*pB).dYi >= (*pB).dXi)&&((*pB).dYi >= (*pB).dZi))  {
;;;573        			// ведущая ось Y
;;;574    					(*pB).Lax = 1;
;;;575    					//fmvs.Rway = fmvs.dYi;
;;;576           		(*pB).e1 = (*pB).dYi - (*pB).dXi;
;;;577    	  			(*pB).e2 = (*pB).dYi - (*pB).dZi;
;;;578    					(*pB).dS = (*pB).dS/(*pB).dYi;
;;;579    					(*pB).Laxi = (*pB).dYi;
;;;580      			} else 
;;;581      			if (((*pB).dZi >= (*pB).dXi)&&((*pB).dZi >= (*pB).dYi))  {
;;;582        			// ведущая ось Z
;;;583    					(*pB).Lax = 2;
;;;584    					//fmvs.Rway = fmvs.dZi;
;;;585    					(*pB).e1 = (*pB).dZi - (*pB).dXi;
;;;586    					(*pB).e2 = (*pB).dZi - (*pB).dYi;
;;;587    					(*pB).dS = (*pB).dS/(*pB).dZi;
;;;588    					(*pB).Laxi = (*pB).dZi;
;;;589      			};
;;;590    		}
;;;591    		// определение промежуточной велисины интевала Tb
;;;592    		// при движении T = Tb / Vc
;;;593    		//Msg("%s :",(*pB).s);
;;;594    		switch ((*pB).Lax) {
;;;595    			case 0:	(*pB).Tb = (int)((*pX_PG_MM)*(*pB).Li*K1/((*pX_SPR)*  (*pB).dXi)); 
;;;596    //				Msg("dXi %d L %d Tb %d\r\n",(*pB).dXi,OUTF1((*pB).Li),(*pB).Tb);
;;;597    				break;
;;;598    			case 1:	(*pB).Tb = (int)((*pY_PG_MM)*(*pB).Li*K1/((*pY_SPR)*  (*pB).dYi)); 
;;;599    //				Msg("dYi %d L %d Tb %d\r\n",(*pB).dYi,OUTF1((*pB).Li),(*pB).Tb);
;;;600    				break;
;;;601        	case 2: (*pB).Tb = (int)((*pZ_PG_MM)*(*pB).Li*K1/((*pZ_SPR)*  (*pB).dZi)); 
;;;602    //				Msg("dZi %d L %d Tb %d\r\n",(*pB).dZi,OUTF1((*pB).Li),(*pB).Tb);
;;;603    				break;
;;;604    		}		
;;;605    //		Msg("Xsi %d Ysi %d Zsi %d \r\n",(*pB).Xsi,(*pB).Ysi,(*pB).Zsi);
;;;606    //		Msg("Xdi %d Ydi %d Zdi %d \r\n",(*pB).Xdi,(*pB).Ydi,(*pB).Zdi);
;;;607    //		Msg("L %d Tb %d\r\n",OUTF(L),OUTF((*pB).Tb/1000));
;;;608    //		Msg("dx %d dy %d dz %d \r\n",(*pB).dXi,(*pB).dYi,(*pB).dZi);
;;;609    //		Msg("signX %d signY %d signZ %d \r\n",(*pB).signX,(*pB).signY,(*pB).signZ);
;;;610    //		Msg("Lax %d e1 %d e2 %d\r\n",(*pB).Lax,(*pB).e1,(*pB).e2);
;;;611    	};
;;;612      }				
;;;613    //----------*******************************
;;;614    
;;;615    }
00070c  e72e              B        |L1.1388|
                  |L1.1806|
00070e  4601              MOV      r1,r0                 ;550
                  |L1.1808|
000710  f8c41088          STR      r1,[r4,#0x88]         ;551
000714  6f62              LDR      r2,[r4,#0x74]         ;551
000716  6ea1              LDR      r1,[r4,#0x68]         ;551
000718  4291              CMP      r1,r2                 ;551
00071a  da01              BGE      |L1.1824|
00071c  2101              MOVS     r1,#1                 ;551
00071e  e000              B        |L1.1826|
                  |L1.1824|
000720  4601              MOV      r1,r0                 ;551
                  |L1.1826|
000722  f8c4108c          STR      r1,[r4,#0x8c]         ;552
000726  6fa2              LDR      r2,[r4,#0x78]         ;552
000728  6ee1              LDR      r1,[r4,#0x6c]         ;552
00072a  4291              CMP      r1,r2                 ;552
00072c  da00              BGE      |L1.1840|
00072e  2001              MOVS     r0,#1                 ;552
                  |L1.1840|
000730  f8c40090          STR      r0,[r4,#0x90]         ;554
000734  6ba1              LDR      r1,[r4,#0x38]         ;554
000736  6d60              LDR      r0,[r4,#0x54]         ;554
000738  3430              ADDS     r4,r4,#0x30           ;554
00073a  f7fffffe          BL       __aeabi_fsub
00073e  f7fffffe          BL       ||sqr||
000742  4606              MOV      r6,r0                 ;554
000744  6861              LDR      r1,[r4,#4]            ;554
000746  6a20              LDR      r0,[r4,#0x20]         ;554
000748  f7fffffe          BL       __aeabi_fsub
00074c  f7fffffe          BL       ||sqr||
000750  4605              MOV      r5,r0                 ;554
000752  6821              LDR      r1,[r4,#0]            ;554
000754  69e0              LDR      r0,[r4,#0x1c]         ;554
000756  f7fffffe          BL       __aeabi_fsub
00075a  f7fffffe          BL       ||sqr||
00075e  4629              MOV      r1,r5                 ;554
000760  f7fffffe          BL       __aeabi_fadd
000764  4631              MOV      r1,r6                 ;554
000766  f7fffffe          BL       __aeabi_fadd
00076a  f7fffffe          BL       __aeabi_f2d
00076e  f7fffffe          BL       sqrt
000772  f7fffffe          BL       __aeabi_d2f
000776  67e0              STR      r0,[r4,#0x7c]         ;560
000778  6d60              LDR      r0,[r4,#0x54]         ;560
00077a  f7fffffe          BL       __aeabi_i2f
00077e  f7fffffe          BL       ||sqr||
000782  4606              MOV      r6,r0                 ;560
000784  6d20              LDR      r0,[r4,#0x50]         ;560
000786  f7fffffe          BL       __aeabi_i2f
00078a  f7fffffe          BL       ||sqr||
00078e  4605              MOV      r5,r0                 ;560
000790  6ce0              LDR      r0,[r4,#0x4c]         ;560
000792  f7fffffe          BL       __aeabi_i2f
000796  f7fffffe          BL       ||sqr||
00079a  4629              MOV      r1,r5                 ;560
00079c  f7fffffe          BL       __aeabi_fadd
0007a0  4631              MOV      r1,r6                 ;560
0007a2  f7fffffe          BL       __aeabi_fadd
0007a6  f7fffffe          BL       __aeabi_f2d
0007aa  f7fffffe          BL       sqrt
0007ae  f7fffffe          BL       __aeabi_d2f
0007b2  6760              STR      r0,[r4,#0x74]         ;560
0007b4  e9d46513          LDRD     r6,r5,[r4,#0x4c]      ;560
0007b8  3c30              SUBS     r4,r4,#0x30           ;560
0007ba  4680              MOV      r8,r0                 ;560
0007bc  42ae              CMP      r6,r5                 ;564
0007be  db14              BLT      |L1.2026|
0007c0  f8d40084          LDR      r0,[r4,#0x84]         ;564
0007c4  4286              CMP      r6,r0                 ;564
0007c6  db10              BLT      |L1.2026|
0007c8  f884709c          STRB     r7,[r4,#0x9c]         ;566
0007cc  1b71              SUBS     r1,r6,r5              ;567
0007ce  1a30              SUBS     r0,r6,r0              ;568
0007d0  e9e41025          STRD     r1,r0,[r4,#0x94]!     ;568
0007d4  4630              MOV      r0,r6                 ;568
0007d6  f7fffffe          BL       __aeabi_i2f
0007da  69a2              LDR      r2,[r4,#0x18]         ;569
0007dc  4601              MOV      r1,r0                 ;569
0007de  4610              MOV      r0,r2                 ;569
0007e0  f7fffffe          BL       __aeabi_fdiv
0007e4  60e6              STR      r6,[r4,#0xc]          ;570
0007e6  61a0              STR      r0,[r4,#0x18]         ;570
0007e8  e02e              B        |L1.2120|
                  |L1.2026|
0007ea  42b5              CMP      r5,r6                 ;572
0007ec  db15              BLT      |L1.2074|
0007ee  f8d40084          LDR      r0,[r4,#0x84]         ;572
0007f2  4285              CMP      r5,r0                 ;572
0007f4  db11              BLT      |L1.2074|
0007f6  2101              MOVS     r1,#1                 ;574
0007f8  f884109c          STRB     r1,[r4,#0x9c]         ;574
0007fc  1ba9              SUBS     r1,r5,r6              ;576
0007fe  1a28              SUBS     r0,r5,r0              ;577
000800  e9e41025          STRD     r1,r0,[r4,#0x94]!     ;577
000804  4628              MOV      r0,r5                 ;577
000806  f7fffffe          BL       __aeabi_i2f
00080a  69a2              LDR      r2,[r4,#0x18]         ;578
00080c  4601              MOV      r1,r0                 ;578
00080e  4610              MOV      r0,r2                 ;578
000810  f7fffffe          BL       __aeabi_fdiv
000814  60e5              STR      r5,[r4,#0xc]          ;579
000816  61a0              STR      r0,[r4,#0x18]         ;579
000818  e016              B        |L1.2120|
                  |L1.2074|
00081a  f8d47084          LDR      r7,[r4,#0x84]         ;581
00081e  42b7              CMP      r7,r6                 ;581
000820  db13              BLT      |L1.2122|
000822  42af              CMP      r7,r5                 ;581
000824  db11              BLT      |L1.2122|
000826  2002              MOVS     r0,#2                 ;583
000828  f884009c          STRB     r0,[r4,#0x9c]         ;583
00082c  1bb8              SUBS     r0,r7,r6              ;585
00082e  f8440f94          STR      r0,[r4,#0x94]!        ;585
000832  1b78              SUBS     r0,r7,r5              ;586
000834  6060              STR      r0,[r4,#4]            ;586
000836  4638              MOV      r0,r7                 ;586
000838  f7fffffe          BL       __aeabi_i2f
00083c  4601              MOV      r1,r0                 ;587
00083e  69a0              LDR      r0,[r4,#0x18]         ;587
000840  f7fffffe          BL       __aeabi_fdiv
000844  60e7              STR      r7,[r4,#0xc]          ;588
000846  61a0              STR      r0,[r4,#0x18]         ;588
                  |L1.2120|
000848  3c94              SUBS     r4,r4,#0x94           ;588
                  |L1.2122|
00084a  4f19              LDR      r7,|L1.2224|
00084c  f894009c          LDRB     r0,[r4,#0x9c]         ;594
000850  b1e8              CBZ      r0,|L1.2190|
000852  2801              CMP      r0,#1                 ;594
000854  d036              BEQ      |L1.2244|
000856  2802              CMP      r0,#2                 ;594
000858  f47faf58          BNE      |L1.1804|
00085c  4815              LDR      r0,|L1.2228|
00085e  f8541f84          LDR      r1,[r4,#0x84]!        ;601
000862  6800              LDR      r0,[r0,#0]            ;601  ; pZ_SPR
000864  6800              LDR      r0,[r0,#0]            ;601
000866  4348              MULS     r0,r1,r0              ;601
000868  f7fffffe          BL       __aeabi_ui2f
00086c  4605              MOV      r5,r0                 ;601
00086e  4812              LDR      r0,|L1.2232|
000870  4641              MOV      r1,r8                 ;601
000872  6800              LDR      r0,[r0,#0]            ;601  ; pZ_PG_MM
000874  6800              LDR      r0,[r0,#0]            ;601
000876  f7fffffe          BL       __aeabi_fmul
00087a  4639              MOV      r1,r7                 ;601
00087c  f7fffffe          BL       __aeabi_fmul
000880  4629              MOV      r1,r5                 ;601
000882  f7fffffe          BL       __aeabi_fdiv
000886  f7fffffe          BL       __aeabi_f2iz
00088a  62e0              STR      r0,[r4,#0x2c]         ;603
00088c  e66e              B        |L1.1388|
                  |L1.2190|
00088e  480b              LDR      r0,|L1.2236|
000890  6800              LDR      r0,[r0,#0]            ;595  ; pX_SPR
000892  6800              LDR      r0,[r0,#0]            ;595
000894  4370              MULS     r0,r6,r0              ;595
000896  f7fffffe          BL       __aeabi_ui2f
00089a  4605              MOV      r5,r0                 ;595
00089c  4808              LDR      r0,|L1.2240|
00089e  e019              B        |L1.2260|
                  |L1.2208|
                          DCD      ||.data||
                  |L1.2212|
                          DCD      ms_Z
                  |L1.2216|
                          DCD      ms_Y
                  |L1.2220|
                          DCD      ms_X
                  |L1.2224|
                          DCD      0x4bbebc20
                  |L1.2228|
                          DCD      pZ_SPR
                  |L1.2232|
                          DCD      pZ_PG_MM
                  |L1.2236|
                          DCD      pX_SPR
                  |L1.2240|
                          DCD      pX_PG_MM
                  |L1.2244|
0008c4  48fa              LDR      r0,|L1.3248|
0008c6  6800              LDR      r0,[r0,#0]            ;598  ; pY_SPR
0008c8  6800              LDR      r0,[r0,#0]            ;598
0008ca  4368              MULS     r0,r5,r0              ;598
0008cc  f7fffffe          BL       __aeabi_ui2f
0008d0  4605              MOV      r5,r0                 ;598
0008d2  48f8              LDR      r0,|L1.3252|
                  |L1.2260|
0008d4  4641              MOV      r1,r8                 ;595
0008d6  6800              LDR      r0,[r0,#0]            ;595  ; pX_PG_MM
0008d8  6800              LDR      r0,[r0,#0]            ;595
0008da  f7fffffe          BL       __aeabi_fmul
0008de  4639              MOV      r1,r7                 ;595
0008e0  f7fffffe          BL       __aeabi_fmul
0008e4  4629              MOV      r1,r5                 ;595
0008e6  f7fffffe          BL       __aeabi_fdiv
0008ea  f7fffffe          BL       __aeabi_f2iz
0008ee  f8c400b0          STR      r0,[r4,#0xb0]         ;595
0008f2  e63b              B        |L1.1388|
;;;616    
                          ENDP

                  CalcBlock PROC
;;;617    void CalcBlock(TBlock * pBlock){
0008f4  e92d41f0          PUSH     {r4-r8,lr}
;;;618    //	Msg("CB\r\n");
;;;619    
;;;620      (*pBlock).SetSizeReg = (*pBlock).rSetSizeReg;
0008f8  f890102d          LDRB     r1,[r0,#0x2d]
0008fc  f880102c          STRB     r1,[r0,#0x2c]
;;;621      (*pBlock).Mul = (*pBlock).rMul;
000900  6a87              LDR      r7,[r0,#0x28]
000902  4604              MOV      r4,r0                 ;617
;;;622      if ((*pBlock).SetSizeReg == 0) {
;;;623        // абсолютные координаты
;;;624        if ((*pBlock).comX == 1) {
000904  6247              STR      r7,[r0,#0x24]
000906  f890003c          LDRB     r0,[r0,#0x3c]
;;;625          // была команда X
;;;626          (*pBlock).Xd = (*pBlock).Xr*(*pBlock).Mul;
;;;627        } else {
;;;628          // команды X не было
;;;629          (*pBlock).Xd = (*pBlock).Xs;
;;;630        }
;;;631        if ((*pBlock).comY == 1) {
00090a  f894603d          LDRB     r6,[r4,#0x3d]
;;;632          // была команда Y
;;;633          (*pBlock).Yd = (*pBlock).Yr*(*pBlock).Mul;
;;;634        } else {
;;;635          // команды Y не было
;;;636          (*pBlock).Yd = (*pBlock).Ys;
;;;637        }
;;;638        if ((*pBlock).comZ == 1) {
00090e  f894503e          LDRB     r5,[r4,#0x3e]
000912  b151              CBZ      r1,|L1.2346|
;;;639          // была команда Z
;;;640          (*pBlock).Zd = (*pBlock).Zr*(*pBlock).Mul;
;;;641        } else {
;;;642          // команды z не было
;;;643          (*pBlock).Zd = (*pBlock).Zs;
;;;644        }
;;;645      } else {
;;;646        // относительные координаты
;;;647        if ((*pBlock).comX == 1) {
000914  2801              CMP      r0,#1
000916  d025              BEQ      |L1.2404|
;;;648          // была команда X
;;;649          (*pBlock).Xd = (*pBlock).Xs+(*pBlock).Xr*(*pBlock).Mul;
;;;650        } else {
;;;651          // команды X не было
;;;652          (*pBlock).Xd = (*pBlock).Xs;
000918  6b20              LDR      r0,[r4,#0x30]
                  |L1.2330|
;;;653        }
;;;654        if ((*pBlock).comY == 1) {
00091a  64e0              STR      r0,[r4,#0x4c]
00091c  2e01              CMP      r6,#1
00091e  d029              BEQ      |L1.2420|
;;;655          // была команда Y
;;;656          (*pBlock).Yd = (*pBlock).Ys + (*pBlock).Yr*(*pBlock).Mul;
;;;657        } else {
;;;658          // команды Y не было
;;;659          (*pBlock).Yd = (*pBlock).Ys;
000920  6b60              LDR      r0,[r4,#0x34]
                  |L1.2338|
;;;660        }
;;;661        if ((*pBlock).comZ == 1) {
000922  6520              STR      r0,[r4,#0x50]
000924  2d01              CMP      r5,#1
000926  d02d              BEQ      |L1.2436|
000928  e009              B        |L1.2366|
                  |L1.2346|
00092a  2801              CMP      r0,#1                 ;624
00092c  d009              BEQ      |L1.2370|
00092e  6b20              LDR      r0,[r4,#0x30]         ;629
                  |L1.2352|
000930  64e0              STR      r0,[r4,#0x4c]         ;631
000932  2e01              CMP      r6,#1                 ;631
000934  d00a              BEQ      |L1.2380|
000936  6b60              LDR      r0,[r4,#0x34]         ;636
                  |L1.2360|
000938  6520              STR      r0,[r4,#0x50]         ;638
00093a  2d01              CMP      r5,#1                 ;638
00093c  d00b              BEQ      |L1.2390|
                  |L1.2366|
;;;662          // была команда Z
;;;663          (*pBlock).Zd = (*pBlock).Zs + (*pBlock).Zr*(*pBlock).Mul;
;;;664        } else {
;;;665          // команды Z не было
;;;666          (*pBlock).Zd = (*pBlock).Zs;
00093e  6ba0              LDR      r0,[r4,#0x38]
000940  e00d              B        |L1.2398|
                  |L1.2370|
000942  4639              MOV      r1,r7                 ;626
000944  6c20              LDR      r0,[r4,#0x40]         ;626
000946  f7fffffe          BL       __aeabi_fmul
00094a  e7f1              B        |L1.2352|
                  |L1.2380|
00094c  4639              MOV      r1,r7                 ;633
00094e  6c60              LDR      r0,[r4,#0x44]         ;633
000950  f7fffffe          BL       __aeabi_fmul
000954  e7f0              B        |L1.2360|
                  |L1.2390|
000956  4639              MOV      r1,r7                 ;640
000958  6ca0              LDR      r0,[r4,#0x48]         ;640
00095a  f7fffffe          BL       __aeabi_fmul
                  |L1.2398|
00095e  6560              STR      r0,[r4,#0x54]         ;643
;;;667        }
;;;668      }
;;;669    /*
;;;670    	Msg("CB G9%d Xs %d Ys %d Zs %d Xd %d Yd %d Zd %d \r\n",
;;;671    		(*pBlock).SetSizeReg,
;;;672    		(int)(*pBlock).Xd,(int)(*pBlock).Yd,(int)(*pBlock).Zd,
;;;673    		(int)(*pBlock).Xs,(int)(*pBlock).Ys,(int)(*pBlock).Zs);
;;;674    */
;;;675    }
000960  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2404|
000964  4639              MOV      r1,r7                 ;649
000966  6c20              LDR      r0,[r4,#0x40]         ;649
000968  f7fffffe          BL       __aeabi_fmul
00096c  6b21              LDR      r1,[r4,#0x30]         ;649
00096e  f7fffffe          BL       __aeabi_fadd
000972  e7d2              B        |L1.2330|
                  |L1.2420|
000974  4639              MOV      r1,r7                 ;656
000976  6c60              LDR      r0,[r4,#0x44]         ;656
000978  f7fffffe          BL       __aeabi_fmul
00097c  6b61              LDR      r1,[r4,#0x34]         ;656
00097e  f7fffffe          BL       __aeabi_fadd
000982  e7ce              B        |L1.2338|
                  |L1.2436|
000984  4639              MOV      r1,r7                 ;663
000986  6ca0              LDR      r0,[r4,#0x48]         ;663
000988  f7fffffe          BL       __aeabi_fmul
00098c  6ba1              LDR      r1,[r4,#0x38]         ;663
00098e  f7fffffe          BL       __aeabi_fadd
000992  e7e4              B        |L1.2398|
;;;676    
                          ENDP

                  BackCalcBlock PROC
;;;677    void BackCalcBlock(TBlock * pBlock){
000994  b570              PUSH     {r4-r6,lr}
000996  4604              MOV      r4,r0
;;;678    //	Msg("BCB\r\n");
;;;679    
;;;680      if ((*pBlock).SetSizeReg == 0) {
000998  f890102c          LDRB     r1,[r0,#0x2c]
;;;681        // абсолютные координаты
;;;682        if ((*pBlock).comX == 1) {
00099c  f890003c          LDRB     r0,[r0,#0x3c]
;;;683          // была команда X
;;;684          (*pBlock).Xd = (*pBlock).Xr*(*pBlock).Mul;
;;;685        } else {
;;;686          // команды X не было
;;;687          (*pBlock).Xd = (*pBlock).Xs;
;;;688        }
;;;689        if ((*pBlock).comY == 1) {
0009a0  f894503d          LDRB     r5,[r4,#0x3d]
0009a4  b131              CBZ      r1,|L1.2484|
;;;690          // была команда Y
;;;691          (*pBlock).Yd = (*pBlock).Yr*(*pBlock).Mul;
;;;692        } else {
;;;693          // команды Y не было
;;;694          (*pBlock).Yd = (*pBlock).Ys;
;;;695        }
;;;696      } else {
;;;697        // относительные координаты
;;;698        if ((*pBlock).comX == 1) {
0009a6  2801              CMP      r0,#1
0009a8  d016              BEQ      |L1.2520|
;;;699          // была команда X
;;;700          (*pBlock).Xd = (*pBlock).Xs - (*pBlock).Xr*(*pBlock).Mul;
;;;701        } else {
;;;702          // команды X не было
;;;703          (*pBlock).Xd = (*pBlock).Xs;
0009aa  6b20              LDR      r0,[r4,#0x30]
                  |L1.2476|
;;;704        }
;;;705        if ((*pBlock).comY == 1) {
0009ac  64e0              STR      r0,[r4,#0x4c]
0009ae  2d01              CMP      r5,#1
0009b0  d01a              BEQ      |L1.2536|
0009b2  e005              B        |L1.2496|
                  |L1.2484|
0009b4  2801              CMP      r0,#1                 ;682
0009b6  d005              BEQ      |L1.2500|
0009b8  6b20              LDR      r0,[r4,#0x30]         ;687
                  |L1.2490|
0009ba  64e0              STR      r0,[r4,#0x4c]         ;689
0009bc  2d01              CMP      r5,#1                 ;689
0009be  d006              BEQ      |L1.2510|
                  |L1.2496|
0009c0  6b60              LDR      r0,[r4,#0x34]         ;694
0009c2  e018              B        |L1.2550|
                  |L1.2500|
0009c4  6a61              LDR      r1,[r4,#0x24]         ;684
0009c6  6c20              LDR      r0,[r4,#0x40]         ;684
0009c8  f7fffffe          BL       __aeabi_fmul
0009cc  e7f5              B        |L1.2490|
                  |L1.2510|
0009ce  6a61              LDR      r1,[r4,#0x24]         ;691
0009d0  6c60              LDR      r0,[r4,#0x44]         ;691
0009d2  f7fffffe          BL       __aeabi_fmul
0009d6  e00e              B        |L1.2550|
                  |L1.2520|
0009d8  6a61              LDR      r1,[r4,#0x24]         ;700
0009da  6c20              LDR      r0,[r4,#0x40]         ;700
0009dc  f7fffffe          BL       __aeabi_fmul
0009e0  6b21              LDR      r1,[r4,#0x30]         ;700
0009e2  f7fffffe          BL       __aeabi_frsub
0009e6  e7e1              B        |L1.2476|
                  |L1.2536|
;;;706          // была команда Y
;;;707          (*pBlock).Yd = (*pBlock).Ys - (*pBlock).Yr*(*pBlock).Mul;
0009e8  6a61              LDR      r1,[r4,#0x24]
0009ea  6c60              LDR      r0,[r4,#0x44]
0009ec  f7fffffe          BL       __aeabi_fmul
0009f0  6b61              LDR      r1,[r4,#0x34]
0009f2  f7fffffe          BL       __aeabi_frsub
                  |L1.2550|
;;;708        } else {
;;;709          // команды Y не было
;;;710          (*pBlock).Yd = (*pBlock).Ys;
;;;711        }
;;;712      }
;;;713      (*pBlock).SetSizeReg = (*pBlock).rSetSizeReg;
0009f6  6520              STR      r0,[r4,#0x50]
0009f8  f894002d          LDRB     r0,[r4,#0x2d]
0009fc  f884002c          STRB     r0,[r4,#0x2c]
;;;714      (*pBlock).Mul = (*pBlock).rMul;
000a00  6aa0              LDR      r0,[r4,#0x28]
000a02  6260              STR      r0,[r4,#0x24]
;;;715    }
000a04  bd70              POP      {r4-r6,pc}
;;;716    
                          ENDP

                  G0Handler PROC
;;;717    void G0Handler(void){
000a06  b570              PUSH     {r4-r6,lr}
;;;718    	s32 Xi,Yi,Zi;
;;;719    
;;;720    	Busy = 1;
000a08  4cab              LDR      r4,|L1.3256|
000a0a  b086              SUB      sp,sp,#0x18           ;717
000a0c  2501              MOVS     r5,#1
000a0e  f8045b08          STRB     r5,[r4],#8
;;;721    	XYZToXYZImpZcomp(X,Y,Z,&Xi,&Yi,&Zi);
000a12  a902              ADD      r1,sp,#8
000a14  a804              ADD      r0,sp,#0x10
000a16  e9cd0100          STRD     r0,r1,[sp,#0]
000a1a  e8940007          LDM      r4,{r0-r2}
000a1e  ab03              ADD      r3,sp,#0xc
000a20  3c08              SUBS     r4,r4,#8
000a22  f7fffffe          BL       XYZToXYZImpZcomp
;;;722    	*(mc_X.ReqPos) = Xi;
000a26  49a5              LDR      r1,|L1.3260|
000a28  9803              LDR      r0,[sp,#0xc]
000a2a  68ca              LDR      r2,[r1,#0xc]  ; mc_X
;;;723    	*(mc_Y.ReqPos) = Yi;
000a2c  6010              STR      r0,[r2,#0]
000a2e  4aa4              LDR      r2,|L1.3264|
000a30  9804              LDR      r0,[sp,#0x10]
000a32  68d3              LDR      r3,[r2,#0xc]  ; mc_Y
;;;724    	*(mc_Z.ReqPos) = Zi;
000a34  6018              STR      r0,[r3,#0]
000a36  4ba3              LDR      r3,|L1.3268|
000a38  9802              LDR      r0,[sp,#8]
000a3a  68de              LDR      r6,[r3,#0xc]  ; mc_Z
;;;725    
;;;726    	*pCorrStop = 0;
000a3c  6030              STR      r0,[r6,#0]
000a3e  4ea2              LDR      r6,|L1.3272|
000a40  2000              MOVS     r0,#0
000a42  6836              LDR      r6,[r6,#0]  ; pCorrStop
000a44  7030              STRB     r0,[r6,#0]
;;;727    
;;;728    	BR_pCorrStop = 0;
000a46  4ea1              LDR      r6,|L1.3276|
000a48  f8860070          STRB     r0,[r6,#0x70]
;;;729    	// признак восстановления состояния после паузы или после выключения питания
;;;730    	*pRecoverBlock = 0;
000a4c  4ea0              LDR      r6,|L1.3280|
000a4e  6836              LDR      r6,[r6,#0]  ; pRecoverBlock
000a50  7030              STRB     r0,[r6,#0]
;;;731    	if (Zi < *(ms_Z.Pos)) {
000a52  48a0              LDR      r0,|L1.3284|
000a54  6880              LDR      r0,[r0,#8]  ; ms_Z
000a56  9e02              LDR      r6,[sp,#8]
000a58  6800              LDR      r0,[r0,#0]
000a5a  42b0              CMP      r0,r6
000a5c  dd06              BLE      |L1.2668|
;;;732    		// пуск XY потом Z
;;;733    		*(mc_X.MovePos) = 1;
000a5e  6a08              LDR      r0,[r1,#0x20]  ; mc_X
000a60  7005              STRB     r5,[r0,#0]
;;;734    		*(mc_Y.MovePos) = 1;
000a62  6a10              LDR      r0,[r2,#0x20]  ; mc_Y
000a64  7005              STRB     r5,[r0,#0]
;;;735    		sG0 = 1;
000a66  7065              STRB     r5,[r4,#1]
                  |L1.2664|
;;;736    	} else {
;;;737    		// пуск Z потом XY
;;;738    		*(mc_Z.MovePos) = 1;
;;;739    		sG0 = 3;
;;;740    	}	
;;;741    //	Msg("sG0 %d Zi %d Zpos %d\r\n",sG0,Zi,*(ms_Z.Pos));
;;;742    }
000a68  b006              ADD      sp,sp,#0x18
000a6a  bd70              POP      {r4-r6,pc}
                  |L1.2668|
000a6c  6a18              LDR      r0,[r3,#0x20]         ;738  ; mc_Z
000a6e  7005              STRB     r5,[r0,#0]            ;738
000a70  2003              MOVS     r0,#3                 ;739
000a72  7060              STRB     r0,[r4,#1]            ;739
000a74  e7f8              B        |L1.2664|
;;;743    
                          ENDP

                  SetFeed PROC
;;;752    
;;;753    void SetFeed(TBlock * pBlock){
000a76  b570              PUSH     {r4-r6,lr}
;;;754    	// установка скорости подачи
;;;755    	if ((*pBlock).cFeed) {
000a78  7a41              LDRB     r1,[r0,#9]
;;;756    		(*pBlock).cFeed = 0;
;;;757    		*(fmvc.V) = (*pBlock).Feed / 60;
;;;758    		fmvc.Vmax = *(fmvc.V)*(*(fmvc.Vmul)/100);
;;;759    //		Msg("Vc %d\r\n",OUTF(*(fmvc.V)));
;;;760    		if (*(fmvs.Vc) > fmvc.Vmax) *(fmvs.Vc) = fmvc.Vmax;
000a7a  4d97              LDR      r5,|L1.3288|
000a7c  4c97              LDR      r4,|L1.3292|
000a7e  2900              CMP      r1,#0                 ;753
000a80  d01f              BEQ      |L1.2754|
000a82  2100              MOVS     r1,#0                 ;756
000a84  7241              STRB     r1,[r0,#9]            ;756
000a86  68c0              LDR      r0,[r0,#0xc]          ;757
000a88  4995              LDR      r1,|L1.3296|
000a8a  f7fffffe          BL       __aeabi_fdiv
000a8e  6861              LDR      r1,[r4,#4]            ;757  ; fmvc
000a90  4606              MOV      r6,r0                 ;757
000a92  6008              STR      r0,[r1,#0]            ;758
000a94  6920              LDR      r0,[r4,#0x10]         ;758  ; fmvc
000a96  4993              LDR      r1,|L1.3300|
000a98  6800              LDR      r0,[r0,#0]            ;758
000a9a  f7fffffe          BL       __aeabi_fdiv
000a9e  4631              MOV      r1,r6                 ;758
000aa0  f7fffffe          BL       __aeabi_fmul
000aa4  6160              STR      r0,[r4,#0x14]         ;758  ; fmvc
000aa6  4601              MOV      r1,r0                 ;758
000aa8  68e8              LDR      r0,[r5,#0xc]  ; fmvs
000aaa  6800              LDR      r0,[r0,#0]
000aac  f7fffffe          BL       __aeabi_cfrcmple
000ab0  d202              BCS      |L1.2744|
000ab2  68e9              LDR      r1,[r5,#0xc]  ; fmvs
000ab4  6960              LDR      r0,[r4,#0x14]  ; fmvc
000ab6  6008              STR      r0,[r1,#0]
                  |L1.2744|
;;;761    		// сохранение в backup-регистре
;;;762    		memcpy((void*)&(BR_fmvc_V),(void*)fmvc.V,4);    
000ab8  6861              LDR      r1,[r4,#4]  ; fmvc
000aba  4884              LDR      r0,|L1.3276|
000abc  3050              ADDS     r0,r0,#0x50
000abe  6809              LDR      r1,[r1,#0]
000ac0  6001              STR      r1,[r0,#0]
                  |L1.2754|
;;;763    //		Msg("Feed %d\r\n",(int)(*(fmvc.V)*1000));
;;;764    //		Msg("SetFeed Vmax %d\r\n",(int)((fmvc.Vmax)*1000));
;;;765    	}
;;;766    }
000ac2  bd70              POP      {r4-r6,pc}
;;;767    
                          ENDP

                  SetSpindle PROC
;;;768    void SetSpindle(TBlock * pBlock){
000ac4  b510              PUSH     {r4,lr}
000ac6  4604              MOV      r4,r0
;;;769    	u16 Freq;
;;;770    	Freq = (int)((*pBlock).Speed)*(*pFnom)/(*pFdbyFnom);
000ac8  6900              LDR      r0,[r0,#0x10]
000aca  f7fffffe          BL       __aeabi_f2iz
000ace  4986              LDR      r1,|L1.3304|
000ad0  6809              LDR      r1,[r1,#0]  ; pFnom
000ad2  8809              LDRH     r1,[r1,#0]
000ad4  4348              MULS     r0,r1,r0
000ad6  4985              LDR      r1,|L1.3308|
000ad8  6809              LDR      r1,[r1,#0]  ; pFdbyFnom
000ada  8809              LDRH     r1,[r1,#0]
000adc  fb90f0f1          SDIV     r0,r0,r1
;;;771    	// частота вращения вала об/мин при номинальной частоте сети pFnom Гц
;;;772    //	*pFdbyFnom = 18000;	
;;;773    // номинальная частота сети Гц
;;;774    //	*pFnom = 300;	
;;;775    	// включение выключение шпинделя
;;;776        if ((*pBlock).cSpindel == 1) { 
000ae0  7d21              LDRB     r1,[r4,#0x14]
000ae2  b280              UXTH     r0,r0                 ;770
000ae4  2901              CMP      r1,#1
000ae6  d116              BNE      |L1.2838|
;;;777          // была команда управления шпинделем
;;;778    	  	switch ((*pBlock).sSpindel) {
000ae8  7d61              LDRB     r1,[r4,#0x15]
000aea  b121              CBZ      r1,|L1.2806|
000aec  2901              CMP      r1,#1
000aee  d005              BEQ      |L1.2812|
000af0  2902              CMP      r1,#2
000af2  d10e              BNE      |L1.2834|
000af4  e006              B        |L1.2820|
                  |L1.2806|
;;;779           	case 0:
;;;780    				//выкл
;;;781    					FIStop();
000af6  f7fffffe          BL       FIStop
;;;782    //					Msg("Off Spindel\r\n");
;;;783    				break;
000afa  e00a              B        |L1.2834|
                  |L1.2812|
;;;784            case 1:
;;;785    					FISetFreq(Freq);
000afc  f7fffffe          BL       FISetFreq
;;;786    					FISetDir(0);
000b00  2000              MOVS     r0,#0
;;;787    					FIStart();
;;;788    //				Msg("On Dir Spindel s %d f %d\r\n",(int)(*pBlock).Speed,Freq);
;;;789    				break;
000b02  e002              B        |L1.2826|
                  |L1.2820|
;;;790            case 2:
;;;791    					FISetFreq(Freq);
000b04  f7fffffe          BL       FISetFreq
;;;792    					FISetDir(1);
000b08  2001              MOVS     r0,#1
                  |L1.2826|
000b0a  f7fffffe          BL       FISetDir
000b0e  f7fffffe          BL       FIStart
                  |L1.2834|
;;;793    					FIStart();
;;;794    //					Msg("On Back Spindel s %d f %d\r\n",(int)(*pBlock).Speed,Freq);
;;;795    				break;
;;;796    	  }
;;;797          // команда выполнена снимаем флаг
;;;798          (*pBlock).cSpindel=0;
000b12  2000              MOVS     r0,#0
000b14  7520              STRB     r0,[r4,#0x14]
                  |L1.2838|
;;;799        }
;;;800    }
000b16  bd10              POP      {r4,pc}
;;;801    
                          ENDP

                  SetCold PROC
;;;802    void SetCold(TBlock * pBlock){
000b18  b510              PUSH     {r4,lr}
000b1a  4604              MOV      r4,r0
;;;803       	// включение выключение охлаждения
;;;804        if ((*pBlock).cCold == 1) {
000b1c  7d80              LDRB     r0,[r0,#0x16]
000b1e  2801              CMP      r0,#1
000b20  d111              BNE      |L1.2886|
;;;805          if ((*pBlock).sCold1 == 1) {
000b22  7de0              LDRB     r0,[r4,#0x17]
000b24  2801              CMP      r0,#1
000b26  d00f              BEQ      |L1.2888|
;;;806            //включено
;;;807    				Msg("Cool1 On\r\n");
;;;808    				QSetPin(COOLER1); 
;;;809    			} else {
;;;810    				//выключено
;;;811    				Msg("Cool1 Off\r\n");
000b28  a071              ADR      r0,|L1.3312|
000b2a  f7fffffe          BL       Msg
;;;812    				QClrPin(COOLER1); 
000b2e  200c              MOVS     r0,#0xc
000b30  f7fffffe          BL       QClrPin
                  |L1.2868|
;;;813    			}
;;;814          if ((*pBlock).sCold2 == 1) {
000b34  7e20              LDRB     r0,[r4,#0x18]
000b36  2801              CMP      r0,#1
;;;815            //включено
;;;816    //				Msg("Cool2 On\r\n");
;;;817    				QSetPin(COOLER2); 
;;;818    			} else {
;;;819    				//выключено
;;;820    //				Msg("Cool2 Off\r\n");
;;;821    				QClrPin(COOLER2); 
000b38  f04f000d          MOV      r0,#0xd
000b3c  d00b              BEQ      |L1.2902|
000b3e  f7fffffe          BL       QClrPin
                  |L1.2882|
;;;822    			}
;;;823          (*pBlock).cCold = 0;
000b42  2000              MOVS     r0,#0
000b44  75a0              STRB     r0,[r4,#0x16]
                  |L1.2886|
;;;824        }
;;;825    }
000b46  bd10              POP      {r4,pc}
                  |L1.2888|
000b48  a06c              ADR      r0,|L1.3324|
000b4a  f7fffffe          BL       Msg
000b4e  200c              MOVS     r0,#0xc               ;808
000b50  f7fffffe          BL       QSetPin
000b54  e7ee              B        |L1.2868|
                  |L1.2902|
000b56  f7fffffe          BL       QSetPin
000b5a  e7f2              B        |L1.2882|
;;;826    
                          ENDP

                  SetPause PROC
;;;827    void SetPause(TBlock * pBlock){
000b5c  7e43              LDRB     r3,[r0,#0x19]
;;;828    	// пауза
;;;829        if ((*pBlock).cPause == 1) {
000b5e  2101              MOVS     r1,#1
;;;830    			StartTI(tiPrgPause,tiMsToTick((*pBlock).lPause));
000b60  4a69              LDR      r2,|L1.3336|
000b62  2b01              CMP      r3,#1                 ;829
000b64  d001              BEQ      |L1.2922|
;;;831    //			Msg("Start Pause %d\r\n",(*pBlock).lPause);
;;;832          (*pBlock).cPause = 0;
;;;833    			*(fmvs.Vc) = *(fmvc.Vmin);
;;;834        } else 	StopTI(tiPrgPause);
000b66  6191              STR      r1,[r2,#0x18]  ; ti
;;;835    }
000b68  4770              BX       lr
                  |L1.2922|
000b6a  69c3              LDR      r3,[r0,#0x1c]         ;830
000b6c  eb030383          ADD      r3,r3,r3,LSL #2       ;830
000b70  eb010183          ADD      r1,r1,r3,LSL #2       ;830
000b74  6191              STR      r1,[r2,#0x18]         ;830  ; ti
000b76  2100              MOVS     r1,#0                 ;832
000b78  7641              STRB     r1,[r0,#0x19]         ;832
000b7a  4858              LDR      r0,|L1.3292|
000b7c  4956              LDR      r1,|L1.3288|
000b7e  6880              LDR      r0,[r0,#8]            ;833  ; fmvc
000b80  68c9              LDR      r1,[r1,#0xc]          ;833  ; fmvs
000b82  6800              LDR      r0,[r0,#0]            ;833
000b84  6008              STR      r0,[r1,#0]            ;833
000b86  4770              BX       lr
;;;836    
                          ENDP

                  RecSetPause PROC
;;;837    void RecSetPause(TBlock * pBlock){
000b88  7e41              LDRB     r1,[r0,#0x19]
;;;838    	// пауза
;;;839        if ((*pBlock).cPause == 1) {
000b8a  2901              CMP      r1,#1
000b8c  d101              BNE      |L1.2962|
;;;840          	(*pBlock).cPause = 0;
000b8e  2100              MOVS     r1,#0
000b90  7641              STRB     r1,[r0,#0x19]
                  |L1.2962|
;;;841        }
;;;842    }
000b92  4770              BX       lr
;;;843    
                          ENDP

                  EndPause PROC
;;;844    u8 EndPause(void) {
000b94  485c              LDR      r0,|L1.3336|
;;;845    	return EndTI(tiPrgPause);
000b96  6980              LDR      r0,[r0,#0x18]  ; ti
000b98  2801              CMP      r0,#1
000b9a  d000              BEQ      |L1.2974|
000b9c  2000              MOVS     r0,#0
                  |L1.2974|
;;;846    }
000b9e  4770              BX       lr
;;;847    
                          ENDP

                  SetGoFrz PROC
;;;848    void SetGoFrz(TBlock * pBlock){
000ba0  f890103c          LDRB     r1,[r0,#0x3c]
000ba4  b931              CBNZ     r1,|L1.2996|
;;;849    	if (((*pBlock).comX)||((*pBlock).comY)||((*pBlock).comZ)) {
000ba6  f890103d          LDRB     r1,[r0,#0x3d]
000baa  b919              CBNZ     r1,|L1.2996|
000bac  f890103e          LDRB     r1,[r0,#0x3e]
000bb0  2900              CMP      r1,#0
000bb2  d013              BEQ      |L1.3036|
                  |L1.2996|
;;;850    		(*pBlock).comX = 0;
000bb4  2100              MOVS     r1,#0
000bb6  f880103c          STRB     r1,[r0,#0x3c]
;;;851    		(*pBlock).comY = 0;
000bba  f880103d          STRB     r1,[r0,#0x3d]
;;;852    		(*pBlock).comZ = 0;
000bbe  f880103e          STRB     r1,[r0,#0x3e]
;;;853    		if ((*pBlock).sGo == 0) {
000bc2  f8902022          LDRB     r2,[r0,#0x22]
;;;854    			// G0
;;;855    			//Msg("G0 X %d Y %d\r\n",(int)(*pBlock).Xd,(int)(*pBlock).Yd);
;;;856    //			Msg("2m%d: %s",(*eb).NumLine,(*eb).s);
;;;857    			X = (*pBlock).Xd;
000bc6  493c              LDR      r1,|L1.3256|
000bc8  b14a              CBZ      r2,|L1.3038|
000bca  4844              LDR      r0,|L1.3292|
000bcc  4b42              LDR      r3,|L1.3288|
000bce  6882              LDR      r2,[r0,#8]            ;853  ; fmvc
000bd0  68db              LDR      r3,[r3,#0xc]          ;853  ; fmvs
000bd2  6812              LDR      r2,[r2,#0]            ;853
000bd4  601a              STR      r2,[r3,#0]            ;853
000bd6  2201              MOVS     r2,#1                 ;853
000bd8  700a              STRB     r2,[r1,#0]            ;853
000bda  7602              STRB     r2,[r0,#0x18]         ;853
                  |L1.3036|
;;;858    			Y = (*pBlock).Yd;
;;;859    			Z = (*pBlock).Zd;
;;;860    			G0Handler();
;;;861    		} else {
;;;862    			//Msg("G1 X %d Y %d\r\n",(int)(*pBlock).Xd,(int)(*pBlock).Yd);
;;;863    //			Msg("2m%d: %s",(*eb).NumLine,(*eb).s);
;;;864    			G1Handler();
;;;865    		}
;;;866    	}
;;;867    }
000bdc  4770              BX       lr
                  |L1.3038|
000bde  6cc2              LDR      r2,[r0,#0x4c]         ;857
000be0  608a              STR      r2,[r1,#8]            ;858  ; X
000be2  6d02              LDR      r2,[r0,#0x50]         ;858
000be4  60ca              STR      r2,[r1,#0xc]          ;859  ; Y
000be6  6d40              LDR      r0,[r0,#0x54]         ;859
000be8  6108              STR      r0,[r1,#0x10]         ;860  ; Z
000bea  e7fe              B        G0Handler
;;;868    
                          ENDP

                  RecSetGo PROC
;;;869    void RecSetGo(TBlock * pBlock){
000bec  f890103c          LDRB     r1,[r0,#0x3c]
000bf0  b931              CBNZ     r1,|L1.3072|
;;;870    	if (((*pBlock).comX)||((*pBlock).comY)||((*pBlock).comZ)) {
000bf2  f890103d          LDRB     r1,[r0,#0x3d]
000bf6  b919              CBNZ     r1,|L1.3072|
000bf8  f890103e          LDRB     r1,[r0,#0x3e]
000bfc  2900              CMP      r1,#0
000bfe  d004              BEQ      |L1.3082|
                  |L1.3072|
;;;871    		(*pBlock).comX = 0;
000c00  2100              MOVS     r1,#0
000c02  f8001f3c          STRB     r1,[r0,#0x3c]!
;;;872    		(*pBlock).comY = 0;
000c06  7041              STRB     r1,[r0,#1]
;;;873    		(*pBlock).comZ = 0;
000c08  7081              STRB     r1,[r0,#2]
                  |L1.3082|
;;;874    		if ((*pBlock).sGo == 0) {
;;;875    			// G0
;;;876    //			Msg("G0 X %d Y %d\r\n",(int)(*pBlock).Xd,(int)(*pBlock).Yd);
;;;877    		} else {
;;;878    			// G1
;;;879    //			Msg("G1 X %d Y %d\r\n",(int)(*pBlock).Xd,(int)(*pBlock).Yd);
;;;880    		}
;;;881    	}
;;;882    }
000c0a  4770              BX       lr
;;;883    
                          ENDP

                  EndGo PROC
;;;884    u8 EndGo(void){
000c0c  2001              MOVS     r0,#1
;;;885      	// вернуть результат условия окончания движения
;;;886    	// пока так (движение завершено)
;;;887    	return 1;
;;;888    }
000c0e  4770              BX       lr
;;;889    
                          ENDP

                  SetStop PROC
;;;890    void SetStop(TBlock * pBlock) {
000c10  b510              PUSH     {r4,lr}
;;;891        if ((*pBlock).cStop == 1) {
000c12  f8901020          LDRB     r1,[r0,#0x20]
000c16  2901              CMP      r1,#1
000c18  d11f              BNE      |L1.3162|
;;;892          // команда стоп
;;;893    			switch ((*pBlock).sStop) {
;;;894    				case 0:
;;;895    					(*pPrgRun) = 0;
000c1a  4927              LDR      r1,|L1.3256|
000c1c  f8903021          LDRB     r3,[r0,#0x21]         ;893
;;;896    					BR_pPrgRun = *pPrgRun;
000c20  4a2a              LDR      r2,|L1.3276|
000c22  6a09              LDR      r1,[r1,#0x20]         ;895
000c24  2000              MOVS     r0,#0                 ;893
000c26  b18b              CBZ      r3,|L1.3148|
000c28  2b02              CMP      r3,#2                 ;893
000c2a  d116              BNE      |L1.3162|
;;;897    					FIStop();
;;;898    				break;
;;;899    				case 2:
;;;900    					//'полное отключение'
;;;901    					(*pPrgRun) = 0;
000c2c  7008              STRB     r0,[r1,#0]
;;;902    					BR_pPrgRun = *pPrgRun;
000c2e  f8820060          STRB     r0,[r2,#0x60]
;;;903    					QClrPin(COOLER1); 
000c32  200c              MOVS     r0,#0xc
000c34  f7fffffe          BL       QClrPin
;;;904    					QClrPin(COOLER2); 
000c38  200d              MOVS     r0,#0xd
000c3a  f7fffffe          BL       QClrPin
;;;905    					FIStop();
000c3e  f7fffffe          BL       FIStop
;;;906    					Msg("Full Off\r\n");// проверили!!!
000c42  e8bd4010          POP      {r4,lr}
000c46  a031              ADR      r0,|L1.3340|
000c48  f7ffbffe          B.W      Msg
                  |L1.3148|
000c4c  7008              STRB     r0,[r1,#0]            ;895
000c4e  f8820060          STRB     r0,[r2,#0x60]         ;896
000c52  e8bd4010          POP      {r4,lr}               ;897
000c56  f7ffbffe          B.W      FIStop
                  |L1.3162|
;;;907    				break;
;;;908    			}
;;;909        }
;;;910    }
000c5a  bd10              POP      {r4,pc}
;;;911    
                          ENDP

                  RecSetStop PROC
;;;912    void RecSetStop(TBlock * pBlock) {
000c5c  b510              PUSH     {r4,lr}
;;;913        if ((*pBlock).cStop == 1) {
000c5e  f8901020          LDRB     r1,[r0,#0x20]
000c62  2901              CMP      r1,#1
000c64  d113              BNE      |L1.3214|
;;;914          // команда стоп
;;;915    	  switch ((*pBlock).sStop) {
000c66  f8900021          LDRB     r0,[r0,#0x21]
000c6a  b170              CBZ      r0,|L1.3210|
000c6c  2802              CMP      r0,#2
000c6e  d10e              BNE      |L1.3214|
;;;916    	      case 0:
;;;917    					//'пауза до кнопки старт'
;;;918    					Msg("Pause To Start\r\n");
;;;919    				break;
;;;920    	      case 2:
;;;921    					//'полное отключение'
;;;922    					// выключить охлаждение и пилу
;;;923    					QClrPin(COOLER1); 
000c70  200c              MOVS     r0,#0xc
000c72  f7fffffe          BL       QClrPin
;;;924    					QClrPin(COOLER2); 
000c76  200d              MOVS     r0,#0xd
000c78  f7fffffe          BL       QClrPin
;;;925    					FIStop();
000c7c  f7fffffe          BL       FIStop
;;;926    					Msg("Full Off\r\n");// проверили!!!
000c80  a022              ADR      r0,|L1.3340|
                  |L1.3202|
000c82  e8bd4010          POP      {r4,lr}
000c86  f7ffbffe          B.W      Msg
                  |L1.3210|
000c8a  a023              ADR      r0,|L1.3352|
000c8c  e7f9              B        |L1.3202|
                  |L1.3214|
;;;927    				break;
;;;928    	  }
;;;929        }
;;;930    }
000c8e  bd10              POP      {r4,pc}
;;;931    
                          ENDP

                  EndStop PROC
;;;932    u8 EndStop(void) {
000c90  2001              MOVS     r0,#1
;;;933    	// пустышка на всякий случай
;;;934    	return 1;
;;;935    }
000c92  4770              BX       lr
;;;936    
                          ENDP

                  ErrToMessage PROC
;;;937    void ErrToMessage(u8 err,char * mess){
000c94  460b              MOV      r3,r1
;;;938     	switch (err) {
000c96  2809              CMP      r0,#9
000c98  d266              BCS      |L1.3432|
000c9a  e8dff000          TBB      [pc,r0]
000c9e  6505              DCB      0x65,0x05
000ca0  4f525558          DCB      0x4f,0x52,0x55,0x58
000ca4  5b5e6100          DCB      0x5b,0x5e,0x61,0x00
;;;939    		case 1: strcpy("unknown command",mess); break;
000ca8  4619              MOV      r1,r3
000caa  a020              ADR      r0,|L1.3372|
000cac  e05a              B        |L1.3428|
000cae  0000              DCW      0x0000
                  |L1.3248|
                          DCD      pY_SPR
                  |L1.3252|
                          DCD      pY_PG_MM
                  |L1.3256|
                          DCD      ||.data||
                  |L1.3260|
                          DCD      mc_X
                  |L1.3264|
                          DCD      mc_Y
                  |L1.3268|
                          DCD      mc_Z
                  |L1.3272|
                          DCD      pCorrStop
                  |L1.3276|
                          DCD      0x40024000
                  |L1.3280|
                          DCD      pRecoverBlock
                  |L1.3284|
                          DCD      ms_Z
                  |L1.3288|
                          DCD      fmvs
                  |L1.3292|
                          DCD      fmvc
                  |L1.3296|
                          DCD      0x42700000
                  |L1.3300|
                          DCD      0x42c80000
                  |L1.3304|
                          DCD      pFnom
                  |L1.3308|
                          DCD      pFdbyFnom
                  |L1.3312|
000cf0  436f6f6c          DCB      "Cool1 Off\r\n",0
000cf4  31204f66
000cf8  660d0a00
                  |L1.3324|
000cfc  436f6f6c          DCB      "Cool1 On\r\n",0
000d00  31204f6e
000d04  0d0a00  
000d07  00                DCB      0
                  |L1.3336|
                          DCD      ||ti||
                  |L1.3340|
000d0c  46756c6c          DCB      "Full Off\r\n",0
000d10  204f6666
000d14  0d0a00  
000d17  00                DCB      0
                  |L1.3352|
000d18  50617573          DCB      "Pause To Start\r\n",0
000d1c  6520546f
000d20  20537461
000d24  72740d0a
000d28  00      
000d29  00                DCB      0
000d2a  00                DCB      0
000d2b  00                DCB      0
                  |L1.3372|
000d2c  756e6b6e          DCB      "unknown command",0
000d30  6f776e20
000d34  636f6d6d
000d38  616e6400
;;;940    		case 2: strcpy("parametr error",mess); break;
000d3c  4619              MOV      r1,r3
000d3e  a0e4              ADR      r0,|L1.4304|
000d40  e010              B        |L1.3428|
;;;941    		case 3: strcpy("unknown G-command",mess); break;
000d42  4619              MOV      r1,r3
000d44  a0e6              ADR      r0,|L1.4320|
000d46  e00d              B        |L1.3428|
;;;942    		case 4: strcpy("unknown M-command",mess); break;
000d48  4619              MOV      r1,r3
000d4a  a0ea              ADR      r0,|L1.4340|
000d4c  e00a              B        |L1.3428|
;;;943    		case 5: strcpy("parametr F less zero",mess); break;
000d4e  4619              MOV      r1,r3
000d50  a0ed              ADR      r0,|L1.4360|
000d52  e007              B        |L1.3428|
;;;944    		case 6: strcpy("parametr S less zero",mess); break;
000d54  4619              MOV      r1,r3
000d56  a0f2              ADR      r0,|L1.4384|
000d58  e004              B        |L1.3428|
;;;945    		case 7: strcpy("parametr P less zero",mess); break;
000d5a  4619              MOV      r1,r3
000d5c  a0f6              ADR      r0,|L1.4408|
000d5e  e001              B        |L1.3428|
;;;946    		case 8: strcpy("empty line",mess); break;
000d60  4619              MOV      r1,r3
000d62  a0fb              ADR      r0,|L1.4432|
                  |L1.3428|
000d64  f7ffbffe          B.W      strcpy
                  |L1.3432|
;;;947    		default: sprintf(mess,"unknown error %d",err);
000d68  4602              MOV      r2,r0
000d6a  a1fc              ADR      r1,|L1.4444|
000d6c  4618              MOV      r0,r3
000d6e  f7ffbffe          B.W      __2sprintf
;;;948    	}
;;;949    }
;;;950    
                          ENDP

                  BackApplyCmd PROC
;;;952    
;;;953    u8	BackApplyCmd(char cmd,char * Param){
000d72  e92d43f8          PUSH     {r3-r9,lr}
000d76  460a              MOV      r2,r1
000d78  4605              MOV      r5,r0
;;;954    	float fParam;
;;;955    	u16 iParam;
;;;956    	u8 res;
;;;957    
;;;958    //	Msg("bapp %c %s\r\n",cmd,Param);
;;;959    
;;;960    	if (!TryStrToFloat(Param,&fParam)) {
000d7a  4669              MOV      r1,sp
000d7c  4610              MOV      r0,r2
000d7e  f7fffffe          BL       TryStrToFloat
000d82  b320              CBZ      r0,|L1.3534|
;;;961    	    // ошибка в параметре
;;;962    		return TRE_PARAM_ERROR;
;;;963    	}
;;;964    	res = 0; // предполагаем что всё хорошо
000d84  2700              MOVS     r7,#0
;;;965      	// здесь готовый fParam
;;;966    	if ((cmd == 'g') || (cmd == 'G')) {
;;;967    		//Msg("G");
;;;968    		// G - команды
;;;969    	    iParam=(u16)ceil(fParam);
;;;970    	    res=0; // предполагаем что всё хорошо
;;;971    		switch (iParam) {
;;;972    	    	case	0:
;;;973    			case	1: 
;;;974    		        // G0 и G1
;;;975    	    	    (*pBlock).sGo = iParam;
;;;976    	      	break;
;;;977    	      	case 4:
;;;978    	        	// G4
;;;979    	        	(*pBlock).cPause = 1;
000d86  2601              MOVS     r6,#1
000d88  4cf9              LDR      r4,|L1.4464|
000d8a  46b8              MOV      r8,r7                 ;964
000d8c  2d67              CMP      r5,#0x67              ;966
000d8e  d020              BEQ      |L1.3538|
000d90  2d47              CMP      r5,#0x47              ;966
000d92  d01e              BEQ      |L1.3538|
;;;980    	      	break;
;;;981    			case 20:
;;;982    			case 21:
;;;983    		       	// G20-G21
;;;984    	          	// инвертируем команду для обратного хода
;;;985    	        	if (iParam == 20) (*pBlock).rMul = 1;  // дюймы
;;;986    	          	else (*pBlock).rMul = 25.3;    // мм
;;;987    	      	break;
;;;988    	      	case 90:
;;;989    			case 91:
;;;990    	        	// G90-G91
;;;991    	        	(*pBlock).rSetSizeReg = iParam-90;
;;;992    		        // инвертируем команду для обратного хода
;;;993            		if ((*pBlock).rSetSizeReg == 1)  
;;;994    					(*pBlock).rSetSizeReg=0; 
;;;995    				else (*pBlock).rSetSizeReg=1;
;;;996    	      	break;
;;;997    	      	default: res = TRE_UNKNOWN_G; // неизвестная G-команда
;;;998    		}
;;;999    	} else {
;;;1000   		if ((cmd == 'x') || (cmd == 'X')) {
000d94  2d78              CMP      r5,#0x78
000d96  d052              BEQ      |L1.3646|
000d98  2d58              CMP      r5,#0x58
000d9a  d050              BEQ      |L1.3646|
;;;1001   			//Msg("Х");
;;;1002   			// X - параметр
;;;1003   		    (*pBlock).Xr = fParam;
;;;1004   		    (*pBlock).comX = 1;
;;;1005   		} else {
;;;1006   			if ((cmd == 'y') || (cmd == 'Y')) {
000d9c  2d79              CMP      r5,#0x79
000d9e  d054              BEQ      |L1.3658|
000da0  2d59              CMP      r5,#0x59
000da2  d052              BEQ      |L1.3658|
;;;1007   				//Msg("Y");
;;;1008   			    // Y - параметр
;;;1009   			    (*pBlock).Yr=fParam;
;;;1010   			    (*pBlock).comY=1;
;;;1011   			} else {
;;;1012   				if ((cmd == 'm') || (cmd == 'M')) {
000da4  2d6d              CMP      r5,#0x6d
000da6  d056              BEQ      |L1.3670|
000da8  2d4d              CMP      r5,#0x4d
000daa  d054              BEQ      |L1.3670|
;;;1013   					//Msg("M");
;;;1014   				    // M - команды
;;;1015   				    iParam=(u16)ceil(fParam);
;;;1016   				    res=0; // предполагаем что всё хорошо
;;;1017   					switch (iParam) {
;;;1018   				      case 0:
;;;1019   					  case 2:
;;;1020   				        (*pBlock).cStop = 1;
;;;1021   				        (*pBlock).sStop = iParam;
;;;1022   				      break;
;;;1023   				      case 3:
;;;1024   					  case 4:
;;;1025   				        // M3 M4
;;;1026   				        (*pBlock).cSpindel = 1;
;;;1027   				        (*pBlock).sSpindel = iParam-2;
;;;1028   				      break;
;;;1029   				      case 5:
;;;1030   				        (*pBlock).cSpindel = 1;
;;;1031   				        (*pBlock).sSpindel = 0;
;;;1032   				      break;
;;;1033   				      case 7:
;;;1034   				        (*pBlock).cCold = 1;
;;;1035   				        (*pBlock).sCold1 = 1;
;;;1036   				      break;
;;;1037   				      case 8:
;;;1038   				        (*pBlock).cCold = 1;
;;;1039   				        (*pBlock).sCold2 = 1;
;;;1040   				      break;
;;;1041   				      case 9:
;;;1042   				        (*pBlock).cCold = 1;
;;;1043   				        (*pBlock).sCold1 = 0;
;;;1044   				        (*pBlock).sCold2 = 0;
;;;1045   				      break;
;;;1046   					  case 100:
;;;1047   					  case 101:
;;;1048   						// команда отключения слежения на обратном ходе не обрабатывается
;;;1049   					 	// но и не является ошибкой
;;;1050   					  break;
;;;1051   					  case 103: // контроль давления
;;;1052   					  case 104: // 
;;;1053   					  break;
;;;1054   					  case 110: // параметрическая пауза
;;;1055   					  break;
;;;1056   				      default: res=TRE_UNKNOWN_M; // неизвестная M-команда
;;;1057   				    }
;;;1058   				} else {
;;;1059   					if ((cmd == 'f') || (cmd == 'F')) {
;;;1060   						///Msg("F");
;;;1061   					    // F - команда
;;;1062   					    (*pBlock).cFeed = 1;
;;;1063   						if (fParam < 0) res = TRE_LESSZERO_F; // отрицательное значение подачи
000dac  4af1              LDR      r2,|L1.4468|
000dae  2d66              CMP      r5,#0x66              ;1059
000db0  d073              BEQ      |L1.3738|
000db2  2d46              CMP      r5,#0x46              ;1059
000db4  d071              BEQ      |L1.3738|
;;;1064   					    (*pBlock).Feed = fParam;
;;;1065   					} else {
;;;1066   						if ((cmd == 's') || (cmd == 'S')) {
000db6  2d73              CMP      r5,#0x73
000db8  d070              BEQ      |L1.3740|
000dba  2d53              CMP      r5,#0x53
000dbc  d06e              BEQ      |L1.3740|
;;;1067   						//	Msg("S");
;;;1068   						    // S - команда
;;;1069   						    if (fParam < 0) res = 6; // отрицательное значение скорости
;;;1070   						    (*pBlock).cSpindel = TRE_LESSZERO_S;  // команда изменения скорости устанавливает наличие команды шпинделя
;;;1071   						    (*pBlock).Speed = fParam;
;;;1072   						} else {
;;;1073   							if ((cmd == 'p') || (cmd == 'P')) {
000dbe  2d70              CMP      r5,#0x70
000dc0  d06d              BEQ      |L1.3742|
000dc2  2d50              CMP      r5,#0x50
000dc4  d06b              BEQ      |L1.3742|
;;;1074   								//Msg("P");
;;;1075   							    // P - параметр
;;;1076   							    if (fParam < 0) res = TRE_LESSZERO_P; // отрицательное значение паузы
;;;1077   							    (*pBlock).lPause = (u16)ceil(fParam);
;;;1078   							} else { 
;;;1079   							   	// неизвестная команда, но сюда никогда не зайдет
;;;1080   								//Msg("Un");
;;;1081   							   	res = 1;
000dc6  2701              MOVS     r7,#1
                  |L1.3528|
;;;1082   							}
;;;1083   						} // ((cmd == 's') || (cmd == 'S'))
;;;1084   					} //((cmd == 'f') || (cmd == 'F'))
;;;1085   				} //((cmd == 'm') || (cmd == 'M'))
;;;1086   			}//((cmd == 'y') || (cmd == 'Y'))
;;;1087   		}//((cmd == 'x') || (cmd == 'X'))
;;;1088   	}//((cmd == 'g') || (cmd == 'G'))
;;;1089   	return res;
000dc8  4638              MOV      r0,r7
                  |L1.3530|
;;;1090   }
000dca  e8bd83f8          POP      {r3-r9,pc}
                  |L1.3534|
000dce  2002              MOVS     r0,#2                 ;962
000dd0  e7fb              B        |L1.3530|
                  |L1.3538|
000dd2  9800              LDR      r0,[sp,#0]            ;969
000dd4  f7fffffe          BL       __aeabi_f2d
000dd8  f7fffffe          BL       ceil
000ddc  f7fffffe          BL       __aeabi_d2uiz
000de0  b280              UXTH     r0,r0                 ;969
000de2  2814              CMP      r0,#0x14              ;971
000de4  d01b              BEQ      |L1.3614|
000de6  dc05              BGT      |L1.3572|
000de8  b160              CBZ      r0,|L1.3588|
000dea  2801              CMP      r0,#1                 ;971
000dec  d00a              BEQ      |L1.3588|
000dee  2804              CMP      r0,#4                 ;971
000df0  d106              BNE      |L1.3584|
000df2  e00b              B        |L1.3596|
                  |L1.3572|
000df4  2815              CMP      r0,#0x15              ;971
000df6  d00c              BEQ      |L1.3602|
000df8  285a              CMP      r0,#0x5a              ;971
000dfa  d013              BEQ      |L1.3620|
000dfc  285b              CMP      r0,#0x5b              ;971
000dfe  d011              BEQ      |L1.3620|
                  |L1.3584|
000e00  2703              MOVS     r7,#3                 ;997
000e02  e7e1              B        |L1.3528|
                  |L1.3588|
000e04  6b21              LDR      r1,[r4,#0x30]         ;975  ; pBlock
000e06  f8810022          STRB     r0,[r1,#0x22]         ;975
000e0a  e7dd              B        |L1.3528|
                  |L1.3596|
000e0c  6b20              LDR      r0,[r4,#0x30]         ;979  ; pBlock
000e0e  7646              STRB     r6,[r0,#0x19]         ;979
000e10  e7da              B        |L1.3528|
                  |L1.3602|
000e12  2814              CMP      r0,#0x14              ;985
000e14  d003              BEQ      |L1.3614|
000e16  48d8              LDR      r0,|L1.4472|
                  |L1.3608|
000e18  6b21              LDR      r1,[r4,#0x30]         ;986  ; pBlock
000e1a  6288              STR      r0,[r1,#0x28]         ;986
000e1c  e7d4              B        |L1.3528|
                  |L1.3614|
000e1e  f04f507e          MOV      r0,#0x3f800000        ;985
000e22  e7f9              B        |L1.3608|
                  |L1.3620|
000e24  385a              SUBS     r0,r0,#0x5a           ;985
000e26  b2c1              UXTB     r1,r0                 ;991
000e28  6b20              LDR      r0,[r4,#0x30]         ;991  ; pBlock
000e2a  2901              CMP      r1,#1                 ;993
000e2c  f880102d          STRB     r1,[r0,#0x2d]         ;991
000e30  d002              BEQ      |L1.3640|
000e32  f880602d          STRB     r6,[r0,#0x2d]         ;995
000e36  e7c7              B        |L1.3528|
                  |L1.3640|
000e38  f880802d          STRB     r8,[r0,#0x2d]         ;994
000e3c  e7c4              B        |L1.3528|
                  |L1.3646|
000e3e  6b20              LDR      r0,[r4,#0x30]         ;1003  ; pBlock
000e40  9900              LDR      r1,[sp,#0]            ;1003
000e42  6401              STR      r1,[r0,#0x40]         ;1004
000e44  f880603c          STRB     r6,[r0,#0x3c]         ;1004
000e48  e7be              B        |L1.3528|
                  |L1.3658|
000e4a  6b20              LDR      r0,[r4,#0x30]         ;1009  ; pBlock
000e4c  9900              LDR      r1,[sp,#0]            ;1009
000e4e  6441              STR      r1,[r0,#0x44]         ;1010
000e50  f880603d          STRB     r6,[r0,#0x3d]         ;1010
000e54  e7b8              B        |L1.3528|
                  |L1.3670|
000e56  9800              LDR      r0,[sp,#0]            ;1015
000e58  f7fffffe          BL       __aeabi_f2d
000e5c  f7fffffe          BL       ceil
000e60  f7fffffe          BL       __aeabi_d2uiz
000e64  b280              UXTH     r0,r0                 ;1015
000e66  2808              CMP      r0,#8                 ;1017
000e68  d02d              BEQ      |L1.3782|
000e6a  dc06              BGT      |L1.3706|
000e6c  d213              BCS      |L1.3734|
000e6e  e8dff000          TBB      [pc,r0]               ;1017
000e72  1712              DCB      0x17,0x12
000e74  171c1c21          DCB      0x17,0x1c,0x1c,0x21
000e78  1226              DCB      0x12,0x26
                  |L1.3706|
000e7a  2867              CMP      r0,#0x67              ;1017
000e7c  d0a4              BEQ      |L1.3528|
000e7e  dc06              BGT      |L1.3726|
000e80  2809              CMP      r0,#9                 ;1017
000e82  d024              BEQ      |L1.3790|
000e84  2864              CMP      r0,#0x64              ;1017
000e86  d09f              BEQ      |L1.3528|
000e88  2865              CMP      r0,#0x65              ;1017
000e8a  d104              BNE      |L1.3734|
000e8c  e79c              B        |L1.3528|
                  |L1.3726|
000e8e  2868              CMP      r0,#0x68              ;1017
000e90  d09a              BEQ      |L1.3528|
000e92  286e              CMP      r0,#0x6e              ;1017
000e94  d098              BEQ      |L1.3528|
                  |L1.3734|
000e96  2704              MOVS     r7,#4                 ;1056
000e98  e796              B        |L1.3528|
                  |L1.3738|
000e9a  e01f              B        |L1.3804|
                  |L1.3740|
000e9c  e026              B        |L1.3820|
                  |L1.3742|
000e9e  e02e              B        |L1.3838|
000ea0  6b21              LDR      r1,[r4,#0x30]         ;1020  ; pBlock
000ea2  f8016f20          STRB     r6,[r1,#0x20]!        ;1020
000ea6  7048              STRB     r0,[r1,#1]            ;1021
000ea8  e78e              B        |L1.3528|
000eaa  6b21              LDR      r1,[r4,#0x30]         ;1026  ; pBlock
000eac  1e80              SUBS     r0,r0,#2              ;1026
000eae  750e              STRB     r6,[r1,#0x14]         ;1026
000eb0  7548              STRB     r0,[r1,#0x15]         ;1027
000eb2  e789              B        |L1.3528|
000eb4  6b20              LDR      r0,[r4,#0x30]         ;1030  ; pBlock
000eb6  7506              STRB     r6,[r0,#0x14]         ;1030
000eb8  f8808015          STRB     r8,[r0,#0x15]         ;1031
000ebc  e784              B        |L1.3528|
000ebe  6b20              LDR      r0,[r4,#0x30]         ;1034  ; pBlock
000ec0  7586              STRB     r6,[r0,#0x16]         ;1034
000ec2  75c6              STRB     r6,[r0,#0x17]         ;1035
000ec4  e780              B        |L1.3528|
                  |L1.3782|
000ec6  6b20              LDR      r0,[r4,#0x30]         ;1038  ; pBlock
000ec8  7586              STRB     r6,[r0,#0x16]         ;1038
000eca  7606              STRB     r6,[r0,#0x18]         ;1039
000ecc  e77c              B        |L1.3528|
                  |L1.3790|
000ece  6b20              LDR      r0,[r4,#0x30]         ;1042  ; pBlock
000ed0  7586              STRB     r6,[r0,#0x16]         ;1042
000ed2  f8808017          STRB     r8,[r0,#0x17]         ;1043
000ed6  f8808018          STRB     r8,[r0,#0x18]         ;1044
000eda  e775              B        |L1.3528|
                  |L1.3804|
000edc  6b20              LDR      r0,[r4,#0x30]         ;1062  ; pBlock
000ede  7246              STRB     r6,[r0,#9]            ;1062
000ee0  9900              LDR      r1,[sp,#0]            ;1063
000ee2  4291              CMP      r1,r2                 ;1063
000ee4  d300              BCC      |L1.3816|
000ee6  2705              MOVS     r7,#5                 ;1063
                  |L1.3816|
000ee8  60c1              STR      r1,[r0,#0xc]          ;1064
000eea  e76d              B        |L1.3528|
                  |L1.3820|
000eec  9800              LDR      r0,[sp,#0]            ;1069
000eee  4290              CMP      r0,r2                 ;1069
000ef0  d300              BCC      |L1.3828|
000ef2  2706              MOVS     r7,#6                 ;1069
                  |L1.3828|
000ef4  6b21              LDR      r1,[r4,#0x30]         ;1070  ; pBlock
000ef6  2206              MOVS     r2,#6                 ;1070
000ef8  750a              STRB     r2,[r1,#0x14]         ;1070
000efa  6108              STR      r0,[r1,#0x10]         ;1071
000efc  e764              B        |L1.3528|
                  |L1.3838|
000efe  9800              LDR      r0,[sp,#0]            ;1076
000f00  4290              CMP      r0,r2                 ;1076
000f02  d300              BCC      |L1.3846|
000f04  2707              MOVS     r7,#7                 ;1076
                  |L1.3846|
000f06  f7fffffe          BL       __aeabi_f2d
000f0a  f7fffffe          BL       ceil
000f0e  f7fffffe          BL       __aeabi_d2uiz
000f12  6b21              LDR      r1,[r4,#0x30]         ;1077  ; pBlock
000f14  b280              UXTH     r0,r0                 ;1077
000f16  61c8              STR      r0,[r1,#0x1c]         ;1077
000f18  e756              B        |L1.3528|
;;;1091   
                          ENDP

                  LineToBlock PROC
;;;1092   u8 LineToBlock(const char * CadrLine,u8 * errindex, TBlock * b){
000f1a  e92d4ff0          PUSH     {r4-r11,lr}
000f1e  b085              SUB      sp,sp,#0x14
000f20  468a              MOV      r10,r1
000f22  4680              MOV      r8,r0
000f24  4693              MOV      r11,r2
;;;1093   	// проход по CadrLine
;;;1094   	u8 i,reg,ParamIndex,res;
;;;1095   	char Param[20];
;;;1096   	char ch,cmd;
;;;1097   	//Msg("LTB\r\n");
;;;1098   
;;;1099   	memset(Param,0,20);
000f26  2114              MOVS     r1,#0x14
000f28  4668              MOV      r0,sp
000f2a  f7fffffe          BL       __aeabi_memclr4
;;;1100   	cmd=0;
000f2e  2400              MOVS     r4,#0
;;;1101   	res=0;
000f30  4626              MOV      r6,r4
;;;1102   	reg=0; // режим чтения команды
000f32  46a1              MOV      r9,r4
;;;1103   	ParamIndex=0; // в начало строки параметра
000f34  4627              MOV      r7,r4
;;;1104   	i=0;
000f36  4625              MOV      r5,r4
;;;1105   	while (((*(CadrLine+i)) != 13)){
000f38  e017              B        |L1.3946|
                  |L1.3898|
;;;1106   		ch = *(CadrLine+i); // сократили чтобы не таскать *(CadrLine+i)
;;;1107   		// ОТЛАДКА УБРАТЬ !!!!
;;;1108   		//i++;
;;;1109   		// условие пропуска пробелов и табуляций
;;;1110   		if (!((ch == 32) || (ch == 8))) {
000f3a  2920              CMP      r1,#0x20
000f3c  d013              BEQ      |L1.3942|
000f3e  2908              CMP      r1,#8
000f40  d011              BEQ      |L1.3942|
;;;1111   			// Msg(" %d",ch);
;;;1112   
;;;1113   			if (reg==0) {
000f42  f1b90f00          CMP      r9,#0
;;;1114   				// режим чтения команды
;;;1115   		        if (IsCmd(ch)) {
;;;1116   		          cmd=ch;
;;;1117   		          reg=1;
;;;1118   		          i++;
;;;1119   				  //Msg("c %c",ch);
;;;1120   		        } else {
;;;1121   		          // ошибка неизвестная команда
;;;1122   		          *errindex = i;
;;;1123   		          return TRE_UNKNOWN_CMD;
;;;1124   		        }
;;;1125   			} else {
;;;1126   				// режим чтения парамета
;;;1127   		        // reg = 1
;;;1128   		        if (IsDigits(ch)) {
000f46  4608              MOV      r0,r1
000f48  d007              BEQ      |L1.3930|
000f4a  f7fffffe          BL       IsDigits
000f4e  b340              CBZ      r0,|L1.4002|
;;;1129   					// добавили символ в строку параметра
;;;1130   					//Msg("p %c",ch);
;;;1131   		          	Param[ParamIndex]=ch;
000f50  f80d1007          STRB     r1,[sp,r7]
000f54  1c7f              ADDS     r7,r7,#1
;;;1132   					ParamIndex++;
000f56  b2ff              UXTB     r7,r7
;;;1133   		          	i++;
000f58  e005              B        |L1.3942|
                  |L1.3930|
000f5a  f7fffffe          BL       IsCmd
000f5e  b1e0              CBZ      r0,|L1.3994|
000f60  460c              MOV      r4,r1                 ;1116
000f62  f04f0901          MOV      r9,#1                 ;1117
                  |L1.3942|
000f66  1c6d              ADDS     r5,r5,#1              ;1117
;;;1134   		        } else { 
;;;1135   		          	// получили и команду и параметр
;;;1136   		          	// вносим изменения в структуру кадра
;;;1137   								//Msg("p %s\r\n",Param);
;;;1138   		          	res = ApplyCmd(cmd,Param,b);
;;;1139   								//Msg("App res %d\r\n",res);
;;;1140   		          	if (res == 0) {
;;;1141   						// команда применилась подготовка r следующей команде
;;;1142   						reg=0;
;;;1143   		            	cmd=0;
;;;1144   						ParamIndex = 0;
;;;1145   						memset(Param,0,20);
;;;1146   		          	} else {
;;;1147   		            	// ошибка при распозновании команды
;;;1148   		            	// не правильный номер операнда команд G и M
;;;1149   		            	// или F или S отрицательны
;;;1150   						// фиксирование ошибок
;;;1151   						Msg("Apply Cmd %c %s Error %d\r\n",cmd,Param,res);
;;;1152   		            	//*errindex = i;
;;;1153   		            	// return res;
;;;1154   						// теперь
;;;1155   						// игнорируем неизвестные команды
;;;1156   						reg=0;
;;;1157   		            	cmd=0;
;;;1158   						ParamIndex = 0;
;;;1159   						memset(Param,0,20);
;;;1160   		          	}
;;;1161   		        }
;;;1162     
;;;1163   			} 
;;;1164   		} else i++;
000f68  b2ed              UXTB     r5,r5
                  |L1.3946|
000f6a  f8181005          LDRB     r1,[r8,r5]            ;1105
000f6e  290d              CMP      r1,#0xd               ;1105
000f70  d1e3              BNE      |L1.3898|
;;;1165   	}
;;;1166   	if (i==0) {
000f72  b365              CBZ      r5,|L1.4046|
;;;1167   		res = TRE_LINE_EMPTY; // пустая строка
;;;1168   	} else {
;;;1169   		if ((cmd != 0) && (ParamIndex > 0)) {
000f74  b16c              CBZ      r4,|L1.3986|
000f76  b167              CBZ      r7,|L1.3986|
;;;1170   		    res = ApplyCmd(cmd,Param,b);
000f78  465a              MOV      r2,r11
000f7a  4669              MOV      r1,sp
000f7c  4620              MOV      r0,r4
000f7e  f7fffffe          BL       ApplyCmd
000f82  0006              MOVS     r6,r0
;;;1171   			if (res) Msg("Apply Cmd %s %s Error %d\r\n",cmd,Param,res);
000f84  d005              BEQ      |L1.3986|
000f86  4603              MOV      r3,r0
000f88  466a              MOV      r2,sp
000f8a  4621              MOV      r1,r4
000f8c  a07b              ADR      r0,|L1.4476|
000f8e  f7fffffe          BL       Msg
                  |L1.3986|
;;;1172   				//Msg("App res %d\r\n",res);		
;;;1173   		}
;;;1174   	}
;;;1175   	return res;
000f92  4630              MOV      r0,r6
                  |L1.3988|
;;;1176   }
000f94  b005              ADD      sp,sp,#0x14
000f96  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3994|
000f9a  f88a5000          STRB     r5,[r10,#0]           ;1122
000f9e  2001              MOVS     r0,#1                 ;1123
000fa0  e7f8              B        |L1.3988|
                  |L1.4002|
000fa2  465a              MOV      r2,r11                ;1138
000fa4  4669              MOV      r1,sp                 ;1138
000fa6  4620              MOV      r0,r4                 ;1138
000fa8  f7fffffe          BL       ApplyCmd
000fac  0006              MOVS     r6,r0                 ;1138
000fae  d005              BEQ      |L1.4028|
000fb0  4603              MOV      r3,r0                 ;1151
000fb2  466a              MOV      r2,sp                 ;1151
000fb4  4621              MOV      r1,r4                 ;1151
000fb6  a078              ADR      r0,|L1.4504|
000fb8  f7fffffe          BL       Msg
                  |L1.4028|
000fbc  f04f0900          MOV      r9,#0                 ;1142
000fc0  464c              MOV      r4,r9                 ;1143
000fc2  464f              MOV      r7,r9                 ;1144
000fc4  2114              MOVS     r1,#0x14              ;1145
000fc6  4668              MOV      r0,sp                 ;1145
000fc8  f7fffffe          BL       __aeabi_memclr4
000fcc  e7cd              B        |L1.3946|
                  |L1.4046|
000fce  2608              MOVS     r6,#8                 ;1167
000fd0  e7df              B        |L1.3986|
;;;1177   
                          ENDP

                  TranslateLineToBlock PROC
;;;1178   
;;;1179   u8 TranslateLineToBlock(const char * CadrLine,TBlock * b,TBlock * prevb,u8 exe){
000fd2  e92d43f8          PUSH     {r3-r9,lr}
000fd6  460c              MOV      r4,r1
000fd8  4680              MOV      r8,r0
000fda  461e              MOV      r6,r3
;;;1180   // трансляция строки в управляющую структуру
;;;1181   	u8 Res;
;;;1182   	u8 errindex;
;;;1183   	InitBlockByPrev(b,prevb);
000fdc  4611              MOV      r1,r2
000fde  4620              MOV      r0,r4
000fe0  f7fffffe          BL       InitBlockByPrev
;;;1184    	Res = LineToBlock(CadrLine,&errindex,b);
000fe4  4622              MOV      r2,r4
000fe6  4669              MOV      r1,sp
000fe8  4640              MOV      r0,r8
000fea  f7fffffe          BL       LineToBlock
000fee  0005              MOVS     r5,r0
;;;1185   //	Msg("TrRes %d\r\n",Res);
;;;1186   	if (Res == 0) {
000ff0  d111              BNE      |L1.4118|
;;;1187   		memset((void*)&((*b).s[0]),0,50);
000ff2  f10400b4          ADD      r0,r4,#0xb4
000ff6  2132              MOVS     r1,#0x32
000ff8  4607              MOV      r7,r0
000ffa  f7fffffe          BL       __aeabi_memclr4
;;;1188   		memcpy((void*)&((*b).s[0]),(void*)CadrLine,strlen(CadrLine));
000ffe  4640              MOV      r0,r8
001000  f7fffffe          BL       strlen
001004  4602              MOV      r2,r0
001006  4641              MOV      r1,r8
001008  4638              MOV      r0,r7
00100a  f7fffffe          BL       __aeabi_memcpy
;;;1189   		CalcBlockFrz(b,exe);
00100e  4631              MOV      r1,r6
001010  4620              MOV      r0,r4
001012  f7fffffe          BL       CalcBlockFrz
                  |L1.4118|
;;;1190   	}	
;;;1191   	return Res;
001016  4628              MOV      r0,r5
;;;1192   
;;;1193   //	return 0;
;;;1194   }
001018  e6d7              B        |L1.3530|
;;;1195   
                          ENDP

                  InitQExBlks PROC
;;;1212   
;;;1213   void InitQExBlks(void){
00101a  f6401114          MOV      r1,#0x914
;;;1214   	// инициализация очереди
;;;1215   	memset((u8*)&qb,0,sizeof qb);	
00101e  4865              LDR      r0,|L1.4532|
001020  f7ffbffe          B.W      __aeabi_memclr4
;;;1216   }
;;;1217   
                          ENDP

                  qbCount PROC
;;;1218   u8 qbCount(void){
001024  4863              LDR      r0,|L1.4532|
;;;1219    	return qb.count;
001026  f8900912          LDRB     r0,[r0,#0x912]  ; qb
;;;1220   }
00102a  4770              BX       lr
;;;1221   
                          ENDP

                  qbIsPlace PROC
;;;1222   u8 qbIsPlace(void){
00102c  4861              LDR      r0,|L1.4532|
;;;1223   	// проверка свободного места в очереди
;;;1224   	if (qb.count < QEBSize) return 1;
00102e  f9900912          LDRSB    r0,[r0,#0x912]  ; qb
001032  280a              CMP      r0,#0xa
001034  da01              BGE      |L1.4154|
001036  2001              MOVS     r0,#1
;;;1225   	else return 0;
;;;1226   }
001038  4770              BX       lr
                  |L1.4154|
00103a  2000              MOVS     r0,#0                 ;1225
00103c  4770              BX       lr
;;;1227   
                          ENDP

                  qbAddBlock PROC
;;;1228   
;;;1229   u8 qbAddBlock(TBlock * b){
00103e  b510              PUSH     {r4,lr}
001040  4601              MOV      r1,r0
;;;1230   	// добавление блока в очередь
;;;1231   	// возвращает 1 - блок добавлен
;;;1232   	// возвращает 0 - блок не добавлен
;;;1233   	if (qbIsPlace()) {
001042  f7fffffe          BL       qbIsPlace
001046  2800              CMP      r0,#0
001048  d01c              BEQ      |L1.4228|
;;;1234   		memcpy((u8*)&(qb.blks[qb.tail]),(u8*)b,sizeof (*b));
00104a  4c5a              LDR      r4,|L1.4532|
00104c  f9940911          LDRSB    r0,[r4,#0x911]  ; qb
001050  eb000240          ADD      r2,r0,r0,LSL #1
001054  ebc21040          RSB      r0,r2,r0,LSL #5
001058  eb0400c0          ADD      r0,r4,r0,LSL #3
00105c  22e8              MOVS     r2,#0xe8
00105e  f7fffffe          BL       __aeabi_memcpy4
;;;1235   		//Msg("tail %d\r\n",qb.tail);
;;;1236   		//Msg("bq X %d Y %d Z %d\r\n",OUTF1T(b->Xd),OUTF1T(b->Yd),OUTF1T(b->Zd));
;;;1237   		qb.tail++;
001062  f8940911          LDRB     r0,[r4,#0x911]  ; qb
;;;1238   		qb.tail %= QEBSize; // закольцовка
001066  210a              MOVS     r1,#0xa
001068  1c40              ADDS     r0,r0,#1              ;1237
00106a  b240              SXTB     r0,r0                 ;1237
00106c  fb90f2f1          SDIV     r2,r0,r1
001070  fb010012          MLS      r0,r1,r2,r0
001074  f8840911          STRB     r0,[r4,#0x911]
;;;1239   		qb.count++;
001078  f8940912          LDRB     r0,[r4,#0x912]  ; qb
00107c  1c40              ADDS     r0,r0,#1
00107e  f8840912          STRB     r0,[r4,#0x912]
;;;1240   		return 1;
001082  2001              MOVS     r0,#1
                  |L1.4228|
;;;1241   	} else return 0; 
;;;1242   }
001084  bd10              POP      {r4,pc}
;;;1243   
                          ENDP

                  qbExtrBlock PROC
;;;1244   u8 qbExtrBlock(TBlock * b){
001086  b510              PUSH     {r4,lr}
;;;1245   	// извлечение блока из очереди
;;;1246   	// возвращает 1 - блок извлечен	 
;;;1247   	// возвращает 0 - блок не извлечен
;;;1248   	if (qb.count > 0) {
001088  4c4a              LDR      r4,|L1.4532|
00108a  f9941912          LDRSB    r1,[r4,#0x912]  ; qb
00108e  2900              CMP      r1,#0
001090  dd1c              BLE      |L1.4300|
;;;1249   		memcpy((u8*)b,(u8*)&(qb.blks[qb.head]),sizeof (*b));
001092  f9941910          LDRSB    r1,[r4,#0x910]  ; qb
001096  eb010241          ADD      r2,r1,r1,LSL #1
00109a  ebc21141          RSB      r1,r2,r1,LSL #5
00109e  eb0401c1          ADD      r1,r4,r1,LSL #3
0010a2  22e8              MOVS     r2,#0xe8
0010a4  f7fffffe          BL       __aeabi_memcpy4
;;;1250   		qb.head++;
0010a8  f8940910          LDRB     r0,[r4,#0x910]  ; qb
;;;1251   		qb.head %= QEBSize; // закольцовка
0010ac  210a              MOVS     r1,#0xa
0010ae  1c40              ADDS     r0,r0,#1              ;1250
0010b0  b240              SXTB     r0,r0                 ;1250
0010b2  fb90f2f1          SDIV     r2,r0,r1
0010b6  fb010012          MLS      r0,r1,r2,r0
0010ba  f8840910          STRB     r0,[r4,#0x910]
;;;1252   		qb.count--;
0010be  f8940912          LDRB     r0,[r4,#0x912]  ; qb
0010c2  1e40              SUBS     r0,r0,#1
0010c4  f8840912          STRB     r0,[r4,#0x912]
;;;1253   		return 1;
0010c8  2001              MOVS     r0,#1
                  |L1.4298|
;;;1254   	} else return 0; 
;;;1255   }
0010ca  bd10              POP      {r4,pc}
                  |L1.4300|
0010cc  e074              B        |L1.4536|
0010ce  0000              DCW      0x0000
                  |L1.4304|
0010d0  70617261          DCB      "parametr error",0
0010d4  6d657472
0010d8  20657272
0010dc  6f7200  
0010df  00                DCB      0
                  |L1.4320|
0010e0  756e6b6e          DCB      "unknown G-command",0
0010e4  6f776e20
0010e8  472d636f
0010ec  6d6d616e
0010f0  6400    
0010f2  00                DCB      0
0010f3  00                DCB      0
                  |L1.4340|
0010f4  756e6b6e          DCB      "unknown M-command",0
0010f8  6f776e20
0010fc  4d2d636f
001100  6d6d616e
001104  6400    
001106  00                DCB      0
001107  00                DCB      0
                  |L1.4360|
001108  70617261          DCB      "parametr F less zero",0
00110c  6d657472
001110  2046206c
001114  65737320
001118  7a65726f
00111c  00      
00111d  00                DCB      0
00111e  00                DCB      0
00111f  00                DCB      0
                  |L1.4384|
001120  70617261          DCB      "parametr S less zero",0
001124  6d657472
001128  2053206c
00112c  65737320
001130  7a65726f
001134  00      
001135  00                DCB      0
001136  00                DCB      0
001137  00                DCB      0
                  |L1.4408|
001138  70617261          DCB      "parametr P less zero",0
00113c  6d657472
001140  2050206c
001144  65737320
001148  7a65726f
00114c  00      
00114d  00                DCB      0
00114e  00                DCB      0
00114f  00                DCB      0
                  |L1.4432|
001150  656d7074          DCB      "empty line",0
001154  79206c69
001158  6e6500  
00115b  00                DCB      0
                  |L1.4444|
00115c  756e6b6e          DCB      "unknown error %d",0
001160  6f776e20
001164  6572726f
001168  72202564
00116c  00      
00116d  00                DCB      0
00116e  00                DCB      0
00116f  00                DCB      0
                  |L1.4464|
                          DCD      ||.data||
                  |L1.4468|
                          DCD      0x80800000
                  |L1.4472|
                          DCD      0x41ca6666
                  |L1.4476|
00117c  4170706c          DCB      "Apply Cmd %s %s Error %d\r\n",0
001180  7920436d
001184  64202573
001188  20257320
00118c  4572726f
001190  72202564
001194  0d0a00  
001197  00                DCB      0
                  |L1.4504|
001198  4170706c          DCB      "Apply Cmd %c %s Error %d\r\n",0
00119c  7920436d
0011a0  64202563
0011a4  20257320
0011a8  4572726f
0011ac  72202564
0011b0  0d0a00  
0011b3  00                DCB      0
                  |L1.4532|
                          DCD      ||.bss||
                  |L1.4536|
0011b8  2000              MOVS     r0,#0                 ;1254
0011ba  e786              B        |L1.4298|
;;;1256   
                          ENDP

                  qbFirstIndex PROC
;;;1257   u8 qbFirstIndex(void){
0011bc  48fe              LDR      r0,|L1.5560|
;;;1258   	return qb.head;
0011be  f8900910          LDRB     r0,[r0,#0x910]  ; qb
;;;1259   }
0011c2  4770              BX       lr
;;;1260   
                          ENDP

                  qbIncIndex PROC
;;;1261   void qbIncIndex(u8* Index){
0011c4  7801              LDRB     r1,[r0,#0]
;;;1262   	(*Index)++;
0011c6  1c49              ADDS     r1,r1,#1
0011c8  b2c9              UXTB     r1,r1
;;;1263   	(*Index) %= QEBSize; // закольцовка
0011ca  220a              MOVS     r2,#0xa
0011cc  fbb1f3f2          UDIV     r3,r1,r2
0011d0  fb021113          MLS      r1,r2,r3,r1
0011d4  7001              STRB     r1,[r0,#0]
;;;1264   }
0011d6  4770              BX       lr
;;;1265   
                          ENDP

                  qbLastFreeIndex PROC
;;;1266   u8 qbLastFreeIndex(void){
0011d8  48f7              LDR      r0,|L1.5560|
;;;1267   	return qb.tail;
0011da  f8900911          LDRB     r0,[r0,#0x911]  ; qb
;;;1268   }
0011de  4770              BX       lr
;;;1269   
                          ENDP

                  qbGetBlockIndex PROC
;;;1270   TBlock * qbGetBlockIndex(u8 Index){
0011e0  eb000140          ADD      r1,r0,r0,LSL #1
;;;1271   	return &(qb.blks[Index]);
0011e4  ebc11040          RSB      r0,r1,r0,LSL #5
0011e8  49f3              LDR      r1,|L1.5560|
0011ea  eb0100c0          ADD      r0,r1,r0,LSL #3
;;;1272   }
0011ee  4770              BX       lr
;;;1273   
                          ENDP

                  qbDelFirst PROC
;;;1274   u8 qbDelFirst(void){
0011f0  48f1              LDR      r0,|L1.5560|
0011f2  b510              PUSH     {r4,lr}
;;;1275   	// извлечение блока из очереди
;;;1276   	// возвращает 1 - блок удален
;;;1277   	// возвращает 0 - очередь пуста удалять нечего
;;;1278   	if (qb.count > 0) {
0011f4  f9901912          LDRSB    r1,[r0,#0x912]  ; qb
0011f8  2900              CMP      r1,#0
0011fa  dd0f              BLE      |L1.4636|
;;;1279   		qb.head++;
0011fc  f8902910          LDRB     r2,[r0,#0x910]  ; qb
;;;1280   		qb.head %= QEBSize; // закольцовка
001200  230a              MOVS     r3,#0xa
001202  1c52              ADDS     r2,r2,#1              ;1279
001204  b252              SXTB     r2,r2                 ;1279
001206  fb92f4f3          SDIV     r4,r2,r3
00120a  fb032214          MLS      r2,r3,r4,r2
00120e  f8802910          STRB     r2,[r0,#0x910]
001212  1e49              SUBS     r1,r1,#1
;;;1281   		qb.count--;
001214  f8801912          STRB     r1,[r0,#0x912]
;;;1282   		return 1;
001218  2001              MOVS     r0,#1
;;;1283   	} else return 0; 
;;;1284   }
00121a  e756              B        |L1.4298|
                  |L1.4636|
00121c  2000              MOVS     r0,#0                 ;1283
00121e  e754              B        |L1.4298|
;;;1285   
                          ENDP

                  qbFirstBlock PROC
;;;1286   TBlock * qbFirstBlock(void){
001220  48e5              LDR      r0,|L1.5560|
;;;1287   	// возвращает ссылку на первый элемент очереди
;;;1288   	// или nil если такового нет
;;;1289   	if (qb.count > 0) {
001222  f9901912          LDRSB    r1,[r0,#0x912]  ; qb
001226  2900              CMP      r1,#0
001228  dd08              BLE      |L1.4668|
;;;1290   		// очередь не пуста
;;;1291   		// возвращаем ссылку на голову
;;;1292   		//Msg("FBH %d\r\n",qb.head);
;;;1293   		return &(qb.blks[qb.head]);
00122a  f9901910          LDRSB    r1,[r0,#0x910]  ; qb
00122e  eb010241          ADD      r2,r1,r1,LSL #1
001232  ebc21141          RSB      r1,r2,r1,LSL #5
001236  eb0000c1          ADD      r0,r0,r1,LSL #3
;;;1294   	} else return NULL;
;;;1295   }
00123a  4770              BX       lr
                  |L1.4668|
00123c  2000              MOVS     r0,#0                 ;1294
00123e  4770              BX       lr
;;;1296   
                          ENDP

                  qbLastBlock PROC
;;;1297   TBlock * qbLastBlock(void){
001240  b570              PUSH     {r4-r6,lr}
;;;1298   	u8 i;
;;;1299   	// возвращает ссылку на последний элемент очереди
;;;1300   	// или nil если такового нет
;;;1301   	if (qb.count > 0) {
001242  4cdd              LDR      r4,|L1.5560|
001244  f9940912          LDRSB    r0,[r4,#0x912]  ; qb
001248  2800              CMP      r0,#0
00124a  dd11              BLE      |L1.4720|
;;;1302   		// очередь не пуста
;;;1303   		// возвращаем ссылку на хвост-1
;;;1304   		i = qb.tail;
00124c  f8940911          LDRB     r0,[r4,#0x911]  ; qb
;;;1305   		if (i > 0) i--;
001250  b110              CBZ      r0,|L1.4696|
001252  1e40              SUBS     r0,r0,#1
001254  b2c5              UXTB     r5,r0
001256  e000              B        |L1.4698|
                  |L1.4696|
;;;1306   		else i = QEBSize-1;
001258  2509              MOVS     r5,#9
                  |L1.4698|
;;;1307   		Msg("LB i %d \r\n",i);
00125a  4629              MOV      r1,r5
00125c  a0d7              ADR      r0,|L1.5564|
00125e  f7fffffe          BL       Msg
;;;1308   		return &(qb.blks[i]);
001262  eb050045          ADD      r0,r5,r5,LSL #1
001266  ebc01045          RSB      r0,r0,r5,LSL #5
00126a  eb0400c0          ADD      r0,r4,r0,LSL #3
;;;1309   	} else return NULL;
;;;1310   }
00126e  bd70              POP      {r4-r6,pc}
                  |L1.4720|
001270  2000              MOVS     r0,#0                 ;1309
001272  bd70              POP      {r4-r6,pc}
;;;1311   
                          ENDP

                  qbSecondBlock PROC
;;;1312   TBlock * qbSecondBlock(void){
001274  48d0              LDR      r0,|L1.5560|
;;;1313   	// возвращает ссылку на второй элемент очереди
;;;1314   	// или nil если такового нет
;;;1315   	u8 tmph;
;;;1316   	if (qb.count > 1) {
001276  f9901912          LDRSB    r1,[r0,#0x912]  ; qb
00127a  2901              CMP      r1,#1
00127c  dd0f              BLE      |L1.4766|
;;;1317   		// очередь не пуста
;;;1318   		// возвращаем ссылку на хвост
;;;1319   		tmph = (qb.head + 1)%QEBSize;
00127e  f9901910          LDRSB    r1,[r0,#0x910]  ; qb
001282  220a              MOVS     r2,#0xa
001284  1c49              ADDS     r1,r1,#1
001286  fb91f3f2          SDIV     r3,r1,r2
00128a  fb021113          MLS      r1,r2,r3,r1
00128e  b2c9              UXTB     r1,r1
;;;1320   		return &(qb.blks[tmph]);
001290  eb010241          ADD      r2,r1,r1,LSL #1
001294  ebc21141          RSB      r1,r2,r1,LSL #5
001298  eb0000c1          ADD      r0,r0,r1,LSL #3
;;;1321   	} else return NULL;
;;;1322   }
00129c  4770              BX       lr
                  |L1.4766|
00129e  2000              MOVS     r0,#0                 ;1321
0012a0  4770              BX       lr
;;;1323   
                          ENDP

                  qbPrevPrgBlock PROC
;;;1324   TBlock * qbPrevPrgBlock(void){
0012a2  49c5              LDR      r1,|L1.5560|
;;;1325   	s8 tmpTail;
;;;1326   	// возвращает ссылку на предыдущий элемент очереди
;;;1327   	// или nil если такового нет
;;;1328   	if (qb.count > 0) {
0012a4  f9910912          LDRSB    r0,[r1,#0x912]  ; qb
0012a8  2800              CMP      r0,#0
0012aa  dd0e              BLE      |L1.4810|
;;;1329   		// очередь не пуста
;;;1330   		// возвращаем ссылку на хвост
;;;1331   		tmpTail = qb.tail - 1;
0012ac  f8910911          LDRB     r0,[r1,#0x911]  ; qb
0012b0  1e40              SUBS     r0,r0,#1
0012b2  b240              SXTB     r0,r0
;;;1332   		if (tmpTail < 0) tmpTail += QEBSize; 
0012b4  2800              CMP      r0,#0
0012b6  da01              BGE      |L1.4796|
0012b8  300a              ADDS     r0,r0,#0xa
0012ba  b240              SXTB     r0,r0
                  |L1.4796|
;;;1333   		return &(qb.blks[tmpTail]);
0012bc  eb000240          ADD      r2,r0,r0,LSL #1
0012c0  ebc21040          RSB      r0,r2,r0,LSL #5
0012c4  eb0100c0          ADD      r0,r1,r0,LSL #3
;;;1334   	} else return NULL;
;;;1335   } 
0012c8  4770              BX       lr
                  |L1.4810|
0012ca  2000              MOVS     r0,#0                 ;1334
0012cc  4770              BX       lr
;;;1336   
                          ENDP

                  CheckG1Only PROC
;;;1337   u8 CheckG1Only(TBlock * b){
0012ce  7a41              LDRB     r1,[r0,#9]
0012d0  b9a9              CBNZ     r1,|L1.4862|
;;;1338   	// проверка наличия действий отличных от движения
;;;1339   //	Msg("sGo %d\r\n",b->sGo);
;;;1340   	if 	(	(b->cFeed) ||
;;;1341   			(b->cSpindel) ||
0012d2  7d01              LDRB     r1,[r0,#0x14]
0012d4  b999              CBNZ     r1,|L1.4862|
;;;1342   			(b->cCold) ||
0012d6  7d81              LDRB     r1,[r0,#0x16]
0012d8  b989              CBNZ     r1,|L1.4862|
;;;1343   			(b->cPause) ||
0012da  7e41              LDRB     r1,[r0,#0x19]
0012dc  b979              CBNZ     r1,|L1.4862|
;;;1344   			(b->cStop) 
0012de  f8901020          LDRB     r1,[r0,#0x20]
0012e2  b961              CBNZ     r1,|L1.4862|
;;;1345   		)
;;;1346   	{
;;;1347   //		Msg("G1 0\r\n");
;;;1348   		return 0;
;;;1349   	} else {
;;;1350   		// нет действий отличных от движения
;;;1351   		if 	(
0012e4  f890103c          LDRB     r1,[r0,#0x3c]
0012e8  b929              CBNZ     r1,|L1.4854|
;;;1352   				(	(b->comX) ||
;;;1353   					(b->comY) ||
0012ea  f890103d          LDRB     r1,[r0,#0x3d]
0012ee  b911              CBNZ     r1,|L1.4854|
;;;1354   					(b->comZ)
0012f0  f890103e          LDRB     r1,[r0,#0x3e]
0012f4  b119              CBZ      r1,|L1.4862|
                  |L1.4854|
;;;1355   				) && 
;;;1356   				(b->sGo == 1)
0012f6  f8900022          LDRB     r0,[r0,#0x22]
0012fa  2801              CMP      r0,#1
0012fc  d000              BEQ      |L1.4864|
                  |L1.4862|
;;;1357   			) {
;;;1358   
;;;1359   //			Msg("G1 1\r\n");
;;;1360   			return 1;	// есть команда G1
;;;1361   		}
;;;1362   		else {
;;;1363   //			Msg("G1 0\r\n");
;;;1364   		 	return 0; // нет команды G1
0012fe  2000              MOVS     r0,#0
                  |L1.4864|
;;;1365   		}
;;;1366   	}
;;;1367   }
001300  4770              BX       lr
;;;1368   
                          ENDP

                  CheckG1FOnly PROC
;;;1369   u8 CheckG1FOnly(TBlock * b){
001302  7d01              LDRB     r1,[r0,#0x14]
001304  b999              CBNZ     r1,|L1.4910|
;;;1370   //	Msg("FsGo %d\r\n",b->sGo);
;;;1371   	if 	(	(b->cSpindel) ||
;;;1372   			(b->cCold) ||
001306  7d81              LDRB     r1,[r0,#0x16]
001308  b989              CBNZ     r1,|L1.4910|
;;;1373   			(b->cPause) ||
00130a  7e41              LDRB     r1,[r0,#0x19]
00130c  b979              CBNZ     r1,|L1.4910|
;;;1374   			(b->cStop) 
00130e  f8901020          LDRB     r1,[r0,#0x20]
001312  b961              CBNZ     r1,|L1.4910|
;;;1375   		)
;;;1376   	{
;;;1377   //		Msg("G1F 0\r\n");
;;;1378   		return 0;
;;;1379   	} else {
;;;1380   		// нет действий отличных от движения
;;;1381   		if 	(
001314  f890103c          LDRB     r1,[r0,#0x3c]
001318  b929              CBNZ     r1,|L1.4902|
;;;1382   				(	(b->comX) ||
;;;1383   					(b->comY) ||
00131a  f890103d          LDRB     r1,[r0,#0x3d]
00131e  b911              CBNZ     r1,|L1.4902|
;;;1384   					(b->comZ)
001320  f890103e          LDRB     r1,[r0,#0x3e]
001324  b119              CBZ      r1,|L1.4910|
                  |L1.4902|
;;;1385   				) && 
;;;1386   				(b->sGo == 1)
001326  f8900022          LDRB     r0,[r0,#0x22]
00132a  2801              CMP      r0,#1
00132c  d000              BEQ      |L1.4912|
                  |L1.4910|
;;;1387   			) {
;;;1388   //			Msg("G1F 1\r\n");
;;;1389   			return 1;	// есть команда G1
;;;1390   		}
;;;1391   		else {
;;;1392   //			Msg("G1F 0\r\n");
;;;1393   			return 0; // нет команды G1
00132e  2000              MOVS     r0,#0
                  |L1.4912|
;;;1394   		}
;;;1395   	}
;;;1396   }
001330  4770              BX       lr
;;;1397   
                          ENDP

                  CheckAngle PROC
;;;1398   u8 CheckAngle(float x0,float y0,float z0,float x1,float y1,float z1,float x2,float y2,float z2) {
001332  e92d5fff          PUSH     {r0-r12,lr}
001336  460e              MOV      r6,r1
001338  e9dd4a0e          LDRD     r4,r10,[sp,#0x38]
00133c  e9dd5b10          LDRD     r5,r11,[sp,#0x40]
001340  4617              MOV      r7,r2
;;;1399   	// проверка угла 012
;;;1400   	float xv1,yv1,zv1,xv2,yv2,zv2,sm,m1,m2,a;
;;;1401   /*	
;;;1402   	Msg("CA %d %d %d   %d %d %d   %d %d %d\r\n",
;;;1403   		(int)(x0),
;;;1404   		(int)(y0),
;;;1405   		(int)(z0),
;;;1406   		(int)(x1),
;;;1407   		(int)(y1),
;;;1408   		(int)(z1),
;;;1409   		(int)(x2),
;;;1410   		(int)(y2),
;;;1411   		(int)(z2)
;;;1412   		);
;;;1413   */	
;;;1414   	// вычисляем два вектора
;;;1415   	xv1 = x1 - x0;
001342  9903              LDR      r1,[sp,#0xc]
001344  f7fffffe          BL       __aeabi_frsub
001348  4681              MOV      r9,r0
;;;1416   	yv1 = y1 - y0;
00134a  4631              MOV      r1,r6
00134c  4620              MOV      r0,r4
00134e  f7fffffe          BL       __aeabi_fsub
001352  4680              MOV      r8,r0
;;;1417   	zv1 = z1 - z0;
001354  4639              MOV      r1,r7
001356  4650              MOV      r0,r10
001358  f7fffffe          BL       __aeabi_fsub
00135c  4607              MOV      r7,r0
;;;1418   	xv2 = x2 - x1;
00135e  4628              MOV      r0,r5
001360  9903              LDR      r1,[sp,#0xc]
001362  f7fffffe          BL       __aeabi_fsub
001366  4606              MOV      r6,r0
;;;1419   	yv2 = y2 - y1;
001368  4621              MOV      r1,r4
00136a  4658              MOV      r0,r11
00136c  f7fffffe          BL       __aeabi_fsub
001370  4605              MOV      r5,r0
;;;1420   	zv2 = z2 - z1;
001372  4651              MOV      r1,r10
001374  9812              LDR      r0,[sp,#0x48]
001376  f7fffffe          BL       __aeabi_fsub
00137a  4604              MOV      r4,r0
;;;1421   	// найти угол между векторами v1 v2
;;;1422   //	Msg("xv1 %d yv1 %d zv1 %d\r\n",
;;;1423   //		(int)(xv1*1000),(int)(yv1*1000),(int)(zv1*1000));
;;;1424   //	Msg("xv2 %d yv2 %d zv2 %d\r\n",
;;;1425   //		(int)(xv2*1000),(int)(yv2*1000),(int)(zv2*1000));
;;;1426   	sm = xv1*xv2 + yv1*yv2 + zv1*zv2;
00137c  4601              MOV      r1,r0
00137e  4638              MOV      r0,r7
001380  f7fffffe          BL       __aeabi_fmul
001384  4683              MOV      r11,r0
001386  4629              MOV      r1,r5
001388  4640              MOV      r0,r8
00138a  f7fffffe          BL       __aeabi_fmul
00138e  4682              MOV      r10,r0
001390  4631              MOV      r1,r6
001392  4648              MOV      r0,r9
001394  f7fffffe          BL       __aeabi_fmul
001398  4651              MOV      r1,r10
00139a  f7fffffe          BL       __aeabi_fadd
00139e  4659              MOV      r1,r11
0013a0  f7fffffe          BL       __aeabi_fadd
0013a4  4683              MOV      r11,r0
;;;1427   	m1 = sqrt(xv1*xv1+yv1*yv1+zv1*zv1);
0013a6  4639              MOV      r1,r7
0013a8  4608              MOV      r0,r1
0013aa  f7fffffe          BL       __aeabi_fmul
0013ae  4682              MOV      r10,r0
0013b0  4641              MOV      r1,r8
0013b2  4608              MOV      r0,r1
0013b4  f7fffffe          BL       __aeabi_fmul
0013b8  4607              MOV      r7,r0
0013ba  4649              MOV      r1,r9
0013bc  4608              MOV      r0,r1
0013be  f7fffffe          BL       __aeabi_fmul
0013c2  4639              MOV      r1,r7
0013c4  f7fffffe          BL       __aeabi_fadd
0013c8  4651              MOV      r1,r10
0013ca  f7fffffe          BL       __aeabi_fadd
0013ce  f7fffffe          BL       __aeabi_f2d
0013d2  f7fffffe          BL       sqrt
0013d6  f7fffffe          BL       __aeabi_d2f
0013da  4607              MOV      r7,r0
;;;1428   	m2 = sqrt(xv2*xv2+yv2*yv2+zv2*zv2);
0013dc  4621              MOV      r1,r4
0013de  4608              MOV      r0,r1
0013e0  f7fffffe          BL       __aeabi_fmul
0013e4  4604              MOV      r4,r0
0013e6  4629              MOV      r1,r5
0013e8  4608              MOV      r0,r1
0013ea  f7fffffe          BL       __aeabi_fmul
0013ee  4605              MOV      r5,r0
0013f0  4631              MOV      r1,r6
0013f2  4608              MOV      r0,r1
0013f4  f7fffffe          BL       __aeabi_fmul
0013f8  4629              MOV      r1,r5
0013fa  f7fffffe          BL       __aeabi_fadd
0013fe  4621              MOV      r1,r4
001400  f7fffffe          BL       __aeabi_fadd
001404  f7fffffe          BL       __aeabi_f2d
001408  f7fffffe          BL       sqrt
00140c  f7fffffe          BL       __aeabi_d2f
001410  4601              MOV      r1,r0
;;;1429   	//Msg("s\r\n");
;;;1430   	//Msg("sm %d m1 %d m2 %d\r\n",(int)(sm*1000),(int)(m1*1000),(int)(m2*1000));
;;;1431   	if ((m1*m2)!=0) {
001412  4638              MOV      r0,r7
001414  f7fffffe          BL       __aeabi_fmul
001418  f0104fff          TST      r0,#0x7f800000
00141c  d01b              BEQ      |L1.5206|
;;;1432   		a = acos(sm/(m1*m2))*180/pi;
00141e  4601              MOV      r1,r0
001420  4658              MOV      r0,r11
001422  f7fffffe          BL       __aeabi_fdiv
001426  f7fffffe          BL       __aeabi_f2d
00142a  f7fffffe          BL       acos
00142e  2200              MOVS     r2,#0
001430  4b65              LDR      r3,|L1.5576|
001432  f7fffffe          BL       __aeabi_dmul
001436  4a65              LDR      r2,|L1.5580|
001438  4b65              LDR      r3,|L1.5584|
00143a  f7fffffe          BL       __aeabi_ddiv
00143e  f7fffffe          BL       __aeabi_d2f
;;;1433   //		Msg("\t\t\t\ta %d\r\n",(int)(a*1000));
;;;1434   		if (a < *pTrAngle) {
001442  4964              LDR      r1,|L1.5588|
001444  6b49              LDR      r1,[r1,#0x34]  ; pTrAngle
001446  6809              LDR      r1,[r1,#0]
001448  f7fffffe          BL       __aeabi_cfcmple
00144c  d203              BCS      |L1.5206|
;;;1435   //			Msg("<");
;;;1436   			return 1;
00144e  2001              MOVS     r0,#1
                  |L1.5200|
;;;1437   		} else {
;;;1438   //			Msg(">");
;;;1439   			return 0;
;;;1440   		}
;;;1441   	} {
;;;1442   //		Msg("m=0\r\n");
;;;1443   		return 0; // один из векторов нулевой
;;;1444   	}
;;;1445   }
001450  b004              ADD      sp,sp,#0x10
001452  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5206|
001456  2000              MOVS     r0,#0                 ;1443
001458  e7fa              B        |L1.5200|
;;;1446   
                          ENDP

                  CheckNextLine PROC
;;;1452   
;;;1453   u8 CheckNextLine(float pX,float pY,float pZ,TBlock * b,TFileStream * strm){
00145a  e92d43f0          PUSH     {r4-r9,lr}
00145e  b087              SUB      sp,sp,#0x1c
001460  4688              MOV      r8,r1
001462  4681              MOV      r9,r0
001464  461c              MOV      r4,r3
001466  4615              MOV      r5,r2
;;;1454   	// 
;;;1455   	u8 errt; // ошибка транстляции
;;;1456   	u8 res; // ошибка чтения
;;;1457   	s32 sPos; // сохраняемая позиция в потоке
;;;1458   //	char st[50];
;;;1459   //	TBlock ctb; // блок для трансляции
;;;1460   
;;;1461   	memset((void*)&ctb,0,sizeof ctb);
001468  21e8              MOVS     r1,#0xe8
00146a  485b              LDR      r0,|L1.5592|
00146c  9e0e              LDR      r6,[sp,#0x38]
00146e  f7fffffe          BL       __aeabi_memclr4
;;;1462   	memset((void*)&st[0],0,50);
001472  4859              LDR      r0,|L1.5592|
001474  2132              MOVS     r1,#0x32
001476  3834              SUBS     r0,r0,#0x34
001478  f7fffffe          BL       __aeabi_memclr4
;;;1463   
;;;1464   	bsFS_Pos(strm,&sPos); // сохранили позицию для возможного восстановления
00147c  a905              ADD      r1,sp,#0x14
00147e  4630              MOV      r0,r6
001480  f7fffffe          BL       bsFS_Pos
;;;1465   	res = bsFS_ReadLn(&ts,(u8*)st,50);
001484  4954              LDR      r1,|L1.5592|
001486  4853              LDR      r0,|L1.5588|
001488  2232              MOVS     r2,#0x32
00148a  3934              SUBS     r1,r1,#0x34
00148c  304c              ADDS     r0,r0,#0x4c
00148e  f7fffffe          BL       bsFS_ReadLn
001492  f0100fff          TST      r0,#0xff
;;;1466   	//Msg("%s",s);
;;;1467   		// УБРАТЬ !!!
;;;1468   	//	bsFS_Seek(strm,sPos);
;;;1469   
;;;1470   	if (res == FS_RESULT_OK) {
001496  d10c              BNE      |L1.5298|
;;;1471   		// считали
;;;1472   //		Msg("CNL px %d py %d\r\n",(int)(pX),(int)(pY));
;;;1473   		errt=TranslateLineToBlock(st,&ctb,b,0);
001498  494f              LDR      r1,|L1.5592|
00149a  2300              MOVS     r3,#0
00149c  4622              MOV      r2,r4
00149e  f1a10034          SUB      r0,r1,#0x34
0014a2  f7fffffe          BL       TranslateLineToBlock
0014a6  4607              MOV      r7,r0
;;;1474   		
;;;1475   		// восстанавливаем позицию, которая была до чтения строки
;;;1476   		bsFS_Seek(strm,sPos);
0014a8  4630              MOV      r0,r6
0014aa  9905              LDR      r1,[sp,#0x14]
0014ac  f7fffffe          BL       bsFS_Seek
;;;1477   		//return 0;
;;;1478   
;;;1479   		if (errt==0) {
0014b0  b11f              CBZ      r7,|L1.5306|
                  |L1.5298|
;;;1480   			// трансляция без ошибок
;;;1481   			//Msg("z");
;;;1482   			if (CheckG1Only(&ctb)) {
;;;1483   	 			if (CheckAngle(pX,pY,pZ,b->Xd,b->Yd,b->Zd,ctb.Xd,ctb.Yd,ctb.Zd)) {
;;;1484   //					Msg("\t\t\tCNL A<\r\n");
;;;1485   					return 1; // угол меньше порога
;;;1486   				}
;;;1487   				else {
;;;1488   //					Msg("\t\t\tCNL A>\r\n");
;;;1489   					return 0;// проверка угла не прошла
;;;1490   				}
;;;1491   			} else {
;;;1492   //				Msg("\t\t\tCNL EG1\r\n");
;;;1493   				return 0; // в блоке не только G1
;;;1494   			}
;;;1495   		} else {
;;;1496   //			Msg("\t\t\tCNL ET %d\r\n",errt);
;;;1497   			return 0; // ошибка трансляции
;;;1498   		}
;;;1499   
;;;1500   	} else {
;;;1501   //		Msg("CNL ERL %d\r\n",res);
;;;1502   	 	return 0; // строка не считана
0014b2  2000              MOVS     r0,#0
                  |L1.5300|
;;;1503   	}
;;;1504   }
0014b4  b007              ADD      sp,sp,#0x1c
0014b6  e8bd83f0          POP      {r4-r9,pc}
                  |L1.5306|
0014ba  4847              LDR      r0,|L1.5592|
0014bc  f7fffffe          BL       CheckG1Only
0014c0  2800              CMP      r0,#0                 ;1482
0014c2  d0f7              BEQ      |L1.5300|
0014c4  4844              LDR      r0,|L1.5592|
0014c6  6d63              LDR      r3,[r4,#0x54]         ;1483
0014c8  304c              ADDS     r0,r0,#0x4c           ;1483
0014ca  ae02              ADD      r6,sp,#8              ;1483
0014cc  c807              LDM      r0,{r0-r2}            ;1483
0014ce  9301              STR      r3,[sp,#4]            ;1483
0014d0  e8860007          STM      r6,{r0-r2}            ;1483
0014d4  6d20              LDR      r0,[r4,#0x50]         ;1483
0014d6  9000              STR      r0,[sp,#0]            ;1483
0014d8  462a              MOV      r2,r5                 ;1483
0014da  4641              MOV      r1,r8                 ;1483
0014dc  4648              MOV      r0,r9                 ;1483
0014de  6ce3              LDR      r3,[r4,#0x4c]         ;1483
0014e0  f7fffffe          BL       CheckAngle
0014e4  2800              CMP      r0,#0                 ;1483
0014e6  d0e5              BEQ      |L1.5300|
0014e8  2001              MOVS     r0,#1                 ;1485
0014ea  e7e3              B        |L1.5300|
;;;1505   
                          ENDP

                  TranslatePrgLine PROC
;;;1514   
;;;1515   void TranslatePrgLine(const char * s){
0014ec  e92d41f0          PUSH     {r4-r8,lr}
0014f0  4605              MOV      r5,r0
;;;1516   	u8 errt; // ошибка транстляции
;;;1517   	u8 len;
;;;1518   //	float pX,pY,pZ;
;;;1519   	// формирование очереди из транслируемых блоков
;;;1520   	// если в очереди есть место
;;;1521   	memset((void*)&tb,0,sizeof tb);
0014f2  21e8              MOVS     r1,#0xe8
0014f4  4839              LDR      r0,|L1.5596|
0014f6  f7fffffe          BL       __aeabi_memclr4
;;;1522   	if (qbIsPlace()) {
0014fa  f7fffffe          BL       qbIsPlace
0014fe  2800              CMP      r0,#0
001500  d039              BEQ      |L1.5494|
;;;1523   		// читаем строку из потока трансляции (ts)
;;;1524   		// по идее нужно пропустить все пустые строки
;;;1525   		if (strlen(s) > 0) {
001502  4628              MOV      r0,r5
001504  f7fffffe          BL       strlen
001508  2800              CMP      r0,#0
00150a  d032              BEQ      |L1.5490|
;;;1526   			//Msg("%s\r\n",s);
;;;1527   			//NumReadLine++;
;;;1528   			// замер скорости трансляции
;;;1529   //			if (NumReadLine == 1) {
;;;1530   //				StartTime(timeTrCalc);
;;;1531   //				Msg("Start TrTime\r\n");
;;;1532   //			}
;;;1533   //			memcpy(&(tb.s[0]),&s[0],50);
;;;1534   			// строка считана
;;;1535   			//Msg("\t\t\t\tT%d: %s\r\n",NumReadLine,s);
;;;1536   			ppb = qbPrevPrgBlock(); // получаем ссылку на предыдущий блок
00150c  f7fffffe          BL       qbPrevPrgBlock
001510  4c30              LDR      r4,|L1.5588|
;;;1537   //			Msg("ppb %x\r\n",ppb);
;;;1538   			//return;
;;;1539   			// транслируем
;;;1540   			errt=TranslateLineToBlock(s,&tb,ppb,1);
001512  4602              MOV      r2,r0
001514  2301              MOVS     r3,#1
001516  6460              STR      r0,[r4,#0x44]  ; ppb
001518  4930              LDR      r1,|L1.5596|
00151a  4628              MOV      r0,r5
00151c  f7fffffe          BL       TranslateLineToBlock
001520  0002              MOVS     r2,r0
;;;1541   			if (errt==0) {
001522  d005              BEQ      |L1.5424|
;;;1542   				tb.NumLine = *pCurCadr; // служебная строка
;;;1543   				len = strlen(s);
;;;1544   				memset((void*)&(tb.s[0]),0,50);
;;;1545   				memcpy((void*)&(tb.s[0]),(void*)&(s[0]),len);
;;;1546   				if (!tb.Nomove) {
;;;1547   					if (!qbAddBlock(&tb)) {
;;;1548   						Msg("Error Add Block To Prg Queue\r\n");
;;;1549   					}
;;;1550   				} else {
;;;1551   					//Msg("No Add Block (Nomove)\r\n");
;;;1552   #ifdef MOVE_D					
;;;1553   					Msg("(Nomove) %d\r\n",tb.NumLine);
;;;1554   #endif					
;;;1555   				}
;;;1556   				//Msg("\t\t\t\tNS %d\r\n",tb.Nonstop);
;;;1557   			} 
;;;1558   			// с ошибокой формируем сообщение об ошибке трансляции
;;;1559   			else Msg("Err Tr Line(%s). Ec %d\r\n",s,errt);
001524  4629              MOV      r1,r5
001526  e8bd41f0          POP      {r4-r8,lr}
00152a  a02d              ADR      r0,|L1.5600|
00152c  f7ffbffe          B.W      Msg
                  |L1.5424|
001530  6aa0              LDR      r0,[r4,#0x28]         ;1542  ; pCurCadr
001532  4e2a              LDR      r6,|L1.5596|
001534  6800              LDR      r0,[r0,#0]            ;1542
001536  6030              STR      r0,[r6,#0]            ;1543  ; tb
001538  4628              MOV      r0,r5                 ;1543
00153a  f7fffffe          BL       strlen
00153e  b2c4              UXTB     r4,r0                 ;1543
001540  f10600b4          ADD      r0,r6,#0xb4           ;1544
001544  2132              MOVS     r1,#0x32              ;1544
001546  4607              MOV      r7,r0                 ;1544
001548  f7fffffe          BL       __aeabi_memclr4
00154c  4622              MOV      r2,r4                 ;1545
00154e  4629              MOV      r1,r5                 ;1545
001550  4638              MOV      r0,r7                 ;1545
001552  f7fffffe          BL       __aeabi_memcpy
001556  f89600a8          LDRB     r0,[r6,#0xa8]         ;1546  ; tb
00155a  2800              CMP      r0,#0                 ;1546
00155c  d10b              BNE      |L1.5494|
00155e  4630              MOV      r0,r6                 ;1547
001560  f7fffffe          BL       qbAddBlock
001564  2800              CMP      r0,#0                 ;1547
001566  d106              BNE      |L1.5494|
001568  a024              ADR      r0,|L1.5628|
                  |L1.5482|
;;;1560   		} else {
;;;1561   			Msg("Error ReadNextPrgLine\r\n");
00156a  e8bd41f0          POP      {r4-r8,lr}
00156e  f7ffbffe          B.W      Msg
                  |L1.5490|
001572  a02a              ADR      r0,|L1.5660|
001574  e7f9              B        |L1.5482|
                  |L1.5494|
;;;1562   		}
;;;1563   	}// else Msg("NoPlace In Prg Queue\r\n");
;;;1564   	// 
;;;1565   //	Msg("T\r\n");
;;;1566   }
001576  e8bd81f0          POP      {r4-r8,pc}
;;;1567   
                          ENDP

                  TranslatePrg PROC
;;;1568   void TranslatePrg(void){
00157a  e92d41f0          PUSH     {r4-r8,lr}
;;;1569   	u8 errt; // ошибка транстляции
;;;1570   	s8 res;
;;;1571   	float pX,pY,pZ;
;;;1572   	if (EndTranslate) return;
00157e  4c15              LDR      r4,|L1.5588|
001580  b086              SUB      sp,sp,#0x18           ;1568
001582  78a0              LDRB     r0,[r4,#2]  ; EndTranslate
001584  2800              CMP      r0,#0                 ;1568
001586  d162              BNE      |L1.5710|
;;;1573   	// формирование очереди из транслируемых блоков
;;;1574   	// если в очереди есть место
;;;1575   	memset((void*)&tb,0,sizeof tb);
001588  21e8              MOVS     r1,#0xe8
00158a  4814              LDR      r0,|L1.5596|
00158c  f7fffffe          BL       __aeabi_memclr4
;;;1576   	memset((void*)&(s[0]),0,50);
001590  4812              LDR      r0,|L1.5596|
001592  2132              MOVS     r1,#0x32
001594  30e8              ADDS     r0,r0,#0xe8
001596  f7fffffe          BL       __aeabi_memclr4
;;;1577   	if (qbIsPlace()) {
00159a  f7fffffe          BL       qbIsPlace
00159e  2800              CMP      r0,#0
0015a0  d055              BEQ      |L1.5710|
;;;1578   		// читаем строку из потока трансляции (ts)
;;;1579   		// по идее нужно пропустить все пустые строки
;;;1580   		res=bsFS_ReadLn(&ts,(u8*)s,50);
0015a2  490e              LDR      r1,|L1.5596|
0015a4  2232              MOVS     r2,#0x32
0015a6  31e8              ADDS     r1,r1,#0xe8
0015a8  f104004c          ADD      r0,r4,#0x4c
0015ac  f7fffffe          BL       bsFS_ReadLn
0015b0  0001              MOVS     r1,r0
;;;1581   		if (res==FS_RESULT_OK) {
;;;1582   			(*pNumReadLine)++;
;;;1583   			// замер скорости трансляции
;;;1584   //			if (NumReadLine == 1) {
;;;1585   //				StartTime(timeTrCalc);
;;;1586   //				Msg("Start TrTime\r\n");
;;;1587   //			}
;;;1588   			memcpy((void*)&(tb.s[0]),(void*)&(s[0]),50);
;;;1589   			// строка считана
;;;1590   			//Msg("\t\t\t\tT%d: %s\r\n",NumReadLine,s);
;;;1591   			ppb = qbPrevPrgBlock(); // получаем ссылку на предыдущий блок
;;;1592   #ifdef MOVE_D			
;;;1593   //			if (ppb != NULL)
;;;1594   //			Msg("ppb NL %d Xd %d Yd %d Zd %d NS %d\r\n",(*ppb).NumLine,OUTF1T((*ppb).Xd),OUTF1T((*ppb).Yd),OUTF1T((*ppb).Zd),(*ppb).Nonstop);
;;;1595   //			else Msg("ppb==Null\r\n");
;;;1596   #endif			
;;;1597   			//return;
;;;1598   			// транслируем
;;;1599   			errt=TranslateLineToBlock(s,&tb,ppb,1);
0015b2  f04f0701          MOV      r7,#1
0015b6  e03d              B        |L1.5684|
                  |L1.5560|
                          DCD      ||.bss||
                  |L1.5564|
0015bc  4c422069          DCB      "LB i %d \r\n",0
0015c0  20256420
0015c4  0d0a00  
0015c7  00                DCB      0
                  |L1.5576|
                          DCD      0x40668000
                  |L1.5580|
                          DCD      0x54442d18
                  |L1.5584|
                          DCD      0x400921fb
                  |L1.5588|
                          DCD      ||.data||
                  |L1.5592|
                          DCD      ||.bss||+0x948
                  |L1.5596|
                          DCD      ||.bss||+0xc00
                  |L1.5600|
0015e0  45727220          DCB      "Err Tr Line(%s). Ec %d\r\n",0
0015e4  5472204c
0015e8  696e6528
0015ec  2573292e
0015f0  20456320
0015f4  25640d0a
0015f8  00      
0015f9  00                DCB      0
0015fa  00                DCB      0
0015fb  00                DCB      0
                  |L1.5628|
0015fc  4572726f          DCB      "Error Add Block To Prg Queue\r\n",0
001600  72204164
001604  6420426c
001608  6f636b20
00160c  546f2050
001610  72672051
001614  75657565
001618  0d0a00  
00161b  00                DCB      0
                  |L1.5660|
00161c  4572726f          DCB      "Error ReadNextPrgLine\r\n",0
001620  72205265
001624  61644e65
001628  78745072
00162c  674c696e
001630  650d0a00
                  |L1.5684|
001634  f104064c          ADD      r6,r4,#0x4c           ;1580
001638  d00b              BEQ      |L1.5714|
;;;1600   			if (errt==0) {
;;;1601   				tb.NumLine = *pNumReadLine;
;;;1602   				memcpy((void*)&tb.s,(void*)&(s[0]),50);
;;;1603   				FS_Pos(ts.f,&tb.PosSSP);
;;;1604   				// если без ошибок то исследуем на предмет останова
;;;1605   				// только G1 и координаты
;;;1606   				if (ppb != NULL) {
;;;1607   					// есть предыдущий блок
;;;1608   //					Msg("ppb.Nonstop %d\r\n",(*ppb).Nonstop);
;;;1609   					if ((*ppb).Nonstop) {
;;;1610   						// предыдущий блок безостановочный
;;;1611   						// значит в текущем может быть только G1
;;;1612   						if (CheckG1Only(&tb)) {
;;;1613   							// в текущем блоке только G1
;;;1614   							// нужно проверять следующий блок
;;;1615   //							Msg("pX %d pY %d",(int)((*ppb).Xd),(int)((*ppb).Yd));
;;;1616   
;;;1617   							if (CheckNextLine((*ppb).Xd,(*ppb).Yd,(*ppb).Zd,&tb,&ts)) {
;;;1618   								tb.Nonstop = 1; // блок безостановочный
;;;1619   //								Msg("NS=1\r\n");
;;;1620   							}
;;;1621   
;;;1622   						} 
;;;1623   					} else {
;;;1624   						// предыдущий блок остановочный
;;;1625   						// значит в текущем может быть G1 и F
;;;1626   						if (CheckG1FOnly(&tb)) {
;;;1627   //							Msg("pX %d pY %d",(int)((*ppb).Xd),(int)((*ppb).Yd));
;;;1628   
;;;1629   							if (CheckNextLine((*ppb).Xd,(*ppb).Yd,(*ppb).Zd,&tb,&ts)) {
;;;1630   								tb.Nonstop = 1; // блок безостановочный
;;;1631   //								Msg("NS=1\r\n");
;;;1632   							}
;;;1633   
;;;1634   						} 
;;;1635   					}
;;;1636   				} else {
;;;1637   					// нет предыдущего блока
;;;1638   					// значит допустимы G1 F
;;;1639   //					Msg("nb\r\n");
;;;1640   					if (CheckG1FOnly(&tb)) {
;;;1641   						XYZImpToXYZ(*(ms_X.Pos),*(ms_Y.Pos),*(ms_Z.Pos),&pX,&pY,&pZ);
;;;1642   						if (CheckNextLine(pX,pY,pZ,&tb,&ts)) {
;;;1643   							tb.Nonstop = 1; // блок безостановочный
;;;1644   //							Msg("NS=1\r\n");
;;;1645   						}
;;;1646   					} 
;;;1647   				}
;;;1648   				// здесь значение поля Nonstop определено
;;;1649   				if (!tb.Nomove) {
;;;1650   					if (!qbAddBlock(&tb)) {
;;;1651   						Msg("Error Add Block To Prg Queue\r\n");
;;;1652   					}
;;;1653   #ifdef MOVE_D					
;;;1654   					Msg("Add Block %d %s NS %d\r\n",tb.NumLine,tb.s,tb.Nonstop);
;;;1655   #endif					
;;;1656   				} else {
;;;1657   					//Msg("No Add Block (Nomove)\r\n");
;;;1658   #ifdef MOVE_D					
;;;1659   					Msg("(Nomove) %d\r\n",tb.NumLine);
;;;1660   #endif					
;;;1661   				}
;;;1662   				//Msg("\t\t\t\tNS %d\r\n",tb.Nonstop);
;;;1663   			} 
;;;1664   			// с ошибокой формируем сообщение об ошибке трансляции
;;;1665   			else Msg("Error Traslate Line(%s). Ecode %d \r\n",s,errt);
;;;1666   		} else {
;;;1667   			Msg("Error ReadNextPrgLine %d\r\n",res);
00163a  a0fb              ADR      r0,|L1.6696|
00163c  f7fffffe          BL       Msg
;;;1668   			if (FS_Eof(ts.f)==FS_EOF) {
001640  f9960000          LDRSB    r0,[r6,#0]  ; ts
001644  f7fffffe          BL       FS_Eof
001648  3015              ADDS     r0,r0,#0x15
00164a  d100              BNE      |L1.5710|
;;;1669   				EndTranslate = 1;
00164c  70a7              STRB     r7,[r4,#2]
                  |L1.5710|
;;;1670   			}
;;;1671   		}
;;;1672   	}// else Msg("NoPlace In Prg Queue\r\n");
;;;1673   	// 
;;;1674   
;;;1675   //	Msg("T\r\n");
;;;1676   }
00164e  b006              ADD      sp,sp,#0x18
001650  e791              B        |L1.5494|
                  |L1.5714|
001652  6ae0              LDR      r0,[r4,#0x2c]         ;1582  ; pNumReadLine
001654  2232              MOVS     r2,#0x32              ;1588
001656  6801              LDR      r1,[r0,#0]            ;1582
001658  1c49              ADDS     r1,r1,#1              ;1582
00165a  6001              STR      r1,[r0,#0]            ;1588
00165c  49f9              LDR      r1,|L1.6724|
00165e  f1a10034          SUB      r0,r1,#0x34           ;1588
001662  4680              MOV      r8,r0                 ;1588
001664  f7fffffe          BL       __aeabi_memcpy4
001668  f7fffffe          BL       qbPrevPrgBlock
00166c  49f5              LDR      r1,|L1.6724|
00166e  4602              MOV      r2,r0                 ;1599
001670  6460              STR      r0,[r4,#0x44]         ;1599  ; ppb
001672  2301              MOVS     r3,#1                 ;1599
001674  39e8              SUBS     r1,r1,#0xe8           ;1599
001676  48f3              LDR      r0,|L1.6724|
001678  f7fffffe          BL       TranslateLineToBlock
00167c  0002              MOVS     r2,r0                 ;1599
00167e  d004              BEQ      |L1.5770|
001680  49f0              LDR      r1,|L1.6724|
001682  a0f1              ADR      r0,|L1.6728|
001684  f7fffffe          BL       Msg
001688  e7e1              B        |L1.5710|
                  |L1.5770|
00168a  6ae0              LDR      r0,[r4,#0x2c]         ;1601  ; pNumReadLine
00168c  4ded              LDR      r5,|L1.6724|
00168e  2232              MOVS     r2,#0x32              ;1602
001690  3de8              SUBS     r5,r5,#0xe8           ;1601
001692  6800              LDR      r0,[r0,#0]            ;1601
001694  6028              STR      r0,[r5,#0]            ;1602  ; tb
001696  49eb              LDR      r1,|L1.6724|
001698  4640              MOV      r0,r8                 ;1602
00169a  f7fffffe          BL       __aeabi_memcpy4
00169e  f9960000          LDRSB    r0,[r6,#0]            ;1603  ; ts
0016a2  1d29              ADDS     r1,r5,#4              ;1603
0016a4  f7fffffe          BL       FS_Pos
0016a8  6c60              LDR      r0,[r4,#0x44]         ;1606  ; ppb
0016aa  b190              CBZ      r0,|L1.5842|
0016ac  7a00              LDRB     r0,[r0,#8]            ;1609
0016ae  2800              CMP      r0,#0                 ;1609
0016b0  4628              MOV      r0,r5                 ;1626
0016b2  d009              BEQ      |L1.5832|
0016b4  f7fffffe          BL       CheckG1Only
0016b8  e008              B        |L1.5836|
                  |L1.5818|
0016ba  9600              STR      r6,[sp,#0]            ;1617
0016bc  6c60              LDR      r0,[r4,#0x44]         ;1617  ; ppb
0016be  4be1              LDR      r3,|L1.6724|
0016c0  304c              ADDS     r0,r0,#0x4c           ;1617
0016c2  3be8              SUBS     r3,r3,#0xe8           ;1617
0016c4  c807              LDM      r0,{r0-r2}            ;1617
0016c6  e01f              B        |L1.5896|
                  |L1.5832|
0016c8  f7fffffe          BL       CheckG1FOnly
                  |L1.5836|
0016cc  2800              CMP      r0,#0                 ;1626
0016ce  d1f4              BNE      |L1.5818|
0016d0  e01e              B        |L1.5904|
                  |L1.5842|
0016d2  48dc              LDR      r0,|L1.6724|
0016d4  38e8              SUBS     r0,r0,#0xe8           ;1640
0016d6  f7fffffe          BL       CheckG1FOnly
0016da  b1c8              CBZ      r0,|L1.5904|
0016dc  a904              ADD      r1,sp,#0x10           ;1641
0016de  a803              ADD      r0,sp,#0xc            ;1641
0016e0  e9cd0100          STRD     r0,r1,[sp,#0]         ;1641
0016e4  48e2              LDR      r0,|L1.6768|
0016e6  6880              LDR      r0,[r0,#8]            ;1641  ; ms_Z
0016e8  6802              LDR      r2,[r0,#0]            ;1641
0016ea  48e2              LDR      r0,|L1.6772|
0016ec  6880              LDR      r0,[r0,#8]            ;1641  ; ms_Y
0016ee  6801              LDR      r1,[r0,#0]            ;1641
0016f0  48e1              LDR      r0,|L1.6776|
0016f2  6880              LDR      r0,[r0,#8]            ;1641  ; ms_X
0016f4  ab02              ADD      r3,sp,#8              ;1641
0016f6  6800              LDR      r0,[r0,#0]            ;1641
0016f8  f7fffffe          BL       XYZImpToXYZ
0016fc  ac02              ADD      r4,sp,#8              ;1642
0016fe  9600              STR      r6,[sp,#0]            ;1642
001700  4bd0              LDR      r3,|L1.6724|
001702  e8940007          LDM      r4,{r0-r2}            ;1642
001706  3be8              SUBS     r3,r3,#0xe8           ;1642
                  |L1.5896|
001708  f7fffffe          BL       CheckNextLine
00170c  b100              CBZ      r0,|L1.5904|
00170e  722f              STRB     r7,[r5,#8]            ;1643
                  |L1.5904|
001710  f89500a8          LDRB     r0,[r5,#0xa8]         ;1649  ; tb
001714  2800              CMP      r0,#0                 ;1649
001716  d19a              BNE      |L1.5710|
001718  48ca              LDR      r0,|L1.6724|
00171a  38e8              SUBS     r0,r0,#0xe8           ;1650
00171c  f7fffffe          BL       qbAddBlock
001720  2800              CMP      r0,#0                 ;1650
001722  d194              BNE      |L1.5710|
001724  f2af102c          ADR      r0,|L1.5628|
001728  f7fffffe          BL       Msg
00172c  e78f              B        |L1.5710|
;;;1677   
                          ENDP

                  SearchStopPoint PROC
;;;1678   void SearchStopPoint(void){
00172e  b5f0              PUSH     {r4-r7,lr}
;;;1679   	u8 errt; // ошибка транстляции
;;;1680   	char s[50];
;;;1681   	float dS;
;;;1682   
;;;1683   	if (SPS) {
001730  4dd2              LDR      r5,|L1.6780|
001732  2600              MOVS     r6,#0
001734  b093              SUB      sp,sp,#0x4c           ;1678
001736  78e8              LDRB     r0,[r5,#3]  ; SPS
001738  2800              CMP      r0,#0                 ;1678
00173a  d061              BEQ      |L1.6144|
;;;1684   		// поиск запущен
;;;1685   		// в rbs данные для инициализации rbc
;;;1686   		// поток rs в нужном месте
;;;1687   		memset((void*)&rbc,0,sizeof rbc);
00173c  21e8              MOVS     r1,#0xe8
00173e  48d0              LDR      r0,|L1.6784|
001740  f7fffffe          BL       __aeabi_memclr4
;;;1688   		memset((void*)&(s[0]),0,50);
001744  2134              MOVS     r1,#0x34
001746  a805              ADD      r0,sp,#0x14
001748  f7fffffe          BL       __aeabi_memclr4
;;;1689   		dS = 0;
;;;1690   		// читаем строку
;;;1691   		if (bsFS_ReadLn(&rs,(u8*)s,50)==FS_RESULT_OK) {
00174c  2232              MOVS     r2,#0x32
00174e  a905              ADD      r1,sp,#0x14
001750  f1050054          ADD      r0,r5,#0x54
001754  f7fffffe          BL       bsFS_ReadLn
001758  2800              CMP      r0,#0
00175a  d153              BNE      |L1.6148|
;;;1692   			//строка прочитана
;;;1693   #ifdef MOVE_D			
;;;1694   			Msg("\t\t\t\tSPS: %s",s);
;;;1695   #endif			
;;;1696   			// транслируем
;;;1697   			errt=TranslateLineToBlock(s,&rbc,&rbs,1);
00175c  4ac8              LDR      r2,|L1.6784|
00175e  2301              MOVS     r3,#1
001760  3ae8              SUBS     r2,r2,#0xe8
001762  49c7              LDR      r1,|L1.6784|
001764  a805              ADD      r0,sp,#0x14
001766  f7fffffe          BL       TranslateLineToBlock
;;;1698   			if (errt==0) {
00176a  2800              CMP      r0,#0
00176c  d148              BNE      |L1.6144|
;;;1699   				// трансляция без ошибок
;;;1700   //				if (rbc.Nomove) {
;;;1701   //					// блок мертвый
;;;1702   //					SPS = 1; // продолжаем поиск
;;;1703   //				} else {
;;;1704   					// блок живой
;;;1705   					if (CheckG1Only(&rbc)) {
00176e  48c4              LDR      r0,|L1.6784|
001770  f7fffffe          BL       CheckG1Only
001774  b3e8              CBZ      r0,|L1.6130|
;;;1706   						// в текущем блоке только G1
;;;1707   						// меряем угол
;;;1708   						if (CheckAngle(	rbs.Xs,rbs.Ys,rbs.Zs,
001776  4cc2              LDR      r4,|L1.6784|
001778  af01              ADD      r7,sp,#4
00177a  e9d42314          LDRD     r2,r3,[r4,#0x50]
00177e  6ba0              LDR      r0,[r4,#0x38]  ; rbc
001780  6ce1              LDR      r1,[r4,#0x4c]  ; rbc
001782  e887000f          STM      r7,{r0-r3}
001786  6b60              LDR      r0,[r4,#0x34]  ; rbc
001788  9000              STR      r0,[sp,#0]
00178a  f1a400b8          SUB      r0,r4,#0xb8
00178e  6b23              LDR      r3,[r4,#0x30]  ; rbc
001790  c807              LDM      r0,{r0-r2}
001792  f7fffffe          BL       CheckAngle
001796  b360              CBZ      r0,|L1.6130|
;;;1709   										rbc.Xs,rbc.Ys,rbc.Zs,
;;;1710   										rbc.Xd,rbc.Yd,rbc.Zd
;;;1711   										)
;;;1712   							) {
;;;1713   							// угол в норме
;;;1714   							// поиск продолжается
;;;1715   							// текущий блок становится исходным
;;;1716   							// вычисляем путь текущего блока
;;;1717   							dS = sqrt(sqr(rbc.Xd-rbc.Xs)+sqr(rbc.Yd-rbc.Ys)+sqr(rbc.Zd-rbc.Zs));
001798  6ba1              LDR      r1,[r4,#0x38]  ; rbc
00179a  6d60              LDR      r0,[r4,#0x54]  ; rbc
00179c  f7fffffe          BL       __aeabi_fsub
0017a0  f7fffffe          BL       ||sqr||
0017a4  4607              MOV      r7,r0
0017a6  6b61              LDR      r1,[r4,#0x34]  ; rbc
0017a8  6d20              LDR      r0,[r4,#0x50]  ; rbc
0017aa  f7fffffe          BL       __aeabi_fsub
0017ae  f7fffffe          BL       ||sqr||
0017b2  4606              MOV      r6,r0
0017b4  6b21              LDR      r1,[r4,#0x30]  ; rbc
0017b6  6ce0              LDR      r0,[r4,#0x4c]  ; rbc
0017b8  f7fffffe          BL       __aeabi_fsub
0017bc  f7fffffe          BL       ||sqr||
0017c0  4631              MOV      r1,r6
0017c2  f7fffffe          BL       __aeabi_fadd
0017c6  4639              MOV      r1,r7
0017c8  f7fffffe          BL       __aeabi_fadd
0017cc  f7fffffe          BL       __aeabi_f2d
0017d0  f7fffffe          BL       sqrt
0017d4  f7fffffe          BL       __aeabi_d2f
0017d8  4601              MOV      r1,r0
;;;1718   							// добавляем к разведаному пути
;;;1719   							Sr = Sr + dS; 
0017da  6ba8              LDR      r0,[r5,#0x38]  ; Sr
0017dc  f7fffffe          BL       __aeabi_fadd
0017e0  63a8              STR      r0,[r5,#0x38]  ; Sr
;;;1720   							Sri +=	rbc.Laxi; 
0017e2  f8d400a0          LDR      r0,[r4,#0xa0]  ; rbc
0017e6  6be9              LDR      r1,[r5,#0x3c]  ; Sri
0017e8  4408              ADD      r0,r0,r1
0017ea  63e8              STR      r0,[r5,#0x3c]  ; Sri
;;;1721   #ifdef MOVE_D			
;;;1722   							Msg("\t\t\t\tSPS A< Sr %d Sri %d dS %d dSi %d\r\n",OUTF1T(Sr),Sri,OUTF1T(dS),rbc.Laxi);
;;;1723   #endif
;;;1724   								memcpy(&rbs,&rbc,sizeof rbs);
0017ec  22e8              MOVS     r2,#0xe8
0017ee  4621              MOV      r1,r4
0017f0  e000              B        |L1.6132|
                  |L1.6130|
0017f2  e007              B        |L1.6148|
                  |L1.6132|
0017f4  f1a100e8          SUB      r0,r1,#0xe8
0017f8  f7fffffe          BL       __aeabi_memcpy4
;;;1725   							SPS = 1; // хотя не обязательно т к и так 1
0017fc  2001              MOVS     r0,#1
0017fe  70e8              STRB     r0,[r5,#3]
                  |L1.6144|
;;;1726   						} else {
;;;1727   							// угол большой
;;;1728   							// останавливаем поиск
;;;1729   #ifdef MOVE_D			
;;;1730   							Msg("\t\t\t\tSPS A>\r\n");
;;;1731   #endif
;;;1732   							SPS = 0; // 
;;;1733   						}
;;;1734   					} else {
;;;1735   						// в текущем блоке не только G1 значит останов найден
;;;1736   						// останавливаем поиск
;;;1737   #ifdef MOVE_D			
;;;1738   						Msg("\t\t\t\tSPS EG1\r\n");
;;;1739   #endif
;;;1740   						SPS = 0;
;;;1741   					}
;;;1742   				}
;;;1743   				//if (!SPS)	Msg("End SPS %d Sr %d\r\n",SPS,OUTF1T(Sr));
;;;1744   
;;;1745   			} else {
;;;1746   				// ошибка трансляции
;;;1747   #ifdef MOVE_D			
;;;1748   				Msg("\t\t\t\tSPS ET\r\n");
;;;1749   #endif
;;;1750   				SPS = 0;
;;;1751   			}
;;;1752   		} else {
;;;1753   //			Msg("\t\t\t\tSPS ERL\r\n");
;;;1754   			// строку прочитать не удалось
;;;1755   			SPS = 0;	// закончили поиск
;;;1756   		}
;;;1757   //		if (!SPS)	Msg("End SPS %d Sr %d\r\n",SPS,OUTF1T(Sr));
;;;1758   		
;;;1759   //	Msg("S\r\n");
;;;1760   
;;;1761   }
001800  b013              ADD      sp,sp,#0x4c
001802  bdf0              POP      {r4-r7,pc}
                  |L1.6148|
001804  70ee              STRB     r6,[r5,#3]            ;1740
001806  e7fb              B        |L1.6144|
;;;1762   
                          ENDP

                  CrushWaterHandlerFrz PROC
;;;1763   void CrushWaterHandlerFrz(void){
001808  b510              PUSH     {r4,lr}
;;;1764   	Msg("Crush Water.\r\n");
00180a  a09e              ADR      r0,|L1.6788|
00180c  f7fffffe          BL       Msg
;;;1765   	if (*pPrgRun) {
001810  489a              LDR      r0,|L1.6780|
;;;1766   		fStopPrg = 1;	
001812  2401              MOVS     r4,#1
001814  6a00              LDR      r0,[r0,#0x20]         ;1765  ; pPrgRun
001816  7800              LDRB     r0,[r0,#0]            ;1765
001818  b108              CBZ      r0,|L1.6174|
00181a  489e              LDR      r0,|L1.6804|
00181c  7004              STRB     r4,[r0,#0]
                  |L1.6174|
;;;1767   	}
;;;1768   	FIStop();
00181e  f7fffffe          BL       FIStop
;;;1769   	*pCrushWater = 1;
001822  489d              LDR      r0,|L1.6808|
001824  6800              LDR      r0,[r0,#0]  ; pCrushWater
001826  7004              STRB     r4,[r0,#0]
;;;1770   }
001828  e44f              B        |L1.4298|
;;;1771   
                          ENDP

                  sG0HandlerFrz PROC
;;;1772   void sG0HandlerFrz(void){
00182a  b5f0              PUSH     {r4-r7,lr}
;;;1773       //Msg("%d %d %d \r\n",*mc_X.MovePos,*(mc_Y.MovePos),*(mc_Z.MovePos));
;;;1774   	switch (sG0) {
00182c  4893              LDR      r0,|L1.6780|
00182e  2101              MOVS     r1,#1
;;;1775   		case 1:
;;;1776   			if ((!*(mc_X.MovePos))&&(!*(mc_Y.MovePos))&&(ms_X.Level==0)&&(ms_Y.Level==0)) {
001830  4b9a              LDR      r3,|L1.6812|
001832  f890e001          LDRB     lr,[r0,#1]            ;1774  ; sG0
001836  4c9a              LDR      r4,|L1.6816|
001838  4e8f              LDR      r6,|L1.6776|
00183a  4f8e              LDR      r7,|L1.6772|
;;;1777   				*(mc_Z.MovePos)=1;		
00183c  4d99              LDR      r5,|L1.6820|
00183e  f1be0f01          CMP      lr,#1                 ;1774
001842  d01c              BEQ      |L1.6270|
001844  2200              MOVS     r2,#0                 ;1772
;;;1778   				sG0 = 2;
;;;1779   //				Msg("sG0 2\r\n");
;;;1780   			}
;;;1781   			break;
;;;1782   		case 2:
;;;1783   			if ((!*(mc_Z.MovePos))&&(ms_Z.Level==0)) {
001846  f8dfc228          LDR      r12,|L1.6768|
00184a  f1be0f02          CMP      lr,#2                 ;1774
00184e  d028              BEQ      |L1.6306|
001850  f1be0f03          CMP      lr,#3                 ;1774
001854  d02c              BEQ      |L1.6320|
001856  f1be0f04          CMP      lr,#4                 ;1774
00185a  d10f              BNE      |L1.6268|
;;;1784   				sG0 = 0;
;;;1785   				Busy = 0;
;;;1786   			}
;;;1787   			break;
;;;1788   		case 3:
;;;1789   			if ((!*(mc_Z.MovePos))&&(ms_Z.Level==0)) {
;;;1790   				*(mc_X.MovePos)=1;
;;;1791   				*(mc_Y.MovePos)=1;
;;;1792   				sG0 = 4;
;;;1793   //				Msg("sG0 4\r\n");
;;;1794   			}
;;;1795   			break;
;;;1796   		case 4:
;;;1797   			if ((!*(mc_X.MovePos))&&(!*(mc_Y.MovePos))&&(ms_X.Level==0)&&(ms_Y.Level==0)) {
00185c  6a19              LDR      r1,[r3,#0x20]  ; mc_X
00185e  7809              LDRB     r1,[r1,#0]
001860  2900              CMP      r1,#0
001862  d10b              BNE      |L1.6268|
001864  6a21              LDR      r1,[r4,#0x20]  ; mc_Y
001866  7809              LDRB     r1,[r1,#0]
001868  2900              CMP      r1,#0
00186a  d107              BNE      |L1.6268|
00186c  7831              LDRB     r1,[r6,#0]  ; ms_X
00186e  2900              CMP      r1,#0
001870  d104              BNE      |L1.6268|
001872  7839              LDRB     r1,[r7,#0]  ; ms_Y
                  |L1.6260|
001874  2900              CMP      r1,#0
001876  d101              BNE      |L1.6268|
001878  7042              STRB     r2,[r0,#1]            ;1784
00187a  7002              STRB     r2,[r0,#0]            ;1785
                  |L1.6268|
;;;1798   				sG0 = 0;
;;;1799   				Busy = 0;
;;;1800   			}
;;;1801   			break;			
;;;1802   	}
;;;1803   }
00187c  bdf0              POP      {r4-r7,pc}
                  |L1.6270|
00187e  6a1a              LDR      r2,[r3,#0x20]         ;1776  ; mc_X
001880  7812              LDRB     r2,[r2,#0]            ;1776
001882  2a00              CMP      r2,#0                 ;1776
001884  d1fa              BNE      |L1.6268|
001886  6a22              LDR      r2,[r4,#0x20]         ;1776  ; mc_Y
001888  7812              LDRB     r2,[r2,#0]            ;1776
00188a  2a00              CMP      r2,#0                 ;1776
00188c  d1f6              BNE      |L1.6268|
00188e  7832              LDRB     r2,[r6,#0]            ;1776  ; ms_X
001890  2a00              CMP      r2,#0                 ;1776
001892  d1f3              BNE      |L1.6268|
001894  783a              LDRB     r2,[r7,#0]            ;1776  ; ms_Y
001896  2a00              CMP      r2,#0                 ;1776
001898  d1f0              BNE      |L1.6268|
00189a  6a2a              LDR      r2,[r5,#0x20]         ;1777  ; mc_Z
00189c  7011              STRB     r1,[r2,#0]            ;1777
00189e  2102              MOVS     r1,#2                 ;1778
0018a0  e013              B        |L1.6346|
                  |L1.6306|
0018a2  6a29              LDR      r1,[r5,#0x20]         ;1783  ; mc_Z
0018a4  7809              LDRB     r1,[r1,#0]            ;1783
0018a6  2900              CMP      r1,#0                 ;1783
0018a8  d1e8              BNE      |L1.6268|
0018aa  f89c1000          LDRB     r1,[r12,#0]           ;1783  ; ms_Z
0018ae  e7e1              B        |L1.6260|
                  |L1.6320|
0018b0  6a2a              LDR      r2,[r5,#0x20]         ;1789  ; mc_Z
0018b2  7812              LDRB     r2,[r2,#0]            ;1789
0018b4  2a00              CMP      r2,#0                 ;1789
0018b6  d1e1              BNE      |L1.6268|
0018b8  f89c2000          LDRB     r2,[r12,#0]           ;1789  ; ms_Z
0018bc  2a00              CMP      r2,#0                 ;1789
0018be  d1dd              BNE      |L1.6268|
0018c0  6a1a              LDR      r2,[r3,#0x20]         ;1790  ; mc_X
0018c2  7011              STRB     r1,[r2,#0]            ;1790
0018c4  6a22              LDR      r2,[r4,#0x20]         ;1791  ; mc_Y
0018c6  7011              STRB     r1,[r2,#0]            ;1791
0018c8  2104              MOVS     r1,#4                 ;1792
                  |L1.6346|
0018ca  7041              STRB     r1,[r0,#1]            ;1778
0018cc  bdf0              POP      {r4-r7,pc}
;;;1804   
                          ENDP

                  RunNextCadrFrzMain PROC
;;;1809   
;;;1810   void RunNextCadrFrzMain(void){
0018ce  e92d47f0          PUSH     {r4-r10,lr}
;;;1811   
;;;1812   //	TBlock tb;
;;;1813   //	if (qb.count>5) qbExtrBlock(&tb) ;
;;;1814   //	return;
;;;1815   
;;;1816   	if (sG0 != 0) { 
0018d2  4c6a              LDR      r4,|L1.6780|
0018d4  7860              LDRB     r0,[r4,#1]  ; sG0
0018d6  b110              CBZ      r0,|L1.6366|
;;;1817   		//Msg("sG0");
;;;1818   		sG0HandlerFrz();
0018d8  e8bd47f0          POP      {r4-r10,lr}
0018dc  e7fe              B        sG0HandlerFrz
                  |L1.6366|
;;;1819   		return;
;;;1820   	}
;;;1821   	if (Busy) {
0018de  7820              LDRB     r0,[r4,#0]  ; Busy
0018e0  2800              CMP      r0,#0
0018e2  d17d              BNE      |L1.6624|
;;;1822   		//Msg("B cX %d sX %d",(int)mvc.Xe,(int)mvs.Xe);
;;;1823   //		StartTimeTC(T2);
;;;1824   		return;
;;;1825   	}
;;;1826   	// исполнение кадра
;;;1827   	switch (*pRCS) {
0018e4  6a61              LDR      r1,[r4,#0x24]  ; pRCS
;;;1828   		// прочитать следующую строку
;;;1829   		case rcsGetBlock:
;;;1830   			eb = qbFirstBlock();
;;;1831   			if (eb!=NULL) {
;;;1832   				// блок есть
;;;1833   				// выполнить что можно
;;;1834   				// отладка !!!
;;;1835   				//Msg("m%d: %s",(*eb).NumLine,(*eb).s);
;;;1836   //				ShowTimeTC(T1,1);
;;;1837   //				ShowTimeTC(T2,2);
;;;1838   //				StartTimeTC(T2);
;;;1839   				
;;;1840   //				Msg("X %d %d Y %d %d Z %d %d\r\n",(*eb).Xsi,(*eb).Xdi,(*eb).Ysi,(*eb).Ydi,(*eb).Zsi,(*eb).Zdi);
;;;1841   //				Msg("tb %d \r\n",(*eb).Tb);
;;;1842   				
;;;1843   				// включение поиска
;;;1844   				if (((*eb).sGo ==1)) {
;;;1845   					if ((*eb).Nonstop == 0) {
;;;1846   						// блок стоповый. поиск не включается
;;;1847   						Sr = sqrt(sqr((*eb).Xd-(*eb).Xs)+sqr((*eb).Yd-(*eb).Ys)+sqr((*eb).Zd-(*eb).Zs));
;;;1848   						Sri = (*eb).Laxi;
;;;1849   #ifdef MOVE_D						
;;;1850   						Msg("BlockStop Sr %d Sri %d\r\n",OUTF1T(Sr),Sri);
;;;1851   #endif						
;;;1852   						SPS = 0;
;;;1853   					} else {
;;;1854   						// стартовая величина поиска разведаного пути
;;;1855   						Sr = sqrt(sqr((*eb).Xd-(*eb).Xs)+sqr((*eb).Yd-(*eb).Ys)+sqr((*eb).Zd-(*eb).Zs));
;;;1856   						Sri = (*eb).Laxi;
;;;1857   						// прочитать следующий блок						
;;;1858   						nb = qbSecondBlock();
;;;1859   						if (nb == NULL) {
;;;1860   							//блока нет поиск не запускаем
;;;1861   #ifdef MOVE_D						
;;;1862   							Msg("nb0 Sr %d\r\n",OUTF1T(Sr));
;;;1863   #endif
;;;1864   							SPS = 0;
;;;1865   						} else {
;;;1866   							// блок есть
;;;1867   							// добавляем к раведанному пути путь следующего блока
;;;1868   #ifdef MOVE_D						
;;;1869   								Msg("\t\t\t\tSPS Prev Sr %d Sri %d\r\n",OUTF1T(Sr),Sri);
;;;1870   #endif
;;;1871   							Sr = Sr + sqrt(sqr((*nb).Xd-(*nb).Xs)+sqr((*nb).Yd-(*nb).Ys)+sqr((*nb).Zd-(*nb).Zs));
;;;1872   							Sri += (*nb).Laxi;
;;;1873   							// следующий блок без остановочный
;;;1874   							// начинаем поиск с него
;;;1875   							// подготавливем исходный блок
;;;1876   							if ((*nb).Nonstop) {
;;;1877   								// включаем поиск
;;;1878   								memcpy(&rbs,nb,sizeof rbs);
;;;1879   								// подготавливаем позицию в файле программы с которой будем осуществлять поиск
;;;1880   								rs.Pos = (*nb).PosSSP;
;;;1881   								rs.f = ts.f;
;;;1882   #ifdef MOVE_D						
;;;1883   								Msg("\t\t\t\tSPS Prepare Sr %d Sri %d\r\n",OUTF1T(Sr),Sri);
;;;1884   #endif
;;;1885   								SPS=1;
;;;1886   							} else {
;;;1887   								SPS = 0;
;;;1888   							}
;;;1889   						}
;;;1890   					}
;;;1891   				}
;;;1892   //				Msg("Xs %d Xd %d Ys %d Yd %d Zs %d Zd %d\r\n",
;;;1893   //					(int)((*eb).Xs*1000),(int)((*eb).Xd*1000),
;;;1894   //					(int)((*eb).Ys*1000),(int)((*eb).Yd*1000),
;;;1895   //					(int)((*eb).Zs*1000),(int)((*eb).Zd*1000));
;;;1896   
;;;1897   //**************************************************
;;;1898   				(*pCurCadr) = (*eb).NumLine;
;;;1899   //				Msg("RM%d:Sr %d \r\n",(*eb).NumLine,(int)(Sr*1000));
;;;1900   //				Msg("RM%d:G%d Xd %d Yd %d Zd %d F %d\r\n",(*eb).NumLine,(*eb).sGo,OUTF1T((*eb).Xd),OUTF1T((*eb).Yd),OUTF1T((*eb).Zd),OUTF1((*eb).Feed));
;;;1901   				memcpy((void*)&(BR_pCurCadr),(void*)pCurCadr,4);
;;;1902   				SetFeed(eb);  
;;;1903   				SetSpindle(eb);	 
;;;1904   				SetCold(eb);	 
;;;1905   				SetPause(eb);
;;;1906   				*pRCS = rcsWaitPause; 
;;;1907   				//Msg("sGo %d NS %d SPS %d RSPS %d",(*eb).sGo,(*eb).Nonstop,SPS,RSPS);
;;;1908   			} else {
;;;1909   				// очередь пуста
;;;1910   				Msg("Queue is Empty\r\n");
;;;1911   				*pRCS = rcsEnd; 
;;;1912   			}
;;;1913   		break;
;;;1914   		case rcsWaitPause:
;;;1915   			// здесь условие окончания паузы
;;;1916   			if (EndPause()) {
;;;1917   				*pRCS = rcsSetGo; 
;;;1918   //				Msg("End Pause\r\n");
;;;1919   			}
;;;1920   		break;
;;;1921   //11	G0,G1	перемещения
;;;1922   		case rcsSetGo:
;;;1923   			//ShowTimeTC(T2,2);
;;;1924   			SetGoFrz(eb);
;;;1925   			*pRCS = rcsWaitGo; 
;;;1926   		break;
;;;1927   		case rcsWaitGo:
;;;1928   			if (EndGo()) {
;;;1929   //				if ((*eb).Nonstop) {
;;;1930   //					// мнгновенный запуск следующего блока
;;;1931   //					eb = NULL;
;;;1932   //					qbDelFirst();
;;;1933   //					eb = qbFirstBlock();
;;;1934   //					if (eb!=NULL) {
;;;1935   //						//SetGo(eb);
;;;1936   //						//Busy = 1;
;;;1937   //						// запуск алгоритма
;;;1938   //					    //fmvc.Enable=1;
;;;1939   //					} else {
;;;1940   //						// ОТЛАДКА !!!
;;;1941   //	 					*pRCS = rcsGetBlock; 
;;;1942   //						//*pRCS = rcsEnd; 
;;;1943   //					}
;;;1944   // 					//*pRCS = rcsGetBlock; 
;;;1945   //				} else {
;;;1946   //					// сброс скорости до минимальной
;;;1947   //					*(fmvs.Vc) = *(fmvc.Vmin);
;;;1948   //					*pRCS = rcsSetStop; 
;;;1949   //				}
;;;1950   				// ОТЛАДКА !!!
;;;1951   				*pRCS = rcsSetStop; 
;;;1952   			}
;;;1953   		break;
;;;1954   //13	M0,M1,M2	останов
;;;1955   		case rcsSetStop:
;;;1956   			SetStop(eb);
;;;1957   			*pRCS = rcsWaitStop; 
;;;1958   		break;
;;;1959   		case rcsWaitStop:
;;;1960   			if (EndStop()) {
;;;1961   				*pRCS = rcsEndExecute; 
;;;1962   			}
;;;1963   		break;
;;;1964   		// структура выполнена
;;;1965   		case rcsEndExecute:
;;;1966   			//Msg("ERun %d\r\n",(*eb).NumLine);
;;;1967   			// проверка на полное отключение
;;;1968   		    if ((*eb).cStop==1) {
;;;1969   				(*eb).cStop=0;
;;;1970   				if ((*eb).sStop == 2) {
;;;1971   		 			*pRCS = rcsEnd; 
;;;1972   					break;
;;;1973   				}
;;;1974   				if ((*eb).sStop == 120) {
;;;1975   					Msg("CyclePrg");
;;;1976   					eb = NULL;
;;;1977   					*pCurCadr = 0; // текущий номер кадра
;;;1978   					memcpy((void*)&(BR_pCurCadr),(void*)pCurCadr,4);
;;;1979   					*pRCS = rcsGetBlock; // состояние выполнения кадра "чтение следующей строки" 
;;;1980   					FS_Close(pPrgFileHandle);
;;;1981   					*pPrgFileHandle = -1;
0018e6  1e46              SUBS     r6,r0,#1
0018e8  4864              LDR      r0,|L1.6780|
0018ea  780a              LDRB     r2,[r1,#0]            ;1827
0018ec  4f6e              LDR      r7,|L1.6824|
0018ee  2500              MOVS     r5,#0
0018f0  6840              LDR      r0,[r0,#4]            ;1816
0018f2  f04f0901          MOV      r9,#1                 ;1844
0018f6  f04f0802          MOV      r8,#2                 ;1911
0018fa  2a0d              CMP      r2,#0xd               ;1827
0018fc  d071              BEQ      |L1.6626|
0018fe  dc0a              BGT      |L1.6422|
001900  b1a2              CBZ      r2,|L1.6444|
001902  2a02              CMP      r2,#2                 ;1827
001904  d06e              BEQ      |L1.6628|
001906  2a0b              CMP      r2,#0xb               ;1827
001908  d06d              BEQ      |L1.6630|
00190a  2a0c              CMP      r2,#0xc               ;1827
00190c  d168              BNE      |L1.6624|
00190e  f7fffffe          BL       SetGoFrz
001912  200d              MOVS     r0,#0xd               ;1925
001914  e119              B        |L1.6986|
                  |L1.6422|
001916  2a0e              CMP      r2,#0xe               ;1827
001918  d066              BEQ      |L1.6632|
00191a  2a0f              CMP      r2,#0xf               ;1827
00191c  d07d              BEQ      |L1.6682|
00191e  2a10              CMP      r2,#0x10              ;1827
001920  d15e              BNE      |L1.6624|
001922  f8902020          LDRB     r2,[r0,#0x20]         ;1968
001926  2a01              CMP      r2,#1                 ;1968
001928  d078              BEQ      |L1.6684|
00192a  e121              B        |L1.7024|
                  |L1.6444|
00192c  f7fffffe          BL       qbFirstBlock
001930  6060              STR      r0,[r4,#4]            ;1831  ; eb
001932  2800              CMP      r0,#0                 ;1831
001934  d073              BEQ      |L1.6686|
001936  f8901022          LDRB     r1,[r0,#0x22]         ;1844
00193a  2901              CMP      r1,#1                 ;1844
00193c  d170              BNE      |L1.6688|
00193e  7a01              LDRB     r1,[r0,#8]            ;1845
001940  2900              CMP      r1,#0                 ;1845
001942  6b81              LDR      r1,[r0,#0x38]         ;1855
001944  6d40              LDR      r0,[r0,#0x54]         ;1855
001946  d06c              BEQ      |L1.6690|
001948  f7fffffe          BL       __aeabi_fsub
00194c  f7fffffe          BL       ||sqr||
001950  4680              MOV      r8,r0                 ;1855
001952  6860              LDR      r0,[r4,#4]            ;1855  ; eb
001954  6b41              LDR      r1,[r0,#0x34]         ;1855
001956  6d00              LDR      r0,[r0,#0x50]         ;1855
001958  f7fffffe          BL       __aeabi_fsub
00195c  f7fffffe          BL       ||sqr||
001960  4606              MOV      r6,r0                 ;1855
001962  6860              LDR      r0,[r4,#4]            ;1855  ; eb
001964  6b01              LDR      r1,[r0,#0x30]         ;1855
001966  6cc0              LDR      r0,[r0,#0x4c]         ;1855
001968  f7fffffe          BL       __aeabi_fsub
00196c  f7fffffe          BL       ||sqr||
001970  4631              MOV      r1,r6                 ;1855
001972  f7fffffe          BL       __aeabi_fadd
001976  4641              MOV      r1,r8                 ;1855
001978  f7fffffe          BL       __aeabi_fadd
00197c  f7fffffe          BL       __aeabi_f2d
001980  f7fffffe          BL       sqrt
001984  f7fffffe          BL       __aeabi_d2f
001988  63a0              STR      r0,[r4,#0x38]         ;1855  ; Sr
00198a  6860              LDR      r0,[r4,#4]            ;1856  ; eb
00198c  f8d000a0          LDR      r0,[r0,#0xa0]         ;1856
001990  63e0              STR      r0,[r4,#0x3c]         ;1856  ; Sri
001992  f7fffffe          BL       qbSecondBlock
001996  64a0              STR      r0,[r4,#0x48]         ;1859  ; nb
001998  2800              CMP      r0,#0                 ;1859
00199a  d043              BEQ      |L1.6692|
00199c  6b81              LDR      r1,[r0,#0x38]         ;1871
00199e  6d40              LDR      r0,[r0,#0x54]         ;1871
0019a0  f7fffffe          BL       __aeabi_fsub
0019a4  f7fffffe          BL       ||sqr||
0019a8  4680              MOV      r8,r0                 ;1871
0019aa  6ca0              LDR      r0,[r4,#0x48]         ;1871  ; nb
0019ac  6b41              LDR      r1,[r0,#0x34]         ;1871
0019ae  6d00              LDR      r0,[r0,#0x50]         ;1871
0019b0  f7fffffe          BL       __aeabi_fsub
0019b4  f7fffffe          BL       ||sqr||
0019b8  4606              MOV      r6,r0                 ;1871
0019ba  6ca0              LDR      r0,[r4,#0x48]         ;1871  ; nb
0019bc  6b01              LDR      r1,[r0,#0x30]         ;1871
0019be  6cc0              LDR      r0,[r0,#0x4c]         ;1871
0019c0  f7fffffe          BL       __aeabi_fsub
0019c4  f7fffffe          BL       ||sqr||
0019c8  4631              MOV      r1,r6                 ;1871
0019ca  f7fffffe          BL       __aeabi_fadd
0019ce  4641              MOV      r1,r8                 ;1871
0019d0  f7fffffe          BL       __aeabi_fadd
0019d4  f7fffffe          BL       __aeabi_f2d
0019d8  f7fffffe          BL       sqrt
0019dc  4606              MOV      r6,r0                 ;1871
0019de  e004              B        |L1.6634|
                  |L1.6624|
0019e0  e0bd              B        |L1.7006|
                  |L1.6626|
0019e2  e0b4              B        |L1.6990|
                  |L1.6628|
0019e4  e0e0              B        |L1.7080|
                  |L1.6630|
0019e6  e0ab              B        |L1.6976|
                  |L1.6632|
0019e8  e0b3              B        |L1.6994|
                  |L1.6634|
0019ea  4688              MOV      r8,r1                 ;1871
0019ec  6ba0              LDR      r0,[r4,#0x38]         ;1871  ; Sr
0019ee  f7fffffe          BL       __aeabi_f2d
0019f2  4632              MOV      r2,r6                 ;1871
0019f4  4643              MOV      r3,r8                 ;1871
0019f6  f7fffffe          BL       __aeabi_dadd
0019fa  f7fffffe          BL       __aeabi_d2f
0019fe  63a0              STR      r0,[r4,#0x38]         ;1871  ; Sr
001a00  6ca6              LDR      r6,[r4,#0x48]         ;1872  ; nb
001a02  6be1              LDR      r1,[r4,#0x3c]         ;1872  ; Sri
001a04  f8d600a0          LDR      r0,[r6,#0xa0]         ;1872
001a08  4408              ADD      r0,r0,r1              ;1872
001a0a  63e0              STR      r0,[r4,#0x3c]         ;1872  ; Sri
001a0c  7a30              LDRB     r0,[r6,#8]            ;1876
001a0e  b148              CBZ      r0,|L1.6692|
001a10  481b              LDR      r0,|L1.6784|
001a12  22e8              MOVS     r2,#0xe8              ;1878
001a14  4631              MOV      r1,r6                 ;1878
001a16  38e8              SUBS     r0,r0,#0xe8           ;1878
001a18  e048              B        |L1.6828|
                  |L1.6682|
001a1a  e09e              B        |L1.7002|
                  |L1.6684|
001a1c  e0a1              B        |L1.7010|
                  |L1.6686|
001a1e  e08a              B        |L1.6966|
                  |L1.6688|
001a20  e076              B        |L1.6928|
                  |L1.6690|
001a22  e04f              B        |L1.6852|
                  |L1.6692|
001a24  e073              B        |L1.6926|
001a26  0000              DCW      0x0000
                  |L1.6696|
001a28  4572726f          DCB      "Error ReadNextPrgLine %d\r\n",0
001a2c  72205265
001a30  61644e65
001a34  78745072
001a38  674c696e
001a3c  65202564
001a40  0d0a00  
001a43  00                DCB      0
                  |L1.6724|
                          DCD      ||.bss||+0xce8
                  |L1.6728|
001a48  4572726f          DCB      "Error Traslate Line(%s). Ecode %d \r\n",0
001a4c  72205472
001a50  61736c61
001a54  7465204c
001a58  696e6528
001a5c  2573292e
001a60  2045636f
001a64  64652025
001a68  64200d0a
001a6c  00      
001a6d  00                DCB      0
001a6e  00                DCB      0
001a6f  00                DCB      0
                  |L1.6768|
                          DCD      ms_Z
                  |L1.6772|
                          DCD      ms_Y
                  |L1.6776|
                          DCD      ms_X
                  |L1.6780|
                          DCD      ||.data||
                  |L1.6784|
                          DCD      ||.bss||+0xb18
                  |L1.6788|
001a84  43727573          DCB      "Crush Water.\r\n",0
001a88  68205761
001a8c  7465722e
001a90  0d0a00  
001a93  00                DCB      0
                  |L1.6804|
                          DCD      fStopPrg
                  |L1.6808|
                          DCD      pCrushWater
                  |L1.6812|
                          DCD      mc_X
                  |L1.6816|
                          DCD      mc_Y
                  |L1.6820|
                          DCD      mc_Z
                  |L1.6824|
                          DCD      0x40024054
                  |L1.6828|
001aac  f7fffffe          BL       __aeabi_memcpy4
001ab0  4848              LDR      r0,|L1.7124|
001ab2  6871              LDR      r1,[r6,#4]            ;1880
001ab4  6041              STR      r1,[r0,#4]            ;1881  ; rs
001ab6  f1a00108          SUB      r1,r0,#8              ;1881
001aba  7809              LDRB     r1,[r1,#0]            ;1881  ; ts
001abc  7001              STRB     r1,[r0,#0]            ;1881
001abe  f8849003          STRB     r9,[r4,#3]            ;1885
001ac2  e025              B        |L1.6928|
                  |L1.6852|
001ac4  f7fffffe          BL       __aeabi_fsub
001ac8  f7fffffe          BL       ||sqr||
001acc  4680              MOV      r8,r0                 ;1847
001ace  6860              LDR      r0,[r4,#4]            ;1847  ; eb
001ad0  6b41              LDR      r1,[r0,#0x34]         ;1847
001ad2  6d00              LDR      r0,[r0,#0x50]         ;1847
001ad4  f7fffffe          BL       __aeabi_fsub
001ad8  f7fffffe          BL       ||sqr||
001adc  4606              MOV      r6,r0                 ;1847
001ade  6860              LDR      r0,[r4,#4]            ;1847  ; eb
001ae0  6b01              LDR      r1,[r0,#0x30]         ;1847
001ae2  6cc0              LDR      r0,[r0,#0x4c]         ;1847
001ae4  f7fffffe          BL       __aeabi_fsub
001ae8  f7fffffe          BL       ||sqr||
001aec  4631              MOV      r1,r6                 ;1847
001aee  f7fffffe          BL       __aeabi_fadd
001af2  4641              MOV      r1,r8                 ;1847
001af4  f7fffffe          BL       __aeabi_fadd
001af8  f7fffffe          BL       __aeabi_f2d
001afc  f7fffffe          BL       sqrt
001b00  f7fffffe          BL       __aeabi_d2f
001b04  63a0              STR      r0,[r4,#0x38]         ;1847  ; Sr
001b06  6860              LDR      r0,[r4,#4]            ;1848  ; eb
001b08  f8d000a0          LDR      r0,[r0,#0xa0]         ;1848
001b0c  63e0              STR      r0,[r4,#0x3c]         ;1848  ; Sri
                  |L1.6926|
001b0e  70e5              STRB     r5,[r4,#3]            ;1887
                  |L1.6928|
001b10  6860              LDR      r0,[r4,#4]            ;1898  ; eb
001b12  6aa1              LDR      r1,[r4,#0x28]         ;1898  ; pCurCadr
001b14  6800              LDR      r0,[r0,#0]            ;1898
001b16  6008              STR      r0,[r1,#0]            ;1901
001b18  6038              STR      r0,[r7,#0]            ;1902
001b1a  6860              LDR      r0,[r4,#4]            ;1902  ; eb
001b1c  f7fffffe          BL       SetFeed
001b20  6860              LDR      r0,[r4,#4]            ;1903  ; eb
001b22  f7fffffe          BL       SetSpindle
001b26  6860              LDR      r0,[r4,#4]            ;1904  ; eb
001b28  f7fffffe          BL       SetCold
001b2c  6860              LDR      r0,[r4,#4]            ;1905  ; eb
001b2e  f7fffffe          BL       SetPause
001b32  200b              MOVS     r0,#0xb               ;1906
001b34  e009              B        |L1.6986|
                  |L1.6966|
001b36  a028              ADR      r0,|L1.7128|
001b38  f7fffffe          BL       Msg
001b3c  6a61              LDR      r1,[r4,#0x24]         ;1911  ; pRCS
001b3e  e01d              B        |L1.7036|
                  |L1.6976|
001b40  f7fffffe          BL       EndPause
001b44  2800              CMP      r0,#0                 ;1916
001b46  d00a              BEQ      |L1.7006|
001b48  200c              MOVS     r0,#0xc               ;1917
                  |L1.6986|
001b4a  6a61              LDR      r1,[r4,#0x24]         ;1917  ; pRCS
001b4c  e006              B        |L1.7004|
                  |L1.6990|
001b4e  200e              MOVS     r0,#0xe               ;1951
001b50  e004              B        |L1.7004|
                  |L1.6994|
001b52  f7fffffe          BL       SetStop
001b56  200f              MOVS     r0,#0xf               ;1957
001b58  e7f7              B        |L1.6986|
                  |L1.7002|
001b5a  2010              MOVS     r0,#0x10              ;1961
                  |L1.7004|
001b5c  7008              STRB     r0,[r1,#0]            ;1961
                  |L1.7006|
;;;1982   					EndTranslate = 0;
;;;1983   					fStartPrg = 1;
;;;1984   					break;
;;;1985   				}
;;;1986   			}
;;;1987   			eb = NULL;
;;;1988   			qbDelFirst();
;;;1989    			*pRCS = rcsGetBlock; 
;;;1990   		break;
;;;1991   		// конец выполнения
;;;1992   		case rcsEnd:
;;;1993   			Msg("EndPrg");
;;;1994   			eb = NULL;
;;;1995   			*pPrgRun = 0;
;;;1996   			BR_pPrgRun = *pPrgRun;
;;;1997   			*pCurCadr = 0; // текущий номер кадра
;;;1998   			memcpy((void*)&(BR_pCurCadr),(void*)pCurCadr,4);
;;;1999   			*pRCS = rcsGetBlock; // состояние выполнения кадра "чтение следующей строки" 
;;;2000   			FS_Close(pPrgFileHandle);
;;;2001   			*pPrgFileHandle = -1;
;;;2002   			EndTranslate = 0;
;;;2003   		break;
;;;2004   	}
;;;2005   }
001b5e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.7010|
001b62  f8005f20          STRB     r5,[r0,#0x20]!        ;1969
001b66  7840              LDRB     r0,[r0,#1]            ;1970
001b68  2802              CMP      r0,#2                 ;1970
001b6a  d007              BEQ      |L1.7036|
001b6c  2878              CMP      r0,#0x78              ;1974
001b6e  d008              BEQ      |L1.7042|
                  |L1.7024|
001b70  6065              STR      r5,[r4,#4]            ;1988  ; eb
001b72  f7fffffe          BL       qbDelFirst
001b76  6a60              LDR      r0,[r4,#0x24]         ;1989  ; pRCS
001b78  7005              STRB     r5,[r0,#0]            ;1989
001b7a  e7f0              B        |L1.7006|
                  |L1.7036|
001b7c  f8818000          STRB     r8,[r1,#0]            ;1971
001b80  e7ed              B        |L1.7006|
                  |L1.7042|
001b82  a01a              ADR      r0,|L1.7148|
001b84  f7fffffe          BL       Msg
001b88  6065              STR      r5,[r4,#4]            ;1977  ; eb
001b8a  6aa0              LDR      r0,[r4,#0x28]         ;1977  ; pCurCadr
001b8c  6005              STR      r5,[r0,#0]            ;1978
001b8e  603d              STR      r5,[r7,#0]            ;1979
001b90  6a60              LDR      r0,[r4,#0x24]         ;1979  ; pRCS
001b92  7005              STRB     r5,[r0,#0]            ;1979
001b94  69a0              LDR      r0,[r4,#0x18]         ;1980  ; pPrgFileHandle
001b96  f7fffffe          BL       FS_Close
001b9a  69a0              LDR      r0,[r4,#0x18]         ;1981  ; pPrgFileHandle
001b9c  4916              LDR      r1,|L1.7160|
001b9e  7006              STRB     r6,[r0,#0]            ;1981
001ba0  70a5              STRB     r5,[r4,#2]            ;1982
001ba2  f8819000          STRB     r9,[r1,#0]            ;1983
001ba6  e7da              B        |L1.7006|
                  |L1.7080|
001ba8  a014              ADR      r0,|L1.7164|
001baa  f7fffffe          BL       Msg
001bae  6065              STR      r5,[r4,#4]            ;1995  ; eb
001bb0  6a20              LDR      r0,[r4,#0x20]         ;1995  ; pPrgRun
001bb2  7005              STRB     r5,[r0,#0]            ;1995
001bb4  4813              LDR      r0,|L1.7172|
001bb6  f8805060          STRB     r5,[r0,#0x60]         ;1996
001bba  6aa0              LDR      r0,[r4,#0x28]         ;1997  ; pCurCadr
001bbc  6005              STR      r5,[r0,#0]            ;1998
001bbe  603d              STR      r5,[r7,#0]            ;1999
001bc0  6a60              LDR      r0,[r4,#0x24]         ;1999  ; pRCS
001bc2  7005              STRB     r5,[r0,#0]            ;1999
001bc4  69a0              LDR      r0,[r4,#0x18]         ;2000  ; pPrgFileHandle
001bc6  f7fffffe          BL       FS_Close
001bca  69a0              LDR      r0,[r4,#0x18]         ;2001  ; pPrgFileHandle
001bcc  7006              STRB     r6,[r0,#0]            ;2001
001bce  70a5              STRB     r5,[r4,#2]            ;2002
001bd0  e7c5              B        |L1.7006|
;;;2006   
                          ENDP

001bd2  0000              DCW      0x0000
                  |L1.7124|
                          DCD      ||.data||+0x54
                  |L1.7128|
001bd8  51756575          DCB      "Queue is Empty\r\n",0
001bdc  65206973
001be0  20456d70
001be4  74790d0a
001be8  00      
001be9  00                DCB      0
001bea  00                DCB      0
001beb  00                DCB      0
                  |L1.7148|
001bec  4379636c          DCB      "CyclePrg",0
001bf0  65507267
001bf4  00      
001bf5  00                DCB      0
001bf6  00                DCB      0
001bf7  00                DCB      0
                  |L1.7160|
                          DCD      fStartPrg
                  |L1.7164|
001bfc  456e6450          DCB      "EndPrg",0
001c00  726700  
001c03  00                DCB      0
                  |L1.7172|
                          DCD      0x40024000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||qb||
                          %        2324
                  ||st||
                          %        52
                  ||ctb||
                          %        232
                  ||rbs||
                          %        232
                  ||rbc||
                          %        232
                  ||tb||
                          %        232
                  s
                          %        50

                          AREA ||.data||, DATA, ALIGN=2

                  Busy
000000  00                DCB      0x00
                  ||sG0||
000001  00                DCB      0x00
                  EndTranslate
000002  00                DCB      0x00
                  ||SPS||
000003  00                DCB      0x00
                  ||eb||
                          DCD      0x00000000
                  X
                          DCD      0x00000000
                  Y
                          DCD      0x00000000
                  Z
                          DCD      0x00000000
                  pPrgFileName
                          DCD      0x00000000
                  pPrgFileHandle
                          DCD      0x00000000
                  pPrgLineCount
                          DCD      0x00000000
                  pPrgRun
                          DCD      0x00000000
                  pRCS
                          DCD      0x00000000
                  pCurCadr
                          DCD      0x00000000
                  pNumReadLine
                          DCD      0x00000000
                  pBlock
                          DCD      0x00000000
                  pTrAngle
                          DCD      0x00000000
                  ||Sr||
                          DCD      0x00000000
                  ||Sri||
                          DCD      0x00000000
                  pRunSpPause
                          DCD      0x00000000
                  ppb
                          DCD      0x00000000
                  ||nb||
                          DCD      0x00000000
                  ||ts||
                          %        8
                  ||rs||
                          %        8

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  qbLock
000000  00                DCB      0x00

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  pWF_CRC
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  pRecBlock
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  sCurCadr
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Main\\Handlers.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_Handlers_c_Busy____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_Handlers_c_Busy____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_Handlers_c_Busy____REVSH|
#line 462
|__asm___10_Handlers_c_Busy____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_Handlers_c_Busy____RRX|
#line 649
|__asm___10_Handlers_c_Busy____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

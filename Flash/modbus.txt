; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\modbus.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\modbus.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\Main -I.\Drivers -I.\Drivers\include -I.\UCNC -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\modbus.crf Main\Modbus.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mbSetSpeed PROC
;;;50     
;;;51     void mbSetSpeed(u8 num,u32 sp){
000000  b570              PUSH     {r4-r6,lr}
;;;52     	if (num == 0){
;;;53     		mbDelay0 = (DELAY_SIZE_BY_CHAR*1000000/(sp/10));
000002  4dd1              LDR      r5,|L1.840|
000004  4cd1              LDR      r4,|L1.844|
000006  220a              MOVS     r2,#0xa
000008  b178              CBZ      r0,|L1.42|
;;;54     		// ограничение из-за посчета времени
;;;55     		// делаем так чтобы задержка была хотя бы 1 счет
;;;56     		if (mbDelay0 < timerPeriod) mbDelay0 = timerPeriod;
;;;57     	} else
;;;58     	if (num == 1){
00000a  2801              CMP      r0,#1
00000c  d10c              BNE      |L1.40|
;;;59     		mbDelay1 = (DELAY_SIZE_BY_CHAR*1000000/(sp/10));
00000e  fbb1f0f2          UDIV     r0,r1,r2
000012  f7fffffe          BL       __aeabi_ui2d
000016  4602              MOV      r2,r0
000018  460b              MOV      r3,r1
00001a  2000              MOVS     r0,#0
00001c  4629              MOV      r1,r5
00001e  f7fffffe          BL       __aeabi_ddiv
000022  f7fffffe          BL       __aeabi_d2uiz
000026  81e0              STRH     r0,[r4,#0xe]
                  |L1.40|
;;;60     //		Msg("DU1 %d ",mbDelay1);
;;;61     	}
;;;62     }
000028  bd70              POP      {r4-r6,pc}
                  |L1.42|
00002a  fbb1f0f2          UDIV     r0,r1,r2              ;53
00002e  f7fffffe          BL       __aeabi_ui2d
000032  4602              MOV      r2,r0                 ;53
000034  460b              MOV      r3,r1                 ;53
000036  2000              MOVS     r0,#0                 ;53
000038  4629              MOV      r1,r5                 ;53
00003a  f7fffffe          BL       __aeabi_ddiv
00003e  f7fffffe          BL       __aeabi_d2uiz
000042  b280              UXTH     r0,r0                 ;53
000044  81a0              STRH     r0,[r4,#0xc]          ;53
000046  2832              CMP      r0,#0x32              ;56
000048  d2ee              BCS      |L1.40|
00004a  2032              MOVS     r0,#0x32              ;56
00004c  81a0              STRH     r0,[r4,#0xc]          ;56
00004e  bd70              POP      {r4-r6,pc}
;;;63     
                          ENDP

                  mbSetHandler PROC
;;;64     void mbSetHandler(u8 num,TPackHandler ph){
000050  4abe              LDR      r2,|L1.844|
000052  b118              CBZ      r0,|L1.92|
;;;65     	if (num == 0){
;;;66     		pPackHandler0 = ph;
;;;67     	} else
;;;68     	if (num == 1){
000054  2801              CMP      r0,#1
000056  d100              BNE      |L1.90|
;;;69     		pPackHandler1 = ph;
000058  6151              STR      r1,[r2,#0x14]  ; pPackHandler1
                  |L1.90|
;;;70     	}
;;;71     }
00005a  4770              BX       lr
                  |L1.92|
00005c  6111              STR      r1,[r2,#0x10]         ;66  ; pPackHandler0
00005e  4770              BX       lr
;;;72     
                          ENDP

                  swap PROC
;;;73     u16 swap (u16 w){
000060  0201              LSLS     r1,r0,#8
;;;74     	return ((w << 8) | (w >> 8));
000062  ea412010          ORR      r0,r1,r0,LSR #8
000066  b280              UXTH     r0,r0
;;;75     }
000068  4770              BX       lr
;;;76     
                          ENDP

                  CRC16 PROC
;;;250    
;;;251    u16 CRC16 (const u8 *nData, u16 wLength)
00006a  b530              PUSH     {r4,r5,lr}
;;;252    {
00006c  4602              MOV      r2,r0
;;;253    static const u16 wCRCTable[] = {
;;;254    0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
;;;255    0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
;;;256    0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
;;;257    0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
;;;258    0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
;;;259    0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
;;;260    0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
;;;261    0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
;;;262    0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
;;;263    0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
;;;264    0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
;;;265    0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
;;;266    0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
;;;267    0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
;;;268    0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
;;;269    0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
;;;270    0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
;;;271    0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
;;;272    0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
;;;273    0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
;;;274    0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
;;;275    0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
;;;276    0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
;;;277    0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
;;;278    0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
;;;279    0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
;;;280    0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
;;;281    0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
;;;282    0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
;;;283    0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
;;;284    0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
;;;285    0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };
;;;286    
;;;287    u8 nTemp;
;;;288    u16 wCRCWord = 0xFFFF;
00006e  f64f70ff          MOV      r0,#0xffff
;;;289    
;;;290       while (wLength--)
;;;291       {
;;;292          nTemp = *nData++ ^ wCRCWord;
;;;293          wCRCWord >>= 8;
;;;294          wCRCWord ^= wCRCTable[nTemp];
000072  4db7              LDR      r5,|L1.848|
000074  e008              B        |L1.136|
000076  bf00              NOP                            ;292
                  |L1.120|
000078  f8123b01          LDRB     r3,[r2],#1            ;292
00007c  0a04              LSRS     r4,r0,#8              ;293
00007e  4043              EORS     r3,r3,r0              ;292
000080  b2db              UXTB     r3,r3                 ;292
000082  f8350013          LDRH     r0,[r5,r3,LSL #1]
000086  4060              EORS     r0,r0,r4
                  |L1.136|
000088  1e49              SUBS     r1,r1,#1              ;290
00008a  b289              UXTH     r1,r1                 ;290
00008c  d2f4              BCS      |L1.120|
;;;295       }
;;;296       return wCRCWord;
;;;297    }
00008e  bd30              POP      {r4,r5,pc}
;;;298    
                          ENDP

                  mbCheckSum PROC
;;;76     
;;;77     BOOL mbCheckSum(u8 * buffer,u16 len){
000090  b508              PUSH     {r3,lr}
;;;78     	u16 rCRC;
;;;79     // проверка контрольной суммы
;;;80     	if (len < 4) return FALSE;
000092  2904              CMP      r1,#4
000094  d30e              BCC      |L1.180|
;;;81     	else {
;;;82     		memcpy((u8*)&rCRC,buffer+len-2,2);
000096  1842              ADDS     r2,r0,r1
000098  1e89              SUBS     r1,r1,#2
00009a  f8322c02          LDRH     r2,[r2,#-2]
00009e  f8ad2000          STRH     r2,[sp,#0]
;;;83     		//rCRC = swap(rCRC);
;;;84     		return (rCRC == CRC16(buffer,len-2));
0000a2  b289              UXTH     r1,r1
0000a4  f7fffffe          BL       CRC16
0000a8  f8bd1000          LDRH     r1,[sp,#0]
0000ac  4288              CMP      r0,r1
0000ae  d101              BNE      |L1.180|
0000b0  2001              MOVS     r0,#1
;;;85     	}
;;;86     }
0000b2  bd08              POP      {r3,pc}
                  |L1.180|
0000b4  2000              MOVS     r0,#0                 ;84
0000b6  bd08              POP      {r3,pc}
;;;87     
                          ENDP

                  mbRecvBuffer PROC
;;;88     void mbRecvBuffer(u8 num, u8 * buffer,u16 len){
0000b8  e92d41f0          PUSH     {r4-r8,lr}
;;;89     	if (num == 0) {
;;;90     		memcpy(mbRBuffer0+mbRDataLen0,buffer,len);
0000bc  4ca3              LDR      r4,|L1.844|
;;;91     		mbRDataLen0+=len;
;;;92     		//Msg("%0X  %d",*buffer,mbRDataLen0);
;;;93     		StartTime(timeWaitUART0);
0000be  4fa5              LDR      r7,|L1.852|
0000c0  4615              MOV      r5,r2                 ;88
0000c2  2601              MOVS     r6,#1
0000c4  b158              CBZ      r0,|L1.222|
;;;94     	} else {
;;;95     		memcpy(mbRBuffer1+mbRDataLen1,buffer,len);
0000c6  48a4              LDR      r0,|L1.856|
0000c8  8862              LDRH     r2,[r4,#2]  ; mbRDataLen1
0000ca  4410              ADD      r0,r0,r2
0000cc  462a              MOV      r2,r5
0000ce  f7fffffe          BL       __aeabi_memcpy
;;;96     		mbRDataLen1+=len;
0000d2  8860              LDRH     r0,[r4,#2]  ; mbRDataLen1
0000d4  4428              ADD      r0,r0,r5
0000d6  8060              STRH     r0,[r4,#2]
;;;97     		StartTime(timeWaitUART1);
0000d8  607e              STR      r6,[r7,#4]  ; time
                  |L1.218|
;;;98     	}
;;;99     }
0000da  e8bd81f0          POP      {r4-r8,pc}
                  |L1.222|
0000de  489f              LDR      r0,|L1.860|
0000e0  8822              LDRH     r2,[r4,#0]            ;90  ; mbRDataLen0
0000e2  4410              ADD      r0,r0,r2              ;90
0000e4  462a              MOV      r2,r5                 ;90
0000e6  f7fffffe          BL       __aeabi_memcpy
0000ea  8820              LDRH     r0,[r4,#0]            ;91  ; mbRDataLen0
0000ec  4428              ADD      r0,r0,r5              ;91
0000ee  8020              STRH     r0,[r4,#0]            ;91
0000f0  603e              STR      r6,[r7,#0]            ;93  ; time
0000f2  e7f2              B        |L1.218|
;;;100    
                          ENDP

                  mbIdle PROC
;;;101    void mbIdle(u8 num) {
0000f4  b570              PUSH     {r4-r6,lr}
0000f6  2600              MOVS     r6,#0
;;;102    //	u16 rCRC;
;;;103    	if (num == 0) {
;;;104    		if (GetTime(timeWaitUART0) > tiMksToTick(mbDelay0)) {
0000f8  4d96              LDR      r5,|L1.852|
0000fa  4c94              LDR      r4,|L1.844|
0000fc  2132              MOVS     r1,#0x32
0000fe  b198              CBZ      r0,|L1.296|
;;;105    			//Msg("time %d %d %d\r\n",GetTime(timeWaitUART0),mbDelay0,MksToTick(mbDelay0));
;;;106    			//Msg("%0X  %d",mbRBuffer0[mbRDataLen0-1],mbRDataLen0);
;;;107    			//Dump(mbRBuffer0,mbRDataLen0);
;;;108    			if (mbCheckSum(mbRBuffer0,mbRDataLen0)) {
;;;109    				// проверить контрольную сумму
;;;110    				// выдать пакет	через обработчик
;;;111    				//Dump(mbRBuffer0,mbRDataLen0);
;;;112    				if (pPackHandler0) {
;;;113    					(*pPackHandler0)(mbRBuffer0,mbRDataLen0);
;;;114    				}
;;;115    			}
;;;116    			// очистка буфера
;;;117    			memset(mbRBuffer0,0,sizeof mbRBuffer0);
;;;118    			mbRDataLen0 = 0;
;;;119    			StopTime(timeWaitUART0);
;;;120    		}
;;;121    	} else {
;;;122    		if (GetTime(timeWaitUART1) > tiMksToTick(mbDelay1)) {
000100  89e0              LDRH     r0,[r4,#0xe]  ; mbDelay1
000102  fbb0f1f1          UDIV     r1,r0,r1
000106  6868              LDR      r0,[r5,#4]  ; time
000108  b108              CBZ      r0,|L1.270|
00010a  6868              LDR      r0,[r5,#4]  ; time
00010c  1e40              SUBS     r0,r0,#1
                  |L1.270|
00010e  4281              CMP      r1,r0
000110  d224              BCS      |L1.348|
;;;123    			//Dump(mbRBuffer1,mbRDataLen1);
;;;124    			if (mbCheckSum(mbRBuffer1,mbRDataLen1)) {
000112  8861              LDRH     r1,[r4,#2]  ; mbRDataLen1
000114  4890              LDR      r0,|L1.856|
000116  f7fffffe          BL       mbCheckSum
00011a  b300              CBZ      r0,|L1.350|
;;;125    //			if (1) {
;;;126    				// проверить контрольную сумму
;;;127    				// выдать пакет	через обработчик
;;;128    				if (pPackHandler1) {
00011c  6962              LDR      r2,[r4,#0x14]  ; pPackHandler1
00011e  b362              CBZ      r2,|L1.378|
;;;129    					(*pPackHandler1)(mbRBuffer1,mbRDataLen1);
000120  8861              LDRH     r1,[r4,#2]  ; mbRDataLen1
000122  488d              LDR      r0,|L1.856|
000124  4790              BLX      r2
000126  e028              B        |L1.378|
                  |L1.296|
000128  89a0              LDRH     r0,[r4,#0xc]          ;104  ; mbDelay0
00012a  fbb0f1f1          UDIV     r1,r0,r1              ;104
00012e  6828              LDR      r0,[r5,#0]            ;104  ; time
000130  b108              CBZ      r0,|L1.310|
000132  6828              LDR      r0,[r5,#0]            ;104  ; time
000134  1e40              SUBS     r0,r0,#1              ;104
                  |L1.310|
000136  4281              CMP      r1,r0                 ;104
000138  d210              BCS      |L1.348|
00013a  8821              LDRH     r1,[r4,#0]            ;108  ; mbRDataLen0
00013c  4887              LDR      r0,|L1.860|
00013e  f7fffffe          BL       mbCheckSum
000142  b120              CBZ      r0,|L1.334|
000144  6922              LDR      r2,[r4,#0x10]         ;112  ; pPackHandler0
000146  b112              CBZ      r2,|L1.334|
000148  8821              LDRH     r1,[r4,#0]            ;113  ; mbRDataLen0
00014a  4884              LDR      r0,|L1.860|
00014c  4790              BLX      r2                    ;113
                  |L1.334|
00014e  f44f5100          MOV      r1,#0x2000            ;117
000152  4882              LDR      r0,|L1.860|
000154  f7fffffe          BL       __aeabi_memclr
000158  8026              STRH     r6,[r4,#0]            ;118
00015a  602e              STR      r6,[r5,#0]            ;119  ; time
                  |L1.348|
;;;130    				}
;;;131    			} else {
;;;132    				// логирование ошибок контрольной суммы UART1
;;;133    				if (*pErrCSU1) {
;;;134    					Msg("Err CS U1 ");
;;;135    					Dump(mbRBuffer1,mbRDataLen1);
;;;136    					Msg("\r\n");
;;;137    				}
;;;138    			}
;;;139    			// очистка буфера
;;;140    			memset(mbRBuffer1,0,sizeof mbRBuffer1);
;;;141    			mbRDataLen1 = 0;
;;;142    			StopTime(timeWaitUART1);
;;;143    		}
;;;144    	}
;;;145    }
00015c  bd70              POP      {r4-r6,pc}
                  |L1.350|
00015e  4880              LDR      r0,|L1.864|
000160  6800              LDR      r0,[r0,#0]            ;133  ; pErrCSU1
000162  7800              LDRB     r0,[r0,#0]            ;133
000164  b148              CBZ      r0,|L1.378|
000166  a07f              ADR      r0,|L1.868|
000168  f7fffffe          BL       Msg
00016c  8861              LDRH     r1,[r4,#2]            ;135  ; mbRDataLen1
00016e  487a              LDR      r0,|L1.856|
000170  f7fffffe          BL       Dump
000174  a07e              ADR      r0,|L1.880|
000176  f7fffffe          BL       Msg
                  |L1.378|
00017a  f44f7180          MOV      r1,#0x100             ;140
00017e  4876              LDR      r0,|L1.856|
000180  f7fffffe          BL       __aeabi_memclr
000184  8066              STRH     r6,[r4,#2]            ;141
000186  606e              STR      r6,[r5,#4]            ;142  ; time
000188  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

                  mbByteToPack PROC
;;;147    void mbByteToPack(u8 num,u8 b){
00018a  4a70              LDR      r2,|L1.844|
00018c  b138              CBZ      r0,|L1.414|
;;;148    	if (num == 0) {
;;;149    		*(mbSFBuf0+mbSFDLen0)=b;
;;;150    		mbSFDLen0++;
;;;151    	} else 
;;;152    	if (num == 1) {
00018e  2801              CMP      r0,#1
000190  d104              BNE      |L1.412|
;;;153    		*(mbSFBuf1+mbSFDLen1)=b;
000192  4b78              LDR      r3,|L1.884|
000194  8950              LDRH     r0,[r2,#0xa]  ; mbSFDLen1
000196  5419              STRB     r1,[r3,r0]
000198  1c40              ADDS     r0,r0,#1
;;;154    		mbSFDLen1++;
00019a  8150              STRH     r0,[r2,#0xa]
                  |L1.412|
;;;155    	}
;;;156    }
00019c  4770              BX       lr
                  |L1.414|
00019e  4b76              LDR      r3,|L1.888|
0001a0  8910              LDRH     r0,[r2,#8]            ;149  ; mbSFDLen0
0001a2  5419              STRB     r1,[r3,r0]            ;149
0001a4  1c40              ADDS     r0,r0,#1              ;149
0001a6  8110              STRH     r0,[r2,#8]            ;150
0001a8  4770              BX       lr
;;;157    
                          ENDP

                  mbWordToPack PROC
;;;158    void mbWordToPack(u8 num,u16 w){
0001aa  020a              LSLS     r2,r1,#8
;;;159    	u16 tmpw;
;;;160    	if (num == 0) {
;;;161    		tmpw = swap(w);
0001ac  ea422111          ORR      r1,r2,r1,LSR #8
0001b0  b28a              UXTH     r2,r1
0001b2  b508              PUSH     {r3,lr}               ;158
;;;162    		memcpy(mbSFBuf0+mbSFDLen0,&tmpw,2);
0001b4  4965              LDR      r1,|L1.844|
0001b6  b160              CBZ      r0,|L1.466|
;;;163    		mbSFDLen0 += 2;
;;;164    	} else 
;;;165    	if (num == 1) {
0001b8  2801              CMP      r0,#1
0001ba  d109              BNE      |L1.464|
;;;166    		tmpw = swap(w);
0001bc  f8ad2000          STRH     r2,[sp,#0]
;;;167    		memcpy(mbSFBuf1+mbSFDLen1,&tmpw,2);
0001c0  4a6c              LDR      r2,|L1.884|
0001c2  8948              LDRH     r0,[r1,#0xa]  ; mbSFDLen1
0001c4  f8bd3000          LDRH     r3,[sp,#0]
0001c8  4402              ADD      r2,r2,r0
0001ca  1c80              ADDS     r0,r0,#2
0001cc  8013              STRH     r3,[r2,#0]
;;;168    		mbSFDLen1 += 2;
0001ce  8148              STRH     r0,[r1,#0xa]
                  |L1.464|
;;;169    	}
;;;170    }
0001d0  bd08              POP      {r3,pc}
                  |L1.466|
0001d2  f8ad2000          STRH     r2,[sp,#0]            ;161
0001d6  4a68              LDR      r2,|L1.888|
0001d8  8908              LDRH     r0,[r1,#8]            ;162  ; mbSFDLen0
0001da  f8bd3000          LDRH     r3,[sp,#0]            ;162
0001de  4402              ADD      r2,r2,r0              ;162
0001e0  1c80              ADDS     r0,r0,#2              ;162
0001e2  8013              STRH     r3,[r2,#0]            ;162
0001e4  8108              STRH     r0,[r1,#8]            ;163
0001e6  bd08              POP      {r3,pc}
;;;171    
                          ENDP

                  mbWordToPackNoSwap PROC
;;;172    void mbWordToPackNoSwap(u8 num,u16 w){
0001e8  b508              PUSH     {r3,lr}
;;;173    	u16 tmpw;
;;;174    	if (num == 0) {
;;;175    		tmpw = w;
;;;176    		memcpy(mbSFBuf0+mbSFDLen0,&tmpw,2);
0001ea  4a58              LDR      r2,|L1.844|
0001ec  b160              CBZ      r0,|L1.520|
;;;177    		mbSFDLen0 += 2;
;;;178    	} else 
;;;179    	if (num == 1) {
0001ee  2801              CMP      r0,#1
0001f0  d109              BNE      |L1.518|
;;;180    		tmpw = w;
0001f2  f8ad1000          STRH     r1,[sp,#0]
;;;181    		memcpy(mbSFBuf1+mbSFDLen1,&tmpw,2);
0001f6  495f              LDR      r1,|L1.884|
0001f8  8950              LDRH     r0,[r2,#0xa]  ; mbSFDLen1
0001fa  f8bd3000          LDRH     r3,[sp,#0]
0001fe  4401              ADD      r1,r1,r0
000200  1c80              ADDS     r0,r0,#2
000202  800b              STRH     r3,[r1,#0]
;;;182    		mbSFDLen1 += 2;
000204  8150              STRH     r0,[r2,#0xa]
                  |L1.518|
;;;183    	}
;;;184    }
000206  bd08              POP      {r3,pc}
                  |L1.520|
000208  f8ad1000          STRH     r1,[sp,#0]            ;175
00020c  495a              LDR      r1,|L1.888|
00020e  8910              LDRH     r0,[r2,#8]            ;176  ; mbSFDLen0
000210  f8bd3000          LDRH     r3,[sp,#0]            ;176
000214  4401              ADD      r1,r1,r0              ;176
000216  1c80              ADDS     r0,r0,#2              ;176
000218  800b              STRH     r3,[r1,#0]            ;176
00021a  8110              STRH     r0,[r2,#8]            ;177
00021c  bd08              POP      {r3,pc}
;;;185    
                          ENDP

                  mbBufferToPack PROC
;;;186    void mbBufferToPack (u8 num,u8 * buffer,u16 len){
00021e  b570              PUSH     {r4-r6,lr}
;;;187    	if (num == 0) {
;;;188    		memcpy(mbSFBuf0+mbSFDLen0,buffer,len);
000220  4c4a              LDR      r4,|L1.844|
000222  4615              MOV      r5,r2                 ;186
000224  b158              CBZ      r0,|L1.574|
;;;189    		mbSFDLen0 += len;
;;;190    	} else 
;;;191    	if (num == 1) {
000226  2801              CMP      r0,#1
000228  d108              BNE      |L1.572|
;;;192    		memcpy(mbSFBuf1+mbSFDLen1,buffer,len);
00022a  4852              LDR      r0,|L1.884|
00022c  8962              LDRH     r2,[r4,#0xa]  ; mbSFDLen1
00022e  4410              ADD      r0,r0,r2
000230  462a              MOV      r2,r5
000232  f7fffffe          BL       __aeabi_memcpy
;;;193    		mbSFDLen1 += len;
000236  8960              LDRH     r0,[r4,#0xa]  ; mbSFDLen1
000238  4428              ADD      r0,r0,r5
00023a  8160              STRH     r0,[r4,#0xa]
                  |L1.572|
;;;194    	}
;;;195    }
00023c  bd70              POP      {r4-r6,pc}
                  |L1.574|
00023e  484e              LDR      r0,|L1.888|
000240  8922              LDRH     r2,[r4,#8]            ;188  ; mbSFDLen0
000242  4410              ADD      r0,r0,r2              ;188
000244  462a              MOV      r2,r5                 ;188
000246  f7fffffe          BL       __aeabi_memcpy
00024a  8920              LDRH     r0,[r4,#8]            ;189  ; mbSFDLen0
00024c  4428              ADD      r0,r0,r5              ;189
00024e  8120              STRH     r0,[r4,#8]            ;189
000250  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

                  mbPackToQueue PROC
;;;240    
;;;241    void mbPackToQueue(u8 transit){
000252  b510              PUSH     {r4,lr}
;;;242    	quAddPack(mbSFBuf1,mbSFDLen1,transit);
000254  4c3d              LDR      r4,|L1.844|
000256  4602              MOV      r2,r0
000258  4846              LDR      r0,|L1.884|
00025a  8961              LDRH     r1,[r4,#0xa]  ; mbSFDLen1
00025c  f7fffffe          BL       quAddPack
;;;243    	mbSFDLen1 = 0;
000260  2000              MOVS     r0,#0
000262  8160              STRH     r0,[r4,#0xa]
;;;244    }
000264  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  mbCmd485 PROC
;;;196    
;;;197    void mbCmd485(u8 devaddr,u8 cmd,u16 regaddr,u16 count){
000266  b570              PUSH     {r4-r6,lr}
000268  460c              MOV      r4,r1
;;;198    	mbByteToPack(1,devaddr);
00026a  4601              MOV      r1,r0
00026c  461d              MOV      r5,r3                 ;197
00026e  4616              MOV      r6,r2                 ;197
000270  2001              MOVS     r0,#1
000272  f7fffffe          BL       mbByteToPack
;;;199    	mbByteToPack(1,cmd);
000276  4621              MOV      r1,r4
000278  2001              MOVS     r0,#1
00027a  f7fffffe          BL       mbByteToPack
;;;200    	mbWordToPack(1,regaddr);
00027e  4631              MOV      r1,r6
000280  2001              MOVS     r0,#1
000282  f7fffffe          BL       mbWordToPack
;;;201    	mbWordToPack(1,count);
000286  4629              MOV      r1,r5
000288  2001              MOVS     r0,#1
00028a  f7fffffe          BL       mbWordToPack
;;;202    	mbPackToQueue(quCmdNoTransit);
00028e  e8bd4070          POP      {r4-r6,lr}
000292  2000              MOVS     r0,#0
000294  e7fe              B        mbPackToQueue
;;;203    }
;;;204    
                          ENDP

                  mbInsPackToQueue PROC
;;;245    
;;;246    void mbInsPackToQueue(u8 transit,u8 ofs){
000296  b510              PUSH     {r4,lr}
;;;247    	quInsPack(mbSFBuf1,mbSFDLen1,transit,ofs);
000298  4c2c              LDR      r4,|L1.844|
00029a  460b              MOV      r3,r1
00029c  4602              MOV      r2,r0
00029e  8961              LDRH     r1,[r4,#0xa]  ; mbSFDLen1
0002a0  4834              LDR      r0,|L1.884|
0002a2  f7fffffe          BL       quInsPack
;;;248    	mbSFDLen1 = 0;
0002a6  2000              MOVS     r0,#0
0002a8  8160              STRH     r0,[r4,#0xa]
;;;249    }
0002aa  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  mbInsCmd485 PROC
;;;204    
;;;205    void mbInsCmd485(u8 devaddr,u8 cmd,u16 regaddr,u16 count,u8 ofs){
0002ac  e92d41f0          PUSH     {r4-r8,lr}
0002b0  460d              MOV      r5,r1
;;;206    	mbByteToPack(1,devaddr);
0002b2  4601              MOV      r1,r0
0002b4  461e              MOV      r6,r3                 ;205
0002b6  4617              MOV      r7,r2                 ;205
0002b8  2001              MOVS     r0,#1
0002ba  9c06              LDR      r4,[sp,#0x18]
0002bc  f7fffffe          BL       mbByteToPack
;;;207    	mbByteToPack(1,cmd);
0002c0  4629              MOV      r1,r5
0002c2  2001              MOVS     r0,#1
0002c4  f7fffffe          BL       mbByteToPack
;;;208    	mbWordToPack(1,regaddr);
0002c8  4639              MOV      r1,r7
0002ca  2001              MOVS     r0,#1
0002cc  f7fffffe          BL       mbWordToPack
;;;209    	mbWordToPack(1,count);
0002d0  4631              MOV      r1,r6
0002d2  2001              MOVS     r0,#1
0002d4  f7fffffe          BL       mbWordToPack
;;;210    	mbInsPackToQueue(quCmdNoTransit,ofs);
0002d8  4621              MOV      r1,r4
0002da  e8bd41f0          POP      {r4-r8,lr}
0002de  2000              MOVS     r0,#0
0002e0  e7fe              B        mbInsPackToQueue
;;;211    }
;;;212    
                          ENDP

                  mbSendPack PROC
;;;213    void mbSendPack(u8 num){
0002e2  b570              PUSH     {r4-r6,lr}
;;;214    	u16 tmpw;
;;;215    	if (num == 0) {
;;;216    		tmpw = CRC16(mbSFBuf0,mbSFDLen0);
0002e4  4c19              LDR      r4,|L1.844|
0002e6  2500              MOVS     r5,#0                 ;213
0002e8  b1b8              CBZ      r0,|L1.794|
;;;217    		mbWordToPackNoSwap(0,tmpw);
;;;218    		memcpy(mbSBuffer0,mbSFBuf0,mbSFDLen0);
;;;219    		mbSDataLen0 = mbSFDLen0;
;;;220    //		UARTx_SendBuffer(0,mbSBuffer0,mbSDataLen0);
;;;221    		UART0_SendBuffer(mbSBuffer0,mbSDataLen0);
;;;222    		mbSDataLen0 = 0;
;;;223    		mbSFDLen0 = 0;
;;;224    	} else
;;;225    	if (num == 1) {
0002ea  2801              CMP      r0,#1
0002ec  d114              BNE      |L1.792|
;;;226    		tmpw = CRC16(mbSFBuf1,mbSFDLen1);
0002ee  8961              LDRH     r1,[r4,#0xa]  ; mbSFDLen1
0002f0  4820              LDR      r0,|L1.884|
0002f2  f7fffffe          BL       CRC16
0002f6  4601              MOV      r1,r0
;;;227    		mbWordToPackNoSwap(1,tmpw);
0002f8  2001              MOVS     r0,#1
0002fa  f7fffffe          BL       mbWordToPackNoSwap
;;;228    		memcpy(mbSBuffer1,mbSFBuf1,mbSFDLen1);
0002fe  491d              LDR      r1,|L1.884|
000300  8962              LDRH     r2,[r4,#0xa]  ; mbSFDLen1
000302  f5a17000          SUB      r0,r1,#0x200
000306  f7fffffe          BL       __aeabi_memcpy
;;;229    		mbSDataLen1 = mbSFDLen1;
00030a  8961              LDRH     r1,[r4,#0xa]  ; mbSFDLen1
00030c  80e1              STRH     r1,[r4,#6]
;;;230    //		UARTx_SendBuffer(1,mbSBuffer1,mbSDataLen1);
;;;231    		UART1_SendBuffer(mbSBuffer1,mbSDataLen1);
00030e  481b              LDR      r0,|L1.892|
000310  f7fffffe          BL       UART1_SendBuffer
;;;232    		// отладка		
;;;233    //		if (mbSBuffer1[0]==4) {
;;;234    //			Dump(mbSBuffer1,mbSDataLen1);
;;;235    //		}
;;;236    		mbSDataLen1 = 0;
000314  80e5              STRH     r5,[r4,#6]
;;;237    		mbSFDLen1 = 0;
000316  8165              STRH     r5,[r4,#0xa]
                  |L1.792|
;;;238    	} 
;;;239    }
000318  bd70              POP      {r4-r6,pc}
                  |L1.794|
00031a  8921              LDRH     r1,[r4,#8]            ;216  ; mbSFDLen0
00031c  4816              LDR      r0,|L1.888|
00031e  f7fffffe          BL       CRC16
000322  4601              MOV      r1,r0                 ;216
000324  2000              MOVS     r0,#0                 ;217
000326  f7fffffe          BL       mbWordToPackNoSwap
00032a  4913              LDR      r1,|L1.888|
00032c  8922              LDRH     r2,[r4,#8]            ;218  ; mbSFDLen0
00032e  f5a17000          SUB      r0,r1,#0x200          ;218
000332  f7fffffe          BL       __aeabi_memcpy
000336  8921              LDRH     r1,[r4,#8]            ;219  ; mbSFDLen0
000338  80a1              STRH     r1,[r4,#4]            ;219
00033a  4811              LDR      r0,|L1.896|
00033c  f7fffffe          BL       UART0_SendBuffer
000340  80a5              STRH     r5,[r4,#4]            ;222
000342  8125              STRH     r5,[r4,#8]            ;223
000344  bd70              POP      {r4-r6,pc}
;;;240    
                          ENDP

000346  0000              DCW      0x0000
                  |L1.840|
                          DCD      0x414ab3f0
                  |L1.844|
                          DCD      ||.data||
                  |L1.848|
                          DCD      ||.constdata||
                  |L1.852|
                          DCD      time
                  |L1.856|
                          DCD      ||.bss||+0x2000
                  |L1.860|
                          DCD      ||.bss||
                  |L1.864|
                          DCD      pErrCSU1
                  |L1.868|
000364  45727220          DCB      "Err CS U1 ",0
000368  43532055
00036c  312000  
00036f  00                DCB      0
                  |L1.880|
000370  0d0a00            DCB      "\r\n",0
000373  00                DCB      0
                  |L1.884|
                          DCD      ||.bss||+0x2400
                  |L1.888|
                          DCD      ||.bss||+0x2300
                  |L1.892|
                          DCD      ||.bss||+0x2200
                  |L1.896|
                          DCD      ||.bss||+0x2100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  mbRBuffer0
                          %        8192
                  mbRBuffer1
                          %        256
                  mbSBuffer0
                          %        256
                  mbSBuffer1
                          %        256
                  mbSFBuf0
                          %        256
                  mbSFBuf1
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  wCRCTable
000000  0000c0c1          DCW      0x0000,0xc0c1
000004  c1810140          DCW      0xc181,0x0140
000008  c30103c0          DCW      0xc301,0x03c0
00000c  0280c241          DCW      0x0280,0xc241
000010  c60106c0          DCW      0xc601,0x06c0
000014  0780c741          DCW      0x0780,0xc741
000018  0500c5c1          DCW      0x0500,0xc5c1
00001c  c4810440          DCW      0xc481,0x0440
000020  cc010cc0          DCW      0xcc01,0x0cc0
000024  0d80cd41          DCW      0x0d80,0xcd41
000028  0f00cfc1          DCW      0x0f00,0xcfc1
00002c  ce810e40          DCW      0xce81,0x0e40
000030  0a00cac1          DCW      0x0a00,0xcac1
000034  cb810b40          DCW      0xcb81,0x0b40
000038  c90109c0          DCW      0xc901,0x09c0
00003c  0880c841          DCW      0x0880,0xc841
000040  d80118c0          DCW      0xd801,0x18c0
000044  1980d941          DCW      0x1980,0xd941
000048  1b00dbc1          DCW      0x1b00,0xdbc1
00004c  da811a40          DCW      0xda81,0x1a40
000050  1e00dec1          DCW      0x1e00,0xdec1
000054  df811f40          DCW      0xdf81,0x1f40
000058  dd011dc0          DCW      0xdd01,0x1dc0
00005c  1c80dc41          DCW      0x1c80,0xdc41
000060  1400d4c1          DCW      0x1400,0xd4c1
000064  d5811540          DCW      0xd581,0x1540
000068  d70117c0          DCW      0xd701,0x17c0
00006c  1680d641          DCW      0x1680,0xd641
000070  d20112c0          DCW      0xd201,0x12c0
000074  1380d341          DCW      0x1380,0xd341
000078  1100d1c1          DCW      0x1100,0xd1c1
00007c  d0811040          DCW      0xd081,0x1040
000080  f00130c0          DCW      0xf001,0x30c0
000084  3180f141          DCW      0x3180,0xf141
000088  3300f3c1          DCW      0x3300,0xf3c1
00008c  f2813240          DCW      0xf281,0x3240
000090  3600f6c1          DCW      0x3600,0xf6c1
000094  f7813740          DCW      0xf781,0x3740
000098  f50135c0          DCW      0xf501,0x35c0
00009c  3480f441          DCW      0x3480,0xf441
0000a0  3c00fcc1          DCW      0x3c00,0xfcc1
0000a4  fd813d40          DCW      0xfd81,0x3d40
0000a8  ff013fc0          DCW      0xff01,0x3fc0
0000ac  3e80fe41          DCW      0x3e80,0xfe41
0000b0  fa013ac0          DCW      0xfa01,0x3ac0
0000b4  3b80fb41          DCW      0x3b80,0xfb41
0000b8  3900f9c1          DCW      0x3900,0xf9c1
0000bc  f8813840          DCW      0xf881,0x3840
0000c0  2800e8c1          DCW      0x2800,0xe8c1
0000c4  e9812940          DCW      0xe981,0x2940
0000c8  eb012bc0          DCW      0xeb01,0x2bc0
0000cc  2a80ea41          DCW      0x2a80,0xea41
0000d0  ee012ec0          DCW      0xee01,0x2ec0
0000d4  2f80ef41          DCW      0x2f80,0xef41
0000d8  2d00edc1          DCW      0x2d00,0xedc1
0000dc  ec812c40          DCW      0xec81,0x2c40
0000e0  e40124c0          DCW      0xe401,0x24c0
0000e4  2580e541          DCW      0x2580,0xe541
0000e8  2700e7c1          DCW      0x2700,0xe7c1
0000ec  e6812640          DCW      0xe681,0x2640
0000f0  2200e2c1          DCW      0x2200,0xe2c1
0000f4  e3812340          DCW      0xe381,0x2340
0000f8  e10121c0          DCW      0xe101,0x21c0
0000fc  2080e041          DCW      0x2080,0xe041
000100  a00160c0          DCW      0xa001,0x60c0
000104  6180a141          DCW      0x6180,0xa141
000108  6300a3c1          DCW      0x6300,0xa3c1
00010c  a2816240          DCW      0xa281,0x6240
000110  6600a6c1          DCW      0x6600,0xa6c1
000114  a7816740          DCW      0xa781,0x6740
000118  a50165c0          DCW      0xa501,0x65c0
00011c  6480a441          DCW      0x6480,0xa441
000120  6c00acc1          DCW      0x6c00,0xacc1
000124  ad816d40          DCW      0xad81,0x6d40
000128  af016fc0          DCW      0xaf01,0x6fc0
00012c  6e80ae41          DCW      0x6e80,0xae41
000130  aa016ac0          DCW      0xaa01,0x6ac0
000134  6b80ab41          DCW      0x6b80,0xab41
000138  6900a9c1          DCW      0x6900,0xa9c1
00013c  a8816840          DCW      0xa881,0x6840
000140  7800b8c1          DCW      0x7800,0xb8c1
000144  b9817940          DCW      0xb981,0x7940
000148  bb017bc0          DCW      0xbb01,0x7bc0
00014c  7a80ba41          DCW      0x7a80,0xba41
000150  be017ec0          DCW      0xbe01,0x7ec0
000154  7f80bf41          DCW      0x7f80,0xbf41
000158  7d00bdc1          DCW      0x7d00,0xbdc1
00015c  bc817c40          DCW      0xbc81,0x7c40
000160  b40174c0          DCW      0xb401,0x74c0
000164  7580b541          DCW      0x7580,0xb541
000168  7700b7c1          DCW      0x7700,0xb7c1
00016c  b6817640          DCW      0xb681,0x7640
000170  7200b2c1          DCW      0x7200,0xb2c1
000174  b3817340          DCW      0xb381,0x7340
000178  b10171c0          DCW      0xb101,0x71c0
00017c  7080b041          DCW      0x7080,0xb041
000180  500090c1          DCW      0x5000,0x90c1
000184  91815140          DCW      0x9181,0x5140
000188  930153c0          DCW      0x9301,0x53c0
00018c  52809241          DCW      0x5280,0x9241
000190  960156c0          DCW      0x9601,0x56c0
000194  57809741          DCW      0x5780,0x9741
000198  550095c1          DCW      0x5500,0x95c1
00019c  94815440          DCW      0x9481,0x5440
0001a0  9c015cc0          DCW      0x9c01,0x5cc0
0001a4  5d809d41          DCW      0x5d80,0x9d41
0001a8  5f009fc1          DCW      0x5f00,0x9fc1
0001ac  9e815e40          DCW      0x9e81,0x5e40
0001b0  5a009ac1          DCW      0x5a00,0x9ac1
0001b4  9b815b40          DCW      0x9b81,0x5b40
0001b8  990159c0          DCW      0x9901,0x59c0
0001bc  58809841          DCW      0x5880,0x9841
0001c0  880148c0          DCW      0x8801,0x48c0
0001c4  49808941          DCW      0x4980,0x8941
0001c8  4b008bc1          DCW      0x4b00,0x8bc1
0001cc  8a814a40          DCW      0x8a81,0x4a40
0001d0  4e008ec1          DCW      0x4e00,0x8ec1
0001d4  8f814f40          DCW      0x8f81,0x4f40
0001d8  8d014dc0          DCW      0x8d01,0x4dc0
0001dc  4c808c41          DCW      0x4c80,0x8c41
0001e0  440084c1          DCW      0x4400,0x84c1
0001e4  85814540          DCW      0x8581,0x4540
0001e8  870147c0          DCW      0x8701,0x47c0
0001ec  46808641          DCW      0x4680,0x8641
0001f0  820142c0          DCW      0x8201,0x42c0
0001f4  43808341          DCW      0x4380,0x8341
0001f8  410081c1          DCW      0x4100,0x81c1
0001fc  80814040          DCW      0x8081,0x4040

                          AREA ||.data||, DATA, ALIGN=2

                  mbRDataLen0
000000  0000              DCW      0x0000
                  mbRDataLen1
000002  0000              DCW      0x0000
                  mbSDataLen0
000004  0000              DCW      0x0000
                  mbSDataLen1
000006  0000              DCW      0x0000
                  mbSFDLen0
000008  0000              DCW      0x0000
                  mbSFDLen1
00000a  0000              DCW      0x0000
                  mbDelay0
00000c  0131              DCW      0x0131
                  mbDelay1
00000e  0e3e              DCW      0x0e3e
                  pPackHandler0
                          DCD      0x00000000
                  pPackHandler1
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  WaitFlag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Main\\Modbus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Modbus_c_8fffd5c9____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_Modbus_c_8fffd5c9____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Modbus_c_8fffd5c9____REVSH|
#line 462
|__asm___8_Modbus_c_8fffd5c9____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_Modbus_c_8fffd5c9____RRX|
#line 649
|__asm___8_Modbus_c_8fffd5c9____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\saw.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\saw.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Dec 18 21:51:01 2021
<BR><P>
<H3>Maximum Stack Usage =        436 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mbFrzPackHandler0 &rArr; pFS_BReadLn &rArr; bFS_BReadLn &rArr; bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[206]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3f]">FMove_HandlerQuick</a> from motors.o(.text) referenced from main.o(i.InitFrzTimers)
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3c]">MotorX_Handler</a> from motor_x.o(.text) referenced from main.o(i.InitFrzTimers)
 <LI><a href="#[3d]">MotorY_Handler</a> from motor_y.o(.text) referenced from main.o(i.InitFrzTimers)
 <LI><a href="#[3e]">MotorZ_Handler</a> from motor_z.o(.text) referenced from main.o(i.InitFrzTimers)
 <LI><a href="#[6]">NMI_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d7]">PrgRunHandleFrz</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[2e]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">TIMER3_IRQHandler</a> from timers.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d2]">XPositOnHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[1d3]">YPositOnHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[1d4]">ZPositOnHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[3b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
 <LI><a href="#[34]">mbFrzPackHandler0</a> from u0packets.o(.text) referenced from main.o(.text)
 <LI><a href="#[35]">mbFrzPackHandler1</a> from u1packets.o(.text) referenced from main.o(.text)
 <LI><a href="#[1d9]">mvcVHandleFrz</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[1d5]">pByPassHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[1d8]">pCurCadrHandleFrz</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[37]">pDCTimeHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[36]">pDrDelayHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[1d6]">pHorizDatHandle</a> from regs.o(.text) referenced from regs.o(.text)
 <LI><a href="#[38]">pPercVminHandle</a> from regs.o(.text) referenced from regs.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[24b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[24c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[24d]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[24e]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[24f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[44]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[48]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4a]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[250]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[251]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[4c]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4e]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4f]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[50]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[52]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[54]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[56]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[57]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[58]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[5a]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[252]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[5c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[60]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[62]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[253]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[254]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[255]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[64]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[256]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[257]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[258]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[259]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[66]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[25a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[25b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[67]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[25c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[260]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[261]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[262]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[263]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[264]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[265]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[266]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[267]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[268]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[269]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[26a]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[26b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[26c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[26d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[26e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[26f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[270]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[271]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[69]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[272]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RunPrgFrz &rArr; RecoverBlock &rArr; TranslatePrg &rArr; CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[273]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[207]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[70]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[274]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[72]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[126]"></a>boot_jump</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sbl_iap.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pReset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunBootLoader
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[206]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[275]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>SystemInit</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>CLKPWR_SetPCLKDiv</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLKPWR_SetPCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[75]"></a>CLKPWR_GetPCLKSEL</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
</UL>

<P><STRONG><a name="[74]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLKPWR_GetPCLK
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLKSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[79]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[276]"></a>CLKPWR_Sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>PINSEL_ConfigTraceFunc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>PINSEL_SetI2C0Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_pinsel.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, lpc17xx_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[78]"></a>UART_Init</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[7b]"></a>UART_TxCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[7a]"></a>UART_DeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[27c]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>UART_SendByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[7f]"></a>UART_ReceiveByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[7c]"></a>UART_Send</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[e0]"></a>UART0_Send</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
</UL>

<P><STRONG><a name="[e5]"></a>UART1_Send</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
</UL>

<P><STRONG><a name="[7e]"></a>UART_Receive</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntReceive
</UL>

<P><STRONG><a name="[27d]"></a>UART_ForceBreak</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>UART_IntConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RecvBuffer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[e3]"></a>UART_GetLineStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>UART_GetIntId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>UART_CheckBusy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>UART_FIFOConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[ea]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[27f]"></a>UART_ABCmd</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>UART_ABClearIntPending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>UART_IrDACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>UART_RS485Config</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>UART_RS485Send</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[81]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[82]"></a>UART_RS485SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc17xx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[dd]"></a>TIM_GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[289]"></a>TIM_GetIntCaptureStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[28a]"></a>TIM_ClearIntCapturePending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_ConfigStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>TIM_Init</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetPCLKDiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[85]"></a>TIM_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>

<P><STRONG><a name="[da]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[28c]"></a>TIM_ResetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>TIM_ConfigMatch</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, lpc17xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ConfigMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[28d]"></a>TIM_UpdateMatchValue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>TIM_ConfigCapture</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>TIM_GetCaptureValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc17xx_timer.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>mbSetSpeed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbSetSpeed &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>mbSetHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPAnswer
</UL>

<P><STRONG><a name="[8b]"></a>CRC16</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCheckSum
</UL>

<P><STRONG><a name="[8a]"></a>mbCheckSum</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbCheckSum &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
</UL>

<P><STRONG><a name="[8c]"></a>mbRecvBuffer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbRecvBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Thread
</UL>

<P><STRONG><a name="[8e]"></a>mbIdle</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mbIdle &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCheckSum
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Thread
</UL>

<P><STRONG><a name="[96]"></a>mbByteToPack</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCmd485
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPackFrz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetPin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSetPin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pInitZCorr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetTimers
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBusy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetVersion
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_EraseSector
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_SetTimeouts
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetTimeouts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetUsing
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pCreateRegsBin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Close
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Seek
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Pos
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_SetFInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QAllocTable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>

<P><STRONG><a name="[97]"></a>mbWordToPack</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbWordToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCmd485
</UL>

<P><STRONG><a name="[9c]"></a>mbWordToPackNoSwap</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbWordToPackNoSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegs
</UL>

<P><STRONG><a name="[92]"></a>mbBufferToPack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbBufferToPack
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPackFrz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBlock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetVersion
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Pos
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataToU1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>

<P><STRONG><a name="[93]"></a>mbPackToQueue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = mbPackToQueue &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCmd485
</UL>

<P><STRONG><a name="[95]"></a>mbCmd485</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = mbCmd485 &rArr; mbPackToQueue &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbPackToQueue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbWordToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPQuery
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPInit
</UL>

<P><STRONG><a name="[98]"></a>mbInsPackToQueue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quInsPack
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataToU1
</UL>

<P><STRONG><a name="[9a]"></a>mbInsCmd485</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbInsCmd485 &rArr; mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsPackToQueue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbWordToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pPercVminHandle
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDCTimeHandle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDrDelayHandle
</UL>

<P><STRONG><a name="[9b]"></a>mbSendPack</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendBuffer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbWordToPackNoSwap
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPackFrz
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetPin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSetPin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pInitZCorr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetTimers
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBusy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetVersion
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_EraseSector
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_SetTimeouts
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetTimeouts
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetUsing
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pCreateRegsBin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Close
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Seek
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Pos
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_SetFInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QAllocTable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegs
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>

<P><STRONG><a name="[9f]"></a>FS_Init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FS_Init &rArr; FLASH_WriteByte &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankID
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
</UL>

<P><STRONG><a name="[a3]"></a>FS_StrSymbolsValid</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FS_StrSymbolsValid &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNameAndType
</UL>

<P><STRONG><a name="[a5]"></a>FS_GetNameAndType</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FS_GetNameAndType &rArr; FS_StrSymbolsValid &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_StrSymbolsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
</UL>

<P><STRONG><a name="[a6]"></a>FS_GetFullName</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FS_GetFullName &rArr; CRC8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC8
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
</UL>

<P><STRONG><a name="[a8]"></a>FS_FileUseFCS</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS_FileUseFCS
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFileInfo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
</UL>

<P><STRONG><a name="[aa]"></a>FS_FindFreeFNT</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FS_FindFreeFNT &rArr; FLASH_ReadByte &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetUsing
</UL>

<P><STRONG><a name="[ab]"></a>FS_FindFileByName</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FS_FindFileByName &rArr; FLASH_ReadByte &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
</UL>

<P><STRONG><a name="[ac]"></a>FS_FindFreeCluster</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FS_FindFreeCluster &rArr; FLASH_ReadByte &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetUsing
</UL>

<P><STRONG><a name="[ad]"></a>FS_GetFreeClustersNum</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
</UL>

<P><STRONG><a name="[ae]"></a>FS_FNTWriteFullName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FS_FNTWriteFullName &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
</UL>

<P><STRONG><a name="[b0]"></a>FS_FNTSetSignature1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS_FNTSetSignature1 &rArr; FLASH_WriteByte &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
</UL>

<P><STRONG><a name="[b1]"></a>FS_ClusterSetFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS_ClusterSetFlag &rArr; FLASH_WriteByte &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
</UL>

<P><STRONG><a name="[b2]"></a>FS_SetNextCluster</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FS_SetNextCluster &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
</UL>

<P><STRONG><a name="[b3]"></a>FS_GetNextCluster</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_RSeek
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadLn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
</UL>

<P><STRONG><a name="[b5]"></a>FS_FlushPageBuffer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FS_FlushPageBuffer &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
</UL>

<P><STRONG><a name="[b7]"></a>FS_GetFreeFCS</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
</UL>

<P><STRONG><a name="[b6]"></a>FS_Assign</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FS_Assign &rArr; FS_GetNameAndType &rArr; FS_StrSymbolsValid &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeFCS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FileUseFCS
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNameAndType
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegsNoMes
</UL>

<P><STRONG><a name="[b9]"></a>FS_Rewrite</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FS_Rewrite &rArr; FS_FNTWriteFullName &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ClusterSetFlag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FNTWriteFullName
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeCluster
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFileByName
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeFNT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegsNoMes
</UL>

<P><STRONG><a name="[ba]"></a>FS_Append</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FS_Append &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FNTSetSignature1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FNTWriteFullName
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFileByName
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeFNT
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
</UL>

<P><STRONG><a name="[bb]"></a>FS_Reset</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FS_Reset &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFileByName
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
</UL>

<P><STRONG><a name="[bc]"></a>FS_WriteByte</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FS_WriteByte &rArr; FS_SetNextCluster &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FlushPageBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SetNextCluster
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ClusterSetFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_WriteLn
</UL>

<P><STRONG><a name="[bd]"></a>FS_ReadByte</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FS_ReadByte &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadPrevByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Read
</UL>

<P><STRONG><a name="[be]"></a>FS_Write</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FlushPageBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SetNextCluster
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ClusterSetFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeCluster
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bf]"></a>FS_Read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[290]"></a>FS_WriteLn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>FS_ReadLn</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
</UL>

<P><STRONG><a name="[291]"></a>FS_ReadPrevLn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>FS_RemainSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>FS_Seek</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FS_Seek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_Seek
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_BReadLn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStream
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Seek
</UL>

<P><STRONG><a name="[c2]"></a>FS_RSeek</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadPrevByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
</UL>

<P><STRONG><a name="[c3]"></a>FS_Close</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FS_Close &rArr; FS_FlushPageBuffer &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FlushPageBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Close
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegsNoMes
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFilesHandles
</UL>

<P><STRONG><a name="[c4]"></a>FS_Delete</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FS_Delete &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ClusterSetFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFileByName
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FileUseFCS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNameAndType
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegsNoMes
</UL>

<P><STRONG><a name="[c5]"></a>FS_GetFileInfo</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FS_GetFileInfo &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FileUseFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFilesHandles
</UL>

<P><STRONG><a name="[cd]"></a>FS_Eof</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
</UL>

<P><STRONG><a name="[cf]"></a>FS_Pos</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_BReadLn
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadPrevByte
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Pos
</UL>

<P><STRONG><a name="[293]"></a>FS_GetFCSState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>FS_FCS_Show</STRONG> (Thumb, 690 bytes, Stack size 24 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>

<P><STRONG><a name="[c8]"></a>FS_Params_Show</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>

<P><STRONG><a name="[90]"></a>Msg</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Params_Show
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FCS_Show
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbLastBlock
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMoveHorizontalLowSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMoveZLowSpeed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMoveHorizontalLowSpeed
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryZfreq
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryHorizfreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrushWaterHandlerFrz
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopPrg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHorizontalDatFrz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNextTableLine
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetFreq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetPin
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetTimers
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBusy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetVersion
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Close
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Seek
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_SetFInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QAllocTable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToPoint
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingNoAnswer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMS
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMC
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecSetStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCold
</UL>

<P><STRONG><a name="[91]"></a>Dump</STRONG> (Thumb, 56 bytes, Stack size 128 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingNoAnswer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>

<P><STRONG><a name="[c7]"></a>SMsg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SMsg &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Params_Show
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FCS_Show
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
</UL>

<P><STRONG><a name="[cb]"></a>bFS_Read</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bFS_Read &rArr; FS_ReadByte &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
</UL>

<P><STRONG><a name="[cc]"></a>bFS_ReadLn</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Eof
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_RSeek
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextLine
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
</UL>

<P><STRONG><a name="[ce]"></a>FS_ReadPrevByte</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FS_ReadPrevByte &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_RSeek
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
</UL>

<P><STRONG><a name="[d0]"></a>bFS_BReadLn</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bFS_BReadLn &rArr; bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadPrevByte
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_BReadLn
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPrevLine
</UL>

<P><STRONG><a name="[d1]"></a>bFS_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bFS_Write &rArr; FS_WriteByte &rArr; FS_SetNextCluster &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegsNoMes
</UL>

<P><STRONG><a name="[d2]"></a>InitStream</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitStream &rArr; FS_Seek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
</UL>

<P><STRONG><a name="[d3]"></a>bsFS_ReadLn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsFS_ReadLn &rArr; bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[d4]"></a>bsFS_BReadLn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
</UL>

<P><STRONG><a name="[d5]"></a>bsFS_Seek</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsFS_Seek &rArr; FS_Seek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[1a8]"></a>bsFS_Pos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bfs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[dc]"></a>TI_Handler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>Init_TCS</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_TCS
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzTimers
</UL>

<P><STRONG><a name="[d6]"></a>InitTimer</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitTimer &rArr; TIM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
</UL>

<P><STRONG><a name="[db]"></a>InitTimer1</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitTimer1 &rArr; TIM_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigMatch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
</UL>

<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>UART0_IntTransmit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendBuffer
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendBuffer
</UL>

<P><STRONG><a name="[e1]"></a>UART0_IntReceive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART0_IntReceive &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>UART0_IntErr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART0_IRQHandler &rArr; UART0_IntReceive &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntReceive
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>StartDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
</UL>

<P><STRONG><a name="[e4]"></a>UART1_IntTransmit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendBuffer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendBuffer
</UL>

<P><STRONG><a name="[e7]"></a>UART1_IntReceive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART1_IntReceive &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>UART1_IntErr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART1_IRQHandler &rArr; UART1_IntReceive &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>InitFullDupControlSignal</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[ee]"></a>InitHalfDupWaitInterval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[ed]"></a>InitHalfDupControlSignal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[e8]"></a>UARTx_Init</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UARTx_Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHalfDupControlSignal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHalfDupWaitInterval
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFullDupControlSignal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
</UL>

<P><STRONG><a name="[296]"></a>UARTx_PlaceForSend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>UARTx_SendBuffer</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[9e]"></a>UART0_SendBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_SendBuffer &rArr; UART0_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IntTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
</UL>

<P><STRONG><a name="[9d]"></a>UART1_SendBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IntTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
</UL>

<P><STRONG><a name="[15f]"></a>UARTx_ReadyRecvData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Thread
</UL>

<P><STRONG><a name="[f3]"></a>UARTx_RecvBuffer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>

<P><STRONG><a name="[160]"></a>UART0_RecvBuffer</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART0_RecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Thread
</UL>

<P><STRONG><a name="[162]"></a>UART1_RecvBuffer</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART1_RecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
</UL>

<P><STRONG><a name="[163]"></a>WaitAndFreeUartLine</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
</UL>

<P><STRONG><a name="[a7]"></a>CRC8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
</UL>

<P><STRONG><a name="[f4]"></a>sqr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tools.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqr &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[f6]"></a>Round</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tools.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[18b]"></a>abss32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tools.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[297]"></a>SPI_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>SSP0_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[fb]"></a>SSP0_GetStatusFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>

<P><STRONG><a name="[fa]"></a>SSP0_SendByte</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_GetStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBulkErasing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadStatusRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankCapacity
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SendByte
</UL>

<P><STRONG><a name="[ff]"></a>FLASH_BankSelect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBulkErasing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadStatusRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankCapacity
</UL>

<P><STRONG><a name="[100]"></a>FLASH_BankDeselect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBulkErasing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadStatusRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankCapacity
</UL>

<P><STRONG><a name="[fc]"></a>FLASH_SendByte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_ReceiveByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBulkErasing
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadStatusRegister
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankCapacity
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_GetBankCapacity</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_GetBankCapacity &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[101]"></a>FLASH_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Init &rArr; FLASH_GetBankCapacity &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBankCapacity
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
</UL>

<P><STRONG><a name="[298]"></a>FLASH_GetTotalSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>FLASH_ReadStatusRegister</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>

<P><STRONG><a name="[104]"></a>FLASH_WaitWriting</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
</UL>

<P><STRONG><a name="[105]"></a>FLASH_WaitBulkErasing</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WaitBulkErasing &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
</UL>

<P><STRONG><a name="[108]"></a>FLASH_AddressInBank</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
</UL>

<P><STRONG><a name="[107]"></a>FLASH_BankNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SectorErase
</UL>

<P><STRONG><a name="[106]"></a>FLASH_SectorErase</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>

<P><STRONG><a name="[109]"></a>FLASH_BulkErase</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FLASH_BulkErase &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBulkErasing
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
</UL>

<P><STRONG><a name="[299]"></a>FLASH_PageAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>FLASH_WriteByte</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WriteByte &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ClusterSetFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FNTSetSignature1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_ReadByte</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ReadByte &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFileInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFreeClustersNum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeCluster
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFileByName
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeFNT
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[10a]"></a>FLASH_PageWrite</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitWriting
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[af]"></a>FLASH_Write</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FlushPageBuffer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_SetNextCluster
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FNTWriteFullName
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_test
</UL>

<P><STRONG><a name="[10b]"></a>FLASH_BankRead</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankNumber
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>

<P><STRONG><a name="[b4]"></a>FLASH_Read</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankRead
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_AddressInBank
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFileInfo
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_RSeek
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadLn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_ReadByte
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetNextCluster
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_test
</UL>

<P><STRONG><a name="[10c]"></a>FLASH_test</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_GetBankID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_GetBankID &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReceiveByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankDeselect
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BankSelect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
</UL>

<P><STRONG><a name="[29a]"></a>SetPinsErrHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, virtualpins.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>CallErrorHandler</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CallErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinInv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinInv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinDir
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPin
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPin
</UL>

<P><STRONG><a name="[10d]"></a>ClrPin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClrPin &rArr; CallErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPin
</UL>

<P><STRONG><a name="[10f]"></a>SetPin</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPin &rArr; CallErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPin
</UL>

<P><STRONG><a name="[110]"></a>InitPin</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitPin &rArr; SetPin &rArr; CallErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVirtualPins
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultInitPins
</UL>

<P><STRONG><a name="[111]"></a>DefaultInitPins</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, virtualpins.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPin
</UL>

<P><STRONG><a name="[16f]"></a>FormQPinTable</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FormQPinTable
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>QSetPin</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, virtualpins.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSetPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinInv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosY
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnX
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCold
</UL>

<P><STRONG><a name="[1c6]"></a>Q1SetPin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, virtualpins.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[119]"></a>QClrPin</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, virtualpins.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSetPin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPinInv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosY
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnX
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecSetStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStop
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCold
</UL>

<P><STRONG><a name="[1c7]"></a>Q1ClrPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, virtualpins.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[112]"></a>GetPin</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, virtualpins.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>

<P><STRONG><a name="[114]"></a>Drebezg</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Drebezg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>

<P><STRONG><a name="[113]"></a>QGetPin</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QGetPin &rArr; Drebezg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drebezg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsToRegs
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorZHandler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorYHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorXHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetPin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
</UL>

<P><STRONG><a name="[29b]"></a>Q1GetPin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, virtualpins.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>ClrGetPin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, virtualpins.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>GetPinDir</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, virtualpins.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>

<P><STRONG><a name="[116]"></a>GetPinInv</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, virtualpins.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>

<P><STRONG><a name="[117]"></a>SetPinInv</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, virtualpins.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallErrorHandler
</UL>

<P><STRONG><a name="[11a]"></a>InitVirtualPins</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, virtualpins.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitVirtualPins &rArr; InitPin &rArr; SetPin &rArr; CallErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
</UL>

<P><STRONG><a name="[11b]"></a>InitQueue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11c]"></a>ProcessingAnswer</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ProcessingAnswer &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPAnswer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
</UL>

<P><STRONG><a name="[11e]"></a>ProcessingNoAnswer</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ProcessingNoAnswer &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
</UL>

<P><STRONG><a name="[121]"></a>DeleteCurrentItem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
</UL>

<P><STRONG><a name="[120]"></a>quPackCount</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quInsPack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormQueue
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quFixAnswer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
</UL>

<P><STRONG><a name="[11f]"></a>QueueProcessing</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = QueueProcessing &rArr; ProcessingAnswer &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quPackCount
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteCurrentItem
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingNoAnswer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>quAddPack</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quPackCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quInsPack
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbPackToQueue
</UL>

<P><STRONG><a name="[99]"></a>quInsPack</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quPackCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsPackToQueue
</UL>

<P><STRONG><a name="[122]"></a>quFixAnswer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = quFixAnswer
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quPackCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler1
</UL>

<P><STRONG><a name="[123]"></a>DataToU1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = DataToU1 &rArr; mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsPackToQueue
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[124]"></a>RunBootLoader</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RunBootLoader
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[127]"></a>ReadRegs</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadRegs &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbWordToPackNoSwap
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[128]"></a>EnableWrite</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EnableWrite &rArr; Cross
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
</UL>

<P><STRONG><a name="[12b]"></a>_memcpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
</UL>

<P><STRONG><a name="[12a]"></a>WriteRegs</STRONG> (Thumb, 140 bytes, Stack size 280 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = WriteRegs &rArr; EnableWrite &rArr; Cross
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWrite
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[12c]"></a>GoToPoint</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GoToPoint &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[12d]"></a>LSSendProc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LSSendProc &rArr; FISetFreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIUnlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetDir
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[133]"></a>QAllocTable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = QAllocTable &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[134]"></a>pFS_FInfo</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = pFS_FInfo &rArr; FS_GetFileInfo &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFileInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[137]"></a>pFS_SetFInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = pFS_SetFInfo &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[138]"></a>pFS_Delete</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = pFS_Delete &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[139]"></a>pFS_Create</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pFS_Create &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13a]"></a>pFS_Rewrite</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pFS_Rewrite &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13b]"></a>pFS_RewriteHandle</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pFS_RewriteHandle &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13c]"></a>pFS_Append</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pFS_Append &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Append
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13d]"></a>pFS_Reset</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pFS_Reset &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13e]"></a>pFS_Write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pFS_Write &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[13f]"></a>bFS_WriteLn</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bFS_WriteLn &rArr; FS_WriteByte &rArr; FS_SetNextCluster &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
</UL>

<P><STRONG><a name="[140]"></a>pFS_WriteLn</STRONG> (Thumb, 74 bytes, Stack size 272 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pFS_WriteLn &rArr; bFS_WriteLn &rArr; FS_WriteByte &rArr; FS_SetNextCluster &rArr; FLASH_Write &rArr; FLASH_PageWrite &rArr; FLASH_WaitWriting &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_WriteLn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[141]"></a>pFS_Read</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pFS_Read &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[142]"></a>pFS_ReadLn</STRONG> (Thumb, 110 bytes, Stack size 272 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = pFS_ReadLn &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[143]"></a>pFS_BReadLn</STRONG> (Thumb, 554 bytes, Stack size 272 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = pFS_BReadLn &rArr; bFS_BReadLn &rArr; bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[144]"></a>pFS_Pos</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pFS_Pos &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[145]"></a>pFS_Seek</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pFS_Seek &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Seek
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[146]"></a>pFS_Close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pFS_Close &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[147]"></a>pCreateRegsBin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = pCreateRegsBin &rArr; SaveRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[149]"></a>pApplyRegsBin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pApplyRegsBin &rArr; LoadFrzBackupRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVirtualPins
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[14d]"></a>pReset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pReset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_jump
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[14e]"></a>pFl_GetUsing</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pFl_GetUsing &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeCluster
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FindFreeFNT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[14f]"></a>pFl_BulkErase</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pFl_BulkErase &rArr; FLASH_BulkErase &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BulkErase
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[150]"></a>pFl_GetTimeouts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, u0packets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>

<P><STRONG><a name="[151]"></a>pFl_SetTimeouts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, u0packets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>

<P><STRONG><a name="[152]"></a>pFl_EraseSector</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, u0packets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>

<P><STRONG><a name="[153]"></a>pGetRegInfo</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pGetRegInfo &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[154]"></a>pGetVersion</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pGetVersion &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[155]"></a>pGetBusy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pGetBusy &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[156]"></a>pGetBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pGetBlock &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[157]"></a>pGetTimers</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pGetTimers &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[158]"></a>pInitZCorr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = pInitZCorr &rArr; InitZComp &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[15a]"></a>pSetPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pSetPin &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[15b]"></a>pGetPin</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pGetPin &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbFrzPackHandler0
</UL>

<P><STRONG><a name="[15c]"></a>SendAddPointPack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, u0packets.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>

<P><STRONG><a name="[15d]"></a>SendAddPointPackFrz</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendAddPointPackFrz &rArr; mbSendPack &rArr; UART1_SendBuffer &rArr; UART1_IntTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbByteToPack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
</UL>

<P><STRONG><a name="[1c2]"></a>FixPointPackFrz</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, u0packets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
</UL>

<P><STRONG><a name="[34]"></a>mbFrzPackHandler0</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = mbFrzPackHandler0 &rArr; pFS_BReadLn &rArr; bFS_BReadLn &rArr; bFS_ReadLn &rArr; FS_RSeek &rArr; FS_GetNextCluster &rArr; FLASH_Read &rArr; FLASH_BankRead &rArr; FLASH_ReceiveByte &rArr; SSP0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetPin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pSetPin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pInitZCorr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetTimers
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetBusy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetVersion
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_BulkErase
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFl_GetUsing
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pReset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pCreateRegsBin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Close
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Seek
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Pos
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_RewriteHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_SetFInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QAllocTable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegs
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunBootLoader
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataToU1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>UART0_Thread</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, u0packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART0_Thread &rArr; mbIdle &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RecvBuffer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ReadyRecvData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>mbFrzPackHandler1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, u1packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbFrzPackHandler1 &rArr; quFixAnswer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quFixAnswer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>UART1_Thread</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, u1packets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UART1_Thread &rArr; mbIdle &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitAndFreeUartLine
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_RecvBuffer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ReadyRecvData
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbRecvBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>PinsErrorHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>Test_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>OutNextTableLine</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = OutNextTableLine &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29f]"></a>lpc1768_mpu_config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>main</STRONG> (Thumb, 698 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = main &rArr; RunPrgFrz &rArr; RecoverBlock &rArr; TranslatePrg &rArr; CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMsg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSetHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSetSpeed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMoveHorizontalLowSpeed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMoveZLowSpeed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMoveHorizontalLowSpeed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQExBlks
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrushWaterHandlerFrz
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFrzRegisters
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunHorizontalDatFrz
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPlatform
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzTimers
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormQueue
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsToRegs
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNextTableLine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Thread
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRegsFromFile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFrzBackupRegs
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Thread
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueProcessing
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVirtualPins
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormQPinTable
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17c]"></a>CheckPrgFile</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNextLine
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPrevLine
</UL>

<P><STRONG><a name="[16b]"></a>InitPrgStreams</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = InitPrgStreams &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStream
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>ReadNextLine</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_ReadLn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
</UL>

<P><STRONG><a name="[17e]"></a>ReadPrevLine</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_BReadLn
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPrgFile
</UL>

<P><STRONG><a name="[17f]"></a>TryStrToFloat</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TryStrToFloat &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackApplyCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyCmd
</UL>

<P><STRONG><a name="[19d]"></a>IsCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
</UL>

<P><STRONG><a name="[19c]"></a>IsDigits</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
</UL>

<P><STRONG><a name="[183]"></a>ApplyCmd</STRONG> (Thumb, 584 bytes, Stack size 24 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ApplyCmd &rArr; TryStrToFloat &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
</UL>

<P><STRONG><a name="[186]"></a>InitFirstBlockFrz</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitFirstBlockFrz &rArr; XYZImpToXYZ &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBlockByPrev
</UL>

<P><STRONG><a name="[2a0]"></a>InitNextBlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>InitBlockByPrev</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitBlockByPrev &rArr; InitFirstBlockFrz &rArr; XYZImpToXYZ &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFirstBlockFrz
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>

<P><STRONG><a name="[189]"></a>CalcBlockFrz</STRONG> (Thumb, 792 bytes, Stack size 32 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CalcBlockFrz &rArr; XYZToXYZImpZcomp &rArr; ZComp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abss32
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>

<P><STRONG><a name="[18f]"></a>CalcBlock</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[190]"></a>BackCalcBlock</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[191]"></a>G0Handler</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = G0Handler &rArr; XYZToXYZImpZcomp &rArr; ZComp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGoFrz
</UL>

<P><STRONG><a name="[192]"></a>SetFeed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetFeed &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[194]"></a>SetSpindle</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SetSpindle &rArr; FISetFreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetFreq
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetDir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[195]"></a>SetCold</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetCold &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[1b4]"></a>SetPause</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[2a1]"></a>RecSetPause</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>EndPause</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[196]"></a>SetGoFrz</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetGoFrz &rArr; G0Handler &rArr; XYZToXYZImpZcomp &rArr; ZComp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G0Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[2a2]"></a>RecSetGo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>EndGo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>SetStop</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SetStop &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[198]"></a>RecSetStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
</UL>

<P><STRONG><a name="[2a4]"></a>EndStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>ErrToMessage</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[19a]"></a>BackApplyCmd</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[19b]"></a>LineToBlock</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyCmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDigits
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>

<P><STRONG><a name="[19e]"></a>TranslateLineToBlock</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBlockByPrev
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[169]"></a>InitQExBlks</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitQExBlks &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>qbCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1a0]"></a>qbIsPlace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbAddBlock
</UL>

<P><STRONG><a name="[19f]"></a>qbAddBlock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qbAddBlock &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbIsPlace
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
</UL>

<P><STRONG><a name="[1a1]"></a>qbExtrBlock</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, handlers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[219]"></a>qbFirstIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[21c]"></a>qbIncIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[21a]"></a>qbLastFreeIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[21b]"></a>qbGetBlockIndex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1b7]"></a>qbDelFirst</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qbDelFirst
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1b1]"></a>qbFirstBlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[1a2]"></a>qbLastBlock</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = qbLastBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1b2]"></a>qbSecondBlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[1ab]"></a>qbPrevPrgBlock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
</UL>

<P><STRONG><a name="[1a9]"></a>CheckG1Only</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[1ad]"></a>CheckG1FOnly</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
</UL>

<P><STRONG><a name="[1a3]"></a>CheckAngle</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CheckAngle &rArr; acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
</UL>

<P><STRONG><a name="[1a7]"></a>CheckNextLine</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_Pos
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_Seek
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckG1Only
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
</UL>

<P><STRONG><a name="[1aa]"></a>TranslatePrgLine</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TranslatePrgLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbPrevPrgBlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbAddBlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbIsPlace
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1ac]"></a>TranslatePrg</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = TranslatePrg &rArr; CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Pos
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Eof
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckG1FOnly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckG1Only
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbPrevPrgBlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbAddBlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbIsPlace
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
</UL>

<P><STRONG><a name="[1ae]"></a>SearchStopPoint</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SearchStopPoint &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsFS_ReadLn
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckG1Only
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
</UL>

<P><STRONG><a name="[172]"></a>CrushWaterHandlerFrz</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CrushWaterHandlerFrz &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>sG0HandlerFrz</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sG0HandlerFrz
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
</UL>

<P><STRONG><a name="[1b6]"></a>SaveFilePos</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, handlers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[1af]"></a>RunNextCadrFrzMain</STRONG> (Thumb, 774 bytes, Stack size 32 bytes, handlers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = RunNextCadrFrzMain &rArr; SetSpindle &rArr; FISetFreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbDelFirst
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFilePos
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sG0HandlerFrz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbSecondBlock
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbFirstBlock
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGoFrz
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndPause
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPause
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCold
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
</UL>

<P><STRONG><a name="[1b8]"></a>ZComp</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ZComp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
</UL>

<P><STRONG><a name="[1b9]"></a>dXYZImpTodXYZ</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dXYZImpTodXYZ &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
</UL>

<P><STRONG><a name="[187]"></a>XYZImpToXYZ</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XYZImpToXYZ &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFirstBlockFrz
</UL>

<P><STRONG><a name="[159]"></a>InitZComp</STRONG> (Thumb, 1180 bytes, Stack size 80 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = InitZComp &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pInitZCorr
</UL>

<P><STRONG><a name="[1bb]"></a>ShowMC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>

<P><STRONG><a name="[1bc]"></a>ShowMS</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, motors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>

<P><STRONG><a name="[1bd]"></a>InitMotorStructF</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitMotorStructF &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
</UL>

<P><STRONG><a name="[1be]"></a>InitMotorStructALF</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitMotorStructALF &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
</UL>

<P><STRONG><a name="[210]"></a>UpZ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpZ
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
</UL>

<P><STRONG><a name="[212]"></a>BackHorizontal</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BackHorizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
</UL>

<P><STRONG><a name="[1bf]"></a>RecoveryZfreq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RecoveryZfreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
</UL>

<P><STRONG><a name="[1c0]"></a>RecoveryHorizfreq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RecoveryHorizfreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
</UL>

<P><STRONG><a name="[174]"></a>StartMoveZLowSpeed</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = StartMoveZLowSpeed &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>StartMoveHorizontalLowSpeed</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = StartMoveHorizontalLowSpeed &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>StopMoveHorizontalLowSpeed</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StopMoveHorizontalLowSpeed &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>AddPointFrz</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = AddPointFrz &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixPointPackFrz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddPointPackFrz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPointFrz
</UL>

<P><STRONG><a name="[1c3]"></a>HTCorr</STRONG> (Thumb, 844 bytes, Stack size 72 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HTCorr &rArr; InitZComp &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
</UL>

<P><STRONG><a name="[1c4]"></a>XYZToXYZImp</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, motors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[18a]"></a>XYZToXYZImpZcomp</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XYZToXYZImpZcomp &rArr; ZComp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G0Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[1c8]"></a>Brezenheim</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Brezenheim
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[1c5]"></a>DecItCount</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, motors.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[3f]"></a>FMove_HandlerQuick</STRONG> (Thumb, 2130 bytes, Stack size 80 bytes, motors.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FMove_HandlerQuick &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbDelFirst
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1ClrPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1SetPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brezenheim
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFilePos
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbFirstBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitFrzTimers)
</UL>
<P><STRONG><a name="[2a5]"></a>FILoadConf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freqinvr.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>FIStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, freqinvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIStop
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrushWaterHandlerFrz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosY
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecSetStop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
</UL>

<P><STRONG><a name="[16c]"></a>FIInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, freqinvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIInit &rArr; FIStop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>FIUnlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freqinvr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
</UL>

<P><STRONG><a name="[12f]"></a>FISetFreq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, freqinvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FISetFreq &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
</UL>

<P><STRONG><a name="[130]"></a>FISetDir</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freqinvr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
</UL>

<P><STRONG><a name="[131]"></a>FIStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, freqinvr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIStart &rArr; FIStop
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSSendProc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
</UL>

<P><STRONG><a name="[2a6]"></a>FIQuery</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freqinvr.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>FIAnswer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freqinvr.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>ROHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regs.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>pCurCadrHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regs.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>pCurCadrHandleFrz</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>pDrDelayHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = pDrDelayHandle &rArr; mbInsCmd485 &rArr; mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>pDCTimeHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = pDCTimeHandle &rArr; mbInsCmd485 &rArr; mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>pPercVminHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = pPercVminHandle &rArr; mbInsCmd485 &rArr; mbInsPackToQueue &rArr; quInsPack &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbInsCmd485
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1cd]"></a>PinInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross
</UL>

<P><STRONG><a name="[129]"></a>Cross</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cross
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableWrite
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
</UL>

<P><STRONG><a name="[2aa]"></a>SetBase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regs.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>SetNewGroup</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, regs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFrzRegisters
</UL>

<P><STRONG><a name="[1ce]"></a>SetAddr</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SetAddr &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cross
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFrzRegisters
</UL>

<P><STRONG><a name="[14a]"></a>LoadRegsFromFile</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LoadRegsFromFile &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
</UL>

<P><STRONG><a name="[1cf]"></a>CloseFilesHandles</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFileInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
</UL>

<P><STRONG><a name="[148]"></a>SaveRegs</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SaveRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCheckPointFrz
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pCreateRegsBin
</UL>

<P><STRONG><a name="[1d0]"></a>SaveRegsNoMes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, regs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bFS_Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Rewrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
</UL>

<P><STRONG><a name="[1d2]"></a>XPositOnHandle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>YPositOnHandle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d4]"></a>ZPositOnHandle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>pByPassHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d6]"></a>pHorizDatHandle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d7]"></a>PrgRunHandleFrz</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[1d9]"></a>mvcVHandleFrz</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, regs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> regs.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>AllocFrzRegisters</STRONG> (Thumb, 4432 bytes, Stack size 16 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = AllocFrzRegisters &rArr; SetAddr &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNewGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>InitFrzRegisters</STRONG> (Thumb, 1144 bytes, Stack size 24 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitFrzRegisters &rArr; InitMotorStructF &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormQPinTable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorStructF
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>InitFrzRegsAfterLoad</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitFrzRegsAfterLoad &rArr; InitMotorStructALF &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorStructALF
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
</UL>

<P><STRONG><a name="[14c]"></a>LoadFrzBackupRegs</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, regs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LoadFrzBackupRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Close
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pApplyRegsBin
</UL>

<P><STRONG><a name="[16d]"></a>KPInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = KPInit &rArr; mbCmd485 &rArr; mbPackToQueue &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCmd485
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>KPQuery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = KPQuery &rArr; mbCmd485 &rArr; mbPackToQueue &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbCmd485
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormQueue
</UL>

<P><STRONG><a name="[11d]"></a>KPAnswer</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, keypad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KPAnswer
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
</UL>

<P><STRONG><a name="[3c]"></a>MotorX_Handler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, motor_x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = MotorX_Handler &rArr; PositX &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1ClrPin
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q1SetPin
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitFrzTimers)
</UL>
<P><STRONG><a name="[3d]"></a>MotorY_Handler</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, motor_y.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MotorY_Handler &rArr; PositY &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosY
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitFrzTimers)
</UL>
<P><STRONG><a name="[3e]"></a>MotorZ_Handler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, motor_z.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = MotorZ_Handler &rArr; MovePosZ &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnZ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitFrzTimers)
</UL>
<P><STRONG><a name="[1ca]"></a>PWM_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIInit
</UL>

<P><STRONG><a name="[1cc]"></a>PWM_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetFreq
</UL>

<P><STRONG><a name="[2ab]"></a>PWM_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>PWM_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FISetFreq
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositZ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosZ
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnZ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositY
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosY
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositX
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MovePosX
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBtnX
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorStructALF
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMotorStructF
</UL>

<P><STRONG><a name="[2ac]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>

<P><STRONG><a name="[ca]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrToMessage
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1f5]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[4d]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[53]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5b]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[47]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1ea]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b8]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Assign
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNextTableLine
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrToMessage
</UL>

<P><STRONG><a name="[a4]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_GetFullName
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_StrSymbolsValid
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutNextTableLine
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quInsPack
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quAddPack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSendPack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbBufferToPack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbRecvBuffer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPAnswer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quFixAnswer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2ad]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbExtrBlock
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbAddBlock
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbIdle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingNoAnswer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessingAnswer
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
</UL>

<P><STRONG><a name="[1ee]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2b1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQExBlks
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFrzRegisters
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetRegInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_BReadLn
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_ReadLn
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_WriteLn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Append
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Rewrite
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_Delete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pFS_FInfo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNextLine
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslateLineToBlock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineToBlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBlockByPrev
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFirstBlockFrz
</UL>

<P><STRONG><a name="[2b2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[a9]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_FileUseFCS
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2b4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1f2]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1e8]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[45]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2b7]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[39]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[55]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[201]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[51]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[59]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[65]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2b8]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[202]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[5f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[203]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[61]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[63]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1f7]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[200]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[2ba]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2bb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[204]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[6f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[73]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2bc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[209]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[208]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[20a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[20b]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1f9]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1fa]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[20d]"></a>BtnsMotorXHandler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, main.o(i.BtnsMotorXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BtnsMotorXHandler &rArr; QGetPin &rArr; Drebezg
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsToRegs
</UL>

<P><STRONG><a name="[20e]"></a>BtnsMotorYHandler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, main.o(i.BtnsMotorYHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BtnsMotorYHandler &rArr; QGetPin &rArr; Drebezg
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsToRegs
</UL>

<P><STRONG><a name="[20f]"></a>BtnsMotorZHandler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, main.o(i.BtnsMotorZHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BtnsMotorZHandler &rArr; QGetPin &rArr; Drebezg
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonsToRegs
</UL>

<P><STRONG><a name="[171]"></a>ButtonsToRegs</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(i.ButtonsToRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ButtonsToRegs &rArr; BtnsMotorZHandler &rArr; QGetPin &rArr; Drebezg
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorZHandler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorYHandler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtnsMotorXHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>CheckPointFrz</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.CheckPointFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = CheckPointFrz &rArr; AddPointFrz &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpZ
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryZfreq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>FormQueue</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(i.FormQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = FormQueue &rArr; KPQuery &rArr; mbCmd485 &rArr; mbPackToQueue &rArr; quAddPack &rArr; Dump &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KPQuery
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quPackCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>HTCheckPointFrz</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.HTCheckPointFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HTCheckPointFrz &rArr; HTCorr &rArr; InitZComp &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpZ
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryZfreq
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>HorizontalCheckPointFrz</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, main.o(i.HorizontalCheckPointFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HorizontalCheckPointFrz &rArr; HorizontalDat &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryHorizfreq
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackHorizontal
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[211]"></a>HorizontalDat</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, main.o(i.HorizontalDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HorizontalDat &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalCheckPointFrz
</UL>

<P><STRONG><a name="[168]"></a>InitFrzTimers</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(i.InitFrzTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitFrzTimers &rArr; Init_TCS
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_TCS
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>InitPlatform</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, main.o(i.InitPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = InitPlatform &rArr; UARTx_Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1de]"></a>MoveBtnX</STRONG> (Thumb, 1194 bytes, Stack size 32 bytes, motor_x.o(i.MoveBtnX))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MoveBtnX &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
</UL>

<P><STRONG><a name="[1e1]"></a>MoveBtnY</STRONG> (Thumb, 1208 bytes, Stack size 32 bytes, motor_y.o(i.MoveBtnY))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MoveBtnY &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>MoveBtnZ</STRONG> (Thumb, 1368 bytes, Stack size 32 bytes, motor_z.o(i.MoveBtnZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MoveBtnZ &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
</UL>

<P><STRONG><a name="[173]"></a>MoveByRegs</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, main.o(i.MoveByRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MoveByRegs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dc]"></a>MovePosX</STRONG> (Thumb, 1084 bytes, Stack size 40 bytes, motor_x.o(i.MovePosX))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MovePosX &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
</UL>

<P><STRONG><a name="[1df]"></a>MovePosY</STRONG> (Thumb, 1094 bytes, Stack size 40 bytes, motor_y.o(i.MovePosY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MovePosY &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
</UL>

<P><STRONG><a name="[1e2]"></a>MovePosZ</STRONG> (Thumb, 876 bytes, Stack size 40 bytes, motor_z.o(i.MovePosZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MovePosZ &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
</UL>

<P><STRONG><a name="[1dd]"></a>PositX</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, motor_x.o(i.PositX))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PositX &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorX_Handler
</UL>

<P><STRONG><a name="[1e0]"></a>PositY</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, motor_y.o(i.PositY))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PositY &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorY_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>PositZ</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, motor_z.o(i.PositZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PositZ &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QClrPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSetPin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorZ_Handler
</UL>

<P><STRONG><a name="[217]"></a>RecoverBlock</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, main.o(i.RecoverBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RecoverBlock &rArr; TranslatePrg &rArr; CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbLastFreeIndex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbLastBlock
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbIncIndex
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbGetBlockIndex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbFirstIndex
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbDelFirst
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbCount
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrgLine
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQExBlks
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
</UL>

<P><STRONG><a name="[178]"></a>RunHorizontalDatFrz</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, main.o(i.RunHorizontalDatFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RunHorizontalDatFrz &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>RunPrgFrz</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, main.o(i.RunPrgFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = RunPrgFrz &rArr; RecoverBlock &rArr; TranslatePrg &rArr; CheckNextLine &rArr; TranslateLineToBlock &rArr; LineToBlock &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qbCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranslatePrg
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQExBlks
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPrgStreams
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopPrg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>StopPrg</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, main.o(i.StopPrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = StopPrg &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunPrgFrz
</UL>

<P><STRONG><a name="[177]"></a>ZZCheckPointFrz</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.ZZCheckPointFrz))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ZZCheckPointFrz &rArr; ZZeroDat &rArr; SaveRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpZ
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoveryZfreq
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QGetPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21e]"></a>ZZeroDat</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.ZZeroDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ZZeroDat &rArr; SaveRegs &rArr; Msg &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRegs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZCheckPointFrz
</UL>

<P><STRONG><a name="[1fd]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[21f]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[220]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[222]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[1eb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1a4]"></a>acos</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, acos.o(i.acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
</UL>

<P><STRONG><a name="[185]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceil &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackApplyCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyCmd
</UL>

<P><STRONG><a name="[18d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[68]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[227]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[22a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22d]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[233]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSetSpeed
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[22f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[230]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSetSpeed
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackApplyCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyCmd
</UL>

<P><STRONG><a name="[231]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
</UL>

<P><STRONG><a name="[2bf]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbSetSpeed
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
</UL>

<P><STRONG><a name="[2c0]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[215]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
</UL>

<P><STRONG><a name="[2c1]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[2c2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[232]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[236]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[234]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[229]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[22c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[235]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[237]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[226]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[239]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecoverBlock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackApplyCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyCmd
</UL>

<P><STRONG><a name="[23a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[23c]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[240]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecItCount
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeed
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[23e]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1ba]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
</UL>

<P><STRONG><a name="[23f]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoToPoint
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpindle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[241]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[2c3]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[180]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecItCount
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[2c4]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
</UL>

<P><STRONG><a name="[242]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[245]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegisters
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HorizontalDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFrzRegsAfterLoad
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecItCount
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dXYZImpTodXYZ
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZToXYZImpZcomp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYZImpToXYZ
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackCalcBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TryStrToFloat
</UL>

<P><STRONG><a name="[243]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[23b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[228]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecItCount
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeed
</UL>

<P><STRONG><a name="[244]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Round
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecItCount
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackCalcBlock
</UL>

<P><STRONG><a name="[246]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchStopPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunNextCadrFrzMain
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTCorr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMove_HandlerQuick
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPointFrz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZeroDat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitZComp
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZComp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAngle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBlockFrz
</UL>

<P><STRONG><a name="[248]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[216]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveByRegs
</UL>

<P><STRONG><a name="[249]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[49]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[22e]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[221]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[24a]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>uart_set_divisors</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, lpc17xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[d8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[d9]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer1
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[f0]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[f1]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Init
</UL>

<P><STRONG><a name="[125]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, u0packets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pReset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunBootLoader
</UL>

<P><STRONG><a name="[238]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[22b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[247]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[23d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[1f6]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

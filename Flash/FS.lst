L 1 "Main\FS.c"
N
N//=============================================================================
N//
N//                            Файловая система
N//
N//=============================================================================
N
N
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 192842 $
N * Checkin $Date: 2015-04-28 10:58:32 +0100 (Tue, 28 Apr 2015) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060002
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 10 "Main\FS.c" 2
N//#include <stdlib.h>
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060002
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 12 "Main\FS.c" 2
N
N#include "Defs.h"
L 1 ".\UCNC\Defs.h" 1
N/*****************************************************************/
N//
N//  МОДУЛЬ ОБЩИХ ОПРЕДЕЛЕНИЙ
N//
N/*****************************************************************/
N
N#ifndef __DEFS_H_
N#define __DEFS_H_
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 11 ".\UCNC\Defs.h" 2
N
N#define TRUE 	1
N#define FALSE 	0
N
N//--------------------------------------------------
N// Короткие имена стандартных типов
N//--------------------------------------------------
Ntypedef int8_t   s8;
Ntypedef int16_t  s16;
Ntypedef int32_t  s32;
Ntypedef int64_t  s64;
Ntypedef uint8_t  u8;
Ntypedef uint16_t u16;
Ntypedef uint32_t u32;
Ntypedef uint64_t u64;
Ntypedef u8 bool;
Ntypedef u8 BOOL;
N
N//#define VERSION 0x01020124
N#define VERSION 0x01020124
N// отладка функции Move_Handler
N//#define MOVE_D
N// пила
N// отключение загрузки параметров с флэш
N//#define __NOT_LOAD_PARAMS__
N// пила
N//#define __SAW__
N// фрезер
N#define __FREZER__
N#endif // __DEFS_H_
L 14 "Main\FS.c" 2
N#include "Tools.h"
L 1 ".\UCNC\Tools.h" 1
N
N//****************************************************************************
N//
N//                            Инструменты
N//
N//****************************************************************************
N
N
N#ifndef __TOOLS_H_
N#define __TOOLS_H_
N#include "Defs.h"
N
N#define OUTF1T(a) (int)((a)*1000)
N#define OUTF1H(a) (int)((a)*100)
N#define OUTF1D(a) (int)((a)*10)
N#define OUTF1(a) (int)(a)
N#define LPMIN 1
N// ограничения
N//#define CLPON(T,LPOFF) ( T > (LPOFF+LPMIN) ? (T-LPOFF) : LPMIN)
N//#define CLPOFF(T,LPON) ( T > (LPON+LPMIN) ? (T-LPON) : LPMIN)
N// эксперименты
N#define LPKORR 0
N#define CLPOFF(T,LPON) ( T > (LPON+LPMIN+LPKORR) ? (T-LPON-LPKORR) : LPMIN)
N//#define CHECKLPON(LPON) {if (LPON < LPMIN) LPON=LPMIN;}
N#define CHECKLPOFF(LPOFF) {if (LPOFF < LPMIN) LPOFF=LPMIN;}
N// эксперименты
N//#define CLPONY(T,LPOFF) (1)
N//#define CHECKLPON(LPON) (LPON)
N// без ограничений
N
N// Вычислить контрольную сумму CRC8
Nu8 CRC8(u8 *ptr, u8 crc, u16 len);
N
Nfloat sqr(float x);
Nint Round(float f);
Ns32 abss32(s32 a);
N
N#endif // __TOOLS_H_
N
L 15 "Main\FS.c" 2
N#include "FS.h"
L 1 "Main\FS.h" 1
N
N//****************************************************************************
N//
N//                            Файловая система
N//
N//****************************************************************************
N
N
N
N#ifndef __FS_H_
N#define __FS_H_
N
N
N#include "Defs.h"
N
N#define FS_RESULT_OK				0
N#define EFS_FLASH_NOT_INITED		-1
N#define EFS_FS_NOT_INITED 			-2
N#define EFS_INVALID_FILE_NAME		-3
N#define EFS_FILE_IS_USED			-4
N#define EFS_NO_FREE_FCS				-5
N#define EFS_INVALID_FSC				-6
N#define EFS_FCS_NOT_OPENED			-7
N#define EFS_FILE_NAME_IS_EXIST		-8
N#define EFS_NO_FREE_FNT				-9
N#define EFS_NO_FREE_SPACE			-10
N#define EFS_FILE_NOT_FOUND			-11
N#define EFS_WRITE_DISABLED			-12
N#define EFS_FCS_NOT_OPENED_WRITE	-13
N#define EFS_FCS_NOT_OPENED_READ		-14
N#define EFS_NO_DATA					-15
N#define EFS_INVALID_POSITION		-16 
N#define EFS_FILE_IS_CLOSED			-17 
N#define EFS_UNKNOWN_FILE_STATE		-18 
N#define EFS_FILE_INFO_NOT_FOUND		-19
N#define FS_NOT_EOF	 				-20
N#define FS_EOF						-21
N#define FS_BOF						-22
N
N// Тип файловой переменной
Ntypedef s8 tFile;
N
Nextern u16 CATRecordsNumber;															// Кол-во записей в таблице CAT
Nextern u32 FNTRecordsNumber;															// Кол-во записей в таблице FNT
N
N// Инициализировать файловую систему
Ns8 FS_Init(void);
N
N// Назначить файловую переменную файлу
Ns8 FS_Assign(const u8 *file_name, tFile * f);
N// >= 0 - номер описателя
N// "Файловая система не инициализирована" (ошибка -1)
N// "Неверный формат имени файла" (ошибка -3)
N// "Файл с заданным именем используется" (ошибка -4)
N// "Нет свободной структуры FCS" (ошибка -2)
N
N// Создать новый файл для записи
Ns8 FS_Rewrite(tFile f);
N// 0 - всё хорошо
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта" (ошибка -1)
N// "Файл с заданным именем уже существует" (ошибка -2)
N// "Нет свободной записи FNT" (ошибка -3)
N// "Недостаточно места" (ошибка -4)
N
N// Открыть файл для добавления
Ns8 FS_Append(tFile f);
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта" (ошибка -1)
N// "Файл с заданным именем не найден" (ошибка -2)
N// "Нет свободной записи FNT" (ошибка -3)
N// Открыть файл для чтения
Ns8 FS_Reset(tFile f);
N// 0 - всё хорошо
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта" (ошибка -1)
N// "Файл с заданным именем не найден" (ошибка -2)
N
N// Записать байт в открытый файл
Ns8 FS_WriteByte(tFile f, u8 data);
N// 0 - байт записан
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта для записи файла" (ошибка -1)
N// "Недостаточно места для последующей записи" (ошибка -2)
N// "Файл пуст" (ошибка -2)
N
N// Прочитать байт из открытого файла
Ns8 FS_ReadByte(tFile f, u8 *data);
N// 0 - байт прочитан
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта для чтения файла" (ошибка -1)
N
N// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N// Записать буфер в открытый файл
Ns32 FS_Write(tFile f, const u8 *buffer, u32 size);
N
N// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N// Прочитать буфер из открытого файла
Ns32 FS_Read(tFile f, u8 *buffer, u32 size);
N
N// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N// Записать строку в открытый файл
Ns32 FS_WriteLn(tFile f, const u8 *string);
N
N// Прочитать строку из открытого файла в прямом направлении
Ns8 FS_ReadLn(tFile f, u8 *string, u32 max_size);
N
N// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N// Прочитать строку из открытого файла в обратном направлении
Ns8 FS_ReadPrevLn(tFile f, u8 *string, u32 max_size);
N
N// Количество непрочитанных байт в открытом для чтения файле
Ns32 FS_RemainSize(tFile f);
N
N// Перейти в заданную позицию в открытом для чтения файле
Ns8 FS_Seek(tFile f, u32 position);
N// 0 - переход выполнен
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта для чтения файла" (ошибка -1)
N// "Заданная позиция не существует" (ошибка -2)
N
N// Сместить текущую позицию в открытом для чтения файле
Ns8 FS_RSeek(tFile fcs_num, s32 disp);
N//"Файловая переменная не назначена файлу" (ошибка -9)
N//"Структура FCS не открыта для чтения файла" (ошибка -1)
N// Закрыть файл
N
Ns8 FS_Close(tFile *f);
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта" (ошибка -1)
N// "Неизвестное состояние структуры FCS" (ошибка -2)
N
N// Удалить файл
Ns8 FS_Delete(const u8 *file_name);
N// 0 - файл удален
N// "Файловая система не инициализирована" (ошибка -1)
N// "Неверный формат имени файла" (ошибка -3)
N// "Файл с заданным именем используется" (ошибка -4)
N// "Файл с заданным именем не найден" (ошибка -2)
N
N// Получить информацию о файле
Ns8 FS_GetFileInfo(u32 * start_fnt_num, u8 *name, u8 *type, u8 *attr, u32 *size, tFile *f);
N// возвращается ближайший к start_fnt_num  fnt_num  
N// 0xFFFFFFFF - очередной не найден
N
N//	Проверить конец открытого для чтения файла
Ns8 FS_Eof(tFile f);
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта для чтения файла" (ошибка -1)
N// Получить текущую позицию открытого для чтения файла
Ns8 FS_Pos(tFile fcs_num,s32 * pos);
N// "Файловая переменная не назначена файлу" (ошибка -9)
N// "Структура FCS не открыта для чтения файла" (ошибка -1)
N//-----------------------------------------------------------------------------
N//			ПОЛУЧИТЬ РАЗМЕР ОТКРЫТОГО ФАЙЛА
N//-----------------------------------------------------------------------------
Ns32 FS_Size(tFile f);
N// НЕ НАДО ?
N//-----------------------------------------------------------------------------
N//			ПОЛУЧИТЬ КОЛИЧЕСТВО ФАЙЛОВ
N//-----------------------------------------------------------------------------
Ns32 FS_FilesCount(void);
N
N//-----------------------------------------------------------------------------
N//			ПЕРЕИМЕНОВАТЬ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns8 FS_Rename(const u8 *old_file_name, const u8 *new_file_name);
N
N//-----------------------------------------------------------------------------
N//			ЗАДАТЬ АТРИБУТЫ ФАЙЛА
N//-----------------------------------------------------------------------------
Ns8 FS_SetAttr(const u8 *file_name, u8 attr);
N
N
N//
N//
N//
N
N
N//-----------------------------------------------------------------------------
N//			КОЛИЧЕСТВО НЕПРОЧИТАННЫХ БАЙТ В ОТКРЫТОМ ДЛЯ ЧТЕНИЯ ФАЙЛЕ
N//-----------------------------------------------------------------------------
Ns32 FS_RemainSize(tFile f);
N
N//-----------------------------------------
N// ТЕСТ<!>
N//-----------------------------------------
N
N// получить состояние структуры FCS
Nu8 FS_GetFCSState( u8 fcs_num);
N
N// отобразить структуру FCS
Nvoid FS_FCS_Show( u8 fcs_num, void page_buf_view(u8 *buffer, u32 addr) );
N
N// отобразить параметры файловой системы
Nvoid FS_Params_Show(void);
N
Nu32 FS_FindFreeFNT(void);
Nu16 FS_FindFreeCluster(void);
N
N
N
N
N#endif // __FS_H_
L 16 "Main\FS.c" 2
N#include "Flash.h"
L 1 ".\UCNC\Flash.h" 1
N
N//****************************************************************************
N//
N//            M25P64/M25P128 serial memory
N//
N//****************************************************************************
N
N
N#ifndef __FLASH_H_
N#define __FLASH_H_
N
N
N
N#include "LPC17xx.h"
L 1 "C:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include\LPC17xx.h" 1
N/**************************************************************************//**
N * @file     LPC17xx.h
N * @brief    CMSIS Cortex-M3 Device Peripheral Access Layer Header File for
N *           NXP LPC17xx Device Series
N * @version  V1.10
N * @date     06. April 2011
N *
N * @note
N * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M
N * processor based microcontrollers.  This file can be freely distributed
N * within development tools that are supporting such ARM based processors.
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N *                                                            modified by Keil
N******************************************************************************/
N
N
N#ifndef __LPC17xx_H__
N#define __LPC17xx_H__
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
N/** @addtogroup LPC17xx_System
N * @{
N */
N
N/** @brief IRQ interrupt source definition */
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  Reset_IRQn                    = -15,      /*!< 1 Reset Vector, invoked on PowerUp and warm reset*/
N  NonMaskableInt_IRQn           = -14,      /*!< 2 Non Maskable Interrupt                         */
N  HardFault_IRQn                = -13,      /*!< 3  Hard Fault, all classes of Fault              */
N  MemoryManagement_IRQn         = -12,      /*!< 4 Cortex-M3 Memory Management Interrupt          */
N  BusFault_IRQn                 = -11,      /*!< 5 Cortex-M3 Bus Fault Interrupt                  */
N  UsageFault_IRQn               = -10,      /*!< 6 Cortex-M3 Usage Fault Interrupt                */
N  SVCall_IRQn                   = -5,       /*!< 11 Cortex-M3 SV Call Interrupt                   */
N  DebugMonitor_IRQn             = -4,       /*!< 12 Cortex-M3 Debug Monitor Interrupt             */
N  PendSV_IRQn                   = -2,       /*!< 14 Cortex-M3 Pend SV Interrupt                   */
N  SysTick_IRQn                  = -1,       /*!< 15 Cortex-M3 System Tick Interrupt               */
N
N/******  LPC17xx Specific Interrupt Numbers *******************************************************/
N  WDT_IRQn                      = 0,        /*!< Watchdog Timer Interrupt                         */
N  TIMER0_IRQn                   = 1,        /*!< Timer0 Interrupt                                 */
N  TIMER1_IRQn                   = 2,        /*!< Timer1 Interrupt                                 */
N  TIMER2_IRQn                   = 3,        /*!< Timer2 Interrupt                                 */
N  TIMER3_IRQn                   = 4,        /*!< Timer3 Interrupt                                 */
N  UART0_IRQn                    = 5,        /*!< UART0 Interrupt                                  */
N  UART1_IRQn                    = 6,        /*!< UART1 Interrupt                                  */
N  UART2_IRQn                    = 7,        /*!< UART2 Interrupt                                  */
N  UART3_IRQn                    = 8,        /*!< UART3 Interrupt                                  */
N  PWM1_IRQn                     = 9,        /*!< PWM1 Interrupt                                   */
N  I2C0_IRQn                     = 10,       /*!< I2C0 Interrupt                                   */
N  I2C1_IRQn                     = 11,       /*!< I2C1 Interrupt                                   */
N  I2C2_IRQn                     = 12,       /*!< I2C2 Interrupt                                   */
N  SPI_IRQn                      = 13,       /*!< SPI Interrupt                                    */
N  SSP0_IRQn                     = 14,       /*!< SSP0 Interrupt                                   */
N  SSP1_IRQn                     = 15,       /*!< SSP1 Interrupt                                   */
N  PLL0_IRQn                     = 16,       /*!< PLL0 Lock (Main PLL) Interrupt                   */
N  RTC_IRQn                      = 17,       /*!< Real Time Clock Interrupt                        */
N  EINT0_IRQn                    = 18,       /*!< External Interrupt 0 Interrupt                   */
N  EINT1_IRQn                    = 19,       /*!< External Interrupt 1 Interrupt                   */
N  EINT2_IRQn                    = 20,       /*!< External Interrupt 2 Interrupt                   */
N  EINT3_IRQn                    = 21,       /*!< External Interrupt 3 Interrupt                   */
N  ADC_IRQn                      = 22,       /*!< A/D Converter Interrupt                          */
N  BOD_IRQn                      = 23,       /*!< Brown-Out Detect Interrupt                       */
N  USB_IRQn                      = 24,       /*!< USB Interrupt                                    */
N  CAN_IRQn                      = 25,       /*!< CAN Interrupt                                    */
N  DMA_IRQn                      = 26,       /*!< General Purpose DMA Interrupt                    */
N  I2S_IRQn                      = 27,       /*!< I2S Interrupt                                    */
N  ENET_IRQn                     = 28,       /*!< Ethernet Interrupt                               */
N  RIT_IRQn                      = 29,       /*!< Repetitive Interrupt Timer Interrupt             */
N  MCPWM_IRQn                    = 30,       /*!< Motor Control PWM Interrupt                      */
N  QEI_IRQn                      = 31,       /*!< Quadrature Encoder Interface Interrupt           */
N  PLL1_IRQn                     = 32,       /*!< PLL1 Lock (USB PLL) Interrupt                    */
N  USBActivity_IRQn              = 33,       /*!< USB Activity Interrupt 						  */
N  CANActivity_IRQn              = 34,       /*!< CAN Activity Interrupt 						  */
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M3 Processor and Core Peripherals */
N#define __MPU_PRESENT             1         /*!< MPU present or not                               */
N#define __NVIC_PRIO_BITS          5         /*!< Number of Bits used for Priority Levels          */
N#define __Vendor_SysTickConfig    0         /*!< Set to 1 if different SysTick Config is used     */
N
N
N#include "core_cm3.h"                       /* Cortex-M3 processor and core peripherals           */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\core_cm3.h" 1
N/**************************************************************************//**
N * @file     core_cm3.h
N * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060061 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM3_H_GENERIC
N#define __CORE_CM3_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M3
N  @{
N */
N
N/*  CMSIS CM3 definitions */
N#define __CM3_CMSIS_VERSION_MAIN  ( 5U)                                  /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   ( 0U)                                  /*!< [15:0]  CMSIS HAL sub version */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM3_CMSIS_VERSION_SUB           )  /*!< CMSIS HAL version number */
X#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) |                                     __CM3_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.1
N * @date     30. January 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (ARM compiler V5) header file
N * @version  V5.0.1
N * @date     03. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060061 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (0L && (__TARGET_ARCH_6S_M  == 1))   )
S  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (1L && (1  == 1))
N  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                     __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                  __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE           static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN               __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                    __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                    __attribute__((weak))
N#endif
N#ifndef   __UNALIGNED_UINT32
N  #define __UNALIGNED_UINT32(x)     (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)              __attribute__((aligned(x)))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                  __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT           __packed struct
N#endif
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N
N/**
N  \brief   Enable FIQ
N  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __enable_fault_irq                __enable_fiq
N
N
N/**
N  \brief   Disable FIQ
N  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N#define __disable_fault_irq               __disable_fiq
N
N
N/**
N  \brief   Get Base Priority
N  \details Returns the current value of the Base Priority register.
N  \return               Base Priority register value
N */
N__STATIC_INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N
N/**
N  \brief   Set Base Priority
N  \details Assigns the given value to the Base Priority register.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Set Base Priority with condition
N  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
N           or the new value increases the BASEPRI priority level.
N  \param [in]    basePri  Base Priority value to set
N */
N__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
Xstatic __inline void __set_BASEPRI_MAX(uint32_t basePri)
N{
N  register uint32_t __regBasePriMax      __ASM("basepri_max");
X  register uint32_t __regBasePriMax      __asm("basepri_max");
N  __regBasePriMax = (basePri & 0xFFU);
N}
N
N
N/**
N  \brief   Get Fault Mask
N  \details Returns the current value of the Fault Mask register.
N  \return               Fault Mask register value
N */
N__STATIC_INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N
N/**
N  \brief   Set Fault Mask
N  \details Assigns the given value to the Fault Mask register.
N  \param [in]    faultMask  Fault Mask value to set
N */
N__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & (uint32_t)1U);
N}
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#else
S  (void)fpscr;
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N  #define __RBIT                          __rbit
N#else
S__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
S
S  result = value;                      /* r will be reversed bits of v; first get LSB of v */
S  for (value >>= 1U; value; value >>= 1U)
S  {
S    result <<= 1U;
S    result |= value & 1U;
S    s--;
S  }
S  result <<= s;                        /* shift when v's highest bits are zero */
S  return(result);
S}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((1L && (1  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
N
N/**
N  \brief   LDR Exclusive (8 bit)
N  \details Executes a exclusive LDR instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
N#else
N  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (16 bit)
N  \details Executes a exclusive LDR instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
N#else
N  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   LDR Exclusive (32 bit)
N  \details Executes a exclusive LDR instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
N#else
N  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (8 bit)
N  \details Executes a exclusive STR instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (16 bit)
N  \details Executes a exclusive STR instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   STR Exclusive (32 bit)
N  \details Executes a exclusive STR instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N  \return          0  Function succeeded
N  \return          1  Function failed
N */
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
X#if 1L && (5060061 < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
N#else
N  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
N#endif
N
N
N/**
N  \brief   Remove the exclusive lock
N  \details Removes the exclusive lock which is created by LDREX.
N */
N#define __CLREX                           __clrex
N
N
N/**
N  \brief   Signed Saturate
N  \details Saturates a signed value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (1..32)
N  \return             Saturated value
N */
N#define __SSAT                            __ssat
N
N
N/**
N  \brief   Unsigned Saturate
N  \details Saturates an unsigned value.
N  \param [in]  value  Value to be saturated
N  \param [in]    sat  Bit position to saturate to (0..31)
N  \return             Saturated value
N */
N#define __USAT                            __usat
N
N
N/**
N  \brief   Rotate Right with Extend (32 bit)
N  \details Moves each bit of a bitstring right by one bit.
N           The carry input is shifted in at the left end of the bitstring.
N  \param [in]    value  Value to rotate
N  \return               Rotated value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
X__attribute__((section(".rrx_text"))) static __inline __asm uint32_t __RRX(uint32_t value)
N{
N  rrx r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   LDRT Unprivileged (8 bit)
N  \details Executes a Unprivileged LDRT instruction for 8 bit value.
N  \param [in]    ptr  Pointer to data
N  \return             value of type uint8_t at (*ptr)
N */
N#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (16 bit)
N  \details Executes a Unprivileged LDRT instruction for 16 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint16_t at (*ptr)
N */
N#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
N
N
N/**
N  \brief   LDRT Unprivileged (32 bit)
N  \details Executes a Unprivileged LDRT instruction for 32 bit values.
N  \param [in]    ptr  Pointer to data
N  \return        value of type uint32_t at (*ptr)
N */
N#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
N
N
N/**
N  \brief   STRT Unprivileged (8 bit)
N  \details Executes a Unprivileged STRT instruction for 8 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRBT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (16 bit)
N  \details Executes a Unprivileged STRT instruction for 16 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRHT(value, ptr)               __strt(value, ptr)
N
N
N/**
N  \brief   STRT Unprivileged (32 bit)
N  \details Executes a Unprivileged STRT instruction for 32 bit values.
N  \param [in]  value  Value to store
N  \param [in]    ptr  Pointer to location
N */
N#define __STRT(value, ptr)                __strt(value, ptr)
N
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                    __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    __packed struct T_UINT32 { uint32_t v; };
S      #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           __packed struct
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __attribute__((aligned(x)))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __attribute__((packed))
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                     __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN               __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                    __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __attribute__((weak))
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           struct __packed__
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                     _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                  inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE           static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                    __weak
S  #endif
S  #ifndef   __UNALIGNED_UINT32
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)     (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                  @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT           @packed struct
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 114 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include\core_cm3.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM3_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM3_H_DEPENDANT
N#define __CORE_CM3_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM3_REV
S    #define __CM3_REV               0x0200U
S    #warning "__CM3_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          3U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M3 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N  - Core MPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N#define APSR_Q_Pos                         27U                                            /*!< APSR: Q Position */
N#define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR: Q Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
N    uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
N    uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit */
N    uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_Q_Pos                         27U                                            /*!< xPSR: Q Position */
N#define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR: Q Mask */
N
N#define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR: ICI/IT part 2 Position */
N#define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR: ICI/IT part 2 Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR: ICI/IT part 1 Position */
N#define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR: ICI/IT part 1 Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[8U];                
N        uint32_t RESERVED0[24U];
N  __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[8U];                
N        uint32_t RSERVED1[24U];
N  __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[8U];                
N        uint32_t RESERVED2[24U];
N  __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[8U];                
N        uint32_t RESERVED3[24U];
N  __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
X  volatile uint32_t IABR[8U];                
N        uint32_t RESERVED4[56U];
N  __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240U];                
N        uint32_t RESERVED5[644U];
N  __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
X  volatile  uint32_t STIR;                    
N}  NVIC_Type;
N
N/* Software Triggered Interrupt Register Definitions */
N#define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: INTLINESNUM Position */
N#define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: INTLINESNUM Mask */
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N  __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12U];                
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N  __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
X  volatile uint32_t CFSR;                    
N  __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
X  volatile uint32_t HFSR;                    
N  __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
X  volatile uint32_t DFSR;                    
N  __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
X  volatile uint32_t MMFAR;                   
N  __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
X  volatile uint32_t BFAR;                    
N  __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
X  volatile uint32_t AFSR;                    
N  __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
X  volatile const  uint32_t PFR[2U];                 
N  __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
X  volatile const  uint32_t DFR;                     
N  __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
X  volatile const  uint32_t ADR;                     
N  __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
X  volatile const  uint32_t MMFR[4U];                
N  __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
X  volatile const  uint32_t ISAR[5U];                
N        uint32_t RESERVED0[5U];
N  __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
X  volatile uint32_t CPACR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Vector Table Offset Register Definitions */
N#if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
X#if 0L && (__CM3_REV < 0x0201U)                    
S#define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB VTOR: TBLBASE Position */
S#define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB VTOR: TBLBASE Mask */
S
S#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
S#define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N#else
N#define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB VTOR: TBLOFF Mask */
N#endif
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Register Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB CFSR (MMFSR): MMARVALID Position */
N#define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB CFSR (MMFSR): MMARVALID Mask */
N
N#define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB CFSR (MMFSR): MSTKERR Position */
N#define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB CFSR (MMFSR): MSTKERR Mask */
N
N#define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB CFSR (MMFSR): MUNSTKERR Position */
N#define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB CFSR (MMFSR): MUNSTKERR Mask */
N
N#define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB CFSR (MMFSR): DACCVIOL Position */
N#define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB CFSR (MMFSR): DACCVIOL Mask */
N
N#define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB CFSR (MMFSR): IACCVIOL Position */
N#define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB CFSR (MMFSR): IACCVIOL Mask */
N
N/* BusFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB CFSR (BFSR): BFARVALID Position */
N#define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB CFSR (BFSR): BFARVALID Mask */
N
N#define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB CFSR (BFSR): STKERR Position */
N#define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB CFSR (BFSR): STKERR Mask */
N
N#define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB CFSR (BFSR): UNSTKERR Position */
N#define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB CFSR (BFSR): UNSTKERR Mask */
N
N#define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB CFSR (BFSR): IMPRECISERR Position */
N#define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB CFSR (BFSR): IMPRECISERR Mask */
N
N#define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB CFSR (BFSR): PRECISERR Position */
N#define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB CFSR (BFSR): PRECISERR Mask */
N
N#define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB CFSR (BFSR): IBUSERR Position */
N#define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB CFSR (BFSR): IBUSERR Mask */
N
N/* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
N#define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB CFSR (UFSR): DIVBYZERO Position */
N#define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB CFSR (UFSR): DIVBYZERO Mask */
N
N#define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB CFSR (UFSR): UNALIGNED Position */
N#define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB CFSR (UFSR): UNALIGNED Mask */
N
N#define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB CFSR (UFSR): NOCP Position */
N#define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB CFSR (UFSR): NOCP Mask */
N
N#define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB CFSR (UFSR): INVPC Position */
N#define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB CFSR (UFSR): INVPC Mask */
N
N#define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB CFSR (UFSR): INVSTATE Position */
N#define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB CFSR (UFSR): INVSTATE Mask */
N
N#define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB CFSR (UFSR): UNDEFINSTR Position */
N#define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB CFSR (UFSR): UNDEFINSTR Mask */
N
N/* SCB Hard Fault Status Register Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
N  \brief    Type definitions for the System Control and ID Register not in the SCB
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control and ID Register not in the SCB.
N */
Ntypedef struct
N{
N        uint32_t RESERVED0[1U];
N  __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
X  volatile const  uint32_t ICTR;                    
N#if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
X#if 0L && (__CM3_REV >= 0x200U)
S  __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
N#else
N        uint32_t RESERVED1[1U];
N#endif
N} SCnSCB_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
N#define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N
N#define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: DISFOLD Position */
N#define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: DISFOLD Mask */
N
N#define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: DISDEFWBUF Position */
N#define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: DISDEFWBUF Mask */
N
N#define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: DISMCYCINT Position */
N#define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: DISMCYCINT Mask */
N
N/*@} end of group CMSIS_SCnotSCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
N  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
N */
Ntypedef struct
N{
N  __OM  union
X  volatile  union
N  {
N    __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
X    volatile  uint8_t    u8;                  
N    __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
X    volatile  uint16_t   u16;                 
N    __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
X    volatile  uint32_t   u32;                 
N  }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
N        uint32_t RESERVED0[864U];
N  __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
X  volatile uint32_t TER;                     
N        uint32_t RESERVED1[15U];
N  __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
X  volatile uint32_t TPR;                     
N        uint32_t RESERVED2[15U];
N  __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
X  volatile uint32_t TCR;                     
N        uint32_t RESERVED3[29U];
N  __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
X  volatile  uint32_t IWR;                     
N  __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
X  volatile const  uint32_t IRR;                     
N  __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                    
N        uint32_t RESERVED4[43U];
N  __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
X  volatile  uint32_t LAR;                     
N  __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
X  volatile const  uint32_t LSR;                     
N        uint32_t RESERVED5[6U];
N  __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                    
N  __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                    
N  __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                    
N  __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                    
N  __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                    
N  __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                    
N  __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                    
N  __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                    
N  __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                    
N  __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                    
N  __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                    
N  __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                    
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM TCR: Global timestamp frequency Position */
N#define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM TCR: Global timestamp frequency Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1U                                            /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0U                                            /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM LSR: Present Mask */
N
N/*@}*/ /* end of group CMSIS_ITM */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
N  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
X  volatile uint32_t CYCCNT;                  
N  __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
X  volatile uint32_t CPICNT;                  
N  __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
X  volatile uint32_t EXCCNT;                  
N  __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
X  volatile uint32_t SLEEPCNT;                
N  __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
X  volatile uint32_t LSUCNT;                  
N  __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
X  volatile uint32_t FOLDCNT;                 
N  __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
X  volatile const  uint32_t PCSR;                    
N  __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
X  volatile uint32_t COMP0;                   
N  __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
X  volatile uint32_t MASK0;                   
N  __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
X  volatile uint32_t FUNCTION0;               
N        uint32_t RESERVED0[1U];
N  __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
X  volatile uint32_t COMP1;                   
N  __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
X  volatile uint32_t MASK1;                   
N  __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
X  volatile uint32_t FUNCTION1;               
N        uint32_t RESERVED1[1U];
N  __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
X  volatile uint32_t COMP2;                   
N  __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
X  volatile uint32_t MASK2;                   
N  __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
X  volatile uint32_t FUNCTION2;               
N        uint32_t RESERVED2[1U];
N  __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
X  volatile uint32_t COMP3;                   
N  __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
X  volatile uint32_t MASK3;                   
N  __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
X  volatile uint32_t FUNCTION3;               
N} DWT_Type;
N
N/* DWT Control Register Definitions */
N#define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTRL: NUMCOMP Position */
N#define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTRL: NUMCOMP Mask */
N
N#define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTRL: NOTRCPKT Position */
N#define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTRL: NOTRCPKT Mask */
N
N#define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTRL: NOEXTTRIG Position */
N#define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTRL: NOEXTTRIG Mask */
N
N#define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTRL: NOCYCCNT Position */
N#define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTRL: NOCYCCNT Mask */
N
N#define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTRL: NOPRFCNT Position */
N#define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTRL: NOPRFCNT Mask */
N
N#define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTRL: CYCEVTENA Position */
N#define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTRL: CYCEVTENA Mask */
N
N#define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTRL: FOLDEVTENA Position */
N#define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTRL: FOLDEVTENA Mask */
N
N#define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTRL: LSUEVTENA Position */
N#define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTRL: LSUEVTENA Mask */
N
N#define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTRL: SLEEPEVTENA Position */
N#define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTRL: SLEEPEVTENA Mask */
N
N#define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTRL: EXCEVTENA Position */
N#define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTRL: EXCEVTENA Mask */
N
N#define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTRL: CPIEVTENA Position */
N#define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTRL: CPIEVTENA Mask */
N
N#define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTRL: EXCTRCENA Position */
N#define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTRL: EXCTRCENA Mask */
N
N#define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTRL: PCSAMPLENA Position */
N#define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTRL: PCSAMPLENA Mask */
N
N#define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTRL: SYNCTAP Position */
N#define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTRL: SYNCTAP Mask */
N
N#define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTRL: CYCTAP Position */
N#define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTRL: CYCTAP Mask */
N
N#define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTRL: POSTINIT Position */
N#define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTRL: POSTINIT Mask */
N
N#define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTRL: POSTPRESET Position */
N#define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTRL: POSTPRESET Mask */
N
N#define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTRL: CYCCNTENA Position */
N#define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTRL: CYCCNTENA Mask */
N
N/* DWT CPI Count Register Definitions */
N#define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPICNT: CPICNT Position */
N#define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPICNT: CPICNT Mask */
N
N/* DWT Exception Overhead Count Register Definitions */
N#define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXCCNT: EXCCNT Position */
N#define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXCCNT: EXCCNT Mask */
N
N/* DWT Sleep Count Register Definitions */
N#define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLEEPCNT: SLEEPCNT Position */
N#define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLEEPCNT: SLEEPCNT Mask */
N
N/* DWT LSU Count Register Definitions */
N#define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSUCNT: LSUCNT Position */
N#define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSUCNT: LSUCNT Mask */
N
N/* DWT Folded-instruction Count Register Definitions */
N#define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOLDCNT: FOLDCNT Position */
N#define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOLDCNT: FOLDCNT Mask */
N
N/* DWT Comparator Mask Register Definitions */
N#define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MASK: MASK Position */
N#define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MASK: MASK Mask */
N
N/* DWT Comparator Function Register Definitions */
N#define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUNCTION: MATCHED Position */
N#define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUNCTION: MATCHED Mask */
N
N#define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUNCTION: DATAVADDR1 Position */
N#define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUNCTION: DATAVADDR1 Mask */
N
N#define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUNCTION: DATAVADDR0 Position */
N#define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUNCTION: DATAVADDR0 Mask */
N
N#define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUNCTION: DATAVSIZE Position */
N#define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUNCTION: DATAVSIZE Mask */
N
N#define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUNCTION: LNK1ENA Position */
N#define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUNCTION: LNK1ENA Mask */
N
N#define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUNCTION: DATAVMATCH Position */
N#define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUNCTION: DATAVMATCH Mask */
N
N#define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUNCTION: CYCMATCH Position */
N#define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUNCTION: CYCMATCH Mask */
N
N#define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUNCTION: EMITRANGE Position */
N#define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUNCTION: EMITRANGE Mask */
N
N#define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUNCTION: FUNCTION Position */
N#define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUNCTION: FUNCTION Mask */
N
N/*@}*/ /* end of group CMSIS_DWT */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
N  \brief    Type definitions for the Trace Port Interface (TPI)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Trace Port Interface Register (TPI).
N */
Ntypedef struct
N{
N  __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
X  volatile uint32_t SSPSR;                   
N  __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
X  volatile uint32_t CSPSR;                   
N        uint32_t RESERVED0[2U];
N  __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
X  volatile uint32_t ACPR;                    
N        uint32_t RESERVED1[55U];
N  __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
X  volatile uint32_t SPPR;                    
N        uint32_t RESERVED2[131U];
N  __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
X  volatile const  uint32_t FFSR;                    
N  __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
X  volatile uint32_t FFCR;                    
N  __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
X  volatile const  uint32_t FSCR;                    
N        uint32_t RESERVED3[759U];
N  __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
X  volatile const  uint32_t TRIGGER;                 
N  __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
X  volatile const  uint32_t FIFO0;                   
N  __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
X  volatile const  uint32_t ITATBCTR2;               
N        uint32_t RESERVED4[1U];
N  __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
X  volatile const  uint32_t ITATBCTR0;               
N  __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
X  volatile const  uint32_t FIFO1;                   
N  __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
X  volatile uint32_t ITCTRL;                  
N        uint32_t RESERVED5[39U];
N  __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
X  volatile uint32_t CLAIMSET;                
N  __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
X  volatile uint32_t CLAIMCLR;                
N        uint32_t RESERVED7[8U];
N  __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
X  volatile const  uint32_t DEVID;                   
N  __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
X  volatile const  uint32_t DEVTYPE;                 
N} TPI_Type;
N
N/* TPI Asynchronous Clock Prescaler Register Definitions */
N#define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACPR: PRESCALER Position */
N#define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACPR: PRESCALER Mask */
N
N/* TPI Selected Pin Protocol Register Definitions */
N#define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPPR: TXMODE Position */
N#define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPPR: TXMODE Mask */
N
N/* TPI Formatter and Flush Status Register Definitions */
N#define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFSR: FtNonStop Position */
N#define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFSR: FtNonStop Mask */
N
N#define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFSR: TCPresent Position */
N#define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFSR: TCPresent Mask */
N
N#define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFSR: FtStopped Position */
N#define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFSR: FtStopped Mask */
N
N#define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFSR: FlInProg Position */
N#define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFSR: FlInProg Mask */
N
N/* TPI Formatter and Flush Control Register Definitions */
N#define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFCR: TrigIn Position */
N#define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFCR: TrigIn Mask */
N
N#define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFCR: EnFCont Position */
N#define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFCR: EnFCont Mask */
N
N/* TPI TRIGGER Register Definitions */
N#define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRIGGER: TRIGGER Position */
N#define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRIGGER: TRIGGER Mask */
N
N/* TPI Integration ETM Data Register Definitions (FIFO0) */
N#define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO0: ITM_ATVALID Position */
N#define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIFO0: ITM_ATVALID Mask */
N
N#define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO0: ITM_bytecount Position */
N#define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIFO0: ITM_bytecount Mask */
N
N#define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO0: ETM_ATVALID Position */
N#define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIFO0: ETM_ATVALID Mask */
N
N#define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO0: ETM_bytecount Position */
N#define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIFO0: ETM_bytecount Mask */
N
N#define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIFO0: ETM2 Position */
N#define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIFO0: ETM2 Mask */
N
N#define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIFO0: ETM1 Position */
N#define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIFO0: ETM1 Mask */
N
N#define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIFO0: ETM0 Position */
N#define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIFO0: ETM0 Mask */
N
N/* TPI ITATBCTR2 Register Definitions */
N#define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR2: ATREADY Position */
N#define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITATBCTR2: ATREADY Mask */
N
N/* TPI Integration ITM Data Register Definitions (FIFO1) */
N#define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIFO1: ITM_ATVALID Position */
N#define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIFO1: ITM_ATVALID Mask */
N
N#define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIFO1: ITM_bytecount Position */
N#define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIFO1: ITM_bytecount Mask */
N
N#define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIFO1: ETM_ATVALID Position */
N#define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIFO1: ETM_ATVALID Mask */
N
N#define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIFO1: ETM_bytecount Position */
N#define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIFO1: ETM_bytecount Mask */
N
N#define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIFO1: ITM2 Position */
N#define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIFO1: ITM2 Mask */
N
N#define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIFO1: ITM1 Position */
N#define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIFO1: ITM1 Mask */
N
N#define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIFO1: ITM0 Position */
N#define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIFO1: ITM0 Mask */
N
N/* TPI ITATBCTR0 Register Definitions */
N#define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITATBCTR0: ATREADY Position */
N#define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITATBCTR0: ATREADY Mask */
N
N/* TPI Integration Mode Control Register Definitions */
N#define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITCTRL: Mode Position */
N#define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITCTRL: Mode Mask */
N
N/* TPI DEVID Register Definitions */
N#define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEVID: NRZVALID Position */
N#define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEVID: NRZVALID Mask */
N
N#define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEVID: MANCVALID Position */
N#define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEVID: MANCVALID Mask */
N
N#define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEVID: PTINVALID Position */
N#define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEVID: PTINVALID Mask */
N
N#define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEVID: MinBufSz Position */
N#define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEVID: MinBufSz Mask */
N
N#define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEVID: AsynClkIn Position */
N#define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEVID: AsynClkIn Mask */
N
N#define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEVID: NrTraceInput Position */
N#define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEVID: NrTraceInput Mask */
N
N/* TPI DEVTYPE Register Definitions */
N#define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEVTYPE: MajorType Position */
N#define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEVTYPE: MajorType Mask */
N
N#define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEVTYPE: SubType Position */
N#define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEVTYPE: SubType Mask */
N
N/*@}*/ /* end of group CMSIS_TPI */
N
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (1 == 1U)
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
N  \brief    Type definitions for the Memory Protection Unit (MPU)
N  @{
N */
N
N/**
N  \brief  Structure type to access the Memory Protection Unit (MPU).
N */
Ntypedef struct
N{
N  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
X  volatile const  uint32_t TYPE;                    
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
X  volatile uint32_t RNR;                     
N  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
X  volatile uint32_t RBAR;                    
N  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
X  volatile uint32_t RASR;                    
N  __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
X  volatile uint32_t RBAR_A1;                 
N  __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
X  volatile uint32_t RASR_A1;                 
N  __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
X  volatile uint32_t RBAR_A2;                 
N  __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
X  volatile uint32_t RASR_A2;                 
N  __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
X  volatile uint32_t RBAR_A3;                 
N  __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
X  volatile uint32_t RASR_A3;                 
N} MPU_Type;
N
N/* MPU Type Register Definitions */
N#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
N#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
N
N#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
N#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
N
N#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
N#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
N
N/* MPU Control Register Definitions */
N#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
N#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
N
N#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
N#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
N
N#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
N#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
N
N/* MPU Region Number Register Definitions */
N#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
N#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
N
N/* MPU Region Base Address Register Definitions */
N#define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU RBAR: ADDR Position */
N#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
N
N#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
N#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
N
N#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
N#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
N
N/* MPU Region Attribute and Size Register Definitions */
N#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
N#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
N
N#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
N#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
N
N#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
N#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
N
N#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
N#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
N
N#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
N#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
N
N#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
N#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
N
N#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
N#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
N
N#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
N#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
N
N#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
N#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
N
N#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
N#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
N
N/*@} end of group CMSIS_MPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Type definitions for the Core Debug Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
X  volatile uint32_t DHCSR;                   
N  __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
X  volatile  uint32_t DCRSR;                   
N  __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
X  volatile uint32_t DCRDR;                   
N  __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                   
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register Definitions */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register Definitions */
N#define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register Definitions */
N#define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
N#define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
N#define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register not in SCB */
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N#define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct */
N#define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct */
N#define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
N  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Debug Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
N  #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N  #define NVIC_GetActive              __NVIC_GetActive
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S   #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N
N/**
N  \brief   Set Priority Grouping
N  \details Sets the priority grouping field using the required unlock sequence.
N           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
N           Only values from 0..7 are used.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]      PriorityGroup  Priority grouping field.
N */
N__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;                                                    
N  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
X  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));  
N  reg_value  =  (reg_value                                   |
N                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X                ((uint32_t)0x5FAUL << 16U) |
N                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR =  reg_value;
N}
N
N
N/**
N  \brief   Get Priority Grouping
N  \details Reads the priority grouping field from the NVIC Interrupt Controller.
N  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t __NVIC_GetPriorityGrouping(void)
N{
N  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
X  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
N}
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Active Interrupt
N  \details Reads the active register in the NVIC and returns the active bit for the device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not active.
N  \return             1  Interrupt status is active.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - 5)) & (uint32_t)0xFFUL);
N  }
N  else
N  {
N    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 5)) & (uint32_t)0xFFUL);
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - 5)));
N  }
N  else
N  {
N    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
X    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - 5)));
N  }
N}
N
N
N/**
N  \brief   Encode Priority
N  \details Encodes the priority for an interrupt with the given priority group,
N           preemptive priority value, and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
N  \param [in]     PriorityGroup  Used priority group.
N  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
N  \param [in]       SubPriority  Subpriority value (starting from 0).
N  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
N */
N__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(5)) ? (uint32_t)(5) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(5)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(5));
N
N  return (
N           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
N           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
N         );
N}
N
N
N/**
N  \brief   Decode Priority
N  \details Decodes an interrupt priority value with a given priority group to
N           preemptive priority value and subpriority value.
N           In case of a conflict between priority grouping and available
N           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
N  \param [in]     PriorityGroup  Used priority group.
N  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
N  \param [out]     pSubPriority  Subpriority value (starting from 0).
N */
N__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
X  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(5)) ? (uint32_t)(5) : (uint32_t)(7UL - PriorityGroupTmp);
N  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
X  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(5)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(5));
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
N  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           VTOR must been relocated to SRAM before.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void __NVIC_SystemReset(void)
Xstatic __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = (uint32_t)((0x5FAUL << 16U)    |
N                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
N                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
X                            (1UL << 2U)    );          
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 5) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_core_DebugFunctions ITM Functions
N  \brief    Functions that access the ITM debug interface.
N  @{
N */
N
Nextern volatile int32_t ITM_RxBuffer;                              /*!< External variable to receive characters. */
N#define                 ITM_RXBUFFER_EMPTY  ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */
N
N
N/**
N  \brief   ITM Send Character
N  \details Transmits a character via the ITM channel 0, and
N           \li Just returns when no debugger is connected that has booked the output.
N           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
N  \param [in]     ch  Character to transmit.
N  \returns            Character to transmit.
N */
N__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
X  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&       
N      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
X      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL               ) != 0UL)   )      
N  {
N    while (ITM->PORT[0U].u32 == 0UL)
X    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
N    {
N      __NOP();
X      __nop();
N    }
N    ITM->PORT[0U].u8 = (uint8_t)ch;
X    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
N  }
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Receive Character
N  \details Inputs a character via the external variable \ref ITM_RxBuffer.
N  \return             Received character.
N  \return         -1  No character pending.
N */
N__STATIC_INLINE int32_t ITM_ReceiveChar (void)
Xstatic __inline int32_t ITM_ReceiveChar (void)
N{
N  int32_t ch = -1;                           /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
N  {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);        
N  }
N
N  return (ch);
N}
N
N
N/**
N  \brief   ITM Check Character
N  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
N  \return          0  No character available.
N  \return          1  Character available.
N */
N__STATIC_INLINE int32_t ITM_CheckChar (void)
Xstatic __inline int32_t ITM_CheckChar (void)
N{
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY)
X  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
N  {
N    return (0);                              /* no character available */
N  }
N  else
N  {
N    return (1);                              /*    character available */
N  }
N}
N
N/*@} end of CMSIS_core_DebugFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM3_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 107 "C:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include\LPC17xx.h" 2
N#include "system_LPC17xx.h"                 /* System Header                                      */
L 1 "C:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include\system_LPC17xx.h" 1
N/**************************************************************************//**
N * @file     system_LPC17xx.h
N * @brief    CMSIS Device System Header File for
N *           NXP LPC17xx Device Series
N * @version  V1.12
N * @date     05. April 2016
N ******************************************************************************/
N/* Copyright (c) 2011 - 2016 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N#ifndef __SYSTEM_LPC17xx_H
N#define __SYSTEM_LPC17xx_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N/**
N  \brief  System clock frequency (core clock).
N    The system clock frequency supplied to the SysTick timer and the 
N    processor core clock.
N */
Nextern uint32_t SystemCoreClock;
N
N/**
N  \brief  Setup the microcontroller system.
N
N    Initialize the System and update the SystemCoreClock variable.
N */
Nextern void SystemInit (void);
N
N/**
N  \brief  Update SystemCoreClock variable.
N
N    Updates the SystemCoreClock with current core Clock
N    retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __SYSTEM_LPC17xx_H */
L 108 "C:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include\LPC17xx.h" 2
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/*------------- System Control (SC) ------------------------------------------*/
N/** @brief System Control (SC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t FLASHCFG;               /* Flash Accelerator Module           */
X  volatile uint32_t FLASHCFG;                
N       uint32_t RESERVED0[31];
N  __IO uint32_t PLL0CON;                /* Clocking and Power Control         */
X  volatile uint32_t PLL0CON;                 
N  __IO uint32_t PLL0CFG;
X  volatile uint32_t PLL0CFG;
N  __I  uint32_t PLL0STAT;
X  volatile const  uint32_t PLL0STAT;
N  __O  uint32_t PLL0FEED;
X  volatile  uint32_t PLL0FEED;
N       uint32_t RESERVED1[4];
N  __IO uint32_t PLL1CON;
X  volatile uint32_t PLL1CON;
N  __IO uint32_t PLL1CFG;
X  volatile uint32_t PLL1CFG;
N  __I  uint32_t PLL1STAT;
X  volatile const  uint32_t PLL1STAT;
N  __O  uint32_t PLL1FEED;
X  volatile  uint32_t PLL1FEED;
N       uint32_t RESERVED2[4];
N  __IO uint32_t PCON;
X  volatile uint32_t PCON;
N  __IO uint32_t PCONP;
X  volatile uint32_t PCONP;
N       uint32_t RESERVED3[15];
N  __IO uint32_t CCLKCFG;
X  volatile uint32_t CCLKCFG;
N  __IO uint32_t USBCLKCFG;
X  volatile uint32_t USBCLKCFG;
N  __IO uint32_t CLKSRCSEL;
X  volatile uint32_t CLKSRCSEL;
N  __IO uint32_t	CANSLEEPCLR;
X  volatile uint32_t	CANSLEEPCLR;
N  __IO uint32_t	CANWAKEFLAGS;
X  volatile uint32_t	CANWAKEFLAGS;
N       uint32_t RESERVED4[10];
N  __IO uint32_t EXTINT;                 /* External Interrupts                */
X  volatile uint32_t EXTINT;                  
N       uint32_t RESERVED5;
N  __IO uint32_t EXTMODE;
X  volatile uint32_t EXTMODE;
N  __IO uint32_t EXTPOLAR;
X  volatile uint32_t EXTPOLAR;
N       uint32_t RESERVED6[12];
N  __IO uint32_t RSID;                   /* Reset                              */
X  volatile uint32_t RSID;                    
N       uint32_t RESERVED7[7];
N  __IO uint32_t SCS;                    /* Syscon Miscellaneous Registers     */
X  volatile uint32_t SCS;                     
N  __IO uint32_t IRCTRIM;                /* Clock Dividers                     */
X  volatile uint32_t IRCTRIM;                 
N  __IO uint32_t PCLKSEL0;
X  volatile uint32_t PCLKSEL0;
N  __IO uint32_t PCLKSEL1;
X  volatile uint32_t PCLKSEL1;
N       uint32_t RESERVED8[4];
N  __IO uint32_t USBIntSt;               /* USB Device/OTG Interrupt Register  */
X  volatile uint32_t USBIntSt;                
N  __IO uint32_t DMAREQSEL;
X  volatile uint32_t DMAREQSEL;
N  __IO uint32_t CLKOUTCFG;              /* Clock Output Configuration         */
X  volatile uint32_t CLKOUTCFG;               
N } LPC_SC_TypeDef;
N
N/*------------- Pin Connect Block (PINCON) -----------------------------------*/
N/** @brief Pin Connect Block (PINCON) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t PINSEL0;
X  volatile uint32_t PINSEL0;
N  __IO uint32_t PINSEL1;
X  volatile uint32_t PINSEL1;
N  __IO uint32_t PINSEL2;
X  volatile uint32_t PINSEL2;
N  __IO uint32_t PINSEL3;
X  volatile uint32_t PINSEL3;
N  __IO uint32_t PINSEL4;
X  volatile uint32_t PINSEL4;
N  __IO uint32_t PINSEL5;
X  volatile uint32_t PINSEL5;
N  __IO uint32_t PINSEL6;
X  volatile uint32_t PINSEL6;
N  __IO uint32_t PINSEL7;
X  volatile uint32_t PINSEL7;
N  __IO uint32_t PINSEL8;
X  volatile uint32_t PINSEL8;
N  __IO uint32_t PINSEL9;
X  volatile uint32_t PINSEL9;
N  __IO uint32_t PINSEL10;
X  volatile uint32_t PINSEL10;
N       uint32_t RESERVED0[5];
N  __IO uint32_t PINMODE0;
X  volatile uint32_t PINMODE0;
N  __IO uint32_t PINMODE1;
X  volatile uint32_t PINMODE1;
N  __IO uint32_t PINMODE2;
X  volatile uint32_t PINMODE2;
N  __IO uint32_t PINMODE3;
X  volatile uint32_t PINMODE3;
N  __IO uint32_t PINMODE4;
X  volatile uint32_t PINMODE4;
N  __IO uint32_t PINMODE5;
X  volatile uint32_t PINMODE5;
N  __IO uint32_t PINMODE6;
X  volatile uint32_t PINMODE6;
N  __IO uint32_t PINMODE7;
X  volatile uint32_t PINMODE7;
N  __IO uint32_t PINMODE8;
X  volatile uint32_t PINMODE8;
N  __IO uint32_t PINMODE9;
X  volatile uint32_t PINMODE9;
N  __IO uint32_t PINMODE_OD0;
X  volatile uint32_t PINMODE_OD0;
N  __IO uint32_t PINMODE_OD1;
X  volatile uint32_t PINMODE_OD1;
N  __IO uint32_t PINMODE_OD2;
X  volatile uint32_t PINMODE_OD2;
N  __IO uint32_t PINMODE_OD3;
X  volatile uint32_t PINMODE_OD3;
N  __IO uint32_t PINMODE_OD4;
X  volatile uint32_t PINMODE_OD4;
N  __IO uint32_t I2CPADCFG;
X  volatile uint32_t I2CPADCFG;
N} LPC_PINCON_TypeDef;
N
N/*------------- General Purpose Input/Output (GPIO) --------------------------*/
N/** @brief General Purpose Input/Output (GPIO) register structure definition */
Ntypedef struct
N{
N  union {
N    __IO uint32_t FIODIR;
X    volatile uint32_t FIODIR;
N    struct {
N      __IO uint16_t FIODIRL;
X      volatile uint16_t FIODIRL;
N      __IO uint16_t FIODIRH;
X      volatile uint16_t FIODIRH;
N    };
N    struct {
N      __IO uint8_t  FIODIR0;
X      volatile uint8_t  FIODIR0;
N      __IO uint8_t  FIODIR1;
X      volatile uint8_t  FIODIR1;
N      __IO uint8_t  FIODIR2;
X      volatile uint8_t  FIODIR2;
N      __IO uint8_t  FIODIR3;
X      volatile uint8_t  FIODIR3;
N    };
N  };
N  uint32_t RESERVED0[3];
N  union {
N    __IO uint32_t FIOMASK;
X    volatile uint32_t FIOMASK;
N    struct {
N      __IO uint16_t FIOMASKL;
X      volatile uint16_t FIOMASKL;
N      __IO uint16_t FIOMASKH;
X      volatile uint16_t FIOMASKH;
N    };
N    struct {
N      __IO uint8_t  FIOMASK0;
X      volatile uint8_t  FIOMASK0;
N      __IO uint8_t  FIOMASK1;
X      volatile uint8_t  FIOMASK1;
N      __IO uint8_t  FIOMASK2;
X      volatile uint8_t  FIOMASK2;
N      __IO uint8_t  FIOMASK3;
X      volatile uint8_t  FIOMASK3;
N    };
N  };
N  union {
N    __IO uint32_t FIOPIN;
X    volatile uint32_t FIOPIN;
N    struct {
N      __IO uint16_t FIOPINL;
X      volatile uint16_t FIOPINL;
N      __IO uint16_t FIOPINH;
X      volatile uint16_t FIOPINH;
N    };
N    struct {
N      __IO uint8_t  FIOPIN0;
X      volatile uint8_t  FIOPIN0;
N      __IO uint8_t  FIOPIN1;
X      volatile uint8_t  FIOPIN1;
N      __IO uint8_t  FIOPIN2;
X      volatile uint8_t  FIOPIN2;
N      __IO uint8_t  FIOPIN3;
X      volatile uint8_t  FIOPIN3;
N    };
N  };
N  union {
N    __IO uint32_t FIOSET;
X    volatile uint32_t FIOSET;
N    struct {
N      __IO uint16_t FIOSETL;
X      volatile uint16_t FIOSETL;
N      __IO uint16_t FIOSETH;
X      volatile uint16_t FIOSETH;
N    };
N    struct {
N      __IO uint8_t  FIOSET0;
X      volatile uint8_t  FIOSET0;
N      __IO uint8_t  FIOSET1;
X      volatile uint8_t  FIOSET1;
N      __IO uint8_t  FIOSET2;
X      volatile uint8_t  FIOSET2;
N      __IO uint8_t  FIOSET3;
X      volatile uint8_t  FIOSET3;
N    };
N  };
N  union {
N    __O  uint32_t FIOCLR;
X    volatile  uint32_t FIOCLR;
N    struct {
N      __O  uint16_t FIOCLRL;
X      volatile  uint16_t FIOCLRL;
N      __O  uint16_t FIOCLRH;
X      volatile  uint16_t FIOCLRH;
N    };
N    struct {
N      __O  uint8_t  FIOCLR0;
X      volatile  uint8_t  FIOCLR0;
N      __O  uint8_t  FIOCLR1;
X      volatile  uint8_t  FIOCLR1;
N      __O  uint8_t  FIOCLR2;
X      volatile  uint8_t  FIOCLR2;
N      __O  uint8_t  FIOCLR3;
X      volatile  uint8_t  FIOCLR3;
N    };
N  };
N} LPC_GPIO_TypeDef;
N
N/** @brief General Purpose Input/Output interrupt (GPIOINT) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t IntStatus;
X  volatile const  uint32_t IntStatus;
N  __I  uint32_t IO0IntStatR;
X  volatile const  uint32_t IO0IntStatR;
N  __I  uint32_t IO0IntStatF;
X  volatile const  uint32_t IO0IntStatF;
N  __O  uint32_t IO0IntClr;
X  volatile  uint32_t IO0IntClr;
N  __IO uint32_t IO0IntEnR;
X  volatile uint32_t IO0IntEnR;
N  __IO uint32_t IO0IntEnF;
X  volatile uint32_t IO0IntEnF;
N       uint32_t RESERVED0[3];
N  __I  uint32_t IO2IntStatR;
X  volatile const  uint32_t IO2IntStatR;
N  __I  uint32_t IO2IntStatF;
X  volatile const  uint32_t IO2IntStatF;
N  __O  uint32_t IO2IntClr;
X  volatile  uint32_t IO2IntClr;
N  __IO uint32_t IO2IntEnR;
X  volatile uint32_t IO2IntEnR;
N  __IO uint32_t IO2IntEnF;
X  volatile uint32_t IO2IntEnF;
N} LPC_GPIOINT_TypeDef;
N
N/*------------- Timer (TIM) --------------------------------------------------*/
N/** @brief Timer (TIM) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N       uint32_t RESERVED0[2];
N  __IO uint32_t EMR;
X  volatile uint32_t EMR;
N       uint32_t RESERVED1[12];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_TIM_TypeDef;
N
N/*------------- Pulse-Width Modulation (PWM) ---------------------------------*/
N/** @brief Pulse-Width Modulation (PWM) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N  __I  uint32_t CR2;
X  volatile const  uint32_t CR2;
N  __I  uint32_t CR3;
X  volatile const  uint32_t CR3;
N       uint32_t RESERVED0;
N  __IO uint32_t MR4;
X  volatile uint32_t MR4;
N  __IO uint32_t MR5;
X  volatile uint32_t MR5;
N  __IO uint32_t MR6;
X  volatile uint32_t MR6;
N  __IO uint32_t PCR;
X  volatile uint32_t PCR;
N  __IO uint32_t LER;
X  volatile uint32_t LER;
N       uint32_t RESERVED1[7];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_PWM_TypeDef;
N
N/*------------- Universal Asynchronous Receiver Transmitter (UART) -----------*/
N/** @brief  Universal Asynchronous Receiver Transmitter (UART) register structure definition */
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[7];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED2[7];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED3[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N  __IO uint8_t  ICR;
X  volatile uint8_t  ICR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  FDR;
X  volatile uint8_t  FDR;
N       uint8_t  RESERVED5[7];
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N} LPC_UART_TypeDef;
N
N/** @brief  Universal Asynchronous Receiver Transmitter 1 (UART1) register structure definition */
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  MCR;
X  volatile uint8_t  MCR;
N       uint8_t  RESERVED2[3];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED3[3];
N  __I  uint8_t  MSR;
X  volatile const  uint8_t  MSR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED5[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N       uint32_t RESERVED6;
N  __IO uint32_t FDR;
X  volatile uint32_t FDR;
N       uint32_t RESERVED7;
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED8[27];
N  __IO uint8_t  RS485CTRL;
X  volatile uint8_t  RS485CTRL;
N       uint8_t  RESERVED9[3];
N  __IO uint8_t  ADRMATCH;
X  volatile uint8_t  ADRMATCH;
N       uint8_t  RESERVED10[3];
N  __IO uint8_t  RS485DLY;
X  volatile uint8_t  RS485DLY;
N} LPC_UART1_TypeDef;
N
N/*------------- Serial Peripheral Interface (SPI) ----------------------------*/
N/** @brief  Serial Peripheral Interface (SPI) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t SPCR;
X  volatile uint32_t SPCR;
N  __I  uint32_t SPSR;
X  volatile const  uint32_t SPSR;
N  __IO uint32_t SPDR;
X  volatile uint32_t SPDR;
N  __IO uint32_t SPCCR;
X  volatile uint32_t SPCCR;
N       uint32_t RESERVED0[3];
N  __IO uint32_t SPINT;
X  volatile uint32_t SPINT;
N} LPC_SPI_TypeDef;
N
N/*------------- Synchronous Serial Communication (SSP) -----------------------*/
N/** @brief  Synchronous Serial Communication (SSP) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t CR0;
X  volatile uint32_t CR0;
N  __IO uint32_t CR1;
X  volatile uint32_t CR1;
N  __IO uint32_t DR;
X  volatile uint32_t DR;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t CPSR;
X  volatile uint32_t CPSR;
N  __IO uint32_t IMSC;
X  volatile uint32_t IMSC;
N  __IO uint32_t RIS;
X  volatile uint32_t RIS;
N  __IO uint32_t MIS;
X  volatile uint32_t MIS;
N  __IO uint32_t ICR;
X  volatile uint32_t ICR;
N  __IO uint32_t DMACR;
X  volatile uint32_t DMACR;
N} LPC_SSP_TypeDef;
N
N/*------------- Inter-Integrated Circuit (I2C) -------------------------------*/
N/** @brief  Inter-Integrated Circuit (I2C) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t I2CONSET;
X  volatile uint32_t I2CONSET;
N  __I  uint32_t I2STAT;
X  volatile const  uint32_t I2STAT;
N  __IO uint32_t I2DAT;
X  volatile uint32_t I2DAT;
N  __IO uint32_t I2ADR0;
X  volatile uint32_t I2ADR0;
N  __IO uint32_t I2SCLH;
X  volatile uint32_t I2SCLH;
N  __IO uint32_t I2SCLL;
X  volatile uint32_t I2SCLL;
N  __O  uint32_t I2CONCLR;
X  volatile  uint32_t I2CONCLR;
N  __IO uint32_t MMCTRL;
X  volatile uint32_t MMCTRL;
N  __IO uint32_t I2ADR1;
X  volatile uint32_t I2ADR1;
N  __IO uint32_t I2ADR2;
X  volatile uint32_t I2ADR2;
N  __IO uint32_t I2ADR3;
X  volatile uint32_t I2ADR3;
N  __I  uint32_t I2DATA_BUFFER;
X  volatile const  uint32_t I2DATA_BUFFER;
N  __IO uint32_t I2MASK0;
X  volatile uint32_t I2MASK0;
N  __IO uint32_t I2MASK1;
X  volatile uint32_t I2MASK1;
N  __IO uint32_t I2MASK2;
X  volatile uint32_t I2MASK2;
N  __IO uint32_t I2MASK3;
X  volatile uint32_t I2MASK3;
N} LPC_I2C_TypeDef;
N
N/*------------- Inter IC Sound (I2S) -----------------------------------------*/
N/** @brief  Inter IC Sound (I2S) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t I2SDAO;
X  volatile uint32_t I2SDAO;
N  __IO uint32_t I2SDAI;
X  volatile uint32_t I2SDAI;
N  __O  uint32_t I2STXFIFO;
X  volatile  uint32_t I2STXFIFO;
N  __I  uint32_t I2SRXFIFO;
X  volatile const  uint32_t I2SRXFIFO;
N  __I  uint32_t I2SSTATE;
X  volatile const  uint32_t I2SSTATE;
N  __IO uint32_t I2SDMA1;
X  volatile uint32_t I2SDMA1;
N  __IO uint32_t I2SDMA2;
X  volatile uint32_t I2SDMA2;
N  __IO uint32_t I2SIRQ;
X  volatile uint32_t I2SIRQ;
N  __IO uint32_t I2STXRATE;
X  volatile uint32_t I2STXRATE;
N  __IO uint32_t I2SRXRATE;
X  volatile uint32_t I2SRXRATE;
N  __IO uint32_t I2STXBITRATE;
X  volatile uint32_t I2STXBITRATE;
N  __IO uint32_t I2SRXBITRATE;
X  volatile uint32_t I2SRXBITRATE;
N  __IO uint32_t I2STXMODE;
X  volatile uint32_t I2STXMODE;
N  __IO uint32_t I2SRXMODE;
X  volatile uint32_t I2SRXMODE;
N} LPC_I2S_TypeDef;
N
N/*------------- Repetitive Interrupt Timer (RIT) -----------------------------*/
N/** @brief  Repetitive Interrupt Timer (RIT) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t RICOMPVAL;
X  volatile uint32_t RICOMPVAL;
N  __IO uint32_t RIMASK;
X  volatile uint32_t RIMASK;
N  __IO uint8_t  RICTRL;
X  volatile uint8_t  RICTRL;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t RICOUNTER;
X  volatile uint32_t RICOUNTER;
N} LPC_RIT_TypeDef;
N
N/*------------- Real-Time Clock (RTC) ----------------------------------------*/
N/** @brief  Real-Time Clock (RTC) register structure definition */
Ntypedef struct
N{
N  __IO uint8_t  ILR;
X  volatile uint8_t  ILR;
N       uint8_t  RESERVED0[7];
N  __IO uint8_t  CCR;
X  volatile uint8_t  CCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  CIIR;
X  volatile uint8_t  CIIR;
N       uint8_t  RESERVED2[3];
N  __IO uint8_t  AMR;
X  volatile uint8_t  AMR;
N       uint8_t  RESERVED3[3];
N  __I  uint32_t CTIME0;
X  volatile const  uint32_t CTIME0;
N  __I  uint32_t CTIME1;
X  volatile const  uint32_t CTIME1;
N  __I  uint32_t CTIME2;
X  volatile const  uint32_t CTIME2;
N  __IO uint8_t  SEC;
X  volatile uint8_t  SEC;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  MIN;
X  volatile uint8_t  MIN;
N       uint8_t  RESERVED5[3];
N  __IO uint8_t  HOUR;
X  volatile uint8_t  HOUR;
N       uint8_t  RESERVED6[3];
N  __IO uint8_t  DOM;
X  volatile uint8_t  DOM;
N       uint8_t  RESERVED7[3];
N  __IO uint8_t  DOW;
X  volatile uint8_t  DOW;
N       uint8_t  RESERVED8[3];
N  __IO uint16_t DOY;
X  volatile uint16_t DOY;
N       uint16_t RESERVED9;
N  __IO uint8_t  MONTH;
X  volatile uint8_t  MONTH;
N       uint8_t  RESERVED10[3];
N  __IO uint16_t YEAR;
X  volatile uint16_t YEAR;
N       uint16_t RESERVED11;
N  __IO uint32_t CALIBRATION;
X  volatile uint32_t CALIBRATION;
N  __IO uint32_t GPREG0;
X  volatile uint32_t GPREG0;
N  __IO uint32_t GPREG1;
X  volatile uint32_t GPREG1;
N  __IO uint32_t GPREG2;
X  volatile uint32_t GPREG2;
N  __IO uint32_t GPREG3;
X  volatile uint32_t GPREG3;
N  __IO uint32_t GPREG4;
X  volatile uint32_t GPREG4;
N  __IO uint8_t  RTC_AUXEN;
X  volatile uint8_t  RTC_AUXEN;
N       uint8_t  RESERVED12[3];
N  __IO uint8_t  RTC_AUX;
X  volatile uint8_t  RTC_AUX;
N       uint8_t  RESERVED13[3];
N  __IO uint8_t  ALSEC;
X  volatile uint8_t  ALSEC;
N       uint8_t  RESERVED14[3];
N  __IO uint8_t  ALMIN;
X  volatile uint8_t  ALMIN;
N       uint8_t  RESERVED15[3];
N  __IO uint8_t  ALHOUR;
X  volatile uint8_t  ALHOUR;
N       uint8_t  RESERVED16[3];
N  __IO uint8_t  ALDOM;
X  volatile uint8_t  ALDOM;
N       uint8_t  RESERVED17[3];
N  __IO uint8_t  ALDOW;
X  volatile uint8_t  ALDOW;
N       uint8_t  RESERVED18[3];
N  __IO uint16_t ALDOY;
X  volatile uint16_t ALDOY;
N       uint16_t RESERVED19;
N  __IO uint8_t  ALMON;
X  volatile uint8_t  ALMON;
N       uint8_t  RESERVED20[3];
N  __IO uint16_t ALYEAR;
X  volatile uint16_t ALYEAR;
N       uint16_t RESERVED21;
N} LPC_RTC_TypeDef;
N
N/*------------- Watchdog Timer (WDT) -----------------------------------------*/
N/** @brief  Watchdog Timer (WDT) register structure definition */
Ntypedef struct
N{
N  __IO uint8_t  WDMOD;
X  volatile uint8_t  WDMOD;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t WDTC;
X  volatile uint32_t WDTC;
N  __O  uint8_t  WDFEED;
X  volatile  uint8_t  WDFEED;
N       uint8_t  RESERVED1[3];
N  __I  uint32_t WDTV;
X  volatile const  uint32_t WDTV;
N  __IO uint32_t WDCLKSEL;
X  volatile uint32_t WDCLKSEL;
N} LPC_WDT_TypeDef;
N
N/*------------- Analog-to-Digital Converter (ADC) ----------------------------*/
N/** @brief  Analog-to-Digital Converter (ADC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t ADCR;
X  volatile uint32_t ADCR;
N  __IO uint32_t ADGDR;
X  volatile uint32_t ADGDR;
N       uint32_t RESERVED0;
N  __IO uint32_t ADINTEN;
X  volatile uint32_t ADINTEN;
N  __I  uint32_t ADDR0;
X  volatile const  uint32_t ADDR0;
N  __I  uint32_t ADDR1;
X  volatile const  uint32_t ADDR1;
N  __I  uint32_t ADDR2;
X  volatile const  uint32_t ADDR2;
N  __I  uint32_t ADDR3;
X  volatile const  uint32_t ADDR3;
N  __I  uint32_t ADDR4;
X  volatile const  uint32_t ADDR4;
N  __I  uint32_t ADDR5;
X  volatile const  uint32_t ADDR5;
N  __I  uint32_t ADDR6;
X  volatile const  uint32_t ADDR6;
N  __I  uint32_t ADDR7;
X  volatile const  uint32_t ADDR7;
N  __I  uint32_t ADSTAT;
X  volatile const  uint32_t ADSTAT;
N  __IO uint32_t ADTRM;
X  volatile uint32_t ADTRM;
N} LPC_ADC_TypeDef;
N
N/*------------- Digital-to-Analog Converter (DAC) ----------------------------*/
N/** @brief  Digital-to-Analog Converter (DAC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t DACR;
X  volatile uint32_t DACR;
N  __IO uint32_t DACCTRL;
X  volatile uint32_t DACCTRL;
N  __IO uint16_t DACCNTVAL;
X  volatile uint16_t DACCNTVAL;
N} LPC_DAC_TypeDef;
N
N/*------------- Motor Control Pulse-Width Modulation (MCPWM) -----------------*/
N/** @brief  Motor Control Pulse-Width Modulation (MCPWM) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t MCCON;
X  volatile const  uint32_t MCCON;
N  __O  uint32_t MCCON_SET;
X  volatile  uint32_t MCCON_SET;
N  __O  uint32_t MCCON_CLR;
X  volatile  uint32_t MCCON_CLR;
N  __I  uint32_t MCCAPCON;
X  volatile const  uint32_t MCCAPCON;
N  __O  uint32_t MCCAPCON_SET;
X  volatile  uint32_t MCCAPCON_SET;
N  __O  uint32_t MCCAPCON_CLR;
X  volatile  uint32_t MCCAPCON_CLR;
N  __IO uint32_t MCTIM0;
X  volatile uint32_t MCTIM0;
N  __IO uint32_t MCTIM1;
X  volatile uint32_t MCTIM1;
N  __IO uint32_t MCTIM2;
X  volatile uint32_t MCTIM2;
N  __IO uint32_t MCPER0;
X  volatile uint32_t MCPER0;
N  __IO uint32_t MCPER1;
X  volatile uint32_t MCPER1;
N  __IO uint32_t MCPER2;
X  volatile uint32_t MCPER2;
N  __IO uint32_t MCPW0;
X  volatile uint32_t MCPW0;
N  __IO uint32_t MCPW1;
X  volatile uint32_t MCPW1;
N  __IO uint32_t MCPW2;
X  volatile uint32_t MCPW2;
N  __IO uint32_t MCDEADTIME;
X  volatile uint32_t MCDEADTIME;
N  __IO uint32_t MCCCP;
X  volatile uint32_t MCCCP;
N  __IO uint32_t MCCR0;
X  volatile uint32_t MCCR0;
N  __IO uint32_t MCCR1;
X  volatile uint32_t MCCR1;
N  __IO uint32_t MCCR2;
X  volatile uint32_t MCCR2;
N  __I  uint32_t MCINTEN;
X  volatile const  uint32_t MCINTEN;
N  __O  uint32_t MCINTEN_SET;
X  volatile  uint32_t MCINTEN_SET;
N  __O  uint32_t MCINTEN_CLR;
X  volatile  uint32_t MCINTEN_CLR;
N  __I  uint32_t MCCNTCON;
X  volatile const  uint32_t MCCNTCON;
N  __O  uint32_t MCCNTCON_SET;
X  volatile  uint32_t MCCNTCON_SET;
N  __O  uint32_t MCCNTCON_CLR;
X  volatile  uint32_t MCCNTCON_CLR;
N  __I  uint32_t MCINTFLAG;
X  volatile const  uint32_t MCINTFLAG;
N  __O  uint32_t MCINTFLAG_SET;
X  volatile  uint32_t MCINTFLAG_SET;
N  __O  uint32_t MCINTFLAG_CLR;
X  volatile  uint32_t MCINTFLAG_CLR;
N  __O  uint32_t MCCAP_CLR;
X  volatile  uint32_t MCCAP_CLR;
N} LPC_MCPWM_TypeDef;
N
N/*------------- Quadrature Encoder Interface (QEI) ---------------------------*/
N/** @brief  Quadrature Encoder Interface (QEI) register structure definition */
Ntypedef struct
N{
N  __O  uint32_t QEICON;
X  volatile  uint32_t QEICON;
N  __I  uint32_t QEISTAT;
X  volatile const  uint32_t QEISTAT;
N  __IO uint32_t QEICONF;
X  volatile uint32_t QEICONF;
N  __I  uint32_t QEIPOS;
X  volatile const  uint32_t QEIPOS;
N  __IO uint32_t QEIMAXPOS;
X  volatile uint32_t QEIMAXPOS;
N  __IO uint32_t CMPOS0;
X  volatile uint32_t CMPOS0;
N  __IO uint32_t CMPOS1;
X  volatile uint32_t CMPOS1;
N  __IO uint32_t CMPOS2;
X  volatile uint32_t CMPOS2;
N  __I  uint32_t INXCNT;
X  volatile const  uint32_t INXCNT;
N  __IO uint32_t INXCMP;
X  volatile uint32_t INXCMP;
N  __IO uint32_t QEILOAD;
X  volatile uint32_t QEILOAD;
N  __I  uint32_t QEITIME;
X  volatile const  uint32_t QEITIME;
N  __I  uint32_t QEIVEL;
X  volatile const  uint32_t QEIVEL;
N  __I  uint32_t QEICAP;
X  volatile const  uint32_t QEICAP;
N  __IO uint32_t VELCOMP;
X  volatile uint32_t VELCOMP;
N  __IO uint32_t FILTER;
X  volatile uint32_t FILTER;
N       uint32_t RESERVED0[998];
N  __O  uint32_t QEIIEC;
X  volatile  uint32_t QEIIEC;
N  __O  uint32_t QEIIES;
X  volatile  uint32_t QEIIES;
N  __I  uint32_t QEIINTSTAT;
X  volatile const  uint32_t QEIINTSTAT;
N  __I  uint32_t QEIIE;
X  volatile const  uint32_t QEIIE;
N  __O  uint32_t QEICLR;
X  volatile  uint32_t QEICLR;
N  __O  uint32_t QEISET;
X  volatile  uint32_t QEISET;
N} LPC_QEI_TypeDef;
N
N/*------------- Controller Area Network (CAN) --------------------------------*/
N/** @brief  Controller Area Network Acceptance Filter RAM (CANAF_RAM)structure definition */
Ntypedef struct
N{
N  __IO uint32_t mask[512];              /* ID Masks                           */
X  volatile uint32_t mask[512];               
N} LPC_CANAF_RAM_TypeDef;
N
N/** @brief  Controller Area Network Acceptance Filter(CANAF) register structure definition */
Ntypedef struct                          /* Acceptance Filter Registers        */
N{
N  __IO uint32_t AFMR;
X  volatile uint32_t AFMR;
N  __IO uint32_t SFF_sa;
X  volatile uint32_t SFF_sa;
N  __IO uint32_t SFF_GRP_sa;
X  volatile uint32_t SFF_GRP_sa;
N  __IO uint32_t EFF_sa;
X  volatile uint32_t EFF_sa;
N  __IO uint32_t EFF_GRP_sa;
X  volatile uint32_t EFF_GRP_sa;
N  __IO uint32_t ENDofTable;
X  volatile uint32_t ENDofTable;
N  __I  uint32_t LUTerrAd;
X  volatile const  uint32_t LUTerrAd;
N  __I  uint32_t LUTerr;
X  volatile const  uint32_t LUTerr;
N  __IO uint32_t FCANIE;
X  volatile uint32_t FCANIE;
N  __IO uint32_t FCANIC0;
X  volatile uint32_t FCANIC0;
N  __IO uint32_t FCANIC1;
X  volatile uint32_t FCANIC1;
N} LPC_CANAF_TypeDef;
N
N/** @brief  Controller Area Network Central (CANCR) register structure definition */
Ntypedef struct                          /* Central Registers                  */
N{
N  __I  uint32_t CANTxSR;
X  volatile const  uint32_t CANTxSR;
N  __I  uint32_t CANRxSR;
X  volatile const  uint32_t CANRxSR;
N  __I  uint32_t CANMSR;
X  volatile const  uint32_t CANMSR;
N} LPC_CANCR_TypeDef;
N
N/** @brief  Controller Area Network Controller (CAN) register structure definition */
Ntypedef struct                          /* Controller Registers               */
N{
N  __IO uint32_t MOD;
X  volatile uint32_t MOD;
N  __O  uint32_t CMR;
X  volatile  uint32_t CMR;
N  __IO uint32_t GSR;
X  volatile uint32_t GSR;
N  __I  uint32_t ICR;
X  volatile const  uint32_t ICR;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  __IO uint32_t BTR;
X  volatile uint32_t BTR;
N  __IO uint32_t EWL;
X  volatile uint32_t EWL;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t RFS;
X  volatile uint32_t RFS;
N  __IO uint32_t RID;
X  volatile uint32_t RID;
N  __IO uint32_t RDA;
X  volatile uint32_t RDA;
N  __IO uint32_t RDB;
X  volatile uint32_t RDB;
N  __IO uint32_t TFI1;
X  volatile uint32_t TFI1;
N  __IO uint32_t TID1;
X  volatile uint32_t TID1;
N  __IO uint32_t TDA1;
X  volatile uint32_t TDA1;
N  __IO uint32_t TDB1;
X  volatile uint32_t TDB1;
N  __IO uint32_t TFI2;
X  volatile uint32_t TFI2;
N  __IO uint32_t TID2;
X  volatile uint32_t TID2;
N  __IO uint32_t TDA2;
X  volatile uint32_t TDA2;
N  __IO uint32_t TDB2;
X  volatile uint32_t TDB2;
N  __IO uint32_t TFI3;
X  volatile uint32_t TFI3;
N  __IO uint32_t TID3;
X  volatile uint32_t TID3;
N  __IO uint32_t TDA3;
X  volatile uint32_t TDA3;
N  __IO uint32_t TDB3;
X  volatile uint32_t TDB3;
N} LPC_CAN_TypeDef;
N
N/*------------- General Purpose Direct Memory Access (GPDMA) -----------------*/
N/** @brief  General Purpose Direct Memory Access (GPDMA) register structure definition */
Ntypedef struct                          /* Common Registers                   */
N{
N  __I  uint32_t DMACIntStat;
X  volatile const  uint32_t DMACIntStat;
N  __I  uint32_t DMACIntTCStat;
X  volatile const  uint32_t DMACIntTCStat;
N  __O  uint32_t DMACIntTCClear;
X  volatile  uint32_t DMACIntTCClear;
N  __I  uint32_t DMACIntErrStat;
X  volatile const  uint32_t DMACIntErrStat;
N  __O  uint32_t DMACIntErrClr;
X  volatile  uint32_t DMACIntErrClr;
N  __I  uint32_t DMACRawIntTCStat;
X  volatile const  uint32_t DMACRawIntTCStat;
N  __I  uint32_t DMACRawIntErrStat;
X  volatile const  uint32_t DMACRawIntErrStat;
N  __I  uint32_t DMACEnbldChns;
X  volatile const  uint32_t DMACEnbldChns;
N  __IO uint32_t DMACSoftBReq;
X  volatile uint32_t DMACSoftBReq;
N  __IO uint32_t DMACSoftSReq;
X  volatile uint32_t DMACSoftSReq;
N  __IO uint32_t DMACSoftLBReq;
X  volatile uint32_t DMACSoftLBReq;
N  __IO uint32_t DMACSoftLSReq;
X  volatile uint32_t DMACSoftLSReq;
N  __IO uint32_t DMACConfig;
X  volatile uint32_t DMACConfig;
N  __IO uint32_t DMACSync;
X  volatile uint32_t DMACSync;
N} LPC_GPDMA_TypeDef;
N
N/** @brief  General Purpose Direct Memory Access Channel (GPDMACH) register structure definition */
Ntypedef struct                          /* Channel Registers                  */
N{
N  __IO uint32_t DMACCSrcAddr;
X  volatile uint32_t DMACCSrcAddr;
N  __IO uint32_t DMACCDestAddr;
X  volatile uint32_t DMACCDestAddr;
N  __IO uint32_t DMACCLLI;
X  volatile uint32_t DMACCLLI;
N  __IO uint32_t DMACCControl;
X  volatile uint32_t DMACCControl;
N  __IO uint32_t DMACCConfig;
X  volatile uint32_t DMACCConfig;
N} LPC_GPDMACH_TypeDef;
N
N/*------------- Universal Serial Bus (USB) -----------------------------------*/
N/** @brief  Universal Serial Bus (USB) register structure definition */
Ntypedef struct
N{
N  __I  uint32_t HcRevision;             /* USB Host Registers                 */
X  volatile const  uint32_t HcRevision;              
N  __IO uint32_t HcControl;
X  volatile uint32_t HcControl;
N  __IO uint32_t HcCommandStatus;
X  volatile uint32_t HcCommandStatus;
N  __IO uint32_t HcInterruptStatus;
X  volatile uint32_t HcInterruptStatus;
N  __IO uint32_t HcInterruptEnable;
X  volatile uint32_t HcInterruptEnable;
N  __IO uint32_t HcInterruptDisable;
X  volatile uint32_t HcInterruptDisable;
N  __IO uint32_t HcHCCA;
X  volatile uint32_t HcHCCA;
N  __I  uint32_t HcPeriodCurrentED;
X  volatile const  uint32_t HcPeriodCurrentED;
N  __IO uint32_t HcControlHeadED;
X  volatile uint32_t HcControlHeadED;
N  __IO uint32_t HcControlCurrentED;
X  volatile uint32_t HcControlCurrentED;
N  __IO uint32_t HcBulkHeadED;
X  volatile uint32_t HcBulkHeadED;
N  __IO uint32_t HcBulkCurrentED;
X  volatile uint32_t HcBulkCurrentED;
N  __I  uint32_t HcDoneHead;
X  volatile const  uint32_t HcDoneHead;
N  __IO uint32_t HcFmInterval;
X  volatile uint32_t HcFmInterval;
N  __I  uint32_t HcFmRemaining;
X  volatile const  uint32_t HcFmRemaining;
N  __I  uint32_t HcFmNumber;
X  volatile const  uint32_t HcFmNumber;
N  __IO uint32_t HcPeriodicStart;
X  volatile uint32_t HcPeriodicStart;
N  __IO uint32_t HcLSTreshold;
X  volatile uint32_t HcLSTreshold;
N  __IO uint32_t HcRhDescriptorA;
X  volatile uint32_t HcRhDescriptorA;
N  __IO uint32_t HcRhDescriptorB;
X  volatile uint32_t HcRhDescriptorB;
N  __IO uint32_t HcRhStatus;
X  volatile uint32_t HcRhStatus;
N  __IO uint32_t HcRhPortStatus1;
X  volatile uint32_t HcRhPortStatus1;
N  __IO uint32_t HcRhPortStatus2;
X  volatile uint32_t HcRhPortStatus2;
N       uint32_t RESERVED0[40];
N  __I  uint32_t Module_ID;
X  volatile const  uint32_t Module_ID;
N
N  __I  uint32_t OTGIntSt;               /* USB On-The-Go Registers            */
X  volatile const  uint32_t OTGIntSt;                
N  __IO uint32_t OTGIntEn;
X  volatile uint32_t OTGIntEn;
N  __O  uint32_t OTGIntSet;
X  volatile  uint32_t OTGIntSet;
N  __O  uint32_t OTGIntClr;
X  volatile  uint32_t OTGIntClr;
N  __IO uint32_t OTGStCtrl;
X  volatile uint32_t OTGStCtrl;
N  __IO uint32_t OTGTmr;
X  volatile uint32_t OTGTmr;
N       uint32_t RESERVED1[58];
N
N  __I  uint32_t USBDevIntSt;            /* USB Device Interrupt Registers     */
X  volatile const  uint32_t USBDevIntSt;             
N  __IO uint32_t USBDevIntEn;
X  volatile uint32_t USBDevIntEn;
N  __O  uint32_t USBDevIntClr;
X  volatile  uint32_t USBDevIntClr;
N  __O  uint32_t USBDevIntSet;
X  volatile  uint32_t USBDevIntSet;
N
N  __O  uint32_t USBCmdCode;             /* USB Device SIE Command Registers   */
X  volatile  uint32_t USBCmdCode;              
N  __I  uint32_t USBCmdData;
X  volatile const  uint32_t USBCmdData;
N
N  __I  uint32_t USBRxData;              /* USB Device Transfer Registers      */
X  volatile const  uint32_t USBRxData;               
N  __O  uint32_t USBTxData;
X  volatile  uint32_t USBTxData;
N  __I  uint32_t USBRxPLen;
X  volatile const  uint32_t USBRxPLen;
N  __O  uint32_t USBTxPLen;
X  volatile  uint32_t USBTxPLen;
N  __IO uint32_t USBCtrl;
X  volatile uint32_t USBCtrl;
N  __O  uint32_t USBDevIntPri;
X  volatile  uint32_t USBDevIntPri;
N
N  __I  uint32_t USBEpIntSt;             /* USB Device Endpoint Interrupt Regs */
X  volatile const  uint32_t USBEpIntSt;              
N  __IO uint32_t USBEpIntEn;
X  volatile uint32_t USBEpIntEn;
N  __O  uint32_t USBEpIntClr;
X  volatile  uint32_t USBEpIntClr;
N  __O  uint32_t USBEpIntSet;
X  volatile  uint32_t USBEpIntSet;
N  __O  uint32_t USBEpIntPri;
X  volatile  uint32_t USBEpIntPri;
N
N  __IO uint32_t USBReEp;                /* USB Device Endpoint Realization Reg*/
X  volatile uint32_t USBReEp;                 
N  __O  uint32_t USBEpInd;
X  volatile  uint32_t USBEpInd;
N  __IO uint32_t USBMaxPSize;
X  volatile uint32_t USBMaxPSize;
N
N  __I  uint32_t USBDMARSt;              /* USB Device DMA Registers           */
X  volatile const  uint32_t USBDMARSt;               
N  __O  uint32_t USBDMARClr;
X  volatile  uint32_t USBDMARClr;
N  __O  uint32_t USBDMARSet;
X  volatile  uint32_t USBDMARSet;
N       uint32_t RESERVED2[9];
N  __IO uint32_t USBUDCAH;
X  volatile uint32_t USBUDCAH;
N  __I  uint32_t USBEpDMASt;
X  volatile const  uint32_t USBEpDMASt;
N  __O  uint32_t USBEpDMAEn;
X  volatile  uint32_t USBEpDMAEn;
N  __O  uint32_t USBEpDMADis;
X  volatile  uint32_t USBEpDMADis;
N  __I  uint32_t USBDMAIntSt;
X  volatile const  uint32_t USBDMAIntSt;
N  __IO uint32_t USBDMAIntEn;
X  volatile uint32_t USBDMAIntEn;
N       uint32_t RESERVED3[2];
N  __I  uint32_t USBEoTIntSt;
X  volatile const  uint32_t USBEoTIntSt;
N  __O  uint32_t USBEoTIntClr;
X  volatile  uint32_t USBEoTIntClr;
N  __O  uint32_t USBEoTIntSet;
X  volatile  uint32_t USBEoTIntSet;
N  __I  uint32_t USBNDDRIntSt;
X  volatile const  uint32_t USBNDDRIntSt;
N  __O  uint32_t USBNDDRIntClr;
X  volatile  uint32_t USBNDDRIntClr;
N  __O  uint32_t USBNDDRIntSet;
X  volatile  uint32_t USBNDDRIntSet;
N  __I  uint32_t USBSysErrIntSt;
X  volatile const  uint32_t USBSysErrIntSt;
N  __O  uint32_t USBSysErrIntClr;
X  volatile  uint32_t USBSysErrIntClr;
N  __O  uint32_t USBSysErrIntSet;
X  volatile  uint32_t USBSysErrIntSet;
N       uint32_t RESERVED4[15];
N
N  union {
N  __I  uint32_t I2C_RX;                 /* USB OTG I2C Registers              */
X  volatile const  uint32_t I2C_RX;                  
N  __O  uint32_t I2C_TX;
X  volatile  uint32_t I2C_TX;
N  };
N  __I  uint32_t I2C_STS;
X  volatile const  uint32_t I2C_STS;
N  __IO uint32_t I2C_CTL;
X  volatile uint32_t I2C_CTL;
N  __IO uint32_t I2C_CLKHI;
X  volatile uint32_t I2C_CLKHI;
N  __O  uint32_t I2C_CLKLO;
X  volatile  uint32_t I2C_CLKLO;
N       uint32_t RESERVED5[824];
N
N  union {
N  __IO uint32_t USBClkCtrl;             /* USB Clock Control Registers        */
X  volatile uint32_t USBClkCtrl;              
N  __IO uint32_t OTGClkCtrl;
X  volatile uint32_t OTGClkCtrl;
N  };
N  union {
N  __I  uint32_t USBClkSt;
X  volatile const  uint32_t USBClkSt;
N  __I  uint32_t OTGClkSt;
X  volatile const  uint32_t OTGClkSt;
N  };
N} LPC_USB_TypeDef;
N
N/*------------- Ethernet Media Access Controller (EMAC) ----------------------*/
N/** @brief  Ethernet Media Access Controller (EMAC) register structure definition */
Ntypedef struct
N{
N  __IO uint32_t MAC1;                   /* MAC Registers                      */
X  volatile uint32_t MAC1;                    
N  __IO uint32_t MAC2;
X  volatile uint32_t MAC2;
N  __IO uint32_t IPGT;
X  volatile uint32_t IPGT;
N  __IO uint32_t IPGR;
X  volatile uint32_t IPGR;
N  __IO uint32_t CLRT;
X  volatile uint32_t CLRT;
N  __IO uint32_t MAXF;
X  volatile uint32_t MAXF;
N  __IO uint32_t SUPP;
X  volatile uint32_t SUPP;
N  __IO uint32_t TEST;
X  volatile uint32_t TEST;
N  __IO uint32_t MCFG;
X  volatile uint32_t MCFG;
N  __IO uint32_t MCMD;
X  volatile uint32_t MCMD;
N  __IO uint32_t MADR;
X  volatile uint32_t MADR;
N  __O  uint32_t MWTD;
X  volatile  uint32_t MWTD;
N  __I  uint32_t MRDD;
X  volatile const  uint32_t MRDD;
N  __I  uint32_t MIND;
X  volatile const  uint32_t MIND;
N       uint32_t RESERVED0[2];
N  __IO uint32_t SA0;
X  volatile uint32_t SA0;
N  __IO uint32_t SA1;
X  volatile uint32_t SA1;
N  __IO uint32_t SA2;
X  volatile uint32_t SA2;
N       uint32_t RESERVED1[45];
N  __IO uint32_t Command;                /* Control Registers                  */
X  volatile uint32_t Command;                 
N  __I  uint32_t Status;
X  volatile const  uint32_t Status;
N  __IO uint32_t RxDescriptor;
X  volatile uint32_t RxDescriptor;
N  __IO uint32_t RxStatus;
X  volatile uint32_t RxStatus;
N  __IO uint32_t RxDescriptorNumber;
X  volatile uint32_t RxDescriptorNumber;
N  __I  uint32_t RxProduceIndex;
X  volatile const  uint32_t RxProduceIndex;
N  __IO uint32_t RxConsumeIndex;
X  volatile uint32_t RxConsumeIndex;
N  __IO uint32_t TxDescriptor;
X  volatile uint32_t TxDescriptor;
N  __IO uint32_t TxStatus;
X  volatile uint32_t TxStatus;
N  __IO uint32_t TxDescriptorNumber;
X  volatile uint32_t TxDescriptorNumber;
N  __IO uint32_t TxProduceIndex;
X  volatile uint32_t TxProduceIndex;
N  __I  uint32_t TxConsumeIndex;
X  volatile const  uint32_t TxConsumeIndex;
N       uint32_t RESERVED2[10];
N  __I  uint32_t TSV0;
X  volatile const  uint32_t TSV0;
N  __I  uint32_t TSV1;
X  volatile const  uint32_t TSV1;
N  __I  uint32_t RSV;
X  volatile const  uint32_t RSV;
N       uint32_t RESERVED3[3];
N  __IO uint32_t FlowControlCounter;
X  volatile uint32_t FlowControlCounter;
N  __I  uint32_t FlowControlStatus;
X  volatile const  uint32_t FlowControlStatus;
N       uint32_t RESERVED4[34];
N  __IO uint32_t RxFilterCtrl;           /* Rx Filter Registers                */
X  volatile uint32_t RxFilterCtrl;            
N  __IO uint32_t RxFilterWoLStatus;
X  volatile uint32_t RxFilterWoLStatus;
N  __IO uint32_t RxFilterWoLClear;
X  volatile uint32_t RxFilterWoLClear;
N       uint32_t RESERVED5;
N  __IO uint32_t HashFilterL;
X  volatile uint32_t HashFilterL;
N  __IO uint32_t HashFilterH;
X  volatile uint32_t HashFilterH;
N       uint32_t RESERVED6[882];
N  __I  uint32_t IntStatus;              /* Module Control Registers           */
X  volatile const  uint32_t IntStatus;               
N  __IO uint32_t IntEnable;
X  volatile uint32_t IntEnable;
N  __O  uint32_t IntClear;
X  volatile  uint32_t IntClear;
N  __O  uint32_t IntSet;
X  volatile  uint32_t IntSet;
N       uint32_t RESERVED7;
N  __IO uint32_t PowerDown;
X  volatile uint32_t PowerDown;
N       uint32_t RESERVED8;
N  __IO uint32_t Module_ID;
X  volatile uint32_t Module_ID;
N} LPC_EMAC_TypeDef;
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/* Base addresses                                                             */
N#define LPC_FLASH_BASE        (0x00000000UL)
N#define LPC_RAM_BASE          (0x10000000UL)
N#ifdef __LPC17XX_REV00
S#define LPC_AHBRAM0_BASE      (0x20000000UL)
S#define LPC_AHBRAM1_BASE      (0x20004000UL)
N#else
N#define LPC_AHBRAM0_BASE      (0x2007C000UL)
N#define LPC_AHBRAM1_BASE      (0x20080000UL)
N#endif
N#define LPC_GPIO_BASE         (0x2009C000UL)
N#define LPC_APB0_BASE         (0x40000000UL)
N#define LPC_APB1_BASE         (0x40080000UL)
N#define LPC_AHB_BASE          (0x50000000UL)
N#define LPC_CM3_BASE          (0xE0000000UL)
N
N/* APB0 peripherals                                                           */
N#define LPC_WDT_BASE          (LPC_APB0_BASE + 0x00000)
N#define LPC_TIM0_BASE         (LPC_APB0_BASE + 0x04000)
N#define LPC_TIM1_BASE         (LPC_APB0_BASE + 0x08000)
N#define LPC_UART0_BASE        (LPC_APB0_BASE + 0x0C000)
N#define LPC_UART1_BASE        (LPC_APB0_BASE + 0x10000)
N#define LPC_PWM1_BASE         (LPC_APB0_BASE + 0x18000)
N#define LPC_I2C0_BASE         (LPC_APB0_BASE + 0x1C000)
N#define LPC_SPI_BASE          (LPC_APB0_BASE + 0x20000)
N#define LPC_RTC_BASE          (LPC_APB0_BASE + 0x24000)
N#define LPC_GPIOINT_BASE      (LPC_APB0_BASE + 0x28080)
N#define LPC_PINCON_BASE       (LPC_APB0_BASE + 0x2C000)
N#define LPC_SSP1_BASE         (LPC_APB0_BASE + 0x30000)
N#define LPC_ADC_BASE          (LPC_APB0_BASE + 0x34000)
N#define LPC_CANAF_RAM_BASE    (LPC_APB0_BASE + 0x38000)
N#define LPC_CANAF_BASE        (LPC_APB0_BASE + 0x3C000)
N#define LPC_CANCR_BASE        (LPC_APB0_BASE + 0x40000)
N#define LPC_CAN1_BASE         (LPC_APB0_BASE + 0x44000)
N#define LPC_CAN2_BASE         (LPC_APB0_BASE + 0x48000)
N#define LPC_I2C1_BASE         (LPC_APB0_BASE + 0x5C000)
N
N/* APB1 peripherals                                                           */
N#define LPC_SSP0_BASE         (LPC_APB1_BASE + 0x08000)
N#define LPC_DAC_BASE          (LPC_APB1_BASE + 0x0C000)
N#define LPC_TIM2_BASE         (LPC_APB1_BASE + 0x10000)
N#define LPC_TIM3_BASE         (LPC_APB1_BASE + 0x14000)
N#define LPC_UART2_BASE        (LPC_APB1_BASE + 0x18000)
N#define LPC_UART3_BASE        (LPC_APB1_BASE + 0x1C000)
N#define LPC_I2C2_BASE         (LPC_APB1_BASE + 0x20000)
N#define LPC_I2S_BASE          (LPC_APB1_BASE + 0x28000)
N#define LPC_RIT_BASE          (LPC_APB1_BASE + 0x30000)
N#define LPC_MCPWM_BASE        (LPC_APB1_BASE + 0x38000)
N#define LPC_QEI_BASE          (LPC_APB1_BASE + 0x3C000)
N#define LPC_SC_BASE           (LPC_APB1_BASE + 0x7C000)
N
N/* AHB peripherals                                                            */
N#define LPC_EMAC_BASE         (LPC_AHB_BASE  + 0x00000)
N#define LPC_GPDMA_BASE        (LPC_AHB_BASE  + 0x04000)
N#define LPC_GPDMACH0_BASE     (LPC_AHB_BASE  + 0x04100)
N#define LPC_GPDMACH1_BASE     (LPC_AHB_BASE  + 0x04120)
N#define LPC_GPDMACH2_BASE     (LPC_AHB_BASE  + 0x04140)
N#define LPC_GPDMACH3_BASE     (LPC_AHB_BASE  + 0x04160)
N#define LPC_GPDMACH4_BASE     (LPC_AHB_BASE  + 0x04180)
N#define LPC_GPDMACH5_BASE     (LPC_AHB_BASE  + 0x041A0)
N#define LPC_GPDMACH6_BASE     (LPC_AHB_BASE  + 0x041C0)
N#define LPC_GPDMACH7_BASE     (LPC_AHB_BASE  + 0x041E0)
N#define LPC_USB_BASE          (LPC_AHB_BASE  + 0x0C000)
N
N/* GPIOs                                                                      */
N#define LPC_GPIO0_BASE        (LPC_GPIO_BASE + 0x00000)
N#define LPC_GPIO1_BASE        (LPC_GPIO_BASE + 0x00020)
N#define LPC_GPIO2_BASE        (LPC_GPIO_BASE + 0x00040)
N#define LPC_GPIO3_BASE        (LPC_GPIO_BASE + 0x00060)
N#define LPC_GPIO4_BASE        (LPC_GPIO_BASE + 0x00080)
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N#define LPC_SC                ((LPC_SC_TypeDef        *) LPC_SC_BASE       )
N#define LPC_GPIO0             ((LPC_GPIO_TypeDef      *) LPC_GPIO0_BASE    )
N#define LPC_GPIO1             ((LPC_GPIO_TypeDef      *) LPC_GPIO1_BASE    )
N#define LPC_GPIO2             ((LPC_GPIO_TypeDef      *) LPC_GPIO2_BASE    )
N#define LPC_GPIO3             ((LPC_GPIO_TypeDef      *) LPC_GPIO3_BASE    )
N#define LPC_GPIO4             ((LPC_GPIO_TypeDef      *) LPC_GPIO4_BASE    )
N#define LPC_WDT               ((LPC_WDT_TypeDef       *) LPC_WDT_BASE      )
N#define LPC_TIM0              ((LPC_TIM_TypeDef       *) LPC_TIM0_BASE     )
N#define LPC_TIM1              ((LPC_TIM_TypeDef       *) LPC_TIM1_BASE     )
N#define LPC_TIM2              ((LPC_TIM_TypeDef       *) LPC_TIM2_BASE     )
N#define LPC_TIM3              ((LPC_TIM_TypeDef       *) LPC_TIM3_BASE     )
N#define LPC_RIT               ((LPC_RIT_TypeDef       *) LPC_RIT_BASE      )
N#define LPC_UART0             ((LPC_UART_TypeDef      *) LPC_UART0_BASE    )
N#define LPC_UART1             ((LPC_UART1_TypeDef     *) LPC_UART1_BASE    )
N#define LPC_UART2             ((LPC_UART_TypeDef      *) LPC_UART2_BASE    )
N#define LPC_UART3             ((LPC_UART_TypeDef      *) LPC_UART3_BASE    )
N#define LPC_PWM1              ((LPC_PWM_TypeDef       *) LPC_PWM1_BASE     )
N#define LPC_I2C0              ((LPC_I2C_TypeDef       *) LPC_I2C0_BASE     )
N#define LPC_I2C1              ((LPC_I2C_TypeDef       *) LPC_I2C1_BASE     )
N#define LPC_I2C2              ((LPC_I2C_TypeDef       *) LPC_I2C2_BASE     )
N#define LPC_I2S               ((LPC_I2S_TypeDef       *) LPC_I2S_BASE      )
N#define LPC_SPI               ((LPC_SPI_TypeDef       *) LPC_SPI_BASE      )
N#define LPC_RTC               ((LPC_RTC_TypeDef       *) LPC_RTC_BASE      )
N#define LPC_GPIOINT           ((LPC_GPIOINT_TypeDef   *) LPC_GPIOINT_BASE  )
N#define LPC_PINCON            ((LPC_PINCON_TypeDef    *) LPC_PINCON_BASE   )
N#define LPC_SSP0              ((LPC_SSP_TypeDef       *) LPC_SSP0_BASE     )
N#define LPC_SSP1              ((LPC_SSP_TypeDef       *) LPC_SSP1_BASE     )
N#define LPC_ADC               ((LPC_ADC_TypeDef       *) LPC_ADC_BASE      )
N#define LPC_DAC               ((LPC_DAC_TypeDef       *) LPC_DAC_BASE      )
N#define LPC_CANAF_RAM         ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_RAM_BASE)
N#define LPC_CANAF             ((LPC_CANAF_TypeDef     *) LPC_CANAF_BASE    )
N#define LPC_CANCR             ((LPC_CANCR_TypeDef     *) LPC_CANCR_BASE    )
N#define LPC_CAN1              ((LPC_CAN_TypeDef       *) LPC_CAN1_BASE     )
N#define LPC_CAN2              ((LPC_CAN_TypeDef       *) LPC_CAN2_BASE     )
N#define LPC_MCPWM             ((LPC_MCPWM_TypeDef     *) LPC_MCPWM_BASE    )
N#define LPC_QEI               ((LPC_QEI_TypeDef       *) LPC_QEI_BASE      )
N#define LPC_EMAC              ((LPC_EMAC_TypeDef      *) LPC_EMAC_BASE     )
N#define LPC_GPDMA             ((LPC_GPDMA_TypeDef     *) LPC_GPDMA_BASE    )
N#define LPC_GPDMACH0          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH0_BASE )
N#define LPC_GPDMACH1          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH1_BASE )
N#define LPC_GPDMACH2          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH2_BASE )
N#define LPC_GPDMACH3          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH3_BASE )
N#define LPC_GPDMACH4          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH4_BASE )
N#define LPC_GPDMACH5          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH5_BASE )
N#define LPC_GPDMACH6          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH6_BASE )
N#define LPC_GPDMACH7          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH7_BASE )
N#define LPC_USB               ((LPC_USB_TypeDef       *) LPC_USB_BASE      )
N
N/**
N * @}
N */
N
N#endif  // __LPC17xx_H__
L 15 ".\UCNC\Flash.h" 2
N
N#include "Defs.h"
N#include "LPC1768_define.h"			// there are my definitions for benefit
L 1 ".\Drivers\LPC1768_define.h" 1
N
N#ifndef __LPC1768_DEFINE_H__
N#define __LPC1768_DEFINE_H__
N
N
N/**************************************************/
N/*   КОНСТРУКТОР БАЙТОВ                           */
N/**************************************************/
N// Использовать для сборки 16- и 32- разрядных чисел
N// Например:
N// 32-разрядное число 00001111001100110000000011111111
N// задается так: (b00001111 byte3) | (b00110011 byte2) | (b00000000 byte1) | (b11111111 byte0)
N#define byte0 << 0
N#define byte1 << 8
N#define byte2 << 16
N#define byte3 << 24
N
N
N/**************************************************/
N/*   ДВОИЧНЫЕ ГРУППЫ                              */
N/**************************************************/
N//использовать вместо двоичных чисел
N#define b00 0UL
N#define b01 1UL
N#define b10 2UL
N#define b11 3UL
N
N#define b000 0UL
N#define b001 1UL
N#define b010 2UL
N#define b011 3UL
N#define b100 4UL
N#define b101 5UL
N#define b110 6UL
N#define b111 7UL
N
N#define b0000 0UL
N#define b0001 1UL
N#define b0010 2UL
N#define b0011 3UL
N#define b0100 4UL
N#define b0101 5UL
N#define b0110 6UL
N#define b0111 7UL
N#define b1000 8UL
N#define b1001 9UL
N#define b1010 10UL
N#define b1011 11UL
N#define b1100 12UL
N#define b1101 13UL
N#define b1110 14UL
N#define b1111 15UL
N
N#define b00000000 0UL
N#define b00000001 1UL
N#define b00000010 2UL
N#define b00000011 3UL
N#define b00000100 4UL
N#define b00000101 5UL
N#define b00000110 6UL
N#define b00000111 7UL
N#define b00001000 8UL
N#define b00001001 9UL
N#define b00001010 10UL
N#define b00001011 11UL
N#define b00001100 12UL
N#define b00001101 13UL
N#define b00001110 14UL
N#define b00001111 15UL
N#define b00010000 16UL
N#define b00010001 17UL
N#define b00010010 18UL
N#define b00010011 19UL
N#define b00010100 20UL
N#define b00010101 21UL
N#define b00010110 22UL
N#define b00010111 23UL
N#define b00011000 24UL
N#define b00011001 25UL
N#define b00011010 26UL
N#define b00011011 27UL
N#define b00011100 28UL
N#define b00011101 29UL
N#define b00011110 30UL
N#define b00011111 31UL
N#define b00100000 32UL
N#define b00100001 33UL
N#define b00100010 34UL
N#define b00100011 35UL
N#define b00100100 36UL
N#define b00100101 37UL
N#define b00100110 38UL
N#define b00100111 39UL
N#define b00101000 40UL
N#define b00101001 41UL
N#define b00101010 42UL
N#define b00101011 43UL
N#define b00101100 44UL
N#define b00101101 45UL
N#define b00101110 46UL
N#define b00101111 47UL
N#define b00110000 48UL
N#define b00110001 49UL
N#define b00110010 50UL
N#define b00110011 51UL
N#define b00110100 52UL
N#define b00110101 53UL
N#define b00110110 54UL
N#define b00110111 55UL
N#define b00111000 56UL
N#define b00111001 57UL
N#define b00111010 58UL
N#define b00111011 59UL
N#define b00111100 60UL
N#define b00111101 61UL
N#define b00111110 62UL
N#define b00111111 63UL
N#define b01000000 64UL
N#define b01000001 65UL
N#define b01000010 66UL
N#define b01000011 67UL
N#define b01000100 68UL
N#define b01000101 69UL
N#define b01000110 70UL
N#define b01000111 71UL
N#define b01001000 72UL
N#define b01001001 73UL
N#define b01001010 74UL
N#define b01001011 75UL
N#define b01001100 76UL
N#define b01001101 77UL
N#define b01001110 78UL
N#define b01001111 79UL
N#define b01010000 80UL
N#define b01010001 81UL
N#define b01010010 82UL
N#define b01010011 83UL
N#define b01010100 84UL
N#define b01010101 85UL
N#define b01010110 86UL
N#define b01010111 87UL
N#define b01011000 88UL
N#define b01011001 89UL
N#define b01011010 90UL
N#define b01011011 91UL
N#define b01011100 92UL
N#define b01011101 93UL
N#define b01011110 94UL
N#define b01011111 95UL
N#define b01100000 96UL
N#define b01100001 97UL
N#define b01100010 98UL
N#define b01100011 99UL
N#define b01100100 100UL
N#define b01100101 101UL
N#define b01100110 102UL
N#define b01100111 103UL
N#define b01101000 104UL
N#define b01101001 105UL
N#define b01101010 106UL
N#define b01101011 107UL
N#define b01101100 108UL
N#define b01101101 109UL
N#define b01101110 110UL
N#define b01101111 111UL
N#define b01110000 112UL
N#define b01110001 113UL
N#define b01110010 114UL
N#define b01110011 115UL
N#define b01110100 116UL
N#define b01110101 117UL
N#define b01110110 118UL
N#define b01110111 119UL
N#define b01111000 120UL
N#define b01111001 121UL
N#define b01111010 122UL
N#define b01111011 123UL
N#define b01111100 124UL
N#define b01111101 125UL
N#define b01111110 126UL
N#define b01111111 127UL
N#define b10000000 128UL
N#define b10000001 129UL
N#define b10000010 130UL
N#define b10000011 131UL
N#define b10000100 132UL
N#define b10000101 133UL
N#define b10000110 134UL
N#define b10000111 135UL
N#define b10001000 136UL
N#define b10001001 137UL
N#define b10001010 138UL
N#define b10001011 139UL
N#define b10001100 140UL
N#define b10001101 141UL
N#define b10001110 142UL
N#define b10001111 143UL
N#define b10010000 144UL
N#define b10010001 145UL
N#define b10010010 146UL
N#define b10010011 147UL
N#define b10010100 148UL
N#define b10010101 149UL
N#define b10010110 150UL
N#define b10010111 151UL
N#define b10011000 152UL
N#define b10011001 153UL
N#define b10011010 154UL
N#define b10011011 155UL
N#define b10011100 156UL
N#define b10011101 157UL
N#define b10011110 158UL
N#define b10011111 159UL
N#define b10100000 160UL
N#define b10100001 161UL
N#define b10100010 162UL
N#define b10100011 163UL
N#define b10100100 164UL
N#define b10100101 165UL
N#define b10100110 166UL
N#define b10100111 167UL
N#define b10101000 168UL
N#define b10101001 169UL
N#define b10101010 170UL
N#define b10101011 171UL
N#define b10101100 172UL
N#define b10101101 173UL
N#define b10101110 174UL
N#define b10101111 175UL
N#define b10110000 176UL
N#define b10110001 177UL
N#define b10110010 178UL
N#define b10110011 179UL
N#define b10110100 180UL
N#define b10110101 181UL
N#define b10110110 182UL
N#define b10110111 183UL
N#define b10111000 184UL
N#define b10111001 185UL
N#define b10111010 186UL
N#define b10111011 187UL
N#define b10111100 188UL
N#define b10111101 189UL
N#define b10111110 190UL
N#define b10111111 191UL
N#define b11000000 192UL
N#define b11000001 193UL
N#define b11000010 194UL
N#define b11000011 195UL
N#define b11000100 196UL
N#define b11000101 197UL
N#define b11000110 198UL
N#define b11000111 199UL
N#define b11001000 200UL
N#define b11001001 201UL
N#define b11001010 202UL
N#define b11001011 203UL
N#define b11001100 204UL
N#define b11001101 205UL
N#define b11001110 206UL
N#define b11001111 207UL
N#define b11010000 208UL
N#define b11010001 209UL
N#define b11010010 210UL
N#define b11010011 211UL
N#define b11010100 212UL
N#define b11010101 213UL
N#define b11010110 214UL
N#define b11010111 215UL
N#define b11011000 216UL
N#define b11011001 217UL
N#define b11011010 218UL
N#define b11011011 219UL
N#define b11011100 220UL
N#define b11011101 221UL
N#define b11011110 222UL
N#define b11011111 223UL
N#define b11100000 224UL
N#define b11100001 225UL
N#define b11100010 226UL
N#define b11100011 227UL
N#define b11100100 228UL
N#define b11100101 229UL
N#define b11100110 230UL
N#define b11100111 231UL
N#define b11101000 232UL
N#define b11101001 233UL
N#define b11101010 234UL
N#define b11101011 235UL
N#define b11101100 236UL
N#define b11101101 237UL
N#define b11101110 238UL
N#define b11101111 239UL
N#define b11110000 240UL
N#define b11110001 241UL
N#define b11110010 242UL
N#define b11110011 243UL
N#define b11110100 244UL
N#define b11110101 245UL
N#define b11110110 246UL
N#define b11110111 247UL
N#define b11111000 248UL
N#define b11111001 249UL
N#define b11111010 250UL
N#define b11111011 251UL
N#define b11111100 252UL
N#define b11111101 253UL
N#define b11111110 254UL
N#define b11111111 255UL
N
N
N/**************************************************/
N/*   Port Pins                                    */
N/**************************************************/
N#define PIN0  (1UL << 0)
N#define PIN1  (1UL << 1)
N#define PIN2  (1UL << 2)
N#define PIN3  (1UL << 3)
N#define PIN4  (1UL << 4)
N#define PIN5  (1UL << 5)
N#define PIN6  (1UL << 6)
N#define PIN7  (1UL << 7)
N#define PIN8  (1UL << 8)
N#define PIN9  (1UL << 9)
N#define PIN10 (1UL << 10)
N#define PIN11 (1UL << 11)
N#define PIN12 (1UL << 12)
N#define PIN13 (1UL << 13)
N#define PIN14 (1UL << 14)
N#define PIN15 (1UL << 15)
N#define PIN16 (1UL << 16)
N#define PIN17 (1UL << 17)
N#define PIN18 (1UL << 18)
N#define PIN19 (1UL << 19)
N#define PIN20 (1UL << 20)
N#define PIN21 (1UL << 21)
N#define PIN22 (1UL << 22)
N#define PIN23 (1UL << 23)
N#define PIN24 (1UL << 24)
N#define PIN25 (1UL << 25)
N#define PIN26 (1UL << 26)
N#define PIN27 (1UL << 27)
N#define PIN28 (1UL << 28)
N#define PIN29 (1UL << 29)
N#define PIN30 (1UL << 30)
N#define PIN31 (1UL << 31)
N
N
N/**************************************************/
N/*   Rename of Registers                          */
N/**************************************************/
N
N// Rename of Pin Function Select Registers (PINSELx)
N//--------------------------------------------------
N//
N#define PORT0_0_to_15_FUNCTION      PINSEL0
N#define PORT0_16_to_31_FUNCTION     PINSEL1
N#define PORT1_0_to_15_FUNCTION      PINSEL2
N#define PORT1_16_to_31_FUNCTION     PINSEL3
N#define PORT2_0_to_15_FUNCTION      PINSEL4
N#define PORT2_16_to_31_FUNCTION     PINSEL5
N#define PORT3_0_to_15_FUNCTION      PINSEL6
N#define PORT3_16_to_31_FUNCTION     PINSEL7
N#define PORT4_0_to_15_FUNCTION      PINSEL8
N#define PORT4_16_to_31_FUNCTION     PINSEL9
N#define PORT2_2_to_6_TRACE_FUNCTION PINSEL10
N
N// Rename of Pin Mode Select Registers (PINMODEx)
N//--------------------------------------------------
N//
N#define PORT0_0_to_15_PULL_MODE     PINMODE0
N#define PORT0_16_to_31_PULL_MODE    PINMODE1
N#define PORT1_0_to_15_PULL_MODE     PINMODE2
N#define PORT1_16_to_31_PULL_MODE    PINMODE3
N#define PORT2_0_to_15_PULL_MODE     PINMODE4
N#define PORT3_16_to_31_PULL_MODE    PINMODE7
N#define PORT4_16_to_31_PULL_MODE    PINMODE9
N
N// Rename of Open Drain Pin Mode Select Registes (PINMODE_ODx)
N//--------------------------------------------------
N//
N#define PORT0_OPENDRAIN_MODE        PINMODE_OD0
N#define PORT1_OPENDRAIN_MODE        PINMODE_OD1
N#define PORT2_OPENDRAIN_MODE        PINMODE_OD2
N#define PORT3_OPENDRAIN_MODE        PINMODE_OD3
N#define PORT4_OPENDRAIN_MODE        PINMODE_OD4
N
N
N/**************************************************/
N/*   Configure I/O ports                          */
N/**************************************************/
N
N// Port0-Port4 Primary functions (reset values)
N//---------------------------------
N//
N#define PIN0_as_GPIO   (b00 << 0)
N#define PIN1_as_GPIO   (b00 << 2)
N#define PIN2_as_GPIO   (b00 << 4)
N#define PIN3_as_GPIO   (b00 << 6)
N#define PIN4_as_GPIO   (b00 << 8)
N#define PIN5_as_GPIO   (b00 << 10)
N#define PIN6_as_GPIO   (b00 << 12)
N#define PIN7_as_GPIO   (b00 << 14)
N#define PIN8_as_GPIO   (b00 << 16)
N#define PIN9_as_GPIO   (b00 << 18)
N#define PIN10_as_GPIO  (b00 << 20)
N#define PIN11_as_GPIO  (b00 << 22)
N#define PIN12_as_GPIO  (b00 << 24)
N#define PIN13_as_GPIO  (b00 << 26)
N#define PIN14_as_GPIO  (b00 << 28)
N#define PIN15_as_GPIO  (b00 << 30)
N#define PIN16_as_GPIO  (b00 << 0)
N#define PIN17_as_GPIO  (b00 << 2)
N#define PIN18_as_GPIO  (b00 << 4)
N#define PIN19_as_GPIO  (b00 << 6)
N#define PIN20_as_GPIO  (b00 << 8)
N#define PIN21_as_GPIO  (b00 << 10)
N#define PIN22_as_GPIO  (b00 << 12)
N#define PIN23_as_GPIO  (b00 << 14)
N#define PIN24_as_GPIO  (b00 << 16)
N#define PIN25_as_GPIO  (b00 << 18)
N#define PIN26_as_GPIO  (b00 << 20)
N#define PIN27_as_GPIO  (b00 << 22)
N#define PIN28_as_GPIO  (b00 << 24)
N#define PIN29_as_GPIO  (b00 << 26)
N#define PIN30_as_GPIO  (b00 << 28)
N#define PIN31_as_GPIO  (b00 << 30)
N
N
N// Port0 First alternate functions
N//-----------------------------------
N//
N#define PIN0_as_RD1       (b01 << 0)
N#define PIN1_as_TD1       (b01 << 2)
N#define PIN2_as_TXD0      (b01 << 4)
N#define PIN3_as_RXD0      (b01 << 6)
N#define PIN4_as_I2SRX_CLK (b01 << 8)
N#define PIN5_as_I2SRX_WS  (b01 << 10)
N#define PIN6_as_I2SRX_SDA (b01 << 12)
N#define PIN7_as_I2STX_CLK (b01 << 14)
N#define PIN8_as_I2STX_WS  (b01 << 16)
N#define PIN9_as_I2STX_SDA (b01 << 18)
N#define PIN10_as_TXD2     (b01 << 20)
N#define PIN11_as_RXD2     (b01 << 22)
N// Port0 Pin12 reserved
N// Port0 Pin13 reserved
N// Port0 Pin14 reserved
N#define PIN15_as_TXD1     (b01 << 30)
N#define PIN16_as_RXD1     (b01 << 0)
N#define PIN17_as_CTS1     (b01 << 2)
N#define PIN18_as_DCD1     (b01 << 4)
N#define PIN19_as_DSR1     (b01 << 6)
N#define PIN20_as_DTR1     (b01 << 8)
N#define PIN21_as_RI1      (b01 << 10)
N#define PIN22_as_RTS1     (b01 << 12)
N#define PIN23_as_AD0_0    (b01 << 14)
N#define PIN24_as_AD0_1    (b01 << 16)
N#define PIN25_as_AD0_2    (b01 << 18)
N#define PIN26_as_AD0_3    (b01 << 20)
N#define PIN27_as_SDA0     (b01 << 22)
N#define PIN28_as_SCL0     (b01 << 24)
N#define PIN29_as_USB_DP   (b01 << 26)
N#define PIN30_as_USB_DM   (b01 << 28)
N// Port0 Pin31 reserved
N
N
N// Port0 Second alternate functions
N//------------------------------------
N//
N#define PIN0_as_TXD3       (b10 << 0)
N#define PIN1_as_RXD3       (b10 << 2)
N#define PIN2_as_AD0_7      (b10 << 4)
N#define PIN3_as_AD0_6      (b10 << 6)
N#define PIN4_as_RD2        (b10 << 8)
N#define PIN5_as_TD2        (b10 << 10)
N#define PIN6_as_SSEL1      (b10 << 12)
N#define PIN7_as_SCK1       (b10 << 14)
N#define PIN8_as_MISO1      (b10 << 16)
N#define PIN9_as_MOSI1      (b10 << 18)
N#define PIN10_as_SDA2      (b10 << 20)
N#define PIN11_as_SCL2      (b10 << 22)
N// Port0 Pin12 reserved
N// Port0 Pin13 reserved
N// Port0 Pin14 reserved
N#define PIN15_as_SCK0      (b10 << 30)
N#define PIN16_as_SSEL0     (b10 << 0)
N#define PIN17_as_MISO0     (b10 << 2)
N#define PIN18_as_MOSI0     (b10 << 4)
N// Port0 Pin19 reserved
N// Port0 Pin20 reserved
N// Port0 Pin21 reserved
N// Port0 Pin22 reserved
N#define PIN23_as_I2SRX_CLK (b10 << 14)
N#define PIN24_as_I2SRX_WS  (b10 << 16)
N#define PIN25_as_I2SRX_SDA (b10 << 18)
N#define PIN26_as_AOUT      (b10 << 20)
N#define PIN27_as_USB_SDA   (b10 << 22)
N#define PIN28_as_USB_SCL   (b10 << 24)
N// Port0 Pin29 reserved
N// Port0 Pin30 reserved
N// Port0 Pin31 reserved
N
N
N// Port0 Third alternate functions
N//---------------------------------
N//
N#define PIN0_as_SDA1    (b11 << 0)
N#define PIN1_as_SCL1    (b11 << 2)
N// Port0 Pin2 reserved
N// Port0 Pin3 reserved
N#define PIN4_as_CAP2_0  (b11 << 8)
N#define PIN5_as_CAP2_1  (b11 << 10)
N#define PIN6_as_MAT2_0  (b11 << 12)
N#define PIN7_as_MAT2_1  (b11 << 14)
N#define PIN8_as_MAT2_2  (b11 << 16)
N#define PIN9_as_MAT2_3  (b11 << 18)
N#define PIN10_as_MAT3_0 (b11 << 20)
N#define PIN11_as_MAT3_1 (b11 << 22)
N// Port0 Pin12 reserved
N// Port0 Pin13 reserved
N// Port0 Pin14 reserved
N#define PIN15_as_SCK    (b11 << 30)
N#define PIN16_as_SSEL   (b11 << 0)
N#define PIN17_as_MISO   (b11 << 2)
N#define PIN18_as_MOSI   (b11 << 4)
N#define PIN19_as_SDA1   (b11 << 6)
N#define PIN20_as_SCL1   (b11 << 8)
N#define PIN21_as_RD1    (b11 << 10)
N#define PIN22_as_TD1    (b11 << 12)
N#define PIN23_as_CAP3_0 (b11 << 14)
N#define PIN24_as_CAP3_1 (b11 << 16)
N#define PIN25_as_TXD3   (b11 << 18)
N#define PIN26_as_RXD3   (b11 << 20)
N// Port0 Pin27 reserved
N// Port0 Pin28 reserved
N// Port0 Pin29 reserved
N// Port0 Pin30 reserved
N// Port0 Pin31 reserved
N
N
N// Port1 First alternate functions
N//--------------------------------------
N//
N#define PIN0_as_ENET_TXD0     (b01 << 0)
N#define PIN1_as_ENET_TXD1     (b01 << 2)
N// Port1 Pin2 reserved
N// Port1 Pin3 reserved
N#define PIN4_as_ENET_TX_EN    (b01 << 8)
N// Port1 Pin5 reserved
N// Port1 Pin6 reserved
N// Port1 Pin7 reserved
N#define PIN8_as_ENET_CRS      (b01 << 16)
N#define PIN9_as_ENET_RXD0     (b01 << 18)
N#define PIN10_as_ENET_RXD1    (b01 << 20)
N// Port1 Pin11 reserved
N// Port1 Pin12 reserved
N// Port1 Pin13 reserved
N#define PIN14_as_ENET_RX_ER   (b01 << 28)
N#define PIN15_as_ENET_REF_CLK (b01 << 30)
N#define PIN16_as_ENET_MDC     (b01 << 0)
N#define PIN17_as_ENET_MDIO    (b01 << 2)
N#define PIN18_as_USB_UP_LED   (b01 << 4)
N#define PIN19_as_MCOA0        (b01 << 6)
N#define PIN20_as_MCI0         (b01 << 8)
N#define PIN21_as_nMCABORT     (b01 << 10)
N#define PIN22_as_MCOB0        (b01 << 12)
N#define PIN23_as_MCI1         (b01 << 14)
N#define PIN24_as_MCI2         (b01 << 16)
N#define PIN25_as_MCOA1        (b01 << 18)
N#define PIN26_as_MCOB1        (b01 << 20)
N#define PIN27_as_CLKOUT       (b01 << 22)
N#define PIN28_as_MCOA2        (b01 << 24)
N#define PIN29_as_MCOB2        (b01 << 26)
N// Port1 Pin30 reserved
N// Port1 Pin31 reserved
N
N
N// Port1 Second alternate functions
N//------------------------------------
N//
N// Port1 Pin0 reserved
N// Port1 Pin1 reserved
N// Port1 Pin2 reserved
N// Port1 Pin3 reserved
N// Port1 Pin4 reserved
N// Port1 Pin5 reserved
N// Port1 Pin6 reserved
N// Port1 Pin7 reserved
N// Port1 Pin8 reserved
N// Port1 Pin9 reserved
N// Port1 Pin10 reserved
N// Port1 Pin11 reserved
N// Port1 Pin12 reserved
N// Port1 Pin13 reserved
N// Port1 Pin14 reserved
N// Port1 Pin15 reserved
N// Port1 Pin16 reserved
N// Port1 Pin17 reserved
N#define PIN18_as_PWM1_1     (b10 << 4)
N#define PIN19_as_nUSB_PPWR  (b10 << 6)
N#define PIN20_as_PWM1_2     (b10 << 8)
N#define PIN21_as_PWM1_3     (b10 << 10)
N#define PIN22_as_USB_PWRD   (b10 << 12)
N#define PIN23_as_PWM1_4     (b10 << 14)
N#define PIN24_as_PWM1_5     (b10 << 16)
N// Port1 Pin25 reserved
N#define PIN26_as_PWM1_6     (b10 << 20)
N#define PIN27_as_nUSB_OVRCR (b10 << 22)
N#define PIN28_as_PCAP1_0    (b10 << 24)
N#define PIN29_as_PCAP1_1    (b10 << 26)
N#define PIN30_as_VBUS       (b10 << 28)
N#define PIN31_as_SCK1       (b10 << 30)
N
N
N// Port1 Third alternate functions
N//--------------------------------
N//
N// Port1 Pin0 reserved
N// Port1 Pin1 reserved
N// Port1 Pin2 reserved
N// Port1 Pin3 reserved
N// Port1 Pin4 reserved
N// Port1 Pin5 reserved
N// Port1 Pin6 reserved
N// Port1 Pin7 reserved
N// Port1 Pin8 reserved
N// Port1 Pin9 reserved
N// Port1 Pin10 reserved
N// Port1 Pin11 reserved
N// Port1 Pin12 reserved
N// Port1 Pin13 reserved
N// Port1 Pin14 reserved
N// Port1 Pin15 reserved
N// Port1 Pin16 reserved
N// Port1 Pin17 reserved
N#define PIN18_as_CAP1_0 (b11 << 4)
N#define PIN19_as_CAP1_1 (b11 << 6)
N#define PIN20_as_SCK0   (b11 << 8)
N#define PIN21_as_SSEL0  (b11 << 10)
N#define PIN22_as_MAT1_0 (b11 << 12)
N#define PIN23_as_MISO0  (b11 << 14)
N#define PIN24_as_MOSI0  (b11 << 16)
N#define PIN25_as_MAT1_1 (b11 << 18)
N#define PIN26_as_CAP0_0 (b11 << 20)
N#define PIN27_as_CAP0_1 (b11 << 22)
N#define PIN28_as_MAT0_0 (b11 << 24)
N#define PIN29_as_MAT0_1 (b11 << 26)
N#define PIN30_as_AD0_4  (b11 << 28)
N#define PIN31_as_AD0_5  (b11 << 30)
N
N
N// Port2 First alternate functions
N//-------------------------------------
N//
N#define PIN0_as_PWM1_1      (b01 << 0)
N#define PIN1_as_PWM1_2      (b01 << 2)
N#define PIN2_as_PWM1_3      (b01 << 4)
N#define PIN3_as_PWM1_4      (b01 << 6)
N#define PIN4_as_PWM1_5      (b01 << 8)
N#define PIN5_as_PWM1_6      (b01 << 10)
N#define PIN6_as_PCAP1_0     (b01 << 12)
N#define PIN7_as_RD2         (b01 << 14)
N#define PIN8_as_TD2         (b01 << 16)
N#define PIN9_as_USB_CONNECT (b01 << 18)
N#define PIN10_as_nEINT0     (b01 << 20)
N#define PIN11_as_nEINT1     (b01 << 22)
N#define PIN12_as_nEINT2     (b01 << 24)
N#define PIN13_as_nEINT3     (b01 << 26)
N// Port2 Pin14 reserved
N// Port2 Pin15 reserved
N// Port2 Pin16 reserved
N// Port2 Pin17 reserved
N// Port2 Pin18 reserved
N// Port2 Pin19 reserved
N// Port2 Pin20 reserved
N// Port2 Pin21 reserved
N// Port2 Pin22 reserved
N// Port2 Pin23 reserved
N// Port2 Pin24 reserved
N// Port2 Pin25 reserved
N// Port2 Pin26 reserved
N// Port2 Pin27 reserved
N// Port2 Pin28 reserved
N// Port2 Pin29 reserved
N// Port2 Pin30 reserved
N// Port2 Pin31 reserved
N
N
N// Port2 Second alternate functions
N//---------------------------------
N//
N#define PIN0_as_TXD1    (b10 << 0)
N#define PIN1_as_RXD1    (b10 << 2)
N#define PIN2_as_CTS1    (b10 << 4)
N#define PIN3_as_DCD1    (b10 << 6)
N#define PIN4_as_DSR1    (b10 << 8)
N#define PIN5_as_DTR1    (b10 << 10)
N#define PIN6_as_RI1     (b10 << 12)
N#define PIN7_as_RTS1    (b10 << 14)
N#define PIN8_as_TXD2    (b10 << 16)
N#define PIN9_as_RXD2    (b10 << 18)
N#define PIN10_as_NMI    (b10 << 20)
N// Port2 Pin11 reserved
N// Port2 Pin12 reserved
N// Port2 Pin13 reserved
N// Port2 Pin14 reserved
N// Port2 Pin15 reserved
N// Port2 Pin16 reserved
N// Port2 Pin17 reserved
N// Port2 Pin18 reserved
N// Port2 Pin19 reserved
N// Port2 Pin20 reserved
N// Port2 Pin21 reserved
N// Port2 Pin22 reserved
N// Port2 Pin23 reserved
N// Port2 Pin24 reserved
N// Port2 Pin25 reserved
N// Port2 Pin26 reserved
N// Port2 Pin27 reserved
N// Port2 Pin28 reserved
N// Port2 Pin29 reserved
N// Port2 Pin30 reserved
N// Port2 Pin31 reserved
N
N
N// Port2 Third alternate functions
N//---------------------------------
N
N// Port2 Pin0 reserved
N// Port2 Pin1 reserved
N// Port2 Pin2 reserved
N// Port2 Pin3 reserved
N// Port2 Pin4 reserved
N// Port2 Pin5 reserved
N// Port2 Pin6 reserved
N// Port2 Pin7 reserved
N#define PIN8_as_ENET_MDC   (b11 << 16)
N#define PIN9_as_ENET_MDIO  (b11 << 18)
N// Port2 Pin10 reserved
N#define PIN11_as_I2STX_CLK (b11 << 22)
N#define PIN12_as_I2STX_WS  (b11 << 24)
N#define PIN13_as_I2STX_SDA (b11 << 26)
N// Port2 Pin14 reserved
N// Port2 Pin15 reserved
N// Port2 Pin16 reserved
N// Port2 Pin17 reserved
N// Port2 Pin18 reserved
N// Port2 Pin19 reserved
N// Port2 Pin20 reserved
N// Port2 Pin21 reserved
N// Port2 Pin22 reserved
N// Port2 Pin23 reserved
N// Port2 Pin24 reserved
N// Port2 Pin25 reserved
N// Port2 Pin26 reserved
N// Port2 Pin27 reserved
N// Port2 Pin28 reserved
N// Port2 Pin29 reserved
N// Port2 Pin30 reserved
N// Port2 Pin31 reserved
N
N
N// Port3 First alternate functions
N//--------------------------------
N//
N// Port3 Pin0 reserved
N// Port3 Pin1 reserved
N// Port3 Pin2 reserved
N// Port3 Pin3 reserved
N// Port3 Pin4 reserved
N// Port3 Pin5 reserved
N// Port3 Pin6 reserved
N// Port3 Pin7 reserved
N// Port3 Pin8 reserved
N// Port3 Pin9 reserved
N// Port3 Pin10 reserved
N// Port3 Pin11 reserved
N// Port3 Pin12 reserved
N// Port3 Pin13 reserved
N// Port3 Pin14 reserved
N// Port3 Pin15 reserved
N// Port3 Pin16 reserved
N// Port3 Pin17 reserved
N// Port3 Pin18 reserved
N// Port3 Pin19 reserved
N// Port3 Pin20 reserved
N// Port3 Pin21 reserved
N// Port3 Pin22 reserved
N// Port3 Pin23 reserved
N// Port3 Pin24 reserved
N// Port3 Pin25 reserved
N#define PIN26_as_STCLK (b01 << 20)
N// Port3 Pin27 reserved
N// Port3 Pin28 reserved
N// Port3 Pin29 reserved
N// Port3 Pin30 reserved
N// Port3 Pin31 reserved
N
N
N// Port3 Second alternate functions
N//---------------------------------
N//
N// Port3 Pin0 reserved
N// Port3 Pin1 reserved
N// Port3 Pin2 reserved
N// Port3 Pin3 reserved
N// Port3 Pin4 reserved
N// Port3 Pin5 reserved
N// Port3 Pin6 reserved
N// Port3 Pin7 reserved
N// Port3 Pin8 reserved
N// Port3 Pin9 reserved
N// Port3 Pin10 reserved
N// Port3 Pin11 reserved
N// Port3 Pin12 reserved
N// Port3 Pin13 reserved
N// Port3 Pin14 reserved
N// Port3 Pin15 reserved
N// Port3 Pin16 reserved
N// Port3 Pin17 reserved
N// Port3 Pin18 reserved
N// Port3 Pin19 reserved
N// Port3 Pin20 reserved
N// Port3 Pin21 reserved
N// Port3 Pin22 reserved
N// Port3 Pin23 reserved
N// Port3 Pin24 reserved
N#define PIN25_as_MAT0_0 (b10 << 18)
N#define PIN26_as_MAT0_1 (b10 << 20)
N// Port3 Pin27 reserved
N// Port3 Pin28 reserved
N// Port3 Pin29 reserved
N// Port3 Pin30 reserved
N// Port3 Pin31 reserved
N
N
N// Port3 Third alternate functions
N//--------------------------------
N//
N// Port3 Pin0 reserved
N// Port3 Pin1 reserved
N// Port3 Pin2 reserved
N// Port3 Pin3 reserved
N// Port3 Pin4 reserved
N// Port3 Pin5 reserved
N// Port3 Pin6 reserved
N// Port3 Pin7 reserved
N// Port3 Pin8 reserved
N// Port3 Pin9 reserved
N// Port3 Pin10 reserved
N// Port3 Pin11 reserved
N// Port3 Pin12 reserved
N// Port3 Pin13 reserved
N// Port3 Pin14 reserved
N// Port3 Pin15 reserved
N// Port3 Pin16 reserved
N// Port3 Pin17 reserved
N// Port3 Pin18 reserved
N// Port3 Pin19 reserved
N// Port3 Pin20 reserved
N// Port3 Pin21 reserved
N// Port3 Pin22 reserved
N// Port3 Pin23 reserved
N// Port3 Pin24 reserved
N#define PIN25_as_PWM1_2 (b11 << 18)
N#define PIN26_as_PWM1_3 (b11 << 20)
N// Port3 Pin27 reserved
N// Port3 Pin28 reserved
N// Port3 Pin29 reserved
N// Port3 Pin30 reserved
N// Port3 Pin31 reserved
N
N
N// Port4 First alternate functions
N//--------------------------------
N//
N// Port4 Pin0 reserved
N// Port4 Pin1 reserved
N// Port4 Pin2 reserved
N// Port4 Pin3 reserved
N// Port4 Pin4 reserved
N// Port4 Pin5 reserved
N// Port4 Pin6 reserved
N// Port4 Pin7 reserved
N// Port4 Pin8 reserved
N// Port4 Pin9 reserved
N// Port4 Pin10 reserved
N// Port4 Pin11 reserved
N// Port4 Pin12 reserved
N// Port4 Pin13 reserved
N// Port4 Pin14 reserved
N// Port4 Pin15 reserved
N// Port4 Pin16 reserved
N// Port4 Pin17 reserved
N// Port4 Pin18 reserved
N// Port4 Pin19 reserved
N// Port4 Pin20 reserved
N// Port4 Pin21 reserved
N// Port4 Pin22 reserved
N// Port4 Pin23 reserved
N// Port4 Pin24 reserved
N// Port4 Pin25 reserved
N// Port4 Pin26 reserved
N// Port4 Pin27 reserved
N#define PIN28_as_RX_MCLK (b01 << 24)
N#define PIN29_as_TX_MCLK (b01 << 26)
N// Port4 Pin30 reserved
N// Port4 Pin31 reserved
N
N
N// Port4 Second alternate functions
N//---------------------------------
N//
N// Port4 Pin0 reserved
N// Port4 Pin1 reserved
N// Port4 Pin2 reserved
N// Port4 Pin3 reserved
N// Port4 Pin4 reserved
N// Port4 Pin5 reserved
N// Port4 Pin6 reserved
N// Port4 Pin7 reserved
N// Port4 Pin8 reserved
N// Port4 Pin9 reserved
N// Port4 Pin10 reserved
N// Port4 Pin11 reserved
N// Port4 Pin12 reserved
N// Port4 Pin13 reserved
N// Port4 Pin14 reserved
N// Port4 Pin15 reserved
N// Port4 Pin16 reserved
N// Port4 Pin17 reserved
N// Port4 Pin18 reserved
N// Port4 Pin19 reserved
N// Port4 Pin20 reserved
N// Port4 Pin21 reserved
N// Port4 Pin22 reserved
N// Port4 Pin23 reserved
N// Port4 Pin24 reserved
N// Port4 Pin25 reserved
N// Port4 Pin26 reserved
N// Port4 Pin27 reserved
N#define PIN28_as_MAT2_0 (b10 << 24)
N#define PIN29_as_MAT2_1 (b10 << 26)
N// Port4 Pin30 reserved
N// Port4 Pin31 reserved
N
N
N// Port4 Third alternate functions
N//--------------------------------
N//
N// Port4 Pin0 reserved
N// Port4 Pin1 reserved
N// Port4 Pin2 reserved
N// Port4 Pin3 reserved
N// Port4 Pin4 reserved
N// Port4 Pin5 reserved
N// Port4 Pin6 reserved
N// Port4 Pin7 reserved
N// Port4 Pin8 reserved
N// Port4 Pin9 reserved
N// Port4 Pin10 reserved
N// Port4 Pin11 reserved
N// Port4 Pin12 reserved
N// Port4 Pin13 reserved
N// Port4 Pin14 reserved
N// Port4 Pin15 reserved
N// Port4 Pin16 reserved
N// Port4 Pin17 reserved
N// Port4 Pin18 reserved
N// Port4 Pin19 reserved
N// Port4 Pin20 reserved
N// Port4 Pin21 reserved
N// Port4 Pin22 reserved
N// Port4 Pin23 reserved
N// Port4 Pin24 reserved
N// Port4 Pin25 reserved
N// Port4 Pin26 reserved
N// Port4 Pin27 reserved
N#define PIN28_as_TXD3 (b11 << 24)
N#define PIN29_as_RXD3 (b11 << 26)
N// Port4 Pin30 reserved
N// Port4 Pin31 reserved
N
N
N// Port2 Pin2-Pin6 Trace function
N//---------------------------------
N//
N#define TRACE_ENABLED  (1 << 3)
N#define TRACE_DISABLED (0 << 3)
N
N
N// Port0-Port4 on-chip pull-up resistor control (reset values)
N//---------------------------------
N//
N#define PIN0_PULLUP    (b00 << 0)
N#define PIN1_PULLUP    (b00 << 2)
N#define PIN2_PULLUP    (b00 << 4)
N#define PIN3_PULLUP    (b00 << 6)
N#define PIN4_PULLUP    (b00 << 8)
N#define PIN5_PULLUP    (b00 << 10)
N#define PIN6_PULLUP    (b00 << 12)
N#define PIN7_PULLUP    (b00 << 14)
N#define PIN8_PULLUP    (b00 << 16)
N#define PIN9_PULLUP    (b00 << 18)
N#define PIN10_PULLUP   (b00 << 20)
N#define PIN11_PULLUP   (b00 << 22)
N#define PIN12_PULLUP   (b00 << 24)
N#define PIN13_PULLUP   (b00 << 26)
N#define PIN14_PULLUP   (b00 << 28)
N#define PIN15_PULLUP   (b00 << 30)
N#define PIN16_PULLUP   (b00 << 0)
N#define PIN17_PULLUP   (b00 << 2)
N#define PIN18_PULLUP   (b00 << 4)
N#define PIN19_PULLUP   (b00 << 6)
N#define PIN20_PULLUP   (b00 << 8)
N#define PIN21_PULLUP   (b00 << 10)
N#define PIN22_PULLUP   (b00 << 12)
N#define PIN23_PULLUP   (b00 << 14)
N#define PIN24_PULLUP   (b00 << 16)
N#define PIN25_PULLUP   (b00 << 18)
N#define PIN26_PULLUP   (b00 << 20)
N#define PIN27_PULLUP   (b00 << 22)
N#define PIN28_PULLUP   (b00 << 24)
N#define PIN29_PULLUP   (b00 << 26)
N#define PIN30_PULLUP   (b00 << 28)
N#define PIN31_PULLUP   (b00 << 30)
N
N
N// Port0-Port4 on-chip pull-down resistor control
N//---------------------------------
N//
N#define PIN0_PULLDOWN  (b11 << 0)
N#define PIN1_PULLDOWN  (b11 << 2)
N#define PIN2_PULLDOWN  (b11 << 4)
N#define PIN3_PULLDOWN  (b11 << 6)
N#define PIN4_PULLDOWN  (b11 << 8)
N#define PIN5_PULLDOWN  (b11 << 10)
N#define PIN6_PULLDOWN  (b11 << 12)
N#define PIN7_PULLDOWN  (b11 << 14)
N#define PIN8_PULLDOWN  (b11 << 16)
N#define PIN9_PULLDOWN  (b11 << 18)
N#define PIN10_PULLDOWN (b11 << 20)
N#define PIN11_PULLDOWN (b11 << 22)
N#define PIN12_PULLDOWN (b11 << 24)
N#define PIN13_PULLDOWN (b11 << 26)
N#define PIN14_PULLDOWN (b11 << 28)
N#define PIN15_PULLDOWN (b11 << 30)
N#define PIN16_PULLDOWN (b11 << 0)
N#define PIN17_PULLDOWN (b11 << 2)
N#define PIN18_PULLDOWN (b11 << 4)
N#define PIN19_PULLDOWN (b11 << 6)
N#define PIN20_PULLDOWN (b11 << 8)
N#define PIN21_PULLDOWN (b11 << 10)
N#define PIN22_PULLDOWN (b11 << 12)
N#define PIN23_PULLDOWN (b11 << 14)
N#define PIN24_PULLDOWN (b11 << 16)
N#define PIN25_PULLDOWN (b11 << 18)
N#define PIN26_PULLDOWN (b11 << 20)
N#define PIN27_PULLDOWN (b11 << 22)
N#define PIN28_PULLDOWN (b11 << 24)
N#define PIN29_PULLDOWN (b11 << 26)
N#define PIN30_PULLDOWN (b11 << 28)
N#define PIN31_PULLDOWN (b11 << 30)
N
N
N// Port0-Port4 repeater mode control
N//---------------------------------
N//
N#define PIN0_REPEATER  (b01 << 0)
N#define PIN1_REPEATER  (b01 << 2)
N#define PIN2_REPEATER  (b01 << 4)
N#define PIN3_REPEATER  (b01 << 6)
N#define PIN4_REPEATER  (b01 << 8)
N#define PIN5_REPEATER  (b01 << 10)
N#define PIN6_REPEATER  (b01 << 12)
N#define PIN7_REPEATER  (b01 << 14)
N#define PIN8_REPEATER  (b01 << 16)
N#define PIN9_REPEATER  (b01 << 18)
N#define PIN10_REPEATER (b01 << 20)
N#define PIN11_REPEATER (b01 << 22)
N#define PIN12_REPEATER (b01 << 24)
N#define PIN13_REPEATER (b01 << 26)
N#define PIN14_REPEATER (b01 << 28)
N#define PIN15_REPEATER (b01 << 30)
N#define PIN16_REPEATER (b01 << 0)
N#define PIN17_REPEATER (b01 << 2)
N#define PIN18_REPEATER (b01 << 4)
N#define PIN19_REPEATER (b01 << 6)
N#define PIN20_REPEATER (b01 << 8)
N#define PIN21_REPEATER (b01 << 10)
N#define PIN22_REPEATER (b01 << 12)
N#define PIN23_REPEATER (b01 << 14)
N#define PIN24_REPEATER (b01 << 16)
N#define PIN25_REPEATER (b01 << 18)
N#define PIN26_REPEATER (b01 << 20)
N#define PIN27_REPEATER (b01 << 22)
N#define PIN28_REPEATER (b01 << 24)
N#define PIN29_REPEATER (b01 << 26)
N#define PIN30_REPEATER (b01 << 28)
N#define PIN31_REPEATER (b01 << 30)
N
N
N// Port0-Port4 neither pull-up nor pull-down control
N//---------------------------------
N//
N#define PIN0_NOPULL    (b10 << 0)
N#define PIN1_NOPULL    (b10 << 2)
N#define PIN2_NOPULL    (b10 << 4)
N#define PIN3_NOPULL    (b10 << 6)
N#define PIN4_NOPULL    (b10 << 8)
N#define PIN5_NOPULL    (b10 << 10)
N#define PIN6_NOPULL    (b10 << 12)
N#define PIN7_NOPULL    (b10 << 14)
N#define PIN8_NOPULL    (b10 << 16)
N#define PIN9_NOPULL    (b10 << 18)
N#define PIN10_NOPULL   (b10 << 20)
N#define PIN11_NOPULL   (b10 << 22)
N#define PIN12_NOPULL   (b10 << 24)
N#define PIN13_NOPULL   (b10 << 26)
N#define PIN14_NOPULL   (b10 << 28)
N#define PIN15_NOPULL   (b10 << 30)
N#define PIN16_NOPULL   (b10 << 0)
N#define PIN17_NOPULL   (b10 << 2)
N#define PIN18_NOPULL   (b10 << 4)
N#define PIN19_NOPULL   (b10 << 6)
N#define PIN20_NOPULL   (b10 << 8)
N#define PIN21_NOPULL   (b10 << 10)
N#define PIN22_NOPULL   (b10 << 12)
N#define PIN23_NOPULL   (b10 << 14)
N#define PIN24_NOPULL   (b10 << 16)
N#define PIN25_NOPULL   (b10 << 18)
N#define PIN26_NOPULL   (b10 << 20)
N#define PIN27_NOPULL   (b10 << 22)
N#define PIN28_NOPULL   (b10 << 24)
N#define PIN29_NOPULL   (b10 << 26)
N#define PIN30_NOPULL   (b10 << 28)
N#define PIN31_NOPULL   (b10 << 30)
N
N
N// Port0-Port4 Open-Drain mode control
N//---------------------------------
N//
N#define PIN0_OPENDRAIN_ENABLED  (1UL << 0)
N#define PIN1_OPENDRAIN_ENABLED  (1UL << 1)
N#define PIN2_OPENDRAIN_ENABLED  (1UL << 2)
N#define PIN3_OPENDRAIN_ENABLED  (1UL << 3)
N#define PIN4_OPENDRAIN_ENABLED  (1UL << 4)
N#define PIN5_OPENDRAIN_ENABLED  (1UL << 5)
N#define PIN6_OPENDRAIN_ENABLED  (1UL << 6)
N#define PIN7_OPENDRAIN_ENABLED  (1UL << 7)
N#define PIN8_OPENDRAIN_ENABLED  (1UL << 8)
N#define PIN9_OPENDRAIN_ENABLED  (1UL << 9)
N#define PIN10_OPENDRAIN_ENABLED (1UL << 10)
N#define PIN11_OPENDRAIN_ENABLED (1UL << 11)
N#define PIN12_OPENDRAIN_ENABLED (1UL << 12)
N#define PIN13_OPENDRAIN_ENABLED (1UL << 13)
N#define PIN14_OPENDRAIN_ENABLED (1UL << 14)
N#define PIN15_OPENDRAIN_ENABLED (1UL << 15)
N#define PIN16_OPENDRAIN_ENABLED (1UL << 16)
N#define PIN17_OPENDRAIN_ENABLED (1UL << 17)
N#define PIN18_OPENDRAIN_ENABLED (1UL << 18)
N#define PIN19_OPENDRAIN_ENABLED (1UL << 19)
N#define PIN20_OPENDRAIN_ENABLED (1UL << 20)
N#define PIN21_OPENDRAIN_ENABLED (1UL << 21)
N#define PIN22_OPENDRAIN_ENABLED (1UL << 22)
N#define PIN23_OPENDRAIN_ENABLED (1UL << 23)
N#define PIN24_OPENDRAIN_ENABLED (1UL << 24)
N#define PIN25_OPENDRAIN_ENABLED (1UL << 25)
N#define PIN26_OPENDRAIN_ENABLED (1UL << 26)
N#define PIN27_OPENDRAIN_ENABLED (1UL << 27)
N#define PIN28_OPENDRAIN_ENABLED (1UL << 28)
N#define PIN29_OPENDRAIN_ENABLED (1UL << 29)
N#define PIN30_OPENDRAIN_ENABLED (1UL << 30)
N#define PIN31_OPENDRAIN_ENABLED (1UL << 31)
N
N
N/**************************************************/
N/*   GPIO CONFIGURE CONTROL                       */
N/**************************************************/
N
N// Rename of GPIO port Direction register (FIODIR)
N
N#define PORT_DIRECTION FIODIR
N
N// Direction Control bits for GPIO
N//---------------------------------
N//
N#define PIN0_INPUT   (0UL << 0)
N#define PIN1_INPUT   (0UL << 1)
N#define PIN2_INPUT   (0UL << 2)
N#define PIN3_INPUT   (0UL << 3)
N#define PIN4_INPUT   (0UL << 4)
N#define PIN5_INPUT   (0UL << 5)
N#define PIN6_INPUT   (0UL << 6)
N#define PIN7_INPUT   (0UL << 7)
N#define PIN8_INPUT   (0UL << 8)
N#define PIN9_INPUT   (0UL << 9)
N#define PIN10_INPUT  (0UL << 10)
N#define PIN11_INPUT  (0UL << 11)
N#define PIN12_INPUT  (0UL << 12)
N#define PIN13_INPUT  (0UL << 13)
N#define PIN14_INPUT  (0UL << 14)
N#define PIN15_INPUT  (0UL << 15)
N#define PIN16_INPUT  (0UL << 16)
N#define PIN17_INPUT  (0UL << 17)
N#define PIN18_INPUT  (0UL << 18)
N#define PIN19_INPUT  (0UL << 19)
N#define PIN20_INPUT  (0UL << 20)
N#define PIN21_INPUT  (0UL << 21)
N#define PIN22_INPUT  (0UL << 22)
N#define PIN23_INPUT  (0UL << 23)
N#define PIN24_INPUT  (0UL << 24)
N#define PIN25_INPUT  (0UL << 25)
N#define PIN26_INPUT  (0UL << 26)
N#define PIN27_INPUT  (0UL << 27)
N#define PIN28_INPUT  (0UL << 28)
N#define PIN29_INPUT  (0UL << 29)
N#define PIN30_INPUT  (0UL << 30)
N#define PIN31_INPUT  (0UL << 31)
N
N#define PIN0_OUTPUT  (1UL << 0)
N#define PIN1_OUTPUT  (1UL << 1)
N#define PIN2_OUTPUT  (1UL << 2)
N#define PIN3_OUTPUT  (1UL << 3)
N#define PIN4_OUTPUT  (1UL << 4)
N#define PIN5_OUTPUT  (1UL << 5)
N#define PIN6_OUTPUT  (1UL << 6)
N#define PIN7_OUTPUT  (1UL << 7)
N#define PIN8_OUTPUT  (1UL << 8)
N#define PIN9_OUTPUT  (1UL << 9)
N#define PIN10_OUTPUT (1UL << 10)
N#define PIN11_OUTPUT (1UL << 11)
N#define PIN12_OUTPUT (1UL << 12)
N#define PIN13_OUTPUT (1UL << 13)
N#define PIN14_OUTPUT (1UL << 14)
N#define PIN15_OUTPUT (1UL << 15)
N#define PIN16_OUTPUT (1UL << 16)
N#define PIN17_OUTPUT (1UL << 17)
N#define PIN18_OUTPUT (1UL << 18)
N#define PIN19_OUTPUT (1UL << 19)
N#define PIN20_OUTPUT (1UL << 20)
N#define PIN21_OUTPUT (1UL << 21)
N#define PIN22_OUTPUT (1UL << 22)
N#define PIN23_OUTPUT (1UL << 23)
N#define PIN24_OUTPUT (1UL << 24)
N#define PIN25_OUTPUT (1UL << 25)
N#define PIN26_OUTPUT (1UL << 26)
N#define PIN27_OUTPUT (1UL << 27)
N#define PIN28_OUTPUT (1UL << 28)
N#define PIN29_OUTPUT (1UL << 29)
N#define PIN30_OUTPUT (1UL << 30)
N#define PIN31_OUTPUT (1UL << 31)
N
N
N/**************************************************/
N/*   GPIO PORT OUTPUT SET/CLEAR CONTROL           */
N/**************************************************/
N
N// Rename of GPIO port output Set register (FIOSET)
N// Rename of GPIO port output Clear register (FIOCLR)
N
N#define PORT_SET FIOSET
N#define PORT_CLEAR FIOCLR
N
N
N/**************************************************/
N/*   POWER CONTROL                                */
N/**************************************************/
N
N// Rename of Power Control for Peripherals register (PCONP)
N
N#define POWER_CONTROL PCONP
N
N// Power/Clock Control bits for Peripherals
N//---------------------------------
N//
N
N// 0 - Reserved
N#define TIMER0_POWERED    (1UL << 1)
N#define TIMER1_POWERED    (1UL << 2)
N#define UART0_POWERED     (1UL << 3)
N#define UART1_POWERED     (1UL << 4)
N// 5 - Reserved
N#define PWM1_POWERED      (1UL << 6)
N#define I2C0_POWERED      (1UL << 7)
N#define SPI_POWERED       (1UL << 8)
N#define RTC_POWERED       (1UL << 9)
N#define SSP1_POWERED      (1UL << 10)
N// 11 - Reserved
N#define ADC_POWERED       (1UL << 12)
N//Note:Clear the PDN bit in the AD0CR before clearing this bit, and set 
N//this bit before setting PDN.
N#define CAN1_POWERED      (1UL << 13)
N#define CAN2_POWERED      (1UL << 14)
N#define GPIO_POWERED      (1UL << 15)
N#define INT_TIMER_POWERED (1UL << 16)
N#define MOTORPWM_POWERED  (1UL << 17)
N#define ENCODER_POWERED   (1UL << 18)
N#define I2C1_POWERED      (1UL << 19)
N// 20 - Reserved
N#define SSP0_POWERED      (1UL << 21)
N#define TIMER2_POWERED    (1UL << 22)
N#define TIMER3_POWERED    (1UL << 23)
N#define UART2_POWERED     (1UL << 24)
N#define UART3_POWERED     (1UL << 25)
N#define I2C_POWERED       (1UL << 26)
N#define I2S_POWERED       (1UL << 27)
N// 28 - Reserved
N#define GPDMA_POWERED     (1UL << 29)
N#define ETHERNET_POWERED  (1UL << 30)
N#define USB_POWERED       (1UL << 31)
N
N
N
N
N
N#endif  // __LPC1768_DEFINE_H__
L 18 ".\UCNC\Flash.h" 2
N
N
N//-----------------------------------------
N//
N//              SPI FLASH
N//
N//-----------------------------------------
N
Nvoid FLASH_Init(void);
Nu8   FLASH_WriteByte(u32 addr, u8 b);
Nu8   FLASH_ReadByte(u32 addr);
Nu8   FLASH_Write(u32 addr, const u8 *buffer, u32 size);
Nvoid FLASH_Read(u8 *buffer, u32 addr, u32 size);
Nu8   FLASH_SectorErase(u32 addr);
Nu32  FLASH_BulkErase(void);
N
N
Nvoid FLASH_BankSelect(u8 bank_num);
Nvoid FLASH_BankDeselect(u8 bank_num);
N
Nu8 FLASH_GetBankID(u8 bank_num);
N
N
N#endif // __FLASH_H_
L 17 "Main\FS.c" 2
N
N#include "msg.h"
L 1 "Main\msg.h" 1
N#ifndef __MSG_H__
N#define __MSG_H__
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 4 "Main\msg.h" 2
N#include "Defs.h"
N
N#define cmDbgMsg        	0x66
N
Nvoid  Msg (const  u8 *format, ...);
Nvoid Dump(u8 * buffer,u16 count);
Nvoid	SMsg(void);
N
N#endif
L 19 "Main\FS.c" 2
N
N
N// Адрес FLASH-памяти
N#define FLASH_ADDRESS(a) (a)
N
N
N#define MAX_FILES  8														// Макс. кол-во открытых файлов
N
N//#define FLASH_BANKS_NUM  1													// Кол-во банков FLASH-памяти
N
N// Параметры FLASH-памяти
N#define FLASH_SECTORS_PER_BANK  64											// Кол-во секторов в банке FLASH
N#define FLASH_PAGES_PER_SECTOR  1024										// Кол-во страниц в секторе
N#define PAGE_SIZE  256														// Размер страницы (байт)
N
N// Параметры Файловой Системы
N#define PAGES_PER_CLUSTER  64												// Кол-во страниц в кластере
N#define FNT_BASE_ADDRESS  32												// Базовый адрес таблицы FNT
N
N#define FNT_RECORD_SIZE  32													// Размер записи таблицы FNT
N#define CAT_RECORD_SIZE  3													// Размер записи таблицы CAT
N
N#define FILE_NAME_LENGTH  14												// Длина имени файла
N#define FILE_TYPE_LENGTH  3													// Длина типа файла
N
Nu8 FLASH_BANKS_NUM=0;
N
N//=============================================================================
N//                              ОПРЕДЕЛЕНИЯ
N//=============================================================================
N
N// Состояние файловой системы
Nenum constFSState {
N	FS_STATE_FLASH_CLEAR	= 0xFF,											// Чистая FLASH (ФС отсутствует)
N//	резерв					= 0xFE,											//
N	FS_STATE_READY			= 0xFC,											// ФС готова к работе
N//	резерв					= 0xF8,											//
N//	резерв					= 0xF0,											//
N//	резерв					= 0xE0,											//
N//	резерв					= 0xC0,											//
N//	резерв					= 0x80,											//
N//	резерв					= 0x00,											//
N};
N
N/*
N// Тип открытия файла
Nenum constAssignType {
N	ASSIGN_TYPE_REWRITE,													// Открыть файл для записи
N	ASSIGN_TYPE_APPEND,														// Открыть файл для добавления
N	ASSIGN_TYPE_RESET														// Открыть файл для чтения
N};
N*/
N
N// Состояние структуры FCS
Nenum constFCSState {
N	FCS_STATE_CLOSED,														// Структура FCS закрыта
N	FCS_STATE_OPENED,														// Структура FCS открыта
N	FCS_STATE_OPENED_READ,													// Структура FCS открыта для чтения файла
N	FCS_STATE_OPENED_WRITE													// Структура FCS открыта для записи файла
N};
N
N
N// Атрибуты файла
Nenum constFileAttr {
N	FILE_ATTR_NOATTR   = 0xFF,												// Файл не имеет атрибутов
N	FILE_ATTR_READONLY = 0xFE,												// Файл "Только для чтения"
N	FILE_ATTR_HIDDEN   = 0xFD,												// Файл "Скрытый"
N	FILE_ATTR_SYSTEM   = 0xFB,												// Файл "Системный"
N//	FILE_ATTR_reserved   = 0xF7,												// (зарезервировано)
N};
N
N
N// Структура записи таблицы FNT (File Name Table)
Ntypedef __packed struct {
N	u8  FullName[1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1];				// Сигнатура1 + Имя + Тип + Сигнатура2
X	u8  FullName[1 + 14 + 3 + 1];				
N	u8  Attribute;															// Атрибуты файла
N	u16 FirstCluster;														// Индекс (в таблице CAT) первого кластера файла
N	u32 Size;																// Размер файла (кол-во байт)
N	// reserved
N} tFNT;
N
N
N// Структура записи таблицы CAT (Cluster Allocation Table)
Ntypedef __packed struct {
N	u8  Flag;
N	u16 NextCluster;
N} tCAT;
N
N
N// FCS (File Control Structure) - Структура управления файлом
Ntypedef __packed struct {
N	u8  State;																// Состояние файла
N	u8  Name[FILE_NAME_LENGTH + 1];											// Имя файла
X	u8  Name[14 + 1];											
N	u8  Type[FILE_TYPE_LENGTH + 1];											// Тип файла
X	u8  Type[3 + 1];											
N	u32 FNT_num;															// Номер записи таблицы FNT
N	u16 CurrCluster;														// Индекс (в таблице CAT) текущего кластера
N	u8  CurrPage;															// Номер текущей страницы в текущем кластере
N	u16 PageBufPtr;															// Текущий указатель в буфере PageBuffer[]
N	u8  PageBuffer[PAGE_SIZE];												// Буфер текущей страницы
X	u8  PageBuffer[256];												
N	u32 RemainSize;															// Оставшийся (непрочитанный) размер
N	u32 MinFilePosition;													// Мин. позиция файла в текущей странице
N	u32 MaxFilePosition;													// Макс. позиция файла в текущей странице
N	tFNT FNT;																// Копия записи таблицы FNT открытого файла
N} tFCS;
N
N
N// Массив указателей на структуры FCS
NtFCS  *pFCSArray[MAX_FILES];
XtFCS  *pFCSArray[8];
N
N// Массив структур FCS
NtFCS  FCSArray[MAX_FILES];
XtFCS  FCSArray[8];
N
N
N// Служебная область Файловой Системы (адреса FLASH в служебной области ФС)
Nenum constFS_PARAM {
N/*u8*/  FS_PARAM_FS_STATE = FLASH_ADDRESS(0),									// Состояние ФС
X   FS_PARAM_FS_STATE = (0),									
N};
N
N
N//=============================================================================
N//                          ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
N//=============================================================================
N
N//u8  FS_IS_INITED = FALSE;														// Флаг инициализации файловой системы
Nu8  FS_IS_INITED;														// Флаг инициализации файловой системы
N
Nu8  FS_STATE;																	// Состояние ФС
N
N//Рабочие параметры Файловой Системы
N//(вычисляются в начале работы)
Nu16 SECTORS_NUMBER;																// Кол-во секторов
Nu32 SECTOR_SIZE;																// Размер сектора
N
Nu16 CLUSTERS_PER_SECTOR;														// Кол-во кластеров в секторе
Nu16 CLUSTERS_NUMBER;															// Кол-во кластеров
Nu16 ClusterMAX;																	// Номер максимального кластера
Nu16 CLUSTER_SIZE;																// Размер кластера (байт)
N
Nu32 CAT_Size;																	// Размер отводимый для размещения таблицы CAT
Nu16 CATRecordsNumber;															// Кол-во записей в таблице CAT
Nu16 CATRecordMAX;																// Номер максимальной записи в таблице CAT
N
Nu32 FNTRecordsNumber;															// Кол-во записей в таблице FNT
Nu32 FNTRecordMAX;																// Номер максимальной записи в таблице FNT
N
Nu32 CAT_BASE_ADDRESS;															// Базовый адрес таблицы CAT
Nu32 CLUSTERS_BASE_ADDRESS;														// Базовый адрес таблицы кластеров
N
N
N//=============================================================================
N//                   СЛУЖЕБНЫЕ ФУНКЦИИ ФАЙЛОВОЙ СИСТЕМЫ
N//=============================================================================
N
N//-----------------------------------------------------------------------------
N//              FS Init
N//-----------------------------------------------------------------------------
Ns8 FS_Init(void) {
N	u8 i;
N//-	отставляем пока------------------------------------
N	u8 bank_num;
N	u8 ID;
N
N	FLASH_BANKS_NUM = 0;
N	FS_IS_INITED = 0;															// Обнулить кол-во банков FLASH-памяти
N
N	// Опросить наличие банков
N	for (bank_num = 0; bank_num < 4; bank_num++) {
N		//	где функция FLASH_GetBankID ?????????? 
N		ID = FLASH_GetBankID(bank_num);
N//		Msg("B %d ID %X\r\n",bank_num,ID);
N		if (ID == 0x18) {							// Если ID = 18h (тип флэш-памяти M25P128)
N			FLASH_BANKS_NUM++;													// ДА - Увеличить кол-во банков
N		}
N//		if (FLASH_GetBankID(bank_num) == 0x18) {							// Если ID = 18h (тип флэш-памяти M25P128)
N//			FLASH_BANKS_NUM++;													// ДА - Увеличить кол-во банков
N//		}
N		else {
N			break;															// НЕТ - Завершить опрос банков
N		}
N	}
N//	Msg("FBN %d\r\n",FLASH_BANKS_NUM);
N	if (! FLASH_BANKS_NUM) {														// Обнаружены банки Флэш-памяти?
N		return EFS_FLASH_NOT_INITED;														// НЕТ - Вернуть результат: "Флэш-память не инициализирована"
X		return -1;														
N	}
N//----Будет так--------------------------------------
N// 	res = FLASH_Init();
N//	if (res < 0) {
N//  	// в res код ошибки
N//	}	 
N	// Проверить состояние ФС
N	FS_STATE = FLASH_ReadByte(FS_PARAM_FS_STATE);
N
N	// Если "Чистая FLASH"
N	if (FS_STATE == FS_STATE_FLASH_CLEAR) {
N
N		// Установить состояние ФС = "ФС готова к работе"
N		//---------------------------------------------------------------
N		FS_STATE = FS_STATE_READY;
N		FLASH_WriteByte(FS_PARAM_FS_STATE, FS_STATE);
N	}
N	// Если "ФС готова к работе"
N	else if (FS_STATE == FS_STATE_READY) {
N
N	}
N
N	// Вычислить рабочие параметры ФС
N	//---------------------------------------------------------------
N	SECTORS_NUMBER = FLASH_BANKS_NUM * FLASH_SECTORS_PER_BANK;						// Кол-во секторов
X	SECTORS_NUMBER = FLASH_BANKS_NUM * 64;						
N	SECTOR_SIZE = FLASH_PAGES_PER_SECTOR * PAGE_SIZE;								// Размер сектора
X	SECTOR_SIZE = 1024 * 256;								
N
N	CLUSTERS_PER_SECTOR = FLASH_PAGES_PER_SECTOR / PAGES_PER_CLUSTER;				// Кол-во кластеров в секторе
X	CLUSTERS_PER_SECTOR = 1024 / 64;				
N	CLUSTERS_NUMBER = (SECTORS_NUMBER - 3) * CLUSTERS_PER_SECTOR;					// Кол-во кластеров
N	CLUSTER_SIZE = PAGES_PER_CLUSTER * PAGE_SIZE;									// Размер кластера
X	CLUSTER_SIZE = 64 * 256;									
N
N	// Размер отводимый для размещения таблицы CAT
N	CAT_Size = CLUSTERS_NUMBER * CAT_RECORD_SIZE / FNT_RECORD_SIZE * FNT_RECORD_SIZE;
X	CAT_Size = CLUSTERS_NUMBER * 3 / 32 * 32;
N	if ( (CLUSTERS_NUMBER * CAT_RECORD_SIZE) % FNT_RECORD_SIZE ) {
X	if ( (CLUSTERS_NUMBER * 3) % 32 ) {
N		CAT_Size += FNT_RECORD_SIZE;												// (округлить в бо'льшую сторону)
X		CAT_Size += 32;												
N	}
N	CATRecordsNumber = CLUSTERS_NUMBER;												// Кол-во записей в таблице CAT
N
N	FNTRecordsNumber = ( (SECTOR_SIZE - CAT_Size) / FNT_RECORD_SIZE ) - 1;			// Кол-во записей в таблице FNT
X	FNTRecordsNumber = ( (SECTOR_SIZE - CAT_Size) / 32 ) - 1;			
N
N	CAT_BASE_ADDRESS = FNT_BASE_ADDRESS +
X	CAT_BASE_ADDRESS = 32 +
N					   FNTRecordsNumber * FNT_RECORD_SIZE;							// Базовый адрес таблицы CAT
X					   FNTRecordsNumber * 32;							
N	CLUSTERS_BASE_ADDRESS = SECTOR_SIZE * 3;										// Базовый адрес таблицы кластеров
N
N	ClusterMAX   = CLUSTERS_NUMBER  - 1;											// Номер максимального кластера
N	CATRecordMAX = CATRecordsNumber - 1;											// Номер максимальной записи в таблице CAT
N	FNTRecordMAX = FNTRecordsNumber - 1;											// Номер максимальной записи в таблице FNT
N
N	// Заполнить массив указателей на стркутуры FCS
N	for (i=0; i<MAX_FILES; i++) {
X	for (i=0; i<8; i++) {
N		pFCSArray[i] = FCSArray + i;
N	}
N
N	// Состояние всех структур FCS = "Закрыто"
N	for (i=0; i<MAX_FILES; i++) {
X	for (i=0; i<8; i++) {
N		pFCSArray[i]->State = FCS_STATE_CLOSED ;
N	}
N// отладка потом убрать
N//	return 0;
N
N	FS_IS_INITED = 1;															// Файловая система инициализирована
N
N	return FS_RESULT_OK;// 0
X	return 0;
N}
N
N
N//-----------------------------------------------------------------------------
N// Проверить строку на допустимые символы
N//-----------------------------------------------------------------------------
Nbool FS_StrSymbolsValid(const u8 *str) {
N	u8 s;
N	u8 i;
N	u8 len;
N
N	len = strlen((char *)str);
N	for (i = 0; i < len; i++) {
N		s = str[i];
N		if ( s <= ' ' ||
N			 s == ':' ||
N			 s == ';' ||
N			 s == '.' ||
N			 s == '*' ||
N			 s == '?' ||
N			 s == '/' ||
N			 s == '|' ||
N			 s == '\\' ) {
N			return FALSE;
X			return 0;
N		}
N	}
N
N	return TRUE;
X	return 1;
N}
N
N
N//-----------------------------------------------------------------------------
N// Выделить из имени файла отдельно имя и тип
N//-----------------------------------------------------------------------------
N// В случае ошибки - возвращаются пустые строки
Nbool FS_GetNameAndType(const u8 *file_name, u8 *name, u8 *type) {
N	u8 i, k;
N	u8 s;
N
N	// Выделить имя
N	for (i = 0, k = 0; k <= FILE_NAME_LENGTH; i++, k++) {
X	for (i = 0, k = 0; k <= 14; i++, k++) {
N		s = file_name[i];
N		if (s && s != '.') {
N			name[k] = s;
N		}
N		else {
N			name[k] = 0;
N			break;
N		}
N	}
N	if (k == 0 || k > FILE_NAME_LENGTH) {									// Имя отсутствует или слишком длинное?
X	if (k == 0 || k > 14) {									
N		name[0] = 0;
N		type[0] = 0;
N		return FALSE;														// ДА - Завершить с ошибкой "Неверный формат имени файла"
X		return 0;														
N	}
N
N	// Выделить тип
N	if (s == '.') {
N		for (i++, k = 0; k <= FILE_TYPE_LENGTH; i++, k++) {
X		for (i++, k = 0; k <= 3; i++, k++) {
N			s = file_name[i];
N			type[k] = s;
N			if (!s) {
N				break;
N			}
N		}
N		if (k == 0 || k > FILE_TYPE_LENGTH) {								// Тип отсутствует после точки или слишком длинный?
X		if (k == 0 || k > 3) {								
N			name[0] = 0;
N			type[0] = 0;
N			return FALSE;													// ДА - Завершить с ошибкой "Неверный формат имени файла"
X			return 0;													
N		}
N	}
N	else {
N		type[0] = 0;
N	}
N
N	// Проверить имя и тип на допустимые символы
N	if ( ! FS_StrSymbolsValid(name) ) {										// Символы имени допустимы?
N		name[0] = 0;
N		type[0] = 0;
N		return FALSE;														// НЕТ - Завершить с ошибкой "Неверный формат имени файла"
X		return 0;														
N	}
N	if ( ! FS_StrSymbolsValid(type) ) {										// Символы типа допустимы?
N		name[0] = 0;
N		type[0] = 0;
N		return FALSE;														// НЕТ - Завершить с ошибкой "Неверный формат имени файла"
X		return 0;														
N	}
N
N	return TRUE;															// Завершить с результатом "ОК"
X	return 1;															
N}
N
N
N//-----------------------------------------------------------------------------
N// Получить полное имя файла ( Signature1 + имя + тип + Signature2 )
N//-----------------------------------------------------------------------------
Nvoid FS_GetFullName(const u8 *name, const u8 *type, u8 *full_name) {
N	u8 len;
N	u8 i, j;
N	u8 crc;
N
N	// Взять имя файла
N	i = 1;
N	j = 0;
N	len = strlen((char *)name);
N	while (i <= len) {
N		full_name[i++] = name[j++];
N	}
N
N	// Имя файла дополнить нулями
N	len = FILE_NAME_LENGTH;
X	len = 14;
N	while (i <= len) {
N		full_name[i++] = 0;
N	}
N
N	// Добавить тип файла
N	len += strlen((char *)type);
N	j = 0;
N	while (i <= len) {
N		full_name[i++] = type[j++];
N	}
N
N	// Тип файла дополнить нулями
N	len = FILE_NAME_LENGTH + FILE_TYPE_LENGTH;
X	len = 14 + 3;
N	while (i <= len) {
N		full_name[i++] = 0;
N	}
N
N	// Получить CRC для типа файла
N	crc = CRC8(full_name + len, 0xFF, FILE_TYPE_LENGTH);
X	crc = CRC8(full_name + len, 0xFF, 3);
N	full_name[i] = crc;
N
N	// Получить CRC для полного имени (имя + тип)
N	crc = CRC8(full_name + len - FILE_TYPE_LENGTH, crc, FILE_NAME_LENGTH);
X	crc = CRC8(full_name + len - 3, crc, 14);
N	if ( crc == 0x00 || crc == 0xFF ) {
N		crc = 0x01;
N	}
N	full_name[0] = crc;
N}
N
N
N//-----------------------------------------------------------------------------
N//             Проверить использование файла с заданным именем
N//-----------------------------------------------------------------------------
N// Если файл используется (открыт) - возвращается номер FCS назначенной на данный файл
N// иначе - возвращается -1 
NtFile FS_FileUseFCS(const u8 *name, const u8 *type) {
N	u8 fcs_num;																// Указатель на FCS
N	tFCS *p_fcs;
N	u8 state;
N
N	for (fcs_num = 0; fcs_num < MAX_FILES; fcs_num++) {						// Проверять все структуры FCS
X	for (fcs_num = 0; fcs_num < 8; fcs_num++) {						
N		p_fcs = pFCSArray[fcs_num];											// Получить указатель на FCS
N
N		state = p_fcs->State;
N		if (state == FCS_STATE_CLOSED) {									// Структура FCS закрыта?
N			continue;														// ДА - Перейти к следующеей структуре FCS
N		}
N
N		// Здесь структура FCS не закрыта
N		if ( ! strcmp( (char *)name, (char *)p_fcs->Name ) &&				// Имена совпадают?
N		     ! strcmp( (char *)type, (char *)p_fcs->Type ) ) {				// И типы совпадают?
N			return fcs_num;													// Вернуть номер структуры FCS
N		};
N	}
N
N	return -1;																// Вернуть результат "Файл не используется"
N}
N
N
N//-----------------------------------------------------------------------------
N// Получить номер первой свободной записи в таблице FNT
N//-----------------------------------------------------------------------------
N// если свободных записей нет - возвращается 0xFFFFFFFF
Nu32 FS_FindFreeFNT(void) {
N	u32 fnt_num1;															// Левый элемент при поиске = первая запись
N	u32 fnt_num2;															// Правый элемент при поиске = последняя запись
N	u32 fnt_num;															// Промежуточный элемент при поиске
N	u32 addr;
N
N	fnt_num1 = 0;															// Левый элемент при поиске = первая запись
N	fnt_num2 = FNTRecordMAX;												// Правый элемент при поиске = последняя запись
N
N	// Предельные случаи
N	addr = FNT_BASE_ADDRESS;
X	addr = 32;
N	if (FLASH_ReadByte(addr) == 0xFF) {										// Первая запись свободна?
N		return 0;															// ДА - Свободная запись FNT = 0
N	}
N	addr += FNTRecordMAX * FNT_RECORD_SIZE;
X	addr += FNTRecordMAX * 32;
N	if (FLASH_ReadByte(addr) != 0xFF) {										// Последняя запись занята?
N		return 0xFFFFFFFF;													// ДА - Свободных записей FNT нет
N	}
N
N	// Дихотомический поиск по таблице FNT
N	while ( (fnt_num2 - fnt_num1) > 1 ) {									// Повторять чтобы левый и правый элемент оказались рядом
N		fnt_num = (fnt_num1 + fnt_num2) >> 1;
N		addr = FNT_BASE_ADDRESS + fnt_num * FNT_RECORD_SIZE;
X		addr = 32 + fnt_num * 32;
N		if (FLASH_ReadByte(addr) == 0xFF) {
N			fnt_num2 = fnt_num;
N		}
N		else {
N			fnt_num1 = fnt_num;
N		}
N	}
N	return fnt_num2;														// Свободная запись FNT = правый элемент
N}
N
N
N//-----------------------------------------------------------------------------
N// Получить номер записи файла с заданным именем в таблице FNT
N//-----------------------------------------------------------------------------
N// Искать по всем записям от начала до конца таблицы FNT
N// Поиск выполняется по полному имени (имя + тип)
N// если файл не найден - возвращается 0xFFFFFFFF
Nu32 FS_FindFileByName(const u8 *full_name) {
N	u32 fnt_num;
N	u32 fnt_addr;
N	u32 addr;
N	u8 len;
N	u8 i;
N	u8 b;
N
N	len = 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH;							// Длина поиска
X	len = 1 + 14 + 3;							
N	fnt_addr = FNT_BASE_ADDRESS;											// Адрес первой записи FNT
X	fnt_addr = 32;											
N	for (fnt_num = 0; fnt_num < FNTRecordsNumber; fnt_num++) {				// Проверять все записи в таблице FNT
N		addr = fnt_addr;													// Адрес символа строки
N		for (i=0; i<len; i++) {												// Сравнивать все байты в заданной строке
N			b = FLASH_ReadByte(addr++);										// Прочитать байт из строки
N			if (b != full_name[i]) {										// Символы равны?
N				break;														// НЕТ - прервать сравнение строк
N			}
N		}
N		if (i == len) {														// Имя файла найдено?
N			return fnt_num;													// ДА - Вернуть номер записи FNT
N		}
N		fnt_addr += FNT_RECORD_SIZE;										// Адрес следующей записи FNT
X		fnt_addr += 32;										
N	}
N	return 0xFFFFFFFF;														// Результат = "Файл не найден"
N}
N
N//-----------------------------------------------------------------------------
N// Найти cвободный кластер в таблице CAT
N//-----------------------------------------------------------------------------
N// Искать по всем записям от начала до конца таблицы CAT
N// если свободных кластеров нет - возвращается 0xFFFF
Nu16 FS_FindFreeCluster(void) {
N	u16 cat_num;
N	u32 cat_addr;
N
N	cat_addr = CAT_BASE_ADDRESS;											// Адрес первой записи CAT
N	for (cat_num = 0; cat_num < CATRecordsNumber; cat_num++) {				// Проверять все записи в таблице CAT
N		if (FLASH_ReadByte(cat_addr) == 0xFF) {								// Запись свободна?
N			return cat_num;													// ДА - Вернуть номер записи CAT
N		}
N		cat_addr += CAT_RECORD_SIZE;										// Адрес следующей записи CAT
X		cat_addr += 3;										
N	}
N	return 0xFFFF;															// Результат = "Свободная запись CAT не найдена"
N}
N
N
N//-----------------------------------------------------------------------------
N// Получить кол-во cвободных кластеров в таблице CAT
N//-----------------------------------------------------------------------------
N// Искать по всем записям от начала до конца таблицы CAT
Nu16 FS_GetFreeClustersNum(void) {
N	u16 cat_num;
N	u32 cat_addr;
N	u16 n = 0;
N
N	cat_addr = CAT_BASE_ADDRESS;											// Адрес первой записи CAT
N	for (cat_num = 0; cat_num < CATRecordsNumber; cat_num++) {				// Проверять все записи в таблице CAT
N		if (FLASH_ReadByte(cat_addr) == 0xFF) {								// Запись свободна?
N			n++;															// ДА - Считать кол-во свободных кластеров
N		}
N		cat_addr += CAT_RECORD_SIZE;										// Адрес следующей записи CAT
X		cat_addr += 3;										
N	}
N	return n;																// Результат = Кол-во свободных кластеров
N}
N
N
N//-----------------------------------------------------------------------------
N// Записать полное имя файла в запись FNT
N//-----------------------------------------------------------------------------
Nvoid FS_FNTWriteFullName(u32 fnt_num, const u8 *full_name) {
N	u8 len;
N
N	len = 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1;
X	len = 1 + 14 + 3 + 1;
N	FLASH_Write( FNT_BASE_ADDRESS + fnt_num * FNT_RECORD_SIZE, full_name, len );
X	FLASH_Write( 32 + fnt_num * 32, full_name, len );
N}
N
N
N//-----------------------------------------------------------------------------
N// Записать Сигнатуру1 в запись FNT
N//-----------------------------------------------------------------------------
Nvoid FS_FNTSetSignature1(u32 fnt_num, u8 signature) {
N	FLASH_WriteByte( FNT_BASE_ADDRESS + fnt_num * FNT_RECORD_SIZE, signature );
X	FLASH_WriteByte( 32 + fnt_num * 32, signature );
N}
N
N
N//-----------------------------------------------------------------------------
N// Записать флаг кластера в таблице CAT
N//-----------------------------------------------------------------------------
Nvoid FS_ClusterSetFlag(u16 clust_num, u8 flag) {
N	FLASH_WriteByte( CAT_BASE_ADDRESS + clust_num * CAT_RECORD_SIZE, flag );
X	FLASH_WriteByte( CAT_BASE_ADDRESS + clust_num * 3, flag );
N}
N
N
N//-----------------------------------------------------------------------------
N// Записать номер следующего кластера в таблице CAT
N//-----------------------------------------------------------------------------
Nvoid FS_SetNextCluster(u16 clust_num_curr, u16 clust_num_next) {
N	FLASH_Write( CAT_BASE_ADDRESS + clust_num_curr * CAT_RECORD_SIZE + 1, (u8 *)&clust_num_next, 2 );
X	FLASH_Write( CAT_BASE_ADDRESS + clust_num_curr * 3 + 1, (u8 *)&clust_num_next, 2 );
N}
N
N
N//-----------------------------------------------------------------------------
N// Прочитать номер следующего кластера в таблице CAT
N//-----------------------------------------------------------------------------
Nu16 FS_GetNextCluster(u16 clust_num_curr) {
N	u16 clust_num_next;
N
N	FLASH_Read( (u8 *)&clust_num_next, CAT_BASE_ADDRESS + clust_num_curr * CAT_RECORD_SIZE + 1, 2 );
X	FLASH_Read( (u8 *)&clust_num_next, CAT_BASE_ADDRESS + clust_num_curr * 3 + 1, 2 );
N	return clust_num_next;
N}
N
N
N//-----------------------------------------------------------------------------
N// Записать буфер страницы в файл
N//-----------------------------------------------------------------------------
Nvoid FS_FlushPageBuffer(const tFCS *p_fcs, u16 size) {
N	u32 addr;
N
N	addr = CLUSTERS_BASE_ADDRESS +											// Адрес страницы в флэш-памяти
N	       p_fcs->CurrCluster * CLUSTER_SIZE +
N		   p_fcs->CurrPage * PAGE_SIZE;
X		   p_fcs->CurrPage * 256;
N 	FLASH_Write(addr, p_fcs->PageBuffer, size);								// Записать страницу флэш-памяти
N}
N
N
N//-----------------------------------------------------------------------------
N// Получить номер свободной структуры FCS
N//-----------------------------------------------------------------------------
Ns8 FS_GetFreeFCS() {
N	u8 i;
N
N	for (i=0; i<MAX_FILES; i++) {											// Проверить все структуры FCS
X	for (i=0; i<8; i++) {											
N		if (pFCSArray[i]->State == FCS_STATE_CLOSED) {						// Найдена свободная (закрытая) структура FCS?
N			return i;														// ДА - Вернуть номер найденной структуры FCS
N		}
N	}
N	return -1;																// НЕТ - Вернуть ошибку "Нет свободной структуры FCS" (ошибка -1)
N}
N
N
N
N
N//					*	*	*	*	*	*	*	*	*
N
N
N
N
N//-----------------------------------------------------------------------------
N//               НАЗНАЧИТЬ ФАЙЛОВУЮ ПЕРЕМЕННУЮ ФАЙЛУ
N//-----------------------------------------------------------------------------
Ns8 FS_Assign(const u8 *file_name,tFile * f) {
N	s8 fcs_num;
N	u8 name[FILE_NAME_LENGTH + 1];
X	u8 name[14 + 1];
N	u8 type[FILE_TYPE_LENGTH + 1];
X	u8 type[3 + 1];
N
N	// Проверить инициализацию файловой системы (ошибка -1)
N	if (! FS_IS_INITED) {													// Файловая система инициализирована?
N		return EFS_FS_NOT_INITED;															// НЕТ - Вернуть ошибку "Файловая система не инициализирована" (ошибка -1)
X		return -2;															
N	}
N
N	if (! FS_GetNameAndType(file_name, name, type)) {						// Выделение имени и типа выполнилось успешно?
N		return EFS_INVALID_FILE_NAME;															// НЕТ - Вернуть ошибку "Неверный формат имени файла" (ошибка -3)
X		return -3;															
N	}
N
N	// Проверить использование файла с заданным именем
N	if (FS_FileUseFCS(name, type) > -1) {									// Файл с заданным именем используется?
N		return EFS_FILE_IS_USED;															// ДА - Вернуть ошибку "Файл с заданным именем используется" (ошибка -4)
X		return -4;															
N	};
N
N	// Получить номер свободной структуры FCS
N	fcs_num = FS_GetFreeFCS();
N	if (fcs_num < 0) {														// Свободная структура FCS найдена?
N		return EFS_NO_FREE_FCS;											// НЕТ - Вернуть ошибку "Нет свободной структуры FCS" (ошибка -2)
X		return -5;											
N	}
N
N	// Заполнить занятую структуру FCS
N	pFCSArray[fcs_num]->State = FCS_STATE_OPENED;							// Структура FCS = Открыта
N	strcpy((char *)pFCSArray[fcs_num]->Name, (char *)name);					// Записать имя файла
N	strcpy((char *)pFCSArray[fcs_num]->Type, (char *)type);					// Записать тип файла
N	*f = fcs_num;
N	return FS_RESULT_OK;															// Вернуть номер открытой структуры FCS
X	return 0;															
N}
N
N
N//-----------------------------------------------------------------------------
N//                 СОЗДАТЬ НОВЫЙ ФАЙЛ ДЛЯ ЗАПИСИ
N//-----------------------------------------------------------------------------
Ns8 FS_Rewrite(tFile fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u32 fnt_num;															// Номер записи в таблице FNT
N	u16 clust_num;
N	u8 *full_name;															// Указатель на полное имя файла
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED) {									// Структура FCS открыта?
N		return EFS_FCS_NOT_OPENED;															// НЕТ - Вернуть ошибку "Структура FCS не открыта" (ошибка -1)
X		return -7;															
N	}
N
N	// Получить полное имя файла ( в форме: Signature1 + имя + тип + Signature2 )
N	full_name = p_fcs->FNT.FullName;										// Указатель на полное имя файла
N	FS_GetFullName(p_fcs->Name, p_fcs->Type, full_name);
N
N	// Проверить уникальность имени (ошибка -2)
N	fnt_num = FS_FindFileByName(full_name);									// Найти файл с заданным именем (включая сигнатуру)
N	if (fnt_num != 0xFFFFFFFF) {											// Найден файл с заданным именем?
N		return EFS_FILE_NAME_IS_EXIST;															// ДА - Вернуть ошибку "Файл с заданным именем уже существует" (ошибка -2)
X		return -8;															
N	}
N
N	// Найти свободную запись в таблице FNT (ошибка -3)
N	fnt_num = FS_FindFreeFNT();
N	if (fnt_num == 0xFFFFFFFF) {											// Свободная запись FNT найдена?
N		return EFS_NO_FREE_FNT;															// НЕТ - Вернуть ошибку "Нет свободной записи FNT" (ошибка -3)
X		return -9;															
N	}
N
N	// Проверить наличие свободного места (ошибка -4)
N	clust_num = FS_FindFreeCluster();										// Найти свободный кластер в таблице CAT
N	if (clust_num == 0xFFFF) {												// Свободный кластер найден?
N		return EFS_NO_FREE_SPACE;															// НЕТ - Вернуть ошибку "Недостаточно места" (ошибка -4)
X		return -10;															
N	}
N
N	// ОШИБОК НЕТ - ОТКРЫТЬ ФАЙЛ
N
N	// Пометить занятые записи в таблицах FNT и CAT
N	FS_FNTWriteFullName(fnt_num, full_name);								// Пометить запись FNT = "Занято" (записать полное имя файла)
N	FS_ClusterSetFlag(clust_num, 0xFE);										// Пометить кластер в таблице CAT = "Занято"
N
N	// Заполнить начальными значениями структуру FCS.FNT
N	//p_fcs->FNT.FullName[];												...(полное имя = уже заполнено)
N	p_fcs->FNT.Attribute = FILE_ATTR_NOATTR;								// Файл без атрибутов
N	p_fcs->FNT.FirstCluster = clust_num;									// Первый кластер = текущий кластер
N	p_fcs->FNT.Size = 0;													// Начальный размер = 0
N
N	// Заполнить FCS
N	p_fcs->State = FCS_STATE_OPENED_WRITE;									// Пометить - "Структура FCS открыта для записи файла"
N	p_fcs->FNT_num = fnt_num;												// Номер записи таблицы FNT
N	p_fcs->CurrCluster = clust_num;											// Номер текущего кластера
N	p_fcs->CurrPage = 0;													// Номер текущей страницы в текущем кластере
N	p_fcs->PageBufPtr = 0;													// Текущий указатель в буфере страницы
N	//p_fcs->PageBuffer[];													...(буфер текущей страницы флэш-памяти = не определено)
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ БУФЕР СТРАНИЦЫ
Nfor (k = 0; k < PAGE_SIZE; k++) {
Xfor (k = 0; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N
N	return FS_RESULT_OK;																// Файл для записи успешно открыт
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//            ОТКРЫТЬ СУЩЕСТВУЮЩИЙ ФАЙЛ ДЛЯ ДОБАВЛЕНИЯ
N//-----------------------------------------------------------------------------
Ns8 FS_Append(tFile fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *full_name;															// Указатель на полное имя файла
N	u32 fnt_num_old, fnt_num_new;											// Старый и новый номера записей в таблице FNT
N	u32 addr;																// Адрес флэш-памяти
N	u8 len;
N	u32 file_size;															// Размер файла
N	u16 clust_num;															// Индекс (в таблице CAT) последнего кластера
N	u8 page_num;															// Номер последней страницы внутри последнего кластера
N	u32 n_bytes;															// Кол-во байт в последней странице
N	u16 i;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// ПЕРЕД ОТКРЫТИЕМ ФАЙЛА - ПРОВЕРИТЬ ВОЗМОЖНЫЕ ОШИБКИ
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED) {									// Структура FCS открыта?
N		return EFS_FCS_NOT_OPENED;															// НЕТ - Вернуть ошибку "Структура FCS не открыта" (ошибка -1)
X		return -7;															
N	}
N
N	// Получить полное имя файла ( в форме: Signature1 + имя + тип + Signature2 )
N	full_name = p_fcs->FNT.FullName;										// Указатель на полное имя файла
N	FS_GetFullName(p_fcs->Name, p_fcs->Type, full_name);
N
N	// Поиск запрошенного файла в таблице FNT (ошибка -2)
N	fnt_num_old = FS_FindFileByName(full_name);								// Найти файл с заданным именем (включая сигнатуру)
N	if (fnt_num_old == 0xFFFFFFFF) {										// Найден файл с заданным именем?
N		return EFS_FILE_NOT_FOUND;															// НЕТ - Вернуть ошибку "Файл с заданным именем не найден" (ошибка -2)
X		return -11;															
N	}
N
N	// Найти свободную запись в таблице FNT (ошибка -3)
N	fnt_num_new = FS_FindFreeFNT();
N	if (fnt_num_new == 0xFFFFFFFF) {										// Свободная запись FNT найдена?
N		return EFS_NO_FREE_FNT;															// НЕТ - Вернуть ошибку "Нет свободной записи FNT" (ошибка -3)
X		return -9;															
N	}
N
N	// ОШИБОК НЕТ - ПОПЫТКА ОТКРЫТЬ ФАЙЛ
N
N	// Заполнить начальными значениями структуру FCS.FNT
N
N	//p_fcs->FNT.FullName[];												(полное имя = уже заполнено)
N
N	// Копировать в FCS.FNT запись из таблицы FNT файла
N	addr = FNT_BASE_ADDRESS + fnt_num_old * FNT_RECORD_SIZE;				// Адрес начала FNT открываемого файла
X	addr = 32 + fnt_num_old * 32;				
N	len = 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1;						// Длина полного имени
X	len = 1 + 14 + 3 + 1;						
N	addr += len;															// Пропустить полное имя (полное имя не копировать, оно уже заполнено)
N	FLASH_Read(full_name + len, addr, FNT_RECORD_SIZE - len);				// Прочитать запись FNT кроме полного имени
X	FLASH_Read(full_name + len, addr, 32 - len);				
N
N	// Проверить разрешена или нет запись в файл  (ошибка -4)
N	if (p_fcs->FNT.Attribute == FILE_ATTR_READONLY) {						// В файл разрешена запись?
N		return EFS_WRITE_DISABLED;															// НЕТ - Вернуть ошибку "Запись в файл запрещена"  (ошибка -4)
X		return -12;															
N	}
N
N	file_size = p_fcs->FNT.Size;											// Размер файла
N	page_num = ( (file_size / PAGE_SIZE) % PAGES_PER_CLUSTER );				// Номер последней страницы внутри кластера
X	page_num = ( (file_size / 256) % 64 );				
N	n_bytes = file_size % PAGE_SIZE;										// Количество байт в последней странице
X	n_bytes = file_size % 256;										
N
N	// Вычислить индекс (в таблице CAT) последнего кластера
N	i = (file_size / CLUSTER_SIZE);											// Кол-во целых кластеров
N	clust_num = p_fcs->FNT.FirstCluster;									// Начинаем с первого кластера цепочки
N	while (i--) {															// Идти по цепочке кластеров
N		clust_num = FS_GetNextCluster(clust_num);
N	}
N
N	// Пометить записи в таблице FNT
N	FS_FNTSetSignature1(fnt_num_old, 0x00);									// Пометить старую запись FNT = "Удалено"
N	FS_FNTWriteFullName(fnt_num_new, full_name);							// Пометить новую запись FNT = "Занято" (записать полное имя файла)
N
N	// Заполнить FCS
N	p_fcs->State = FCS_STATE_OPENED_WRITE;									// Пометить - "Структура FCS открыта для записи файла"
N	p_fcs->FNT_num = fnt_num_new;											// Номер записи таблицы FNT
N	p_fcs->CurrCluster = clust_num;											// Индекс (в таблице CAT) текущего кластера
N	p_fcs->CurrPage = page_num;												// Номер текущей страницы в текущем кластере
N	p_fcs->PageBufPtr = n_bytes;											// Текущий указатель в буфере страницы
N
N	// Прочитать последнюю страницу в буфер страницы
N	if (n_bytes) {															// Первая страница содержит данные?
N		addr = CLUSTERS_BASE_ADDRESS +										// Адрес страницы в флэш-памяти
N		       clust_num * CLUSTER_SIZE +
N		       page_num * PAGE_SIZE;
X		       page_num * 256;
N		FLASH_Read(p_fcs->PageBuffer, addr, n_bytes);						// Прочитать страницу
N	}
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = n_bytes; k < PAGE_SIZE; k++) {
Xfor (k = n_bytes; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N
N	return FS_RESULT_OK;																// Файл для записи успешно открыт
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//                 ОТКРЫТЬ ФАЙЛ ДЛЯ ЧТЕНИЯ
N//-----------------------------------------------------------------------------
Ns8 FS_Reset(tFile fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *full_name;															// Указатель на полное имя файла
N	u32 fnt_num;															// Номер записи в таблице FNT
N	u8 len;
N	u32 addr;																// Адрес флэш-памяти
N	u32 size;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// ПЕРЕД ОТКРЫТИЕМ ФАЙЛА - ПРОВЕРИТЬ ВОЗМОЖНЫЕ ОШИБКИ
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED) {									// Структура FCS открыта?
N		return EFS_FCS_NOT_OPENED;															// НЕТ - Вернуть ошибку "Структура FCS не открыта" (ошибка -1)
X		return -7;															
N	}
N
N	// Получить полное имя файла ( в форме: Signature1 + имя + тип + Signature2 )
N	full_name = p_fcs->FNT.FullName;										// Указатель на полное имя файла
N	FS_GetFullName(p_fcs->Name, p_fcs->Type, full_name);
N
N	// Поиск запрошенного файла в таблице FNT (ошибка -2)
N	fnt_num = FS_FindFileByName(full_name);									// Найти файл с заданным именем (включая сигнатуру)
N	if (fnt_num == 0xFFFFFFFF) {											// Найден файл с заданным именем?
N		return EFS_FILE_NOT_FOUND;															// НЕТ - Вернуть ошибку "Файл с заданным именем не найден" (ошибка -2)
X		return -11;															
N	}
N
N	// ОШИБОК НЕТ - ОТКРЫТЬ ФАЙЛ
N
N	// Заполнить начальными значениями структуру FCS.FNT
N	//p_fcs->FNT.FullName[];												...(полное имя = уже заполнено)
N
N	// Копировать в FCS.FNT запись из таблицы FNT
N	addr = FNT_BASE_ADDRESS + fnt_num * FNT_RECORD_SIZE;					// Адрес начала FNT открываемого файла
X	addr = 32 + fnt_num * 32;					
N
N	len = 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1;						// Длина полного имени
X	len = 1 + 14 + 3 + 1;						
N	addr += len;															// Пропустить полное имя (полное имя не копировать, оно уже заполнено)
N	FLASH_Read(full_name + len, addr, FNT_RECORD_SIZE - len);				// Прочитать запись FNT (кроме полного имени)
X	FLASH_Read(full_name + len, addr, 32 - len);				
N
N	// Заполнить FCS
N	p_fcs->State = FCS_STATE_OPENED_READ;									// Пометить - "Структура FCS открыта для чтения файла"
N	p_fcs->FNT_num = fnt_num;												// Номер записи таблицы FNT
N	p_fcs->CurrCluster = p_fcs->FNT.FirstCluster;							// Индекс (в таблице CAT) текущего кластера
N	p_fcs->CurrPage = 0;													// Номер текущей страницы в текущем кластере
N	p_fcs->PageBufPtr = 0;													// Текущий указатель в буфере страницы
N
N	size = p_fcs->FNT.Size;													// Взять размер файла
N	p_fcs->RemainSize = size;												// Осталось не прочитано байт
N
N	if (size > PAGE_SIZE) {													// Вычислить количество байт в первой странице
X	if (size > 256) {													
N		size = PAGE_SIZE;
X		size = 256;
N	}
N
N	// Прочитать первую страницу в буфер страницы
N	if (size) {																// Первая страница содержит данные?
N		addr = CLUSTERS_BASE_ADDRESS +										// Адрес страницы в флэш-памяти
N		       p_fcs->CurrCluster * CLUSTER_SIZE;							// (здесь номер страницы = 0)
N		FLASH_Read(p_fcs->PageBuffer, addr, size);							// Прочитать страницу
N	}
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = size; k < PAGE_SIZE; k++) {
Xfor (k = size; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N
N	p_fcs->MinFilePosition = 0;												// Мин. позиция файла в текущей странице
N	if (size == PAGE_SIZE) {												// Макс. позиция файла в текущей странице
X	if (size == 256) {												
N		p_fcs->MaxFilePosition = PAGE_SIZE-1;
X		p_fcs->MaxFilePosition = 256-1;
N	}
N	else {
N		// здесь size < PAGE_SIZE
N		p_fcs->MaxFilePosition = size;
N	}
N
N	return FS_RESULT_OK;																// Файл для чтения успешно открыт
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//                     ЗАПИСАТЬ БАЙТ В ОТКРЫТЫЙ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns8 FS_WriteByte(tFile fcs_num, u8 data) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u16 page_buf_ptr;														// Указатель в буфере страницы
N	u8 curr_page;															// Номер текущей страницы в текущем кластере
N	u16 clust_num_next;
N	s8 result;																// Результат записи байта
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// ПЕРЕД ЗАПИСЬЮ - ПРОВЕРИТЬ ВОЗМОЖНЫЕ ОШИБКИ
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_WRITE) {							// Структура FCS открыта для записи файла?
N		return EFS_FCS_NOT_OPENED_WRITE;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для записи файла" (ошибка -1)
X		return -13;															
N	}
N
N	// ОШИБОК НЕТ - ЗАПИСАТЬ БАЙТ
N
N	p_fcs->FNT.Size++;														// Увеличить размер файла
N	page_buf_ptr = p_fcs->PageBufPtr;										// Взять текущий указатель в буфере страницы
N	p_fcs->PageBuffer[page_buf_ptr++] = data;								// Записать байт данных в буфер страницы
N
N	result = FS_RESULT_OK;																// Предварительный результат "Байт успешно записан"
X	result = 0;																
N	if (page_buf_ptr == PAGE_SIZE) {										// Буфер страницы заполнился?
X	if (page_buf_ptr == 256) {										
N		page_buf_ptr = 0;													// ДА - Сбросить текущий указатель в буфере страницы
N		FS_FlushPageBuffer(p_fcs, PAGE_SIZE);								// Записать буфер страницы в файл
X		FS_FlushPageBuffer(p_fcs, 256);								
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ БУФЕР СТРАНИЦЫ
Nfor (k = 0; k < PAGE_SIZE; k++) {
Xfor (k = 0; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N		curr_page = p_fcs->CurrPage + 1;									// Увеличить номер текущей страницы
N		if (curr_page == PAGES_PER_CLUSTER) {								// Кластер заполнился?
X		if (curr_page == 64) {								
N			curr_page = 0;													// ДА - Обнулить номер текущей страницы
N
N			// Проверить наличие свободного места (ошибка -2)
N			clust_num_next = FS_FindFreeCluster();							// Найти свободный кластер в таблице CAT
N			if (clust_num_next == 0xFFFF) {									// Свободный кластер найден?
N				result = EFS_NO_FREE_SPACE;												// НЕТ - Результат "Недостаточно места для последующей записи" (ошибка -2)
X				result = -10;												
N			}
N			else {
N				FS_SetNextCluster(p_fcs->CurrCluster, clust_num_next);		// Записать указатель на следующий кластер в таблице CAT
N				FS_ClusterSetFlag(clust_num_next, 0xFE);					// Пометить новый кластер в таблице CAT = "Занято"
N				p_fcs->CurrCluster = clust_num_next;						// Изменить номер текущего кластера
N			}
N		}
N		p_fcs->CurrPage = curr_page;										// Сохранить номер текущей страницы
N	}
N	p_fcs->PageBufPtr = page_buf_ptr;										// Обновить текущий указатель в буфере страницы
N
N
N	return result;															// Результат записи байта
N}
N
N
N//-----------------------------------------------------------------------------
N//                    ПРОЧИТАТЬ БАЙТ ИЗ ОТКРЫТОГО ФАЙЛА
N//-----------------------------------------------------------------------------
Ns8 FS_ReadByte(tFile fcs_num, u8 *data) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u16 page_buf_ptr;														// Указатель в буфере страницы
N	u8 *page_buffer;
N	u16 page_size;															// Размер буфера страницы
N	u32 remain_size;														// Оставшийся объем данных в файле
N	u8  curr_page;															// Номер текущей страницы в текущем кластере
N	u16 clust_num;
N	u32 addr;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return EFS_FCS_NOT_OPENED_READ;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
X		return -14;															
N	}
N
N	remain_size = p_fcs->RemainSize;
N
N	// Проверить кол-во непрочитанных байт (ошибка -2)
N	if (! remain_size) {													// Имеются непрочитанные байты?
N		return EFS_NO_DATA;															// НЕТ - Вернуть ошибку "Файл пуст" (ошибка -2)
X		return -15;															
N	}
N
N	// ЗДЕСЬ ИМЕЮТСЯ ДАННЫЕ ДЛЯ ЧТЕНИЯ
N
N	p_fcs->RemainSize = --remain_size;										// Уменьшить кол-во непрочитанных байт
N
N	page_buf_ptr = p_fcs->PageBufPtr;										// Взять текущий указатель в буфере страницы
N	page_buffer = p_fcs->PageBuffer;										// Взять указатель на буфер страницы
N
N	// Взять байт данных из буфера страницы
N	// и передвинуть указатель в буфере страницы
N	*data = page_buffer[page_buf_ptr++];
N
N	if (page_buf_ptr == PAGE_SIZE) {										// Буфер страницы полностью прочитан?
X	if (page_buf_ptr == 256) {										
N		page_buf_ptr = 0;													// ДА - Обнулить текущий указатель в буфере страницы
N		clust_num = p_fcs->CurrCluster;										// Взять индекс (в таблице CAT) текущего кластера
N		curr_page = p_fcs->CurrPage + 1;									// Увеличить номер текущей страницы
N		if (curr_page == PAGES_PER_CLUSTER) {								// Кластер полностью прочитан?
X		if (curr_page == 64) {								
N			curr_page = 0;													// ДА - Обнулить номер текущей страницы
N			clust_num = FS_GetNextCluster(clust_num);						// Следующий кластер в цепочке в таблице CAT
N			p_fcs->CurrCluster = clust_num;									// Изменить номер текущего кластера
N		}
N		p_fcs->CurrPage = curr_page;										// Изменить номер текущей страницы
N
N		// Получить размер следующей сраницы файла
N		if (remain_size > PAGE_SIZE) {
X		if (remain_size > 256) {
N			page_size = PAGE_SIZE;
X			page_size = 256;
N		}
N		else {
N			page_size = remain_size;
N		}
N
N		// Прочитать следующую страницу файла в буфер
N		if (page_size) {
N			addr = CLUSTERS_BASE_ADDRESS +									// Адрес страницы в флэш-памяти
N			       clust_num * CLUSTER_SIZE +
N				   curr_page * PAGE_SIZE;
X				   curr_page * 256;
N			FLASH_Read(page_buffer, addr, page_size);						// Прочитать страницу
N		}
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = page_size; k < PAGE_SIZE; k++) {
Xfor (k = page_size; k < 256; k++) {
N	page_buffer[k] = 0xFF;
N}
N//------
N
N		// Изменить диапазон позиции файла в текущей странице
N		p_fcs->MinFilePosition += PAGE_SIZE;								// Мин. позиция файла в текущей странице
X		p_fcs->MinFilePosition += 256;								
N		if (page_size == PAGE_SIZE) {										// Макс. позиция файла в текущей странице
X		if (page_size == 256) {										
N			p_fcs->MaxFilePosition += PAGE_SIZE;
X			p_fcs->MaxFilePosition += 256;
N		}
N		else {
N			// здесь page_size < PAGE_SIZE
N			p_fcs->MaxFilePosition += page_size + 1;
N		}
N	}
N	p_fcs->PageBufPtr = page_buf_ptr;										// Обновить текущий указатель в буфере страницы
N
N	return FS_RESULT_OK;																// Байт успешно прочитан
X	return 0;																
N}
N
N
N//<!> ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N//-----------------------------------------------------------------------------
N//			ЗАПИСАТЬ БУФЕР В ОТКРЫТЫЙ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns32 FS_Write(tFile fcs_num, const u8 *buffer, u32 size) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *page_buffer;
N	u16 page_buf_ptr;														// Указатель в буфере страницы
N	u16 remain_page;														// Размер остатка буфера страницы
N	u16 first_size;															// Размер первой страницы
N	u16 last_size;															// Размер последней страницы
N	u32 full_page_count;													// Кол-во целых страниц
N	u8  curr_page;															// Номер текущей страницы в текущем кластере
N	u16 clust_num_next;															// Номер текущего кластера
N//	u32 addr;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// ПЕРЕД ЗАПИСЬЮ - ПРОВЕРИТЬ ВОЗМОЖНЫЕ ОШИБКИ
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_WRITE) {							// Структура FCS открыта для записи файла?
N		return -1;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для записи файла" (ошибка -1)
N	}
N
N	// ОШИБОК НЕТ - ЗАПИСАТЬ БУФЕР
N
N	page_buffer = p_fcs->PageBuffer;										// Взять указатель на буфер страницы
N	page_buf_ptr = p_fcs->PageBufPtr;										// Взять текущий указатель в буфере страницы
N
N	// Получить размер первой страницы
N	remain_page = PAGE_SIZE - page_buf_ptr;									// Получить размер остатка в буфере страницы
X	remain_page = 256 - page_buf_ptr;									
N	if (size < remain_page) {
N		first_size = size;													// Весь размер запишется в остаток буфера страницы
N		full_page_count = 0;												// Кол-во целых страниц = 0
N	}
N	if (size == remain_page) {
N		first_size = remain_page;											// Остаток буфера страницы полностью запишется
N		full_page_count = 1;												// Кол-во целых страниц = 1
N		last_size = 0;														// Размер последней страницы = 0
N	}
N	if (size > remain_page) {
N		first_size = remain_page;											// Остаток буфера страницы полностью запишется
N		full_page_count = (size - remain_page) / PAGE_SIZE + 1;				// Кол-во целых страниц
X		full_page_count = (size - remain_page) / 256 + 1;				
N		last_size = (size - remain_page) % PAGE_SIZE;						// Размер последней страницы
X		last_size = (size - remain_page) % 256;						
N	}
N
N	// Записать первую страницу
N	if (first_size) {														// Имеются байты для записи?
N		memcpy(page_buffer + page_buf_ptr, buffer, first_size);				// ДА - Записать в буфер страницы
N	}
N	else {
N		return 0;															// НЕТ - Результат = "Записано 0 байт"
N	}
N
N	// Проверить заполнился ли буфер страницы?
N	if (! full_page_count) {												// Буфер страницы не заполнился?
N		p_fcs->PageBufPtr += first_size;									// ДА - Обновить текущий указатель в буфере страницы
N		return size;														// Результат = "Записано size байт"
N	}
N	// Здесь завершено без записи буфера страницы в файл
N
N	// Здесь буфер страницы заполнен
N	FS_FlushPageBuffer(p_fcs, PAGE_SIZE);									// Записать буфер страницы в файл
X	FS_FlushPageBuffer(p_fcs, 256);									
N	full_page_count--;
N
N
N
N	if (last_size) {
N	}
N
N
N
N//******************
N		if (page_buf_ptr == PAGE_SIZE) {										// Буфер страницы заполнился?
X		if (page_buf_ptr == 256) {										
N			page_buf_ptr = 0;													// ДА - Сбросить текущий указатель в буфере страницы
N			FS_FlushPageBuffer(p_fcs, PAGE_SIZE);								// Записать буфер страницы в файл
X			FS_FlushPageBuffer(p_fcs, 256);								
N	
N	//------
N	//<!> ДЛЯ ОТЛАДКИ !!!
N	//ОЧИСТИТЬ БУФЕР СТРАНИЦЫ
N	for (k = 0; k < PAGE_SIZE; k++) {
X	for (k = 0; k < 256; k++) {
N		p_fcs->PageBuffer[k] = 0xFF;
N	}
N	//------
N			curr_page = p_fcs->CurrPage + 1;									// Увеличить номер текущей страницы
N			if (curr_page == PAGES_PER_CLUSTER) {								// Кластер заполнился?
X			if (curr_page == 64) {								
N				curr_page = 0;													// ДА - Обнулить номер текущей страницы
N	
N				// Проверить наличие свободного места (ошибка -2)
N				clust_num_next = FS_FindFreeCluster();							// Найти свободный кластер в таблице CAT
N				if (clust_num_next == 0xFFFF) {									// Свободный кластер найден?
N//					result = -2;												// НЕТ - Результат "Недостаточно места для последующей записи" (ошибка -2)
N				}
N				else {
N					FS_SetNextCluster(p_fcs->CurrCluster, clust_num_next);		// Записать указатель на следующий кластер в таблице CAT
N					FS_ClusterSetFlag(clust_num_next, 0xFE);					// Пометить новый кластер в таблице CAT = "Занято"
N					p_fcs->CurrCluster = clust_num_next;						// Изменить номер текущего кластера
N				}
N			}
N			p_fcs->CurrPage = curr_page;										// Сохранить номер текущей страницы
N		}
N		p_fcs->PageBufPtr = page_buf_ptr;										// Обновить текущий указатель в буфере страницы
N
N
N
N
N
N
N
N
N	return 0; // (фиктивный вовзврат)
N}
N
N
N//<!> ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N//-----------------------------------------------------------------------------
N//			ПРОЧИТАТЬ БУФЕР ИЗ ОТКРЫТОГО ФАЙЛА
N//-----------------------------------------------------------------------------
Ns32 FS_Read(tFile fcs_num, u8 *buffer, u32 size) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *page_buffer;
N	u16 page_buf_ptr;														// Указатель в буфере страницы
N	u16 first_size;															// Размер первой страницы
N	u16 last_size;															// Размер последней страницы
N	u32 full_page_count;													// Кол-во целых страниц
N	u32 remain_size;														// Оставшийся размер файла
N	u8  curr_page;															// Номер текущей страницы в текущем кластере
N	u16 clust_num;
N	u32 addr;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return -1;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
N	}
N
N	// ОШИБОК НЕТ - ПРОЧИТАТЬ БУФЕР
N
N	remain_size = p_fcs->RemainSize;										// Оставшийся объем данных в файле
N
N	// Проверить - Конец файла или нет?
N	if (! remain_size) {													// Имеются непрочитанные байты файла?
N		return 0;															// НЕТ - Вернуть результат "Прочитано 0 байт"
N	}
N
N	if (! size) {															// Запрашиваемый объем > 0?
N		return 0;															// НЕТ - Вернуть результат "Прочитано 0 байт"
N	}
N
N	// Скорректировать запрашиваемый объем данных
N	// (ограничить запрашиваемый объем до остатка файла)
N	if (size > remain_size) {
N		size = remain_size;
N	}
N
N	page_buffer = p_fcs->PageBuffer;										// Взять указатель на буфер страницы
N	page_buf_ptr = p_fcs->PageBufPtr;										// Взять текущий указатель в буфере страницы
N
N	// Получить размер первой страницы
N	first_size = PAGE_SIZE - page_buf_ptr;									// Получить размер остатка в буфере страницы
X	first_size = 256 - page_buf_ptr;									
N	if (first_size >= size) {
N		first_size = size;													// Весь запрашиваемый размер содержится в буфере страницы
N		full_page_count = 0;												// Кол-во целых страниц = 0
N		last_size = 0;														// Размер последней страницы = 0
N	}
N	else {
N		full_page_count = (size - first_size) / PAGE_SIZE;					// Кол-во целых страниц
X		full_page_count = (size - first_size) / 256;					
N		last_size = (size - first_size) % PAGE_SIZE;						// Размер последней страницы
X		last_size = (size - first_size) % 256;						
N	}
N
N	// Прочитать первую страницу
N	// (первая страница всегда есть и находится в буфере страницы)
N	memcpy(buffer, page_buffer + page_buf_ptr, first_size);					// Скопировать блок из буфера страницы
N	page_buf_ptr += first_size;												// Передвинуть указатель в буфере страницы
N	remain_size -= first_size;												// Скорректировать оставшийся размер файла
N
N	clust_num = p_fcs->CurrCluster;											// Взять индекс (в таблице CAT) текущего кластера
N	curr_page = p_fcs->CurrPage;											// Взять номер текущей страницы
N
N	// Прочитать целые страницы
N	if (full_page_count) {
N		buffer += first_size;												// Передвинуть позицию входного буфера
N	}
N	while (full_page_count--) {
N		// Загрузить следующую страницу файла
N		curr_page++;														// Увеличить номер текущей страницы
N		if (curr_page == PAGES_PER_CLUSTER) {								// Кластер полностью прочитан?
X		if (curr_page == 64) {								
N			curr_page = 0;													// ДА - Обнулить номер текущей страницы
N			clust_num = FS_GetNextCluster(clust_num);						// Следующий кластер в цепочке в таблице CAT
N//			p_fcs->CurrCluster = clust_num;									// Изменить номер текущего кластера
N		}
N//		p_fcs->CurrPage = curr_page;										// Изменить номер текущей страницы
N//		page_buf_ptr = 0;													// Обнулить текущий указатель в буфере страницы
N
N		// Прочитать следующую страницу файла в приемный буфер
N		addr = CLUSTERS_BASE_ADDRESS +										// Адрес страницы в флэш-памяти
N		       clust_num * CLUSTER_SIZE +
N			   curr_page * PAGE_SIZE;
X			   curr_page * 256;
N		FLASH_Read(buffer, addr, PAGE_SIZE);								// Прочитать страницу сразу в приемный буфер
X		FLASH_Read(buffer, addr, 256);								
N
N		remain_size -= PAGE_SIZE;											// Скорректировать оставшийся размер файла
X		remain_size -= 256;											
N		buffer += PAGE_SIZE;												// Передвинуть позицию входного буфера
X		buffer += 256;												
N	}
N
N	// Прочитать последнюю страницу
N	if (last_size) {
N		clust_num = p_fcs->CurrCluster;										// Взять индекс (в таблице CAT) текущего кластера
N		curr_page = p_fcs->CurrPage;										// Взять номер текущей страницы
N	}
N
N
N
N
N
N
N
N
N	p_fcs->CurrCluster = clust_num;											// Изменить номер текущего кластера
N	p_fcs->CurrPage = curr_page;											// Изменить номер текущей страницы
N
N
N
N
N	// Изменить диапазон позиции файла в текущей странице
N	p_fcs->MinFilePosition += PAGE_SIZE;									// Мин. позиция файла в текущей странице
X	p_fcs->MinFilePosition += 256;									
N	p_fcs->MaxFilePosition += PAGE_SIZE;									// Макс. позиция файла в текущей странице
X	p_fcs->MaxFilePosition += 256;									
N
N
N	return 0; // (фиктивный вовзврат)
N}
N
N
N//<!> ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N//-----------------------------------------------------------------------------
N//			ЗАПИСАТЬ СТРОКУ В ОТКРЫТЫЙ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns32 FS_WriteLn(tFile fcs_num, const u8 *str) {
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	return 0; // (фиктивный вовзврат)
N}
N
N
N//-----------------------------------------------------------------------------
N//			ПРОЧИТАТЬ СТРОКУ ИЗ ОТКРЫТОГО ФАЙЛА В ПРЯМОМ НАПРАВЛЕНИИ
N//-----------------------------------------------------------------------------
Ns8 FS_ReadLn(tFile fcs_num, u8 *str, u32 max_size) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *page_buffer;
N	u16 page_buf_ptr;														// Указатель в буфере страницы
N	u16 page_size;															// Размер буфера страницы
N	u32 remain_size;														// Оставшийся объем данных в файле
N	u8  curr_page;															// Номер текущей страницы в текущем кластере
N	u16 clust_num;
N	u32 addr;
N	u8 s;																	// Символ прочитанный из файла
N	u32 i;																	// Индекс символа в строке
N	u16 k;
N	s8 result;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return -1;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
N	}
N
N	// ОШИБОК НЕТ - ПРОЧИТАТЬ СТРОКУ
N
N	remain_size = p_fcs->RemainSize;										// Оставшийся объем данных в файле
N
N	// Проверить - Конец файла или нет?
N	if (! remain_size) {													// Имеются непрочитанные байты файла?
N		str[0] = 0;															// НЕТ - Вернуть пустую строку
N		return -2;															// Вернуть ошибку "Файл пуст" (ошибка -2)
N	}
N
N	page_buffer = p_fcs->PageBuffer;										// Взять указатель на буфер страницы
N	page_buf_ptr = p_fcs->PageBufPtr;										// Взять текущий указатель в буфере страницы
N
N	page_size = PAGE_SIZE - page_buf_ptr;									// Получить размер остатка в буфере сраницы
X	page_size = 256 - page_buf_ptr;									
N	if (page_size > remain_size) {
N		page_size = remain_size;
N	}
N
N	// Начало чтения строки
N	i = 0;																	// Встать в начало строки
N	do {
N		// Цикл чтения строки из буфера страницы
N		while (page_size) {
N			s = page_buffer[page_buf_ptr++];								// Взять следующий символ из буфера страницы
N			remain_size--;													// Оставшийся объем данных в файле
N			if (s == 10) {													// Игнорировать символ #10
N				page_size--;												// Оставшийся размер страницы
N				continue;
N			}
N			if (s == 13) {													// Встретился символ #13 ?
N				str[i] = 0;													// Завершить прочитанную строку нулевым символом
N				result = 0;													// Результат = Строка успешно прочитана
N				break;														// Строка прочитана, завершить цикл чтения строки
N			}
N			if (s == 0) {													// Встретился нулевой байт?
N				str[i] = 0;													// ДА - Завершить прочитанную строку нулевым символом
N				result = -3;												// Результат = Ошибка: "Нулевой байт" (ошибка -3)
N				break;														// Завершить цикл чтения строки
N			}
N			// Здесь "хороший" символ
N			if (i < max_size) {
N				str[i++] = s;												// Положить очередной символ в буфер строки
N			}
N			else {
N				str[i] = 0;													// Завершить прочитанную строку нулевым символом
N				// Превышено максимальное кол-во прочитанных символов
N				page_buf_ptr--;												// Откатить указатель в буфере страницы
N				remain_size++;												// Откатить оставшийся объем данных в файле
N				result = -4;												// Результат = Ошибка: "Превышена максимальная длина строки" (ошибка -4)
N				break;														// Завершить цикл чтения строки
N			}
N			// (если выходим из цикла по break, то page_size не обнулится)
N			page_size--;													// Оставшийся размер страницы
N		}
N		// Проверить причину завершения цикла чтения строки
N		if (page_size) {													// Цикл завершился по break ?
N			p_fcs->RemainSize = remain_size;								// ДА - Сохранить оставшийся объем данных в файле
N			p_fcs->PageBufPtr = page_buf_ptr;								// Сохранить текущий указатель в буфере страницы
N			return result;													// Завершить - Вернуть результат чтения строки
N		}
N		// Буфер страницы закончился, а строка все еще не прочитана
N
N		// Проверить - Конец файла или нет?
N		if (! remain_size) {												// Имеются еще непрочитанные байты файла?
N			str[i] = 0;														// НЕТ - Завершить строку
N			p_fcs->RemainSize = 0;											// Сохранить оставшийся объем данных в файле
N			p_fcs->PageBufPtr = page_buf_ptr;								// Сохранить текущий указатель в буфере страницы
N			return 0;														// Результат = Строка успешно прочитана
N		}
N
N		// Не конец файла - загрузить следующую страницу файла
N		clust_num = p_fcs->CurrCluster;										// Взять индекс (в таблице CAT) текущего кластера
N		curr_page = p_fcs->CurrPage + 1;									// Увеличить номер текущей страницы
N		if (curr_page == PAGES_PER_CLUSTER) {								// Кластер полностью прочитан?
X		if (curr_page == 64) {								
N			curr_page = 0;													// ДА - Обнулить номер текущей страницы
N			clust_num = FS_GetNextCluster(clust_num);						// Следующий кластер в цепочке в таблице CAT
N			p_fcs->CurrCluster = clust_num;									// Изменить номер текущего кластера
N		}
N		p_fcs->CurrPage = curr_page;										// Изменить номер текущей страницы
N		page_buf_ptr = 0;													// Обнулить текущий указатель в буфере страницы
N
N		// Получить размер следующей сраницы файла
N		if (remain_size < PAGE_SIZE) {
X		if (remain_size < 256) {
N			page_size = remain_size;
N		}
N		else {
N			page_size = PAGE_SIZE;
X			page_size = 256;
N		}
N
N		// Прочитать следующую страницу файла в буфер страницы
N		addr = CLUSTERS_BASE_ADDRESS +										// Адрес страницы в флэш-памяти
N		       clust_num * CLUSTER_SIZE +
N			   curr_page * PAGE_SIZE;
X			   curr_page * 256;
N		FLASH_Read(page_buffer, addr, page_size);							// Прочитать страницу
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = page_size; k < PAGE_SIZE; k++) {
Xfor (k = page_size; k < 256; k++) {
N	page_buffer[k] = 0xFF;
N}
N//------
N
N		// Изменить диапазон позиции файла в текущей странице
N		p_fcs->MinFilePosition += PAGE_SIZE;								// Мин. позиция файла в текущей странице
X		p_fcs->MinFilePosition += 256;								
N		p_fcs->MaxFilePosition += page_size;								// Макс. позиция файла в текущей странице
N
N	} while (1);
N	// Цикл do... while завершится выходом return внутри цикла
N}
N
N
N//<!> ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
N//-----------------------------------------------------------------------------
N//			ПРОЧИТАТЬ СТРОКУ ИЗ ОТКРЫТОГО ФАЙЛА В ОБРАТНОМ НАПРАВЛЕНИИ
N//-----------------------------------------------------------------------------
Ns8 FS_ReadPrevLn(tFile fcs_num, u8 *str, u32 max_size) {
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	return 0; // (фиктивный вовзврат)
N}
N
N
N//-----------------------------------------------------------------------------
N//       КОЛИЧЕСТВО НЕПРОЧИТАННЫХ БАЙТ В ОТКРЫТОМ ДЛЯ ЧТЕНИЯ ФАЙЛЕ
N//-----------------------------------------------------------------------------
Ns32 FS_RemainSize(tFile fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return -9;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return -1;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
N	}
N
N	return p_fcs->RemainSize;												// Вернуть кол-во непрочитанных байт
N}
N
N
N//-----------------------------------------------------------------------------
N//         ПЕРЕЙТИ В ЗАДАННУЮ ПОЗИЦИЮ В ОТКРЫТОМ ДЛЯ ЧТЕНИЯ ФАЙЛЕ
N//-----------------------------------------------------------------------------
N// Выполняется "абсолютный" переход по файлу
Ns8 FS_Seek(tFile fcs_num, u32 position) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u16 clusters_num;
N	u16 clust_num;
N	u8  page_num;
N	u8  old_page_ptr, new_page_ptr;
N	u32 size;
N	u32 addr;
N	u16 i;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return EFS_FCS_NOT_OPENED_READ;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
X		return -14;															
N	}
N
N	// Проверить заданную позицию (ошибка -2)
N	if (position > p_fcs->FNT.Size) {										// Позиция в пределах размера файла?
N		return EFS_INVALID_POSITION;															// НЕТ - Вернуть ошибку "Заданная позиция не существует" (ошибка -2)
X		return -16;															
N	}
N
N	// ДАЛЕЕ КОД АНАЛОГИЧЕН ФУНКЦИИ FS_RSeek()
N
N	page_num = position % CLUSTER_SIZE / PAGE_SIZE;							// Номер текущей страницы в текущем кластере
X	page_num = position % CLUSTER_SIZE / 256;							
N	new_page_ptr = position % PAGE_SIZE;									// Позиция в текущей странице
X	new_page_ptr = position % 256;									
N
N	// Проверить меняется ли страница
N	if (position >= p_fcs->MinFilePosition && position <= p_fcs->MaxFilePosition) {
N		// Здесь страница не меняется - изменить только текущий указатель в буфере страницы и оставшийся размер
N		old_page_ptr = p_fcs->PageBufPtr;
N		p_fcs->PageBufPtr = new_page_ptr;
N		p_fcs->RemainSize -= new_page_ptr - old_page_ptr;
N		return FS_RESULT_OK;														// OK - Завершить
X		return 0;														
N	}
N
N	// Здесь страница меняется
N
N	// Пройти по цепочке кластеров от первого до текущего кластера файла
N	clusters_num = position / CLUSTER_SIZE;									// Порядковый номер текущего кластера в цепочке
N	clust_num = p_fcs->FNT.FirstCluster;									// Индекс (в таблице CAT) первого кластер цепочки
N	for (i = 0; i < clusters_num; i++) {									// Получить индекс (в таблице CAT) текущего кластера
N		clust_num = FS_GetNextCluster(clust_num);
N	}
N
N	// Изменить некоторые поля FCS
N	p_fcs->CurrCluster = clust_num;											// Изменить номер текущего кластера
N	p_fcs->CurrPage = page_num;												// Изменить номер текущей страницы в текущем кластере
N	p_fcs->PageBufPtr = new_page_ptr;										// Изменить текущий указатель в буфере страницы
N
N	size = p_fcs->FNT.Size - position;										// Осталось не прочитано байт
N	p_fcs->RemainSize = size;
N
N	// Вычислить количество байт в текущей странице
N	size += new_page_ptr;													// Размер от начала текущей страницы до конца файла
N	if (size >= PAGE_SIZE) {												// Размер больше чем страница?
X	if (size >= 256) {												
N		size = PAGE_SIZE;													// ДА - Уменьшить до размера страницы
X		size = 256;													
N	}
N
N	// Прочитать страницу в буфер FCS.Buffer[]
N	addr = CLUSTERS_BASE_ADDRESS +											// Адрес страницы в флэш-памяти
N	       clust_num * CLUSTER_SIZE +
N		   page_num * PAGE_SIZE;
X		   page_num * 256;
N	FLASH_Read(p_fcs->PageBuffer, addr, size);								// Прочитать страницу
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = size; k < PAGE_SIZE; k++) {
Xfor (k = size; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N
N	p_fcs->MinFilePosition = (position / PAGE_SIZE) * PAGE_SIZE;			// Мин. позиция файла в текущей странице
X	p_fcs->MinFilePosition = (position / 256) * 256;			
N	p_fcs->MaxFilePosition = p_fcs->MinFilePosition + size-1;				// Макс. позиция файла в текущей странице
N
N	return FS_RESULT_OK;																// OK - Завершить
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//         СМЕСТИТЬ ТЕКУЩУЮ ПОЗИЦИЮ В ОТКРЫТОМ ДЛЯ ЧТЕНИЯ ФАЙЛЕ
N//-----------------------------------------------------------------------------
N// Выполняется "относительный" переход по файлу
N// При смещении "назад" если позиция не существует, встать в позицию 0
N// При смещении "вперед" если позиция не существует, встать в позицию Size
Ns8 FS_RSeek(tFile fcs_num, s32 disp) {
N	tFCS *p_fcs;															// Указатель на FCS
N	s32 position;
N	u16 clusters_num;
N	u16 clust_num;
N	u8  page_num;
N	u8  old_page_ptr, new_page_ptr;
N	u32 size;
N	u32 addr;
N	u16 i;
N	u16 k;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return EFS_FCS_NOT_OPENED_READ;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
X		return -14;															
N	}
N
N	size = p_fcs->FNT.Size;													// Размер файла
N
N	position = size - p_fcs->RemainSize + disp;								// Получить новую позицию
N	// здесь p_fcs->FNT.Size - p_fcs->RemainSize - текущая позиция
N
N	// Скорректировать позицию за пределами файла
N	if (position < 0) {
N		position = 0;
N	}
N	if (position > size) {
N		position = size;
N	}
N
N	// ДАЛЕЕ КОД АНАЛОГИЧЕН ФУНКЦИИ FS_Seek()
N
N	page_num = position % CLUSTER_SIZE / PAGE_SIZE;							// Номер текущей страницы в текущем кластере
X	page_num = position % CLUSTER_SIZE / 256;							
N	new_page_ptr = position % PAGE_SIZE;									// Позиция в текущей странице
X	new_page_ptr = position % 256;									
N
N	// Проверить меняется ли страница
N	if (position >= p_fcs->MinFilePosition && position <= p_fcs->MaxFilePosition) {
N		// Здесь страница не меняется - изменить только текущий указатель в буфере страницы и оставшийся размер
N		old_page_ptr = p_fcs->PageBufPtr;
N		p_fcs->PageBufPtr = new_page_ptr;
N		p_fcs->RemainSize -= new_page_ptr - old_page_ptr;
N		return FS_RESULT_OK;														// OK - Завершить
X		return 0;														
N	}
N
N	// Здесь страница меняется
N
N	// Пройти по цепочке кластеров от первого до текущего кластера файла
N	clusters_num = position / CLUSTER_SIZE;									// Порядковый номер текущего кластера в цепочке
N	clust_num = p_fcs->FNT.FirstCluster;									// Индекс (в таблице CAT) первого кластер цепочки
N	for (i = 0; i < clusters_num; i++) {									// Получить индекс (в таблице CAT) текущего кластера
N		clust_num = FS_GetNextCluster(clust_num);
N	}
N
N	// Изменить некоторые поля FCS
N	p_fcs->CurrCluster = clust_num;											// Изменить номер текущего кластера
N	p_fcs->CurrPage = page_num;												// Изменить номер текущей страницы в текущем кластере
N	p_fcs->PageBufPtr = new_page_ptr;										// Изменить текущий указатель в буфере страницы
N
N	size = p_fcs->FNT.Size - position;										// Осталось не прочитано байт
N	p_fcs->RemainSize = size;
N
N	// Вычислить количество байт в текущей странице
N	size += new_page_ptr;													// Размер от начала текущей страницы до конца файла
N	if (size >= PAGE_SIZE) {												// Размер больше чем страница?
X	if (size >= 256) {												
N		size = PAGE_SIZE;													// ДА - Уменьшить до размера страницы
X		size = 256;													
N	}
N
N	// Прочитать страницу в буфер FCS.Buffer[]
N	addr = CLUSTERS_BASE_ADDRESS +											// Адрес страницы в флэш-памяти
N	       clust_num * CLUSTER_SIZE +
N		   page_num * PAGE_SIZE;
X		   page_num * 256;
N	FLASH_Read(p_fcs->PageBuffer, addr, size);								// Прочитать страницу
N
N//------
N//<!> ДЛЯ ОТЛАДКИ !!!
N//ОЧИСТИТЬ ОСТАТОК БУФЕРА СТРАНИЦЫ
Nfor (k = size; k < PAGE_SIZE; k++) {
Xfor (k = size; k < 256; k++) {
N	p_fcs->PageBuffer[k] = 0xFF;
N}
N//------
N
N	p_fcs->MinFilePosition = (position / PAGE_SIZE) * PAGE_SIZE;			// Мин. позиция файла в текущей странице
X	p_fcs->MinFilePosition = (position / 256) * 256;			
N	p_fcs->MaxFilePosition = p_fcs->MinFilePosition + size-1;				// Макс. позиция файла в текущей странице
N
N	return FS_RESULT_OK;																// OK - Завершить
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//                            ЗАКРЫТЬ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns8 FS_Close(tFile *fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 state;
N	u32 flash_addr;
N	u8 *addr;
N	u8 size;
N
N	// Проверить файловую переменную (ошибка -9)
N	if (*fcs_num < 0 || *fcs_num >= MAX_FILES) {							// Файловая переменная назначена файлу?
X	if (*fcs_num < 0 || *fcs_num >= 8) {							
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[*fcs_num];											// Получить указатель на FCS
N
N	// ПЕРЕД ЗАКРЫТИЕМ ФАЙЛА - ПРОВЕРИТЬ ВОЗМОЖНЫЕ ОШИБКИ
N
N	state = p_fcs->State;													// Взять состояние структуры FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (state == FCS_STATE_CLOSED) {										// Структура FCS открыта?
N		return EFS_FILE_IS_CLOSED;															// НЕТ - Вернуть ошибку "Структура FCS не открыта" (ошибка -1)
X		return -17;															
N	}
N
N	// Структура FCS просто открыта или Файл открыт для чтения ?
N	if (state == FCS_STATE_OPENED || state == FCS_STATE_OPENED_READ) {
N		p_fcs->State = FCS_STATE_CLOSED;									// Пометить = "Структура FCS закрыта"
N		*fcs_num = -1;														// Отвязать файловую переменную от структуры FCS
N		return FS_RESULT_OK;															// ОК - Файл успешно закрыт
X		return 0;															
N	}
N
N	// Файл открыт для записи ?
N	if (state == FCS_STATE_OPENED_WRITE) {
N		if (p_fcs->PageBufPtr) {											// Буфер страницы не пустой?
N			FS_FlushPageBuffer(p_fcs, p_fcs->PageBufPtr);					// ДА - Записать буфер страницы в файл
N		}
N		// Переписать структуру FCS.FNT в запись FNT текущего файла
N		flash_addr = FNT_BASE_ADDRESS +										// Адрес FNT текущего файла
X		flash_addr = 32 +										
N		       p_fcs->FNT_num * FNT_RECORD_SIZE +							// (пропустить полное имя файла)
X		       p_fcs->FNT_num * 32 +							
N			   1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1;
X			   1 + 14 + 3 + 1;
N		addr = p_fcs->FNT.FullName +										// Указатель на структуру FCS.FNT
N			   1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1;					// (пропустить полное имя файла)
X			   1 + 14 + 3 + 1;					
N		size = sizeof(tFNT) -
N		       1 - FILE_NAME_LENGTH - FILE_TYPE_LENGTH - 1;
X		       1 - 14 - 3 - 1;
N		FLASH_Write(flash_addr, addr, size);								// Переписать полностью запись FNT
N
N		p_fcs->State = FCS_STATE_CLOSED;									// Пометить = "Структура FCS закрыта"
N		*fcs_num = -1;														// Отвязать файловую переменную от структуры FCS
N		return FS_RESULT_OK;															// ОК - Файл успешно закрыт
X		return 0;															
N	}
N	else {
N		return EFS_UNKNOWN_FILE_STATE;															// Вернуть ошибку "Неизвестное состояние структуры FCS" (ошибка -2)
X		return -18;															
N	}
N}
N
N
N//-----------------------------------------------------------------------------
N//                            УДАЛИТЬ ФАЙЛ
N//-----------------------------------------------------------------------------
Ns8 FS_Delete(const u8 *file_name) {
N	u8 name[FILE_NAME_LENGTH + 1];
X	u8 name[14 + 1];
N	u8 type[FILE_TYPE_LENGTH + 1];
X	u8 type[3 + 1];
N	u8 full_name[1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1];
X	u8 full_name[1 + 14 + 3 + 1];
N	u32 fnt_num;
N	u32 fnt_addr;
N	u32 addr;
N	u16 clust_num;
N
N	// Проверить инициализацию файловой системы (ошибка -1)
N	if (! FS_IS_INITED) {													// Файловая система инициализирована?
N		return EFS_FS_NOT_INITED;															// НЕТ - Вернуть ошибку "Файловая система не инициализирована" (ошибка -1)
X		return -2;															
N	}
N
N	if (! FS_GetNameAndType(file_name, name, type)) {						// Выделение имени и типа выполнилось успешно?
N		return EFS_INVALID_FILE_NAME;															// НЕТ - Вернуть ошибку "Неверный формат имени файла" (ошибка -3)
X		return -3;															
N	}
N
N	// Проверить использование файла с заданным именем
N	if (FS_FileUseFCS(name, type) > -1) {									// Файл с заданным именем используется?
N		return EFS_FILE_IS_USED;															// ДА - Вернуть ошибку "Файл с заданным именем используется" (ошибка -4)
X		return -4;															
N	};
N
N	// Получить полное имя файла ( в форме: Signature1 + имя + тип + Signature2 )
N	FS_GetFullName(name, type, full_name);
N
N	// Поиск запрошенного файла в таблице FNT
N	fnt_num = FS_FindFileByName(full_name);									// Найти файл с заданным именем (включая сигнатуру)
N	if (fnt_num == 0xFFFFFFFF) {											// Найден файл с заданным именем?
N		return EFS_FILE_NOT_FOUND;															// НЕТ - Вернуть ошибку "Файл с заданным именем не найден" (ошибка -2)
X		return -11;															
N	}
N
N	// ОШИБОК НЕТ - УДАЛИТЬ ФАЙЛ
N
N	fnt_addr = FNT_BASE_ADDRESS + fnt_num * FNT_RECORD_SIZE;				// Адрес FNT удаляемого файла
X	fnt_addr = 32 + fnt_num * 32;				
N
N	addr = fnt_addr + 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1 + 1;		// Адрес поля FNT.FirstCluster
X	addr = fnt_addr + 1 + 14 + 3 + 1 + 1;		
N	FLASH_Read((u8 *)&clust_num, addr, 2);									// Прочитать индекс (в таблице CAT) первого кластера файла
N
N	// УДАЛИТЬ КЛАСТЕРА в таблице CAT
N	// Пройти по цепочке кластеров от первого до последнего кластера файла
N	while (clust_num != 0xFFFF) {
N		FS_ClusterSetFlag(clust_num, 0x00);									// Пометить кластер в таблице CAT = "Удалено"
N		clust_num = FS_GetNextCluster(clust_num);							// Получить индекс (в таблице CAT) следующего кластера в цепочке
N	}
N
N	// УДАЛИТЬ запись FNT
N	FLASH_WriteByte(fnt_addr, 0x00);										// Пометить запись FNT = "Удалено" (Signature1 = 0x00)
N
N	return FS_RESULT_OK;																// ОК - Файл успешно удален
X	return 0;																
N}
N
N
N//-----------------------------------------------------------------------------
N//                      ПОЛУЧИТЬ ИНФОРМАЦИЮ О ФАЙЛЕ
N//-----------------------------------------------------------------------------
N// Если очередной файл не найден - возвращается 0xFFFFFFFF
Ns8 FS_GetFileInfo(u32 * fnt_num, u8 *name, u8 *type, u8 *attr, u32 *size, tFile *f) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u32 addr;
N	__packed union {
N		u8 array[FNT_RECORD_SIZE];											// Представление fnt как массива
X		u8 array[32];											
N		tFNT strc;															// Представление fnt как структуры
N	} fnt;
N	u8 b;
N	u8 i,k;
N
N	// Искать по всем записям от стартовой записи до конца таблицы FNT
N	addr = FNT_BASE_ADDRESS + *fnt_num * FNT_RECORD_SIZE;					// Адрес стартовой записи FNT
X	addr = 32 + *fnt_num * 32;					
N	while (*fnt_num < FNTRecordsNumber) {
N		b = FLASH_ReadByte(addr);											// Прочитать Сигнатуру1
N		if (b == 0xFF) {													// Найдена свободная запись FNT?
N			name[0] = 0;													// ДА - Прекратить поиск файла
N			type[0] = 0;													//   и вернуть "пустую" информацию
N			*attr = 0xFF;
N			*size = 0;
N			*f = -1;
N			*fnt_num = 0xFFFFFFFF;
N			return EFS_FILE_INFO_NOT_FOUND;									// Завершить с результатом "Очередной файл не найден"
X			return -19;									
N		}
N		if (b > 0x00) {														// Файл найден?
N			break;															// ДА - Прервать поиск файла
N		}
N		addr += FNT_RECORD_SIZE;											// Адрес следующей записи FNT
X		addr += 32;											
N		(*fnt_num)++;															// Номер следующей записи FNT
N	}
N
N	if ((*fnt_num) >= FNTRecordsNumber) {										// Файл найден?
N			name[0] = 0;													// НЕТ - Вернуть "пустую" информацию
N			type[0] = 0;
N			*attr = 0xFF;
N			*size = 0;
N			*f = -1;
N			(*fnt_num) = 0xFFFFFFFF;
N			return EFS_FILE_INFO_NOT_FOUND;									// Завершить с результатом "Очередной файл не найден"
X			return -19;									
N	}
N
N	// ОЧЕРЕДНОЙ ФАЙЛ НАЙДЕН
N	
N	// Копировать запись FNT найденного файла
N	FLASH_Read(fnt.array, addr, sizeof(tFNT));								// Прочитать запись FNT
N
N	// Прочитать имя файла
N	for (i = 0, k = 1; i < FILE_NAME_LENGTH; i++, k++) {
X	for (i = 0, k = 1; i < 14; i++, k++) {
N		b = fnt.strc.FullName[k];
N		name[i] = b;
N		if (! b) {
N			break;
N		}
N	}
N	if (i == FILE_NAME_LENGTH) {
X	if (i == 14) {
N		name[FILE_NAME_LENGTH] = 0;
X		name[14] = 0;
N	}
N
N	// Прочитать тип файла
N	for (i = 0, k = 1 + FILE_NAME_LENGTH; i < FILE_TYPE_LENGTH; i++, k++) {
X	for (i = 0, k = 1 + 14; i < 3; i++, k++) {
N		b = fnt.strc.FullName[k];
N		type[i] = b;
N		if (! b) {
N			break;
N		}
N	}
N	if (i == FILE_TYPE_LENGTH) {
X	if (i == 3) {
N		type[FILE_TYPE_LENGTH] = 0;
X		type[3] = 0;
N	}
N
N	*f = FS_FileUseFCS(name, type);											// Проверить использование файла с заданным именем
N
N	// Найденный файл используется
N	if (*f > -1) {															// Файл с заданным именем используется?
N		// Взять информацию о файле из соответствующей структуры FCS
N		p_fcs = pFCSArray[*f];												// Получить указатель на FCS
N		*attr = p_fcs->FNT.Attribute;
N		*size = p_fcs->FNT.Size;
N	}
N	// Найденный файл не используется
N	else {
N		// Взять информацию о файле из записи FNT
N		*attr = fnt.strc.Attribute;
N		*size = fnt.strc.Size;
N	}
N
N	return FS_RESULT_OK;															// ОК - Информация о файле успешно получена
X	return 0;															
N}
N
N
N//-----------------------------------------------------------------------------
N//			ПРОВЕРИТЬ КОНЕЦ ОТКРЫТОГО ДЛЯ ЧТЕНИЯ ФАЙЛА
N//-----------------------------------------------------------------------------
Ns8 FS_Eof(tFile fcs_num) {
N	tFCS *p_fcs;															// Указатель на FCS
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return EFS_FCS_NOT_OPENED_READ;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
X		return -14;															
N	}
N
N	// Проверить кол-во непрочитанных байт и вернуть результат
N	if (p_fcs->RemainSize) {
N		return FS_NOT_EOF;
X		return -20;
N	}
N	else {
N		return FS_EOF;
X		return -21;
N	}
N}
N
N
N//-----------------------------------------------------------------------------
N//			ПОЛУЧИТЬ ТЕКУЩУЮ ПОЗИЦИЮ ОТКРЫТОГО ДЛЯ ЧТЕНИЯ ФАЙЛА
N//-----------------------------------------------------------------------------
Ns8 FS_Pos(tFile fcs_num,s32 * pos) {
N	tFCS *p_fcs;															// Указатель на FCS
N
N	// Проверить файловую переменную (ошибка -9)
N	if (fcs_num < 0 || fcs_num >= MAX_FILES) {								// Файловая переменная назначена файлу?
X	if (fcs_num < 0 || fcs_num >= 8) {								
N		return EFS_INVALID_FSC;															// НЕТ - Вернуть ошибку "Файловая переменная не назначена файлу" (ошибка -9)
X		return -6;															
N	}
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	// Проверить состояние структуры FCS (ошибка -1)
N	if (p_fcs->State != FCS_STATE_OPENED_READ) {							// Структура FCS открыта для чтения файла?
N		return EFS_FCS_NOT_OPENED_READ;															// НЕТ - Вернуть ошибку "Структура FCS не открыта для чтения файла" (ошибка -1)
X		return -14;															
N	}
N
N	// Взять кол-во непрочитанных байт и вернуть результат
N	*pos = (p_fcs->FNT.Size - p_fcs->RemainSize);
N	return FS_RESULT_OK;
X	return 0;
N}
N
N
N
N
N
N
N
N
N
N
N
N
N//-----------------------------------------
N// ТЕСТ <!>
N//-----------------------------------------
N
N// <!>
N// получить состояние структуры FCS
Nu8 FS_GetFCSState(u8 fcs_num) {
N
N	return pFCSArray[fcs_num]->State;
N}
N
N// <!>
N// отобразить структуру FCS
Nvoid FS_FCS_Show( u8 fcs_num, void page_buf_view(u8 *buffer, u32 addr) ) {
N	tFCS *p_fcs;															// Указатель на FCS
N	u8 *name_buf;
N	char ch;
N	u8 i;
N
N	p_fcs = pFCSArray[fcs_num];												// Получить указатель на FCS
N
N	Msg(" - FCS %d:\r\n", fcs_num);
N	Msg("   -------------------------\r\n", fcs_num);
N	SMsg();
N	Msg("   State: %d", p_fcs->State);
N	SMsg();
N	switch (p_fcs->State) {
N		case FCS_STATE_CLOSED: {
N			Msg(" (FCS_STATE_CLOSED)\r\n");
N			SMsg();
N			break;
N		}
N		case FCS_STATE_OPENED: {
N			Msg(" (FCS_STATE_OPENED)\r\n");
N			SMsg();
N			break;
N		}
N		case FCS_STATE_OPENED_READ: {
N			Msg(" (FCS_STATE_OPENED_READ)\r\n");
N			SMsg();
N			break;
N		}
N		case FCS_STATE_OPENED_WRITE: {
N			Msg(" (FCS_STATE_OPENED_WRITE)\r\n");
N			SMsg();
N			break;
N		}
N	}
N	Msg("   Name: \"%s\"\r\n", p_fcs->Name);
N	SMsg();
N	Msg("   Type: \"%s\"\r\n", p_fcs->Type);
N	SMsg();
N	Msg("   FNT_num: %d\r\n", p_fcs->FNT_num);
N	SMsg();
N	Msg("   CurrCluster: %d\r\n", p_fcs->CurrCluster);
N	Msg("   CurrPage: %d\r\n", p_fcs->CurrPage);
N	SMsg();
N	Msg("   PageBufPtr: %d\r\n", p_fcs->PageBufPtr);
N	Msg("   RemainSize: %d\r\n", p_fcs->RemainSize);
N	SMsg();
N	Msg("   MinFilePosition: %d\r\n", p_fcs->MinFilePosition);
N	SMsg();
N	Msg("   MaxFilePosition: %d\r\n", p_fcs->MaxFilePosition);
N	SMsg();
N	Msg("   PAGE_BUFFER:\r\n");
N	page_buf_view(p_fcs->PageBuffer, 0);
N	SMsg();
N	Msg("   FNT:\r\n");
N	Msg("   FNT.FullName: ");
N	name_buf = p_fcs->FNT.FullName;
N	for (i=0; i < 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1; i++) {
X	for (i=0; i < 1 + 14 + 3 + 1; i++) {
N		Msg(" %02X", name_buf[i]);
N	}
N	SMsg();
N	Msg(" | ");
N	for (i=0; i < 1 + FILE_NAME_LENGTH + FILE_TYPE_LENGTH + 1; i++) {
X	for (i=0; i < 1 + 14 + 3 + 1; i++) {
N		ch = name_buf[i];
N		if (ch < 32) ch = '.';
N		Msg("%c", ch);
N	}
N	Msg("\r\n");
N	SMsg();
N	Msg("   FNT.Attribute: 0x%02X\r\n", p_fcs->FNT.Attribute);
N	SMsg();
N	Msg("   FNT.FirstCluster: %d (0x%04X)\r\n", p_fcs->FNT.FirstCluster, p_fcs->FNT.FirstCluster);
N	SMsg();
N	Msg("   FNT.Size: %d\r\n", p_fcs->FNT.Size);
N	Msg("   -------------------------\r\n", fcs_num);
N	SMsg();
N}
N
N// <!>
N// отобразить параметры файловой системы
Nvoid FS_Params_Show(void) {
N	Msg("MAX_FILES = %d\r\n", MAX_FILES);
X	Msg("MAX_FILES = %d\r\n", 8);
N	SMsg();
N	Msg("BANKS_NUM = %d\r\n", FLASH_BANKS_NUM);
N	SMsg();
N	Msg("SECTORS_PER_BANK = %d\r\n", FLASH_SECTORS_PER_BANK);
X	Msg("SECTORS_PER_BANK = %d\r\n", 64);
N	SMsg();
N	Msg("PAGES_PER_SECTOR = %d\r\n", FLASH_PAGES_PER_SECTOR);
X	Msg("PAGES_PER_SECTOR = %d\r\n", 1024);
N	SMsg();
N	Msg("PAGE_SIZE = %d\r\n", PAGE_SIZE);
X	Msg("PAGE_SIZE = %d\r\n", 256);
N	SMsg();
N	Msg("PAGES_PER_CLUSTER = %d\r\n", PAGES_PER_CLUSTER);
X	Msg("PAGES_PER_CLUSTER = %d\r\n", 64);
N	SMsg();
N	Msg("FILE_NAME_LENGTH = %d\r\n", FILE_NAME_LENGTH);
X	Msg("FILE_NAME_LENGTH = %d\r\n", 14);
N	SMsg();
N	Msg("FILE_TYPE_LENGTH = %d\r\n", FILE_TYPE_LENGTH);
X	Msg("FILE_TYPE_LENGTH = %d\r\n", 3);
N	SMsg();
N	Msg("FNT_RECORD_SIZE = %d\r\n", FNT_RECORD_SIZE);
X	Msg("FNT_RECORD_SIZE = %d\r\n", 32);
N	SMsg();
N	Msg("CAT_RECORD_SIZE = %d\r\n", CAT_RECORD_SIZE);
X	Msg("CAT_RECORD_SIZE = %d\r\n", 3);
N	Msg("\r\n");
N	SMsg();
N	Msg("SECTORS_NUMBER = %d\r\n", SECTORS_NUMBER);
N	SMsg();
N	Msg("SECTOR_SIZE = %d\r\n", SECTOR_SIZE);
N	SMsg();
N	Msg("CLUSTERS_PER_SECTOR = %d\r\n", CLUSTERS_PER_SECTOR);
N	SMsg();
N	Msg("CLUSTERS_NUMBER = %d\r\n", CLUSTERS_NUMBER);
N	SMsg();
N	Msg("ClusterMAX = %d\r\n", ClusterMAX);
N	SMsg();
N	Msg("CLUSTER_SIZE = %d\r\n", CLUSTER_SIZE);
N	SMsg();
N	Msg("CAT_Size = %d\r\n", CAT_Size);
N	SMsg();
N	Msg("CATRecordsNumber = %d\r\n", CATRecordsNumber);
N	SMsg();
N	Msg("CATRecordMAX = %d\r\n", CATRecordMAX);
N	SMsg();
N	Msg("FNTRecordsNumber = %d\r\n", FNTRecordsNumber);
N	SMsg();
N	Msg("FNTRecordMAX = %d\r\n", FNTRecordMAX);
N	Msg("\r\n");
N	SMsg();
N	Msg("FNT_BASE_ADDRESS = %d\r\n", FNT_BASE_ADDRESS);
X	Msg("FNT_BASE_ADDRESS = %d\r\n", 32);
N	SMsg();
N	Msg("CAT_BASE_ADDRESS = %d\r\n", CAT_BASE_ADDRESS);
N	SMsg();
N	Msg("CLUSTERS_BASE_ADDRESS = %d\r\n", CLUSTERS_BASE_ADDRESS);
N	SMsg();
N}
N//-----------------------------------------
N// ТЕСТ <!>
N//-----------------------------------------
N
N
N
N
N
N
N//=============================================================================
N//
N//                               End Of File
N//
N//=============================================================================
N

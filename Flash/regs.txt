; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\regs.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\regs.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\regs.crf Main\regs.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ROHandler PROC
;;;117    
;;;118    u8 ROHandler(char * name,u8 * buffer,u16 len){
000000  2000              MOVS     r0,#0
;;;119    	// пример обработчика,
;;;120    	// используемого при записи данных из внешнего интерфейса
;;;121    	// в общую память
;;;122    	// Msg("ROH %s.",name);
;;;123    	return 0; // запись разрешена
;;;124    	//return не 0; // запись запрещена 
;;;125    	// 1,2,3 - зарезервированы
;;;126    }
000002  4770              BX       lr
;;;127    
                          ENDP

                  pCurCadrHandle PROC
;;;128    u8 pCurCadrHandle(char * name,u8 * buffer,u16 len){
000004  48fe              LDR      r0,|L1.1024|
;;;129    	memcpy((void*)&(BR_pCurCadr),(void*)buffer,4);
000006  6809              LDR      r1,[r1,#0]
000008  6001              STR      r1,[r0,#0]
;;;130    	//Msg("BR_pCurCadr %d\r\n",BR_pCurCadr);
;;;131    	return 0;
00000a  2000              MOVS     r0,#0
;;;132    }
00000c  4770              BX       lr
;;;133    
                          ENDP

                  pCurCadrHandleFrz PROC
;;;134    u8 pCurCadrHandleFrz(char * name,u8 * buffer,u16 len){
00000e  48fc              LDR      r0,|L1.1024|
;;;135    	memcpy((void*)&(BR_pCurCadr),(void*)buffer,4);
000010  6809              LDR      r1,[r1,#0]
000012  6001              STR      r1,[r0,#0]
;;;136    	*pRCS = 0;
000014  49fb              LDR      r1,|L1.1028|
000016  2000              MOVS     r0,#0
000018  6809              LDR      r1,[r1,#0]  ; pRCS
00001a  7008              STRB     r0,[r1,#0]
;;;137    	if (BR_pCurCadr == 0) *pRecoverBlock = 0;
00001c  49f8              LDR      r1,|L1.1024|
00001e  3954              SUBS     r1,r1,#0x54
000020  6d4a              LDR      r2,[r1,#0x54]
000022  49f9              LDR      r1,|L1.1032|
000024  b102              CBZ      r2,|L1.40|
;;;138    	else *pRecoverBlock = 1;
000026  2001              MOVS     r0,#1
                  |L1.40|
000028  6ac9              LDR      r1,[r1,#0x2c]         ;137  ; pRecoverBlock
00002a  7008              STRB     r0,[r1,#0]            ;137
;;;139    	//Msg("BR_pCurCadr %d\r\n",BR_pCurCadr);
;;;140    	return 0;
00002c  2000              MOVS     r0,#0
;;;141    }
00002e  4770              BX       lr
;;;142    
                          ENDP

                  pDrDelayHandle PROC
;;;143    
;;;144    u8 pDrDelayHandle(char * name,u8 * buffer,u16 len){
000030  b51c              PUSH     {r2-r4,lr}
;;;145    // задержка анти дребезга
;;;146    	s16 v;
;;;147    	if (*pUsesKP485) {
000032  48f6              LDR      r0,|L1.1036|
000034  6800              LDR      r0,[r0,#0]  ; pUsesKP485
000036  7800              LDRB     r0,[r0,#0]
000038  b178              CBZ      r0,|L1.90|
;;;148    		memcpy((u8*)&v,buffer,2);
00003a  8808              LDRH     r0,[r1,#0]
00003c  f8ad0004          STRH     r0,[sp,#4]
;;;149    		mbInsCmd485(*pAddrKPCtrl,6,1200,v,1); 
000040  2001              MOVS     r0,#1
000042  9000              STR      r0,[sp,#0]
000044  f8bd0004          LDRH     r0,[sp,#4]
000048  f44f6296          MOV      r2,#0x4b0
00004c  b283              UXTH     r3,r0
00004e  48f0              LDR      r0,|L1.1040|
000050  2106              MOVS     r1,#6
000052  6800              LDR      r0,[r0,#0]  ; pAddrKPCtrl
000054  7800              LDRB     r0,[r0,#0]
000056  f7fffffe          BL       mbInsCmd485
                  |L1.90|
;;;150    	}
;;;151    	return 0;
00005a  2000              MOVS     r0,#0
;;;152    }
00005c  bd1c              POP      {r2-r4,pc}
;;;153    
                          ENDP

                  pDCTimeHandle PROC
;;;154    u8 pDCTimeHandle(char * name,u8 * buffer,u16 len){
00005e  b51c              PUSH     {r2-r4,lr}
;;;155    // время DoubleClick
;;;156    	s16 v;
;;;157    	if (*pUsesKP485) {
000060  48ea              LDR      r0,|L1.1036|
000062  6800              LDR      r0,[r0,#0]  ; pUsesKP485
000064  7800              LDRB     r0,[r0,#0]
000066  b178              CBZ      r0,|L1.136|
;;;158    		memcpy((u8*)&v,buffer,2);
000068  8808              LDRH     r0,[r1,#0]
00006a  f8ad0004          STRH     r0,[sp,#4]
;;;159    		mbInsCmd485(*pAddrKPCtrl,6,1201,v,1);  
00006e  2001              MOVS     r0,#1
000070  9000              STR      r0,[sp,#0]
000072  f8bd0004          LDRH     r0,[sp,#4]
000076  f24042b1          MOV      r2,#0x4b1
00007a  b283              UXTH     r3,r0
00007c  48e4              LDR      r0,|L1.1040|
00007e  2106              MOVS     r1,#6
000080  6800              LDR      r0,[r0,#0]  ; pAddrKPCtrl
000082  7800              LDRB     r0,[r0,#0]
000084  f7fffffe          BL       mbInsCmd485
                  |L1.136|
;;;160    	}
;;;161    	return 0;
000088  2000              MOVS     r0,#0
;;;162    }
00008a  bd1c              POP      {r2-r4,pc}
;;;163    
                          ENDP

                  pPercVminHandle PROC
;;;164    u8 pPercVminHandle(char * name,u8 * buffer,u16 len){
00008c  b51c              PUSH     {r2-r4,lr}
;;;165    	s16 v;
;;;166    	if (*pUsesKP485) {
00008e  48df              LDR      r0,|L1.1036|
000090  6800              LDR      r0,[r0,#0]  ; pUsesKP485
000092  7800              LDRB     r0,[r0,#0]
000094  b178              CBZ      r0,|L1.182|
;;;167    		memcpy((u8*)&v,buffer,2);
000096  8808              LDRH     r0,[r1,#0]
000098  f8ad0004          STRH     r0,[sp,#4]
;;;168    		mbInsCmd485(*pAddrKPCtrl,6,1202,v,1);
00009c  2001              MOVS     r0,#1
00009e  9000              STR      r0,[sp,#0]
0000a0  f8bd0004          LDRH     r0,[sp,#4]
0000a4  f24042b2          MOV      r2,#0x4b2
0000a8  b283              UXTH     r3,r0
0000aa  48d9              LDR      r0,|L1.1040|
0000ac  2106              MOVS     r1,#6
0000ae  6800              LDR      r0,[r0,#0]  ; pAddrKPCtrl
0000b0  7800              LDRB     r0,[r0,#0]
0000b2  f7fffffe          BL       mbInsCmd485
                  |L1.182|
;;;169    	}
;;;170    	return 0;
0000b6  2000              MOVS     r0,#0
;;;171    }
0000b8  bd1c              POP      {r2-r4,pc}
;;;172    
                          ENDP

                  PinInt PROC
;;;173    u8 PinInt(u32 point,u32 left,u32 right){
0000ba  4288              CMP      r0,r1
0000bc  d303              BCC      |L1.198|
;;;174    //	Msg("p %X l %X r %X\r\n",point,left,right);
;;;175    	if ((point >= left) && (point <= right))
0000be  4290              CMP      r0,r2
0000c0  d801              BHI      |L1.198|
;;;176    		return 1;
0000c2  2001              MOVS     r0,#1
;;;177    	else return 0;
;;;178    }
0000c4  4770              BX       lr
                  |L1.198|
0000c6  2000              MOVS     r0,#0                 ;177
0000c8  4770              BX       lr
;;;179    
                          ENDP

                  Cross PROC
;;;180    u8 Cross(u32 sx,u16 slen,u32 dx,u16 dlen){
0000ca  b5f0              PUSH     {r4-r7,lr}
;;;181    	u32 p1,p2,p3,p4;
;;;182    	p1 = sx; p2 = sx+slen-1;
0000cc  1846              ADDS     r6,r0,r1
;;;183    	p3 = dx; p4 = dx+dlen-1;
0000ce  18d7              ADDS     r7,r2,r3
0000d0  1e76              SUBS     r6,r6,#1
0000d2  1e7f              SUBS     r7,r7,#1
0000d4  4605              MOV      r5,r0                 ;182
0000d6  4614              MOV      r4,r2
;;;184    //	Msg("p1 %X p2 %X p3 %X p4 %X",p1,p2,p3,p4);
;;;185    
;;;186    	if (slen < dlen) {
0000d8  4299              CMP      r1,r3
0000da  d208              BCS      |L1.238|
;;;187    		if (PinInt(p1,p3,p4) || PinInt(p2,p3,p4))
0000dc  463a              MOV      r2,r7
0000de  4621              MOV      r1,r4
0000e0  f7fffffe          BL       PinInt
0000e4  b980              CBNZ     r0,|L1.264|
0000e6  463a              MOV      r2,r7
0000e8  4621              MOV      r1,r4
0000ea  4630              MOV      r0,r6
0000ec  e008              B        |L1.256|
                  |L1.238|
;;;188    		 	return 1;
;;;189    		else return 0;
;;;190    	} else {
;;;191    		if (PinInt(p3,p1,p2) || PinInt(p4,p1,p2))
0000ee  4601              MOV      r1,r0
0000f0  4632              MOV      r2,r6
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       PinInt
0000f8  b930              CBNZ     r0,|L1.264|
0000fa  4632              MOV      r2,r6
0000fc  4629              MOV      r1,r5
0000fe  4638              MOV      r0,r7
                  |L1.256|
000100  f7fffffe          BL       PinInt
000104  2800              CMP      r0,#0
000106  d000              BEQ      |L1.266|
                  |L1.264|
;;;192    		 	return 1;
000108  2001              MOVS     r0,#1
                  |L1.266|
;;;193    		else return 0;
;;;194    	}
;;;195    }
00010a  bdf0              POP      {r4-r7,pc}
;;;196    
                          ENDP

                  SetBase PROC
;;;197    void SetBase(u32 addr){
00010c  49be              LDR      r1,|L1.1032|
;;;198    	// абсолютный адрес в контроллере
;;;199    	// if (addr < REGS_COUNT) CurBase = addr;
;;;200    	// или
;;;201    	// смещение в переменной regs
;;;202    	//if (addr < REGS_COUNT)
;;;203    	CurBase = addr;
00010e  3980              SUBS     r1,r1,#0x80
000110  6088              STR      r0,[r1,#8]  ; CurBase
;;;204    //	Msg("cb %d \r\n",CurBase);
;;;205    }
000112  4770              BX       lr
;;;206    
                          ENDP

                  SetNewGroup PROC
;;;207    void SetNewGroup(void){
000114  49bc              LDR      r1,|L1.1032|
;;;208    	u32 CurAddr;
;;;209    	CurAddr = CurBase + CurOffset;
000116  4abc              LDR      r2,|L1.1032|
000118  3980              SUBS     r1,r1,#0x80
00011a  6888              LDR      r0,[r1,#8]  ; CurBase
00011c  6c13              LDR      r3,[r2,#0x40]  ; CurOffset
00011e  18c0              ADDS     r0,r0,r3
000120  d008              BEQ      |L1.308|
;;;210    	// проверка текущего адреса на правило кратности распределения 4+8*n
;;;211    	if (CurAddr) {
;;;212    		if ((CurAddr-4)%8) CurBase = ((CurAddr-4)/8 +1)*8 +4;
000122  0743              LSLS     r3,r0,#29
000124  f1b34f00          CMP      r3,#0x80000000
000128  d003              BEQ      |L1.306|
00012a  1f00              SUBS     r0,r0,#4
00012c  f0200007          BIC      r0,r0,#7
000130  300c              ADDS     r0,r0,#0xc
                  |L1.306|
;;;213    		else CurBase = CurAddr;
000132  6088              STR      r0,[r1,#8]  ; CurBase
                  |L1.308|
;;;214    	} // нулевой адрес корректен
;;;215    	CurOffset = 0; // сброс текущего смещения
000134  2000              MOVS     r0,#0
000136  6410              STR      r0,[r2,#0x40]  ; CurOffset
;;;216    	//Msg("NG %d\r\n",CurBase);
;;;217    }
000138  4770              BX       lr
;;;218    
                          ENDP

                  SetAddr PROC
;;;219    
;;;220    void SetAddr(void ** p,char * name,/*u32 offset,*/u16 len,u32 attr,TWHandler WHandler){
00013a  e92d5fff          PUSH     {r0-r12,lr}
;;;221    	u32 tp;
;;;222    	u16	i;
;;;223    
;;;224    //	tp = (u32)&(regs[CurBase]) + offset;
;;;225    	tp = (u32)&(regs[CurBase]) + CurOffset;
00013e  f8df82c8          LDR      r8,|L1.1032|
000142  4607              MOV      r7,r0                 ;220
000144  f1a80880          SUB      r8,r8,#0x80
000148  48b2              LDR      r0,|L1.1044|
00014a  f8d81008          LDR      r1,[r8,#8]  ; CurBase
00014e  4616              MOV      r6,r2                 ;220
000150  1842              ADDS     r2,r0,r1
000152  48ad              LDR      r0,|L1.1032|
000154  f8ddb038          LDR      r11,[sp,#0x38]
;;;226    	CurOffset += len;
;;;227    	//Msg("cb %X tp %X\r\n",CurBase,tp);
;;;228    
;;;229     	if (iva > 0) {
;;;230    		for (i=0;i<iva;i++) {
;;;231    			// условие пересечения интервалов
;;;232    			if (Cross(tp,len,(u32)va[i].p,va[i].len)){
000158  f8df92bc          LDR      r9,|L1.1048|
00015c  6c01              LDR      r1,[r0,#0x40]         ;225  ; CurOffset
00015e  469a              MOV      r10,r3                ;220
000160  1855              ADDS     r5,r2,r1              ;225
000162  4431              ADD      r1,r1,r6              ;226
000164  6401              STR      r1,[r0,#0x40]         ;229  ; CurOffset
000166  f8b80006          LDRH     r0,[r8,#6]            ;229  ; iva
00016a  2800              CMP      r0,#0                 ;229
00016c  d02a              BEQ      |L1.452|
00016e  2400              MOVS     r4,#0                 ;230
000170  e024              B        |L1.444|
000172  bf00              NOP      
                  |L1.372|
000174  eb0401c4          ADD      r1,r4,r4,LSL #3
000178  eb090081          ADD      r0,r9,r1,LSL #2
00017c  4631              MOV      r1,r6
00017e  8b03              LDRH     r3,[r0,#0x18]
000180  6942              LDR      r2,[r0,#0x14]
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       Cross
000188  2800              CMP      r0,#0
00018a  d015              BEQ      |L1.440|
;;;233    				Msg("Error allocate memory. Address is busy.\r\n");				
00018c  a0a3              ADR      r0,|L1.1052|
00018e  f7fffffe          BL       Msg
;;;234    				Msg("Set name %s,addr 0x%X,len %d\r\n",va[i].name,va[i].p,va[i].len);				
000192  eb0401c4          ADD      r1,r4,r4,LSL #3
000196  eb090481          ADD      r4,r9,r1,LSL #2
00019a  4621              MOV      r1,r4
00019c  8b23              LDRH     r3,[r4,#0x18]
00019e  a0aa              ADR      r0,|L1.1096|
0001a0  6962              LDR      r2,[r4,#0x14]
0001a2  f7fffffe          BL       Msg
;;;235    				Msg("Alloc name %s,addr 0x%X,len %d\r\n",name,tp,va[i].len);				
0001a6  8b23              LDRH     r3,[r4,#0x18]
0001a8  9901              LDR      r1,[sp,#4]
0001aa  b004              ADD      sp,sp,#0x10
0001ac  462a              MOV      r2,r5
0001ae  e8bd5ff0          POP      {r4-r12,lr}
0001b2  a0ad              ADR      r0,|L1.1128|
0001b4  f7ffbffe          B.W      Msg
                  |L1.440|
0001b8  1c64              ADDS     r4,r4,#1
0001ba  b2a4              UXTH     r4,r4                 ;230
                  |L1.444|
0001bc  f8b80006          LDRH     r0,[r8,#6]            ;230  ; iva
0001c0  4284              CMP      r4,r0                 ;230
0001c2  d3d7              BCC      |L1.372|
                  |L1.452|
;;;236    				return;
;;;237    			}
;;;238    		}
;;;239    	}
;;;240    
;;;241    	*p = (void*)tp;
;;;242    	strcpy(va[iva].name,name);
0001c4  603d              STR      r5,[r7,#0]
0001c6  f8b80006          LDRH     r0,[r8,#6]  ; iva
0001ca  464c              MOV      r4,r9
0001cc  eb0000c0          ADD      r0,r0,r0,LSL #3
0001d0  eb090080          ADD      r0,r9,r0,LSL #2
0001d4  9901              LDR      r1,[sp,#4]
0001d6  f7fffffe          BL       strcpy
;;;243    	va[iva].p = *p;
0001da  f8b80006          LDRH     r0,[r8,#6]  ; iva
0001de  683a              LDR      r2,[r7,#0]
0001e0  eb0001c0          ADD      r1,r0,r0,LSL #3
0001e4  eb040181          ADD      r1,r4,r1,LSL #2
;;;244    	va[iva].len = len;
0001e8  1c40              ADDS     r0,r0,#1
0001ea  614a              STR      r2,[r1,#0x14]
0001ec  830e              STRH     r6,[r1,#0x18]
0001ee  e9c1ab07          STRD     r10,r11,[r1,#0x1c]
;;;245    	va[iva].attr = attr;
;;;246    	va[iva].handle = WHandler;
;;;247    	iva++;
0001f2  f8a80006          STRH     r0,[r8,#6]
;;;248    }
0001f6  e8bd9fff          POP      {r0-r12,pc}
;;;249    
                          ENDP

                  LoadRegsFromFile PROC
;;;250    // загрузка файла регистров
;;;251    void	LoadRegsFromFile(void){
0001fa  b51c              PUSH     {r2-r4,lr}
;;;252    	tFile f;
;;;253    	u32 rbc;
;;;254    	s8 res;
;;;255    	// открыть файл regs.bin
;;;256    	res = FS_Assign("startup.cmd",&f);
0001fc  4669              MOV      r1,sp
0001fe  a0a3              ADR      r0,|L1.1164|
000200  f7fffffe          BL       FS_Assign
000204  0001              MOVS     r1,r0
;;;257    	if (res == FS_RESULT_OK) {
000206  d001              BEQ      |L1.524|
;;;258    		res = FS_Reset(f);
;;;259    		if (res == FS_RESULT_OK) {
;;;260    			FS_Close(&f);
;;;261    			res = FS_Assign("regs.bin",&f);
;;;262    			if (res == FS_RESULT_OK) {
;;;263    				res = FS_Reset(f);
;;;264    				if (res == FS_RESULT_OK) {
;;;265    					// загрузить N байт в массив regs
;;;266    					res = bFS_Read(f,regs,REGS_COUNT,&rbc);
;;;267    					if (res < 0) {
;;;268    						Msg("Error Read File regs.bin res %d\r\n",res);
;;;269    					}
;;;270    					// закрыть файла
;;;271    					FS_Close(&f);
;;;272    					Msg("Read File regs.bin Ok!!! h %d\r\n",f);
;;;273    				} else {
;;;274    					FS_Close(&f);
;;;275    					Msg("Error Reset File regs.bin %d h %d\r\n",res,f);
;;;276    				}
;;;277    			} else {
;;;278    				Msg("Error Assign File regs.bin %d\r\n",f);
;;;279    				//FS_Close(&f);
;;;280    			}
;;;281    		} else {
;;;282    			FS_Close(&f);
;;;283    			Msg("Not Load regs.bin (err reset starup.cmd res %d) h %d\r\n",res,f);
;;;284    		}
;;;285    	} else {
;;;286    		Msg("Not Load regs.bin (err assign starup.cmd res %d)\r\n",res);
000208  a0a3              ADR      r0,|L1.1176|
00020a  e017              B        |L1.572|
                  |L1.524|
00020c  f99d0000          LDRSB    r0,[sp,#0]            ;258
000210  f7fffffe          BL       FS_Reset
000214  0004              MOVS     r4,r0                 ;258
000216  4668              MOV      r0,sp                 ;282
000218  d006              BEQ      |L1.552|
00021a  f7fffffe          BL       FS_Close
00021e  f99d2000          LDRSB    r2,[sp,#0]            ;283
000222  4621              MOV      r1,r4                 ;283
000224  a0a9              ADR      r0,|L1.1228|
000226  e019              B        |L1.604|
                  |L1.552|
000228  f7fffffe          BL       FS_Close
00022c  4669              MOV      r1,sp                 ;261
00022e  a0b5              ADR      r0,|L1.1284|
000230  f7fffffe          BL       FS_Assign
000234  b128              CBZ      r0,|L1.578|
000236  f99d1000          LDRSB    r1,[sp,#0]            ;278
00023a  a0b5              ADR      r0,|L1.1296|
                  |L1.572|
00023c  f7fffffe          BL       Msg
;;;287    		//FS_Close(&f);
;;;288    	}
;;;289    }
000240  bd1c              POP      {r2-r4,pc}
                  |L1.578|
000242  f99d0000          LDRSB    r0,[sp,#0]            ;263
000246  f7fffffe          BL       FS_Reset
00024a  0004              MOVS     r4,r0                 ;263
00024c  d009              BEQ      |L1.610|
00024e  4668              MOV      r0,sp                 ;274
000250  f7fffffe          BL       FS_Close
000254  f99d2000          LDRSB    r2,[sp,#0]            ;275
000258  4621              MOV      r1,r4                 ;275
00025a  a0b5              ADR      r0,|L1.1328|
                  |L1.604|
00025c  f7fffffe          BL       Msg
000260  bd1c              POP      {r2-r4,pc}
                  |L1.610|
000262  ab01              ADD      r3,sp,#4              ;266
000264  f44f727a          MOV      r2,#0x3e8             ;266
000268  496a              LDR      r1,|L1.1044|
00026a  f99d0000          LDRSB    r0,[sp,#0]            ;266
00026e  f7fffffe          BL       bFS_Read
000272  0001              MOVS     r1,r0                 ;266
000274  d502              BPL      |L1.636|
000276  a0b7              ADR      r0,|L1.1364|
000278  f7fffffe          BL       Msg
                  |L1.636|
00027c  4668              MOV      r0,sp                 ;271
00027e  f7fffffe          BL       FS_Close
000282  f99d1000          LDRSB    r1,[sp,#0]            ;272
000286  a0bc              ADR      r0,|L1.1400|
000288  e7d8              B        |L1.572|
;;;290    
                          ENDP

                  CloseFilesHandles PROC
;;;291    void	CloseFilesHandles(void){
00028a  b530              PUSH     {r4,r5,lr}
00028c  b08d              SUB      sp,sp,#0x34
;;;292    	u32 fnt_num;
;;;293    	u8 name[20];
;;;294    	u8 type;
;;;295    	u8 attr;
;;;296    	u32 size;
;;;297    	tFile f;
;;;298    	s8 res;
;;;299    	// инициализировать pPrgFileHandle
;;;300    	fnt_num = 0;
00028e  2000              MOVS     r0,#0
;;;301    	do {
;;;302    		memset(name,sizeof name,0);
;;;303    		res = FS_GetFileInfo(&fnt_num,name,&type,&attr,&size,&f);
000290  ac08              ADD      r4,sp,#0x20
000292  ad09              ADD      r5,sp,#0x24
000294  9002              STR      r0,[sp,#8]
                  |L1.662|
000296  e9cd5400          STRD     r5,r4,[sp,#0]
00029a  ab0b              ADD      r3,sp,#0x2c
00029c  aa0a              ADD      r2,sp,#0x28
00029e  a903              ADD      r1,sp,#0xc
0002a0  a802              ADD      r0,sp,#8
0002a2  f7fffffe          BL       FS_GetFileInfo
;;;304    		if (res == FS_RESULT_OK) {
0002a6  2800              CMP      r0,#0
0002a8  d106              BNE      |L1.696|
;;;305    			// файл найден
;;;306    			FS_Close(&f); // закрываем
0002aa  a808              ADD      r0,sp,#0x20
0002ac  f7fffffe          BL       FS_Close
;;;307    			// едем дальше
;;;308    			fnt_num++;
0002b0  9802              LDR      r0,[sp,#8]
0002b2  1c40              ADDS     r0,r0,#1
0002b4  9002              STR      r0,[sp,#8]
0002b6  e7ee              B        |L1.662|
                  |L1.696|
;;;309    		}
;;;310    	} while (res == FS_RESULT_OK);
;;;311    }
0002b8  b00d              ADD      sp,sp,#0x34
0002ba  bd30              POP      {r4,r5,pc}
;;;312    
                          ENDP

                  SaveRegs PROC
;;;313    void	SaveRegs(void){
0002bc  b51c              PUSH     {r2-r4,lr}
;;;314    	s32 res;
;;;315    	tFile f;
;;;316    	u32 rbc;
;;;317    
;;;318    	Msg("Save Regs\r\n");
0002be  a0b6              ADR      r0,|L1.1432|
0002c0  f7fffffe          BL       Msg
;;;319    
;;;320    	// пока не переделан Rewrite
;;;321    	FS_Delete("regs.bin"); 
0002c4  a08f              ADR      r0,|L1.1284|
0002c6  f7fffffe          BL       FS_Delete
;;;322    	res = FS_Assign("regs.bin",&f); 
0002ca  4669              MOV      r1,sp
0002cc  a08d              ADR      r0,|L1.1284|
0002ce  f7fffffe          BL       FS_Assign
0002d2  0001              MOVS     r1,r0
;;;323    	if (res < 0) {	
0002d4  d501              BPL      |L1.730|
;;;324    		Msg("Error Assign regs.bin: %d\r\n",res);
0002d6  a0b3              ADR      r0,|L1.1444|
0002d8  e012              B        |L1.768|
                  |L1.730|
;;;325    	} else {
;;;326    		res = FS_Rewrite(f);
0002da  f99d0000          LDRSB    r0,[sp,#0]
0002de  f7fffffe          BL       FS_Rewrite
0002e2  0001              MOVS     r1,r0
;;;327    		if (res == FS_RESULT_OK) {
0002e4  d001              BEQ      |L1.746|
;;;328    			res = bFS_Write(f,regs,REGS_COUNT,&rbc);
;;;329    			if (res < 0)
;;;330    				Msg("Error Write regs.bin: %d\r\n",res);
;;;331    		} else {
;;;332    			Msg("Error Rewrite regs.bin: %d\r\n",res);
0002e6  a0b6              ADR      r0,|L1.1472|
0002e8  e00a              B        |L1.768|
                  |L1.746|
0002ea  ab01              ADD      r3,sp,#4              ;328
0002ec  f44f727a          MOV      r2,#0x3e8             ;328
0002f0  4948              LDR      r1,|L1.1044|
0002f2  f99d0000          LDRSB    r0,[sp,#0]            ;328
0002f6  f7fffffe          BL       bFS_Write
0002fa  0001              MOVS     r1,r0                 ;328
0002fc  d502              BPL      |L1.772|
0002fe  a0b8              ADR      r0,|L1.1504|
                  |L1.768|
000300  f7fffffe          BL       Msg
                  |L1.772|
;;;333    		}
;;;334    	}
;;;335    	res = FS_Close(&f);
000304  4668              MOV      r0,sp
000306  f7fffffe          BL       FS_Close
00030a  0001              MOVS     r1,r0
;;;336    	if (res<0)  Msg("Error Close regs.bin res:%d\r\n",res);
00030c  d502              BPL      |L1.788|
00030e  a0bb              ADR      r0,|L1.1532|
000310  f7fffffe          BL       Msg
                  |L1.788|
;;;337    
;;;338    }
000314  bd1c              POP      {r2-r4,pc}
;;;339    
                          ENDP

                  SaveRegsNoMes PROC
;;;340    void	SaveRegsNoMes(void){
000316  b51c              PUSH     {r2-r4,lr}
;;;341    	s8 res;
;;;342    	tFile f;
;;;343    	u32 wbc;
;;;344    
;;;345    	// пока не переделан Rewrite
;;;346    	FS_Delete("regs.bin"); 
000318  a07a              ADR      r0,|L1.1284|
00031a  f7fffffe          BL       FS_Delete
;;;347    	res = FS_Assign("regs.bin",&f); 
00031e  4669              MOV      r1,sp
000320  a078              ADR      r0,|L1.1284|
000322  f7fffffe          BL       FS_Assign
;;;348    	if (res == FS_RESULT_OK) {	
000326  b960              CBNZ     r0,|L1.834|
;;;349    		res = FS_Rewrite(f);
000328  f99d0000          LDRSB    r0,[sp,#0]
00032c  f7fffffe          BL       FS_Rewrite
;;;350    		if (res == FS_RESULT_OK) {
000330  b938              CBNZ     r0,|L1.834|
;;;351    			res = bFS_Write(f,regs,REGS_COUNT,&wbc);
000332  ab01              ADD      r3,sp,#4
000334  f44f727a          MOV      r2,#0x3e8
000338  4936              LDR      r1,|L1.1044|
00033a  f99d0000          LDRSB    r0,[sp,#0]
00033e  f7fffffe          BL       bFS_Write
                  |L1.834|
;;;352    		} 
;;;353    	}
;;;354    	FS_Close(&f);
000342  4668              MOV      r0,sp
000344  f7fffffe          BL       FS_Close
;;;355    }
000348  bd1c              POP      {r2-r4,pc}
;;;356    
                          ENDP

                  XPositOnHandle PROC
;;;358    //* ОБРАБОТЧИКИ, ВЫЗЫВАЕМЫЕ ПРИ ЗАПИСИ ЗНАЧЕНИЙ В РЕГИСТРЫ **********
;;;359    u8 XPositOnHandle(char * name,u8 * buffer,u16 len){
00034a  7808              LDRB     r0,[r1,#0]
;;;360    	if (*buffer == 1) { 
00034c  2801              CMP      r0,#1
00034e  d105              BNE      |L1.860|
;;;361    		*ms_X.Posit = 0; 
000350  49b2              LDR      r1,|L1.1564|
000352  2000              MOVS     r0,#0
000354  6b0a              LDR      r2,[r1,#0x30]  ; ms_X
000356  7010              STRB     r0,[r2,#0]
;;;362    		*ms_X.StagePos = 0;
000358  6b49              LDR      r1,[r1,#0x34]  ; ms_X
00035a  7008              STRB     r0,[r1,#0]
                  |L1.860|
;;;363    	}
;;;364    	return 0; 
00035c  2000              MOVS     r0,#0
;;;365    }
00035e  4770              BX       lr
;;;366    u8 YPositOnHandle(char * name,u8 * buffer,u16 len){
                          ENDP

                  YPositOnHandle PROC
000360  7808              LDRB     r0,[r1,#0]
;;;367    	if (*buffer == 1) { 
000362  2801              CMP      r0,#1
000364  d105              BNE      |L1.882|
;;;368    		*ms_Y.Posit = 0; 
000366  49ae              LDR      r1,|L1.1568|
000368  2000              MOVS     r0,#0
00036a  6b0a              LDR      r2,[r1,#0x30]  ; ms_Y
00036c  7010              STRB     r0,[r2,#0]
;;;369    		*ms_Y.StagePos = 0;
00036e  6b49              LDR      r1,[r1,#0x34]  ; ms_Y
000370  7008              STRB     r0,[r1,#0]
                  |L1.882|
;;;370    	}
;;;371    	return 0; 
000372  2000              MOVS     r0,#0
;;;372    }
000374  4770              BX       lr
;;;373    u8 ZPositOnHandle(char * name,u8 * buffer,u16 len){
                          ENDP

                  ZPositOnHandle PROC
000376  7808              LDRB     r0,[r1,#0]
;;;374    	if (*buffer == 1) { 
000378  2801              CMP      r0,#1
00037a  d105              BNE      |L1.904|
;;;375    //		Msg("Zposit\r\n");
;;;376    		*ms_Z.Posit = 0; 
00037c  49a9              LDR      r1,|L1.1572|
00037e  2000              MOVS     r0,#0
000380  6b0a              LDR      r2,[r1,#0x30]  ; ms_Z
000382  7010              STRB     r0,[r2,#0]
;;;377    		*ms_Z.StagePos = 0;
000384  6b49              LDR      r1,[r1,#0x34]  ; ms_Z
000386  7008              STRB     r0,[r1,#0]
                  |L1.904|
;;;378    	}
;;;379    	return 0; 
000388  2000              MOVS     r0,#0
;;;380    }
00038a  4770              BX       lr
;;;381    
                          ENDP

                  pByPassHandle PROC
;;;382    u8 pByPassHandle (char * name,u8 * buffer,u16 len){
00038c  49a6              LDR      r1,|L1.1576|
;;;383    	Index = 1;
00038e  2001              MOVS     r0,#1
;;;384    	fStartMoveZLowSpeed = 0;
000390  6008              STR      r0,[r1,#0]  ; Index
000392  49a6              LDR      r1,|L1.1580|
000394  2000              MOVS     r0,#0
000396  7008              STRB     r0,[r1,#0]
;;;385    	return 0;
;;;386    }
000398  4770              BX       lr
;;;387    
                          ENDP

                  PrgRunHandleFrz PROC
;;;388    u8 PrgRunHandleFrz(char * name,u8 * buffer,u16 len){
00039a  48a5              LDR      r0,|L1.1584|
;;;389    	if (*buffer) {
00039c  780b              LDRB     r3,[r1,#0]
;;;390    			if (!*pPrgRun){
;;;391    				fStartPrg = 1;
00039e  4a1a              LDR      r2,|L1.1032|
0003a0  6800              LDR      r0,[r0,#0]            ;390
0003a2  2101              MOVS     r1,#1
0003a4  3a80              SUBS     r2,r2,#0x80
0003a6  7800              LDRB     r0,[r0,#0]            ;390
0003a8  b113              CBZ      r3,|L1.944|
0003aa  b918              CBNZ     r0,|L1.948|
0003ac  70d1              STRB     r1,[r2,#3]
0003ae  e001              B        |L1.948|
                  |L1.944|
;;;392    			}	
;;;393    	}	else {
;;;394    			if (*pPrgRun) {
0003b0  b100              CBZ      r0,|L1.948|
;;;395    				fStopPrg = 1;
0003b2  7091              STRB     r1,[r2,#2]
                  |L1.948|
;;;396    			}	
;;;397    	}	
;;;398    	return 0;
0003b4  2000              MOVS     r0,#0
;;;399    }
0003b6  4770              BX       lr
;;;400    
                          ENDP

                  mvcVHandleFrz PROC
;;;401    u8 mvcVHandleFrz(char * name,u8 * buffer,u16 len){
0003b8  4a13              LDR      r2,|L1.1032|
;;;402    //	float v;
;;;403    	// сохранение в backup - регистре
;;;404    	VChange = 1; // устанавливаем признак изменения подачи
0003ba  2001              MOVS     r0,#1
0003bc  3a80              SUBS     r2,r2,#0x80
0003be  7010              STRB     r0,[r2,#0]
;;;405    	memcpy((void*)&(BR_fmvc_V),(void*)buffer,4);
0003c0  480f              LDR      r0,|L1.1024|
0003c2  6809              LDR      r1,[r1,#0]
0003c4  1f00              SUBS     r0,r0,#4
0003c6  6001              STR      r1,[r0,#0]
;;;406    //	memcpy((void*)&v,(void*)buffer,4);
;;;407    //	Msg("Handle SetFeed %d ",(int)(v*1000));
;;;408    	return 0;
0003c8  2000              MOVS     r0,#0
;;;409    }
0003ca  4770              BX       lr
;;;410    
                          ENDP

                  AllocFrzRegisters PROC
;;;411    
;;;412    void AllocFrzRegisters(void){
0003cc  b538              PUSH     {r3-r5,lr}
;;;413    // Чтение и запись
;;;414    	memset(regs,0,REGS_COUNT);
0003ce  f44f717a          MOV      r1,#0x3e8
0003d2  4810              LDR      r0,|L1.1044|
0003d4  f7fffffe          BL       __aeabi_memclr4
0003d8  490b              LDR      r1,|L1.1032|
;;;415    
;;;416    	SetBase(0);
0003da  2000              MOVS     r0,#0
0003dc  3980              SUBS     r1,r1,#0x80
;;;417    	SetAddr((void*)&pvPins,"pvPins",108,rw,NoHandle);
0003de  4604              MOV      r4,r0
0003e0  6088              STR      r0,[r1,#8]  ; CurBase
0003e2  4603              MOV      r3,r0
0003e4  9000              STR      r0,[sp,#0]
0003e6  226c              MOVS     r2,#0x6c
0003e8  a192              ADR      r1,|L1.1588|
0003ea  4894              LDR      r0,|L1.1596|
0003ec  f7fffffe          BL       SetAddr
;;;418    
;;;419    	// Группа одиночных параметром
;;;420    	SetNewGroup();
0003f0  f7fffffe          BL       SetNewGroup
;;;421    	SetAddr((void*)&mc_X.LenOnPulse,"mc_X.LenOnPulse",4,rw,NoHandle);
0003f4  2300              MOVS     r3,#0
0003f6  2204              MOVS     r2,#4
0003f8  a191              ADR      r1,|L1.1600|
0003fa  4895              LDR      r0,|L1.1616|
0003fc  9400              STR      r4,[sp,#0]
0003fe  e129              B        |L1.1620|
                  |L1.1024|
                          DCD      0x40024054
                  |L1.1028|
                          DCD      pRCS
                  |L1.1032|
                          DCD      ||.data||+0x80
                  |L1.1036|
                          DCD      pUsesKP485
                  |L1.1040|
                          DCD      pAddrKPCtrl
                  |L1.1044|
                          DCD      ||.bss||+0x1c20
                  |L1.1048|
                          DCD      ||.bss||
                  |L1.1052|
00041c  4572726f          DCB      "Error allocate memory. Address is busy.\r\n",0
000420  7220616c
000424  6c6f6361
000428  7465206d
00042c  656d6f72
000430  792e2041
000434  64647265
000438  73732069
00043c  73206275
000440  73792e0d
000444  0a00    
000446  00                DCB      0
000447  00                DCB      0
                  |L1.1096|
000448  53657420          DCB      "Set name %s,addr 0x%X,len %d\r\n",0
00044c  6e616d65
000450  2025732c
000454  61646472
000458  20307825
00045c  582c6c65
000460  6e202564
000464  0d0a00  
000467  00                DCB      0
                  |L1.1128|
000468  416c6c6f          DCB      "Alloc name %s,addr 0x%X,len %d\r\n",0
00046c  63206e61
000470  6d652025
000474  732c6164
000478  64722030
00047c  7825582c
000480  6c656e20
000484  25640d0a
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
00048c  73746172          DCB      "startup.cmd",0
000490  7475702e
000494  636d6400
                  |L1.1176|
000498  4e6f7420          DCB      "Not Load regs.bin (err assign starup.cmd res %d)\r\n",0
00049c  4c6f6164
0004a0  20726567
0004a4  732e6269
0004a8  6e202865
0004ac  72722061
0004b0  73736967
0004b4  6e207374
0004b8  61727570
0004bc  2e636d64
0004c0  20726573
0004c4  20256429
0004c8  0d0a00  
0004cb  00                DCB      0
                  |L1.1228|
0004cc  4e6f7420          DCB      "Not Load regs.bin (err reset starup.cmd res %d) h %d\r\n"
0004d0  4c6f6164
0004d4  20726567
0004d8  732e6269
0004dc  6e202865
0004e0  72722072
0004e4  65736574
0004e8  20737461
0004ec  7275702e
0004f0  636d6420
0004f4  72657320
0004f8  25642920
0004fc  68202564
000500  0d0a    
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
000504  72656773          DCB      "regs.bin",0
000508  2e62696e
00050c  00      
00050d  00                DCB      0
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  4572726f          DCB      "Error Assign File regs.bin %d\r\n",0
000514  72204173
000518  7369676e
00051c  2046696c
000520  65207265
000524  67732e62
000528  696e2025
00052c  640d0a00
                  |L1.1328|
000530  4572726f          DCB      "Error Reset File regs.bin %d h %d\r\n",0
000534  72205265
000538  73657420
00053c  46696c65
000540  20726567
000544  732e6269
000548  6e202564
00054c  20682025
000550  640d0a00
                  |L1.1364|
000554  4572726f          DCB      "Error Read File regs.bin res %d\r\n",0
000558  72205265
00055c  61642046
000560  696c6520
000564  72656773
000568  2e62696e
00056c  20726573
000570  2025640d
000574  0a00    
000576  00                DCB      0
000577  00                DCB      0
                  |L1.1400|
000578  52656164          DCB      "Read File regs.bin Ok!!! h %d\r\n",0
00057c  2046696c
000580  65207265
000584  67732e62
000588  696e204f
00058c  6b212121
000590  20682025
000594  640d0a00
                  |L1.1432|
000598  53617665          DCB      "Save Regs\r\n",0
00059c  20526567
0005a0  730d0a00
                  |L1.1444|
0005a4  4572726f          DCB      "Error Assign regs.bin: %d\r\n",0
0005a8  72204173
0005ac  7369676e
0005b0  20726567
0005b4  732e6269
0005b8  6e3a2025
0005bc  640d0a00
                  |L1.1472|
0005c0  4572726f          DCB      "Error Rewrite regs.bin: %d\r\n",0
0005c4  72205265
0005c8  77726974
0005cc  65207265
0005d0  67732e62
0005d4  696e3a20
0005d8  25640d0a
0005dc  00      
0005dd  00                DCB      0
0005de  00                DCB      0
0005df  00                DCB      0
                  |L1.1504|
0005e0  4572726f          DCB      "Error Write regs.bin: %d\r\n",0
0005e4  72205772
0005e8  69746520
0005ec  72656773
0005f0  2e62696e
0005f4  3a202564
0005f8  0d0a00  
0005fb  00                DCB      0
                  |L1.1532|
0005fc  4572726f          DCB      "Error Close regs.bin res:%d\r\n",0
000600  7220436c
000604  6f736520
000608  72656773
00060c  2e62696e
000610  20726573
000614  3a25640d
000618  0a00    
00061a  00                DCB      0
00061b  00                DCB      0
                  |L1.1564|
                          DCD      ms_X
                  |L1.1568|
                          DCD      ms_Y
                  |L1.1572|
                          DCD      ms_Z
                  |L1.1576|
                          DCD      Index
                  |L1.1580|
                          DCD      fStartMoveZLowSpeed
                  |L1.1584|
                          DCD      pPrgRun
                  |L1.1588|
000634  70765069          DCB      "pvPins",0
000638  6e7300  
00063b  00                DCB      0
                  |L1.1596|
                          DCD      pvPins
                  |L1.1600|
000640  6d635f58          DCB      "mc_X.LenOnPulse",0
000644  2e4c656e
000648  4f6e5075
00064c  6c736500
                  |L1.1616|
                          DCD      mc_X+0x10
                  |L1.1620|
000654  f7fffffe          BL       SetAddr
;;;422    	SetAddr((void*)&mc_Y.LenOnPulse,"mc_Y.LenOnPulse",4,rw,NoHandle);
000658  2300              MOVS     r3,#0
00065a  2204              MOVS     r2,#4
00065c  a1f7              ADR      r1,|L1.2620|
00065e  48fb              LDR      r0,|L1.2636|
000660  9400              STR      r4,[sp,#0]
000662  f7fffffe          BL       SetAddr
;;;423    	SetAddr((void*)&mc_Z.LenOnPulse,"mc_Z.LenOnPulse",4,rw,NoHandle);
000666  2300              MOVS     r3,#0
000668  2204              MOVS     r2,#4
00066a  a1f9              ADR      r1,|L1.2640|
00066c  48fc              LDR      r0,|L1.2656|
00066e  9400              STR      r4,[sp,#0]
000670  f7fffffe          BL       SetAddr
;;;424    
;;;425    	SetAddr((void*)&fmvc.LenOnPulse,"fmvc.LenOnPulse",4,rw,NoHandle);
000674  2300              MOVS     r3,#0
000676  2204              MOVS     r2,#4
000678  a1fa              ADR      r1,|L1.2660|
00067a  48fe              LDR      r0,|L1.2676|
00067c  9400              STR      r4,[sp,#0]
00067e  f7fffffe          BL       SetAddr
;;;426    //	SetAddr((void*)&pDirDelay,"pDirDelay",4,rw,NoHandle);
;;;427    	
;;;428    	SetNewGroup();
000682  f7fffffe          BL       SetNewGroup
;;;429    	SetAddr((void*)&pX_PG_MM,		"pX_PG_MM",			4,rw,NoHandle);
000686  2300              MOVS     r3,#0
000688  2204              MOVS     r2,#4
00068a  a1fb              ADR      r1,|L1.2680|
00068c  48fd              LDR      r0,|L1.2692|
00068e  9400              STR      r4,[sp,#0]
000690  f7fffffe          BL       SetAddr
;;;430    	SetAddr((void*)&pX_SPR,			"pX_SPR",			4,rw,NoHandle);
000694  48fb              LDR      r0,|L1.2692|
000696  2300              MOVS     r3,#0
000698  2204              MOVS     r2,#4
00069a  a1fb              ADR      r1,|L1.2696|
00069c  1d00              ADDS     r0,r0,#4
00069e  9400              STR      r4,[sp,#0]
0006a0  f7fffffe          BL       SetAddr
;;;431    	SetAddr((void*)&pX_MIN,			"pX_MIN",			4,rw,NoHandle);
0006a4  48f7              LDR      r0,|L1.2692|
0006a6  2300              MOVS     r3,#0
0006a8  2204              MOVS     r2,#4
0006aa  a1f9              ADR      r1,|L1.2704|
0006ac  3008              ADDS     r0,r0,#8
0006ae  9400              STR      r4,[sp,#0]
0006b0  f7fffffe          BL       SetAddr
;;;432    	SetAddr((void*)&pX_MAX,			"pX_MAX",			4,rw,NoHandle);
0006b4  48f3              LDR      r0,|L1.2692|
0006b6  2300              MOVS     r3,#0
0006b8  2204              MOVS     r2,#4
0006ba  a1f7              ADR      r1,|L1.2712|
0006bc  300c              ADDS     r0,r0,#0xc
0006be  9400              STR      r4,[sp,#0]
0006c0  f7fffffe          BL       SetAddr
;;;433    
;;;434    	SetAddr((void*)&pY_PG_MM,		"pY_PG_MM",			4,rw,NoHandle);
0006c4  48ef              LDR      r0,|L1.2692|
0006c6  2300              MOVS     r3,#0
0006c8  2204              MOVS     r2,#4
0006ca  a1f5              ADR      r1,|L1.2720|
0006cc  3018              ADDS     r0,r0,#0x18
0006ce  9400              STR      r4,[sp,#0]
0006d0  f7fffffe          BL       SetAddr
;;;435    	SetAddr((void*)&pY_SPR,			"pY_SPR",			4,rw,NoHandle);
0006d4  48eb              LDR      r0,|L1.2692|
0006d6  2300              MOVS     r3,#0
0006d8  2204              MOVS     r2,#4
0006da  a1f4              ADR      r1,|L1.2732|
0006dc  301c              ADDS     r0,r0,#0x1c
0006de  9400              STR      r4,[sp,#0]
0006e0  f7fffffe          BL       SetAddr
;;;436    	SetAddr((void*)&pY_MIN,			"pY_MIN",			4,rw,NoHandle);
0006e4  48e7              LDR      r0,|L1.2692|
0006e6  2300              MOVS     r3,#0
0006e8  2204              MOVS     r2,#4
0006ea  a1f2              ADR      r1,|L1.2740|
0006ec  3020              ADDS     r0,r0,#0x20
0006ee  9400              STR      r4,[sp,#0]
0006f0  f7fffffe          BL       SetAddr
;;;437    	SetAddr((void*)&pY_MAX,			"pY_MAX",			4,rw,NoHandle);
0006f4  48e3              LDR      r0,|L1.2692|
0006f6  2300              MOVS     r3,#0
0006f8  2204              MOVS     r2,#4
0006fa  a1f0              ADR      r1,|L1.2748|
0006fc  3024              ADDS     r0,r0,#0x24
0006fe  9400              STR      r4,[sp,#0]
000700  f7fffffe          BL       SetAddr
;;;438    
;;;439    	SetAddr((void*)&pZ_PG_MM,		"pZ_PG_MM",			4,rw,NoHandle);
000704  48df              LDR      r0,|L1.2692|
000706  2300              MOVS     r3,#0
000708  2204              MOVS     r2,#4
00070a  a1ee              ADR      r1,|L1.2756|
00070c  3030              ADDS     r0,r0,#0x30
00070e  9400              STR      r4,[sp,#0]
000710  f7fffffe          BL       SetAddr
;;;440    	SetAddr((void*)&pZ_SPR,			"pZ_SPR",			4,rw,NoHandle);
000714  48db              LDR      r0,|L1.2692|
000716  2300              MOVS     r3,#0
000718  2204              MOVS     r2,#4
00071a  a1ed              ADR      r1,|L1.2768|
00071c  3034              ADDS     r0,r0,#0x34
00071e  9400              STR      r4,[sp,#0]
000720  f7fffffe          BL       SetAddr
;;;441    	SetAddr((void*)&pZ_MIN,			"pZ_MIN",			4,rw,NoHandle);
000724  48d7              LDR      r0,|L1.2692|
000726  2300              MOVS     r3,#0
000728  2204              MOVS     r2,#4
00072a  a1eb              ADR      r1,|L1.2776|
00072c  3038              ADDS     r0,r0,#0x38
00072e  9400              STR      r4,[sp,#0]
000730  f7fffffe          BL       SetAddr
;;;442    	SetAddr((void*)&pZ_MAX,			"pZ_MAX",			4,rw,NoHandle);
000734  48d3              LDR      r0,|L1.2692|
000736  2300              MOVS     r3,#0
000738  2204              MOVS     r2,#4
00073a  a1e9              ADR      r1,|L1.2784|
00073c  303c              ADDS     r0,r0,#0x3c
00073e  9400              STR      r4,[sp,#0]
000740  f7fffffe          BL       SetAddr
;;;443    	
;;;444    	SetNewGroup();
000744  f7fffffe          BL       SetNewGroup
;;;445    	// группа параметров движения по X
;;;446    	SetAddr((void*)&mc_X.FrMin,		"mc_X.FrMin",		8,rw,NoHandle);
000748  2300              MOVS     r3,#0
00074a  2208              MOVS     r2,#8
00074c  a1e6              ADR      r1,|L1.2792|
00074e  48e9              LDR      r0,|L1.2804|
000750  9400              STR      r4,[sp,#0]
000752  f7fffffe          BL       SetAddr
;;;447    	SetAddr((void*)&mc_X.FrReq, 	"mc_X.FrReq",		8,rw,NoHandle);
000756  48e7              LDR      r0,|L1.2804|
000758  2300              MOVS     r3,#0
00075a  2208              MOVS     r2,#8
00075c  a1e6              ADR      r1,|L1.2808|
00075e  1d00              ADDS     r0,r0,#4
000760  9400              STR      r4,[sp,#0]
000762  f7fffffe          BL       SetAddr
;;;448    	SetAddr((void*)&mc_X.FrMax,		"mc_X.FrMax",		8,rw,NoHandle);
000766  48e3              LDR      r0,|L1.2804|
000768  2300              MOVS     r3,#0
00076a  2208              MOVS     r2,#8
00076c  a1e5              ADR      r1,|L1.2820|
00076e  3008              ADDS     r0,r0,#8
000770  9400              STR      r4,[sp,#0]
000772  f7fffffe          BL       SetAddr
;;;449    	SetAddr((void*)&mc_X.Accel,		"mc_X.Accel",		2,rw,NoHandle);
000776  48df              LDR      r0,|L1.2804|
000778  2300              MOVS     r3,#0
00077a  2202              MOVS     r2,#2
00077c  a1e4              ADR      r1,|L1.2832|
00077e  3014              ADDS     r0,r0,#0x14
000780  9400              STR      r4,[sp,#0]
000782  f7fffffe          BL       SetAddr
;;;450    
;;;451    	SetNewGroup();
000786  f7fffffe          BL       SetNewGroup
;;;452    	// группа параметров движения по Y
;;;453    	SetAddr((void*)&mc_Y.FrMin,		"mc_Y.FrMin",		8,rw,NoHandle);
00078a  48b0              LDR      r0,|L1.2636|
00078c  2300              MOVS     r3,#0
00078e  2208              MOVS     r2,#8
000790  a1e2              ADR      r1,|L1.2844|
000792  3810              SUBS     r0,r0,#0x10
000794  9400              STR      r4,[sp,#0]
000796  f7fffffe          BL       SetAddr
;;;454    	SetAddr((void*)&mc_Y.FrReq, 	"mc_Y.FrReq",		8,rw,NoHandle);
00079a  48ac              LDR      r0,|L1.2636|
00079c  2300              MOVS     r3,#0
00079e  2208              MOVS     r2,#8
0007a0  a1e1              ADR      r1,|L1.2856|
0007a2  380c              SUBS     r0,r0,#0xc
0007a4  9400              STR      r4,[sp,#0]
0007a6  f7fffffe          BL       SetAddr
;;;455    	SetAddr((void*)&mc_Y.FrMax,		"mc_Y.FrMax",		8,rw,NoHandle);
0007aa  48a8              LDR      r0,|L1.2636|
0007ac  2300              MOVS     r3,#0
0007ae  2208              MOVS     r2,#8
0007b0  a1e0              ADR      r1,|L1.2868|
0007b2  3808              SUBS     r0,r0,#8
0007b4  9400              STR      r4,[sp,#0]
0007b6  f7fffffe          BL       SetAddr
;;;456    	SetAddr((void*)&mc_Y.Accel,		"mc_Y.Accel",		2,rw,NoHandle);
0007ba  48a4              LDR      r0,|L1.2636|
0007bc  2300              MOVS     r3,#0
0007be  2202              MOVS     r2,#2
0007c0  a1df              ADR      r1,|L1.2880|
0007c2  1d00              ADDS     r0,r0,#4
0007c4  9400              STR      r4,[sp,#0]
0007c6  f7fffffe          BL       SetAddr
;;;457    
;;;458    	SetNewGroup();
0007ca  f7fffffe          BL       SetNewGroup
;;;459    	// группа параметров движения по Z
;;;460    	SetAddr((void*)&mc_Z.FrMin,		"mc_Z.FrMin",		8,rw,NoHandle);
0007ce  48a4              LDR      r0,|L1.2656|
0007d0  2300              MOVS     r3,#0
0007d2  2208              MOVS     r2,#8
0007d4  a1dd              ADR      r1,|L1.2892|
0007d6  3810              SUBS     r0,r0,#0x10
0007d8  9400              STR      r4,[sp,#0]
0007da  f7fffffe          BL       SetAddr
;;;461    	SetAddr((void*)&mc_Z.FrReq, 	"mc_Z.FrReq",		8,rw,NoHandle);
0007de  48a0              LDR      r0,|L1.2656|
0007e0  2300              MOVS     r3,#0
0007e2  2208              MOVS     r2,#8
0007e4  a1dc              ADR      r1,|L1.2904|
0007e6  380c              SUBS     r0,r0,#0xc
0007e8  9400              STR      r4,[sp,#0]
0007ea  f7fffffe          BL       SetAddr
;;;462    	SetAddr((void*)&mc_Z.FrMax,		"mc_Z.FrMax",		8,rw,NoHandle);
0007ee  489c              LDR      r0,|L1.2656|
0007f0  2300              MOVS     r3,#0
0007f2  2208              MOVS     r2,#8
0007f4  a1db              ADR      r1,|L1.2916|
0007f6  3808              SUBS     r0,r0,#8
0007f8  9400              STR      r4,[sp,#0]
0007fa  f7fffffe          BL       SetAddr
;;;463    	SetAddr((void*)&mc_Z.Accel,		"mc_Z.Accel",		2,rw,NoHandle);
0007fe  4898              LDR      r0,|L1.2656|
000800  2300              MOVS     r3,#0
000802  2202              MOVS     r2,#2
000804  a1da              ADR      r1,|L1.2928|
000806  1d00              ADDS     r0,r0,#4
000808  9400              STR      r4,[sp,#0]
00080a  f7fffffe          BL       SetAddr
;;;464    
;;;465    	SetNewGroup();
00080e  f7fffffe          BL       SetNewGroup
;;;466    	SetAddr((void*)&mc_X.ReqPos,	"mc_X.ReqPos",		4,rw,NoHandle);//*//4// требуемая позиция
000812  48b8              LDR      r0,|L1.2804|
000814  2300              MOVS     r3,#0
000816  2204              MOVS     r2,#4
000818  a1d8              ADR      r1,|L1.2940|
00081a  300c              ADDS     r0,r0,#0xc
00081c  9400              STR      r4,[sp,#0]
00081e  f7fffffe          BL       SetAddr
;;;467    	SetAddr((void*)&mc_X.MovePos,	"mc_X.MovePos",		1,rw,NoHandle);//*//1// включение выхода на позицию
000822  48b4              LDR      r0,|L1.2804|
000824  2300              MOVS     r3,#0
000826  2201              MOVS     r2,#1
000828  a1d7              ADR      r1,|L1.2952|
00082a  3020              ADDS     r0,r0,#0x20
00082c  9400              STR      r4,[sp,#0]
00082e  f7fffffe          BL       SetAddr
;;;468    	SetAddr((void*)&mc_Y.ReqPos,	"mc_Y.ReqPos",		4,rw,NoHandle);//*//4// требуемая позиция
000832  4886              LDR      r0,|L1.2636|
000834  2300              MOVS     r3,#0
000836  2204              MOVS     r2,#4
000838  a1d7              ADR      r1,|L1.2968|
00083a  1f00              SUBS     r0,r0,#4
00083c  9400              STR      r4,[sp,#0]
00083e  f7fffffe          BL       SetAddr
;;;469    	SetAddr((void*)&mc_Y.MovePos,	"mc_Y.MovePos",		1,rw,NoHandle);//*//1// включение выхода на позицию
000842  4882              LDR      r0,|L1.2636|
000844  2300              MOVS     r3,#0
000846  2201              MOVS     r2,#1
000848  a1d6              ADR      r1,|L1.2980|
00084a  3010              ADDS     r0,r0,#0x10
00084c  9400              STR      r4,[sp,#0]
00084e  f7fffffe          BL       SetAddr
;;;470    	SetAddr((void*)&mc_Z.ReqPos,	"mc_Z.ReqPos",		4,rw,NoHandle);//*//4// требуемая позиция
000852  4883              LDR      r0,|L1.2656|
000854  2300              MOVS     r3,#0
000856  2204              MOVS     r2,#4
000858  a1d6              ADR      r1,|L1.2996|
00085a  1f00              SUBS     r0,r0,#4
00085c  9400              STR      r4,[sp,#0]
00085e  f7fffffe          BL       SetAddr
;;;471    	SetAddr((void*)&mc_Z.MovePos,	"mc_Z.MovePos",		1,rw,NoHandle);//*//1// включение выхода на позицию
000862  487f              LDR      r0,|L1.2656|
000864  2300              MOVS     r3,#0
000866  2201              MOVS     r2,#1
000868  a1d5              ADR      r1,|L1.3008|
00086a  3010              ADDS     r0,r0,#0x10
00086c  9400              STR      r4,[sp,#0]
00086e  f7fffffe          BL       SetAddr
;;;472    
;;;473    
;;;474    	SetNewGroup();
000872  f7fffffe          BL       SetNewGroup
;;;475    	// группа управления кнопками X
;;;476    	SetAddr((void*)&mc_X.ReqDir,	"mc_X.ReqDir",		1,rw,NoHandle);
000876  489f              LDR      r0,|L1.2804|
000878  2300              MOVS     r3,#0
00087a  2201              MOVS     r2,#1
00087c  a1d4              ADR      r1,|L1.3024|
00087e  3018              ADDS     r0,r0,#0x18
000880  9400              STR      r4,[sp,#0]
000882  f7fffffe          BL       SetAddr
;;;477    	SetAddr((void*)&mc_X.MoveBtn,	"mc_X.MoveBtn",		1,rw,NoHandle);
000886  489b              LDR      r0,|L1.2804|
000888  2300              MOVS     r3,#0
00088a  2201              MOVS     r2,#1
00088c  a1d3              ADR      r1,|L1.3036|
00088e  301c              ADDS     r0,r0,#0x1c
000890  9400              STR      r4,[sp,#0]
000892  f7fffffe          BL       SetAddr
;;;478    
;;;479    	SetNewGroup();
000896  f7fffffe          BL       SetNewGroup
;;;480    	// группа управленияя кнопками Y
;;;481    	SetAddr((void*)&mc_Y.ReqDir,	"mc_Y.ReqDir",		1,rw,NoHandle);
00089a  486c              LDR      r0,|L1.2636|
00089c  2300              MOVS     r3,#0
00089e  2201              MOVS     r2,#1
0008a0  a1d2              ADR      r1,|L1.3052|
0008a2  3008              ADDS     r0,r0,#8
0008a4  9400              STR      r4,[sp,#0]
0008a6  f7fffffe          BL       SetAddr
;;;482    	SetAddr((void*)&mc_Y.MoveBtn,	"mc_Y.MoveBtn",		1,rw,NoHandle);
0008aa  4868              LDR      r0,|L1.2636|
0008ac  2300              MOVS     r3,#0
0008ae  2201              MOVS     r2,#1
0008b0  a1d1              ADR      r1,|L1.3064|
0008b2  300c              ADDS     r0,r0,#0xc
0008b4  9400              STR      r4,[sp,#0]
0008b6  f7fffffe          BL       SetAddr
;;;483    
;;;484    	SetNewGroup();
0008ba  f7fffffe          BL       SetNewGroup
;;;485    	// группа управления кнопками Z
;;;486    	SetAddr((void*)&mc_Z.ReqDir,	"mc_Z.ReqDir",		1,rw,NoHandle);
0008be  4868              LDR      r0,|L1.2656|
0008c0  2300              MOVS     r3,#0
0008c2  2201              MOVS     r2,#1
0008c4  a1d0              ADR      r1,|L1.3080|
0008c6  3008              ADDS     r0,r0,#8
0008c8  9400              STR      r4,[sp,#0]
0008ca  f7fffffe          BL       SetAddr
;;;487    	SetAddr((void*)&mc_Z.MoveBtn,	"mc_Z.MoveBtn",		1,rw,NoHandle);
0008ce  4864              LDR      r0,|L1.2656|
0008d0  2300              MOVS     r3,#0
0008d2  2201              MOVS     r2,#1
0008d4  a1cf              ADR      r1,|L1.3092|
0008d6  300c              ADDS     r0,r0,#0xc
0008d8  9400              STR      r4,[sp,#0]
0008da  f7fffffe          BL       SetAddr
;;;488    
;;;489    	SetNewGroup();
0008de  f7fffffe          BL       SetNewGroup
;;;490    	// включение позиционирования по координатам
;;;491    	SetAddr((void*)&mc_X.PositOn,	"mc_X.PositOn",		1,rw,XPositOnHandle);
0008e2  f2af5099          ADR      r0,XPositOnHandle + 1
0008e6  9000              STR      r0,[sp,#0]
0008e8  4882              LDR      r0,|L1.2804|
0008ea  2300              MOVS     r3,#0
0008ec  2201              MOVS     r2,#1
0008ee  a1cd              ADR      r1,|L1.3108|
0008f0  3024              ADDS     r0,r0,#0x24
0008f2  f7fffffe          BL       SetAddr
;;;492    	SetAddr((void*)&mc_Y.PositOn,	"mc_Y.PositOn",		1,rw,YPositOnHandle);
0008f6  f2af5097          ADR      r0,YPositOnHandle + 1
0008fa  9000              STR      r0,[sp,#0]
0008fc  4853              LDR      r0,|L1.2636|
0008fe  2300              MOVS     r3,#0
000900  2201              MOVS     r2,#1
000902  a1cc              ADR      r1,|L1.3124|
000904  3014              ADDS     r0,r0,#0x14
000906  f7fffffe          BL       SetAddr
;;;493    	SetAddr((void*)&mc_Z.PositOn,	"mc_Z.PositOn",		1,rw,ZPositOnHandle);
00090a  f2af5095          ADR      r0,ZPositOnHandle + 1
00090e  9000              STR      r0,[sp,#0]
000910  4853              LDR      r0,|L1.2656|
000912  2300              MOVS     r3,#0
000914  2201              MOVS     r2,#1
000916  a1cb              ADR      r1,|L1.3140|
000918  3014              ADDS     r0,r0,#0x14
00091a  f7fffffe          BL       SetAddr
;;;494    
;;;495    	SetNewGroup();
00091e  f7fffffe          BL       SetNewGroup
;;;496    	SetAddr((void*)&ms_X.FrCur,		"ms_X.FrCur",		8,ro,NoHandle);
000922  2301              MOVS     r3,#1
000924  2208              MOVS     r2,#8
000926  a1cb              ADR      r1,|L1.3156|
000928  48cd              LDR      r0,|L1.3168|
00092a  9400              STR      r4,[sp,#0]
00092c  f7fffffe          BL       SetAddr
;;;497    	SetAddr((void*)&ms_Y.FrCur,		"ms_Y.FrCur",		8,ro,NoHandle);
000930  2301              MOVS     r3,#1
000932  2208              MOVS     r2,#8
000934  a1cb              ADR      r1,|L1.3172|
000936  48ce              LDR      r0,|L1.3184|
000938  9400              STR      r4,[sp,#0]
00093a  f7fffffe          BL       SetAddr
;;;498    	SetAddr((void*)&ms_Z.FrCur,		"ms_Z.FrCur",		8,ro,NoHandle);
00093e  2301              MOVS     r3,#1
000940  2208              MOVS     r2,#8
000942  a1cc              ADR      r1,|L1.3188|
000944  48ce              LDR      r0,|L1.3200|
000946  9400              STR      r4,[sp,#0]
000948  f7fffffe          BL       SetAddr
;;;499    
;;;500    	// см. инициализацию до загрузки
;;;501    	SetAddr((void*)&ms_X.Dir,		"ms_X.Dir",			1,ro,NoHandle);
00094c  48c4              LDR      r0,|L1.3168|
00094e  2301              MOVS     r3,#1
000950  461a              MOV      r2,r3
000952  a1cc              ADR      r1,|L1.3204|
000954  380c              SUBS     r0,r0,#0xc
000956  9400              STR      r4,[sp,#0]
000958  f7fffffe          BL       SetAddr
;;;502    	SetAddr((void*)&ms_Y.Dir,		"ms_Y.Dir",			1,ro,NoHandle);
00095c  48c4              LDR      r0,|L1.3184|
00095e  2301              MOVS     r3,#1
000960  461a              MOV      r2,r3
000962  a1cb              ADR      r1,|L1.3216|
000964  380c              SUBS     r0,r0,#0xc
000966  9400              STR      r4,[sp,#0]
000968  f7fffffe          BL       SetAddr
;;;503      	SetAddr((void*)&ms_Z.Dir,		"ms_Z.Dir",			1,ro,NoHandle);
00096c  48c4              LDR      r0,|L1.3200|
00096e  2301              MOVS     r3,#1
000970  461a              MOV      r2,r3
000972  a1ca              ADR      r1,|L1.3228|
000974  380c              SUBS     r0,r0,#0xc
000976  9400              STR      r4,[sp,#0]
000978  f7fffffe          BL       SetAddr
;;;504    	// Posit не меняется после ЗП
;;;505    	SetAddr((void*)&ms_X.Posit, 	"ms_X.Posit",		1,ro,NoHandle);
00097c  48b8              LDR      r0,|L1.3168|
00097e  2301              MOVS     r3,#1
000980  461a              MOV      r2,r3
000982  a1c9              ADR      r1,|L1.3240|
000984  3020              ADDS     r0,r0,#0x20
000986  9400              STR      r4,[sp,#0]
000988  f7fffffe          BL       SetAddr
;;;506    	SetAddr((void*)&ms_Y.Posit, 	"ms_Y.Posit",		1,ro,NoHandle);
00098c  48b8              LDR      r0,|L1.3184|
00098e  2301              MOVS     r3,#1
000990  461a              MOV      r2,r3
000992  a1c8              ADR      r1,|L1.3252|
000994  3020              ADDS     r0,r0,#0x20
000996  9400              STR      r4,[sp,#0]
000998  f7fffffe          BL       SetAddr
;;;507    	SetAddr((void*)&ms_Z.Posit, 	"ms_Z.Posit",		1,ro,NoHandle);
00099c  48b8              LDR      r0,|L1.3200|
00099e  2301              MOVS     r3,#1
0009a0  461a              MOV      r2,r3
0009a2  a1c7              ADR      r1,|L1.3264|
0009a4  3020              ADDS     r0,r0,#0x20
0009a6  9400              STR      r4,[sp,#0]
0009a8  f7fffffe          BL       SetAddr
;;;508    
;;;509    	// StagePos сброшен после ЗП
;;;510    	SetAddr((void*)&ms_X.StagePos, 	"ms_X.StagePos",		1,ro,NoHandle);
0009ac  48ac              LDR      r0,|L1.3168|
0009ae  2301              MOVS     r3,#1
0009b0  461a              MOV      r2,r3
0009b2  a1c6              ADR      r1,|L1.3276|
0009b4  3024              ADDS     r0,r0,#0x24
0009b6  9400              STR      r4,[sp,#0]
0009b8  f7fffffe          BL       SetAddr
;;;511    	SetAddr((void*)&ms_Y.StagePos, 	"ms_Y.StagePos",		1,ro,NoHandle);
0009bc  48ac              LDR      r0,|L1.3184|
0009be  2301              MOVS     r3,#1
0009c0  461a              MOV      r2,r3
0009c2  a1c6              ADR      r1,|L1.3292|
0009c4  3024              ADDS     r0,r0,#0x24
0009c6  9400              STR      r4,[sp,#0]
0009c8  f7fffffe          BL       SetAddr
;;;512    	SetAddr((void*)&ms_Z.StagePos, 	"ms_Z.StagePos",		1,ro,NoHandle);
0009cc  48ac              LDR      r0,|L1.3200|
0009ce  2301              MOVS     r3,#1
0009d0  461a              MOV      r2,r3
0009d2  a1c6              ADR      r1,|L1.3308|
0009d4  3024              ADDS     r0,r0,#0x24
0009d6  9400              STR      r4,[sp,#0]
0009d8  f7fffffe          BL       SetAddr
;;;513    	
;;;514    	// настройки шпинделя и ШИМ
;;;515    	SetNewGroup();
0009dc  f7fffffe          BL       SetNewGroup
;;;516    	SetAddr((void*)&pFdbyFnom,	"pFdbyFnom",	2,rw,NoHandle);	//*// 
0009e0  4828              LDR      r0,|L1.2692|
0009e2  2300              MOVS     r3,#0
0009e4  2202              MOVS     r2,#2
0009e6  a1c5              ADR      r1,|L1.3324|
0009e8  3074              ADDS     r0,r0,#0x74
0009ea  9400              STR      r4,[sp,#0]
0009ec  f7fffffe          BL       SetAddr
;;;517    	SetAddr((void*)&pFnom,			"pFnom",			2,rw,NoHandle);	//*// 
0009f0  4824              LDR      r0,|L1.2692|
0009f2  2300              MOVS     r3,#0
0009f4  2202              MOVS     r2,#2
0009f6  a1c4              ADR      r1,|L1.3336|
0009f8  3078              ADDS     r0,r0,#0x78
0009fa  9400              STR      r4,[sp,#0]
0009fc  f7fffffe          BL       SetAddr
;;;518      SetNewGroup();
000a00  f7fffffe          BL       SetNewGroup
;;;519    	// ШИМ частника если тип 2
;;;520    	SetAddr((void*)&pFIPWM, "pFIPWM",			4,rw,NoHandle);
000a04  2300              MOVS     r3,#0
000a06  2204              MOVS     r2,#4
000a08  a1c1              ADR      r1,|L1.3344|
000a0a  48c3              LDR      r0,|L1.3352|
000a0c  9400              STR      r4,[sp,#0]
000a0e  f7fffffe          BL       SetAddr
;;;521    	// максимальная частота для ШИМ ЧП если тип 2
;;;522    	SetAddr((void*)&pFIPWMFreq, "pFIPWMFreq",			4,rw,NoHandle);
000a12  2300              MOVS     r3,#0
000a14  2204              MOVS     r2,#4
000a16  a1c1              ADR      r1,|L1.3356|
000a18  48c3              LDR      r0,|L1.3368|
000a1a  9400              STR      r4,[sp,#0]
000a1c  f7fffffe          BL       SetAddr
;;;523    
;;;524    	// режим обхода заготовки
;;;525    	// ByPass сброшен после ЗП
;;;526    	SetNewGroup();
000a20  f7fffffe          BL       SetNewGroup
;;;527    	SetAddr((void*)&pByPass, 	"pByPass",		1,rw,pByPassHandle);
000a24  f2af659b          ADR      r5,pByPassHandle + 1
000a28  4816              LDR      r0,|L1.2692|
000a2a  2300              MOVS     r3,#0
000a2c  2201              MOVS     r2,#1
000a2e  a1bf              ADR      r1,|L1.3372|
000a30  3838              SUBS     r0,r0,#0x38
000a32  9500              STR      r5,[sp,#0]
000a34  f7fffffe          BL       SetAddr
;;;528    	// режим коррекции высоты инструмента
;;;529    	SetAddr((void*)&pHTCorr, 	"pHTCorr",		1,rw,pByPassHandle);
000a38  2300              MOVS     r3,#0
000a3a  e17b              B        |L1.3380|
                  |L1.2620|
000a3c  6d635f59          DCB      "mc_Y.LenOnPulse",0
000a40  2e4c656e
000a44  4f6e5075
000a48  6c736500
                  |L1.2636|
                          DCD      mc_Y+0x10
                  |L1.2640|
000a50  6d635f5a          DCB      "mc_Z.LenOnPulse",0
000a54  2e4c656e
000a58  4f6e5075
000a5c  6c736500
                  |L1.2656|
                          DCD      mc_Z+0x10
                  |L1.2660|
000a64  666d7663          DCB      "fmvc.LenOnPulse",0
000a68  2e4c656e
000a6c  4f6e5075
000a70  6c736500
                  |L1.2676|
                          DCD      fmvc
                  |L1.2680|
000a78  70585f50          DCB      "pX_PG_MM",0
000a7c  475f4d4d
000a80  00      
000a81  00                DCB      0
000a82  00                DCB      0
000a83  00                DCB      0
                  |L1.2692|
                          DCD      ||.data||+0x44
                  |L1.2696|
000a88  70585f53          DCB      "pX_SPR",0
000a8c  505200  
000a8f  00                DCB      0
                  |L1.2704|
000a90  70585f4d          DCB      "pX_MIN",0
000a94  494e00  
000a97  00                DCB      0
                  |L1.2712|
000a98  70585f4d          DCB      "pX_MAX",0
000a9c  415800  
000a9f  00                DCB      0
                  |L1.2720|
000aa0  70595f50          DCB      "pY_PG_MM",0
000aa4  475f4d4d
000aa8  00      
000aa9  00                DCB      0
000aaa  00                DCB      0
000aab  00                DCB      0
                  |L1.2732|
000aac  70595f53          DCB      "pY_SPR",0
000ab0  505200  
000ab3  00                DCB      0
                  |L1.2740|
000ab4  70595f4d          DCB      "pY_MIN",0
000ab8  494e00  
000abb  00                DCB      0
                  |L1.2748|
000abc  70595f4d          DCB      "pY_MAX",0
000ac0  415800  
000ac3  00                DCB      0
                  |L1.2756|
000ac4  705a5f50          DCB      "pZ_PG_MM",0
000ac8  475f4d4d
000acc  00      
000acd  00                DCB      0
000ace  00                DCB      0
000acf  00                DCB      0
                  |L1.2768|
000ad0  705a5f53          DCB      "pZ_SPR",0
000ad4  505200  
000ad7  00                DCB      0
                  |L1.2776|
000ad8  705a5f4d          DCB      "pZ_MIN",0
000adc  494e00  
000adf  00                DCB      0
                  |L1.2784|
000ae0  705a5f4d          DCB      "pZ_MAX",0
000ae4  415800  
000ae7  00                DCB      0
                  |L1.2792|
000ae8  6d635f58          DCB      "mc_X.FrMin",0
000aec  2e46724d
000af0  696e00  
000af3  00                DCB      0
                  |L1.2804|
                          DCD      mc_X
                  |L1.2808|
000af8  6d635f58          DCB      "mc_X.FrReq",0
000afc  2e467252
000b00  657100  
000b03  00                DCB      0
                  |L1.2820|
000b04  6d635f58          DCB      "mc_X.FrMax",0
000b08  2e46724d
000b0c  617800  
000b0f  00                DCB      0
                  |L1.2832|
000b10  6d635f58          DCB      "mc_X.Accel",0
000b14  2e416363
000b18  656c00  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  6d635f59          DCB      "mc_Y.FrMin",0
000b20  2e46724d
000b24  696e00  
000b27  00                DCB      0
                  |L1.2856|
000b28  6d635f59          DCB      "mc_Y.FrReq",0
000b2c  2e467252
000b30  657100  
000b33  00                DCB      0
                  |L1.2868|
000b34  6d635f59          DCB      "mc_Y.FrMax",0
000b38  2e46724d
000b3c  617800  
000b3f  00                DCB      0
                  |L1.2880|
000b40  6d635f59          DCB      "mc_Y.Accel",0
000b44  2e416363
000b48  656c00  
000b4b  00                DCB      0
                  |L1.2892|
000b4c  6d635f5a          DCB      "mc_Z.FrMin",0
000b50  2e46724d
000b54  696e00  
000b57  00                DCB      0
                  |L1.2904|
000b58  6d635f5a          DCB      "mc_Z.FrReq",0
000b5c  2e467252
000b60  657100  
000b63  00                DCB      0
                  |L1.2916|
000b64  6d635f5a          DCB      "mc_Z.FrMax",0
000b68  2e46724d
000b6c  617800  
000b6f  00                DCB      0
                  |L1.2928|
000b70  6d635f5a          DCB      "mc_Z.Accel",0
000b74  2e416363
000b78  656c00  
000b7b  00                DCB      0
                  |L1.2940|
000b7c  6d635f58          DCB      "mc_X.ReqPos",0
000b80  2e526571
000b84  506f7300
                  |L1.2952|
000b88  6d635f58          DCB      "mc_X.MovePos",0
000b8c  2e4d6f76
000b90  65506f73
000b94  00      
000b95  00                DCB      0
000b96  00                DCB      0
000b97  00                DCB      0
                  |L1.2968|
000b98  6d635f59          DCB      "mc_Y.ReqPos",0
000b9c  2e526571
000ba0  506f7300
                  |L1.2980|
000ba4  6d635f59          DCB      "mc_Y.MovePos",0
000ba8  2e4d6f76
000bac  65506f73
000bb0  00      
000bb1  00                DCB      0
000bb2  00                DCB      0
000bb3  00                DCB      0
                  |L1.2996|
000bb4  6d635f5a          DCB      "mc_Z.ReqPos",0
000bb8  2e526571
000bbc  506f7300
                  |L1.3008|
000bc0  6d635f5a          DCB      "mc_Z.MovePos",0
000bc4  2e4d6f76
000bc8  65506f73
000bcc  00      
000bcd  00                DCB      0
000bce  00                DCB      0
000bcf  00                DCB      0
                  |L1.3024|
000bd0  6d635f58          DCB      "mc_X.ReqDir",0
000bd4  2e526571
000bd8  44697200
                  |L1.3036|
000bdc  6d635f58          DCB      "mc_X.MoveBtn",0
000be0  2e4d6f76
000be4  6542746e
000be8  00      
000be9  00                DCB      0
000bea  00                DCB      0
000beb  00                DCB      0
                  |L1.3052|
000bec  6d635f59          DCB      "mc_Y.ReqDir",0
000bf0  2e526571
000bf4  44697200
                  |L1.3064|
000bf8  6d635f59          DCB      "mc_Y.MoveBtn",0
000bfc  2e4d6f76
000c00  6542746e
000c04  00      
000c05  00                DCB      0
000c06  00                DCB      0
000c07  00                DCB      0
                  |L1.3080|
000c08  6d635f5a          DCB      "mc_Z.ReqDir",0
000c0c  2e526571
000c10  44697200
                  |L1.3092|
000c14  6d635f5a          DCB      "mc_Z.MoveBtn",0
000c18  2e4d6f76
000c1c  6542746e
000c20  00      
000c21  00                DCB      0
000c22  00                DCB      0
000c23  00                DCB      0
                  |L1.3108|
000c24  6d635f58          DCB      "mc_X.PositOn",0
000c28  2e506f73
000c2c  69744f6e
000c30  00      
000c31  00                DCB      0
000c32  00                DCB      0
000c33  00                DCB      0
                  |L1.3124|
000c34  6d635f59          DCB      "mc_Y.PositOn",0
000c38  2e506f73
000c3c  69744f6e
000c40  00      
000c41  00                DCB      0
000c42  00                DCB      0
000c43  00                DCB      0
                  |L1.3140|
000c44  6d635f5a          DCB      "mc_Z.PositOn",0
000c48  2e506f73
000c4c  69744f6e
000c50  00      
000c51  00                DCB      0
000c52  00                DCB      0
000c53  00                DCB      0
                  |L1.3156|
000c54  6d735f58          DCB      "ms_X.FrCur",0
000c58  2e467243
000c5c  757200  
000c5f  00                DCB      0
                  |L1.3168|
                          DCD      ms_X+0x10
                  |L1.3172|
000c64  6d735f59          DCB      "ms_Y.FrCur",0
000c68  2e467243
000c6c  757200  
000c6f  00                DCB      0
                  |L1.3184|
                          DCD      ms_Y+0x10
                  |L1.3188|
000c74  6d735f5a          DCB      "ms_Z.FrCur",0
000c78  2e467243
000c7c  757200  
000c7f  00                DCB      0
                  |L1.3200|
                          DCD      ms_Z+0x10
                  |L1.3204|
000c84  6d735f58          DCB      "ms_X.Dir",0
000c88  2e446972
000c8c  00      
000c8d  00                DCB      0
000c8e  00                DCB      0
000c8f  00                DCB      0
                  |L1.3216|
000c90  6d735f59          DCB      "ms_Y.Dir",0
000c94  2e446972
000c98  00      
000c99  00                DCB      0
000c9a  00                DCB      0
000c9b  00                DCB      0
                  |L1.3228|
000c9c  6d735f5a          DCB      "ms_Z.Dir",0
000ca0  2e446972
000ca4  00      
000ca5  00                DCB      0
000ca6  00                DCB      0
000ca7  00                DCB      0
                  |L1.3240|
000ca8  6d735f58          DCB      "ms_X.Posit",0
000cac  2e506f73
000cb0  697400  
000cb3  00                DCB      0
                  |L1.3252|
000cb4  6d735f59          DCB      "ms_Y.Posit",0
000cb8  2e506f73
000cbc  697400  
000cbf  00                DCB      0
                  |L1.3264|
000cc0  6d735f5a          DCB      "ms_Z.Posit",0
000cc4  2e506f73
000cc8  697400  
000ccb  00                DCB      0
                  |L1.3276|
000ccc  6d735f58          DCB      "ms_X.StagePos",0
000cd0  2e537461
000cd4  6765506f
000cd8  7300    
000cda  00                DCB      0
000cdb  00                DCB      0
                  |L1.3292|
000cdc  6d735f59          DCB      "ms_Y.StagePos",0
000ce0  2e537461
000ce4  6765506f
000ce8  7300    
000cea  00                DCB      0
000ceb  00                DCB      0
                  |L1.3308|
000cec  6d735f5a          DCB      "ms_Z.StagePos",0
000cf0  2e537461
000cf4  6765506f
000cf8  7300    
000cfa  00                DCB      0
000cfb  00                DCB      0
                  |L1.3324|
000cfc  70466462          DCB      "pFdbyFnom",0
000d00  79466e6f
000d04  6d00    
000d06  00                DCB      0
000d07  00                DCB      0
                  |L1.3336|
000d08  70466e6f          DCB      "pFnom",0
000d0c  6d00    
000d0e  00                DCB      0
000d0f  00                DCB      0
                  |L1.3344|
000d10  70464950          DCB      "pFIPWM",0
000d14  574d00  
000d17  00                DCB      0
                  |L1.3352|
                          DCD      pFIPWM
                  |L1.3356|
000d1c  70464950          DCB      "pFIPWMFreq",0
000d20  574d4672
000d24  657100  
000d27  00                DCB      0
                  |L1.3368|
                          DCD      pFIPWMFreq
                  |L1.3372|
000d2c  70427950          DCB      "pByPass",0
000d30  61737300
                  |L1.3380|
000d34  2201              MOVS     r2,#1
000d36  a1fd              ADR      r1,|L1.4396|
000d38  48fe              LDR      r0,|L1.4404|
000d3a  9500              STR      r5,[sp,#0]
000d3c  f7fffffe          BL       SetAddr
;;;530    	// режим обнуления координаты Z по датчику
;;;531    	SetAddr((void*)&pZZeroDat, 	"pZZeroDat",		1,rw,pByPassHandle);
000d40  48fc              LDR      r0,|L1.4404|
000d42  2300              MOVS     r3,#0
000d44  2201              MOVS     r2,#1
000d46  a1fc              ADR      r1,|L1.4408|
000d48  1d00              ADDS     r0,r0,#4
000d4a  9500              STR      r5,[sp,#0]
000d4c  f7fffffe          BL       SetAddr
;;;532    
;;;533    	// смещения нулевой точки в импульсах
;;;534    	SetNewGroup();
000d50  f7fffffe          BL       SetNewGroup
;;;535    	SetAddr((void*)&dXPos,		"dXPos",			4,rw,NoHandle);
000d54  48f7              LDR      r0,|L1.4404|
000d56  2300              MOVS     r3,#0
000d58  2204              MOVS     r2,#4
000d5a  a1fa              ADR      r1,|L1.4420|
000d5c  3824              SUBS     r0,r0,#0x24
000d5e  9400              STR      r4,[sp,#0]
000d60  f7fffffe          BL       SetAddr
;;;536    	SetAddr((void*)&dYPos,		"dYPos",			4,rw,NoHandle);
000d64  48f3              LDR      r0,|L1.4404|
000d66  2300              MOVS     r3,#0
000d68  2204              MOVS     r2,#4
000d6a  a1f8              ADR      r1,|L1.4428|
000d6c  3820              SUBS     r0,r0,#0x20
000d6e  9400              STR      r4,[sp,#0]
000d70  f7fffffe          BL       SetAddr
;;;537    	SetAddr((void*)&dZPos,		"dZPos",			4,rw,NoHandle);
000d74  48ef              LDR      r0,|L1.4404|
000d76  2300              MOVS     r3,#0
000d78  2204              MOVS     r2,#4
000d7a  a1f6              ADR      r1,|L1.4436|
000d7c  381c              SUBS     r0,r0,#0x1c
000d7e  9400              STR      r4,[sp,#0]
000d80  f7fffffe          BL       SetAddr
;;;538    	
;;;539    	// точки плоскостной коррекции
;;;540    	SetNewGroup();
000d84  f7fffffe          BL       SetNewGroup
;;;541    	// координата X1
;;;542    	SetAddr((void*)&pX1,			"pX1",			4,rw,NoHandle);	
000d88  2300              MOVS     r3,#0
000d8a  2204              MOVS     r2,#4
000d8c  a1f3              ADR      r1,|L1.4444|
000d8e  48f4              LDR      r0,|L1.4448|
000d90  9400              STR      r4,[sp,#0]
000d92  f7fffffe          BL       SetAddr
;;;543    	// координата Y1
;;;544    	SetAddr((void*)&pY1,			"pY1",			4,rw,NoHandle);	
000d96  2300              MOVS     r3,#0
000d98  2204              MOVS     r2,#4
000d9a  a1f2              ADR      r1,|L1.4452|
000d9c  48f2              LDR      r0,|L1.4456|
000d9e  9400              STR      r4,[sp,#0]
000da0  f7fffffe          BL       SetAddr
;;;545    	// координата Z1
;;;546    	SetAddr((void*)&pZ1,			"pZ1",			4,rw,NoHandle);	
000da4  2300              MOVS     r3,#0
000da6  2204              MOVS     r2,#4
000da8  a1f0              ADR      r1,|L1.4460|
000daa  48f1              LDR      r0,|L1.4464|
000dac  9400              STR      r4,[sp,#0]
000dae  f7fffffe          BL       SetAddr
;;;547    	// координата X2
;;;548    	SetAddr((void*)&pX2,			"pX2",			4,rw,NoHandle);	
000db2  2300              MOVS     r3,#0
000db4  2204              MOVS     r2,#4
000db6  a1ef              ADR      r1,|L1.4468|
000db8  48ef              LDR      r0,|L1.4472|
000dba  9400              STR      r4,[sp,#0]
000dbc  f7fffffe          BL       SetAddr
;;;549    	// координата Y2
;;;550    	SetAddr((void*)&pY2,			"pY2",			4,rw,NoHandle);	
000dc0  2300              MOVS     r3,#0
000dc2  2204              MOVS     r2,#4
000dc4  a1ed              ADR      r1,|L1.4476|
000dc6  48ee              LDR      r0,|L1.4480|
000dc8  9400              STR      r4,[sp,#0]
000dca  f7fffffe          BL       SetAddr
;;;551    	// координата Z2
;;;552    	SetAddr((void*)&pZ2,			"pZ2",			4,rw,NoHandle);	
000dce  2300              MOVS     r3,#0
000dd0  2204              MOVS     r2,#4
000dd2  a1ec              ADR      r1,|L1.4484|
000dd4  48ec              LDR      r0,|L1.4488|
000dd6  9400              STR      r4,[sp,#0]
000dd8  f7fffffe          BL       SetAddr
;;;553    	// координата X3
;;;554    	SetAddr((void*)&pX3,			"pX3",			4,rw,NoHandle);	
000ddc  2300              MOVS     r3,#0
000dde  2204              MOVS     r2,#4
000de0  a1ea              ADR      r1,|L1.4492|
000de2  48eb              LDR      r0,|L1.4496|
000de4  9400              STR      r4,[sp,#0]
000de6  f7fffffe          BL       SetAddr
;;;555    	// координата Y3
;;;556    	SetAddr((void*)&pY3,			"pY3",			4,rw,NoHandle);	
000dea  2300              MOVS     r3,#0
000dec  2204              MOVS     r2,#4
000dee  a1e9              ADR      r1,|L1.4500|
000df0  48e9              LDR      r0,|L1.4504|
000df2  9400              STR      r4,[sp,#0]
000df4  f7fffffe          BL       SetAddr
;;;557    	// координата Z3
;;;558    	SetAddr((void*)&pZ3,			"pZ3",			4,rw,NoHandle);	
000df8  2300              MOVS     r3,#0
000dfa  2204              MOVS     r2,#4
000dfc  a1e7              ADR      r1,|L1.4508|
000dfe  48e8              LDR      r0,|L1.4512|
000e00  9400              STR      r4,[sp,#0]
000e02  f7fffffe          BL       SetAddr
;;;559    
;;;560    	SetAddr((void*)&pA,			"pA",			4,rw,NoHandle);	
000e06  2300              MOVS     r3,#0
000e08  2204              MOVS     r2,#4
000e0a  a1e6              ADR      r1,|L1.4516|
000e0c  48e6              LDR      r0,|L1.4520|
000e0e  9400              STR      r4,[sp,#0]
000e10  f7fffffe          BL       SetAddr
;;;561    	SetAddr((void*)&pB,			"pB",			4,rw,NoHandle);	
000e14  2300              MOVS     r3,#0
000e16  2204              MOVS     r2,#4
000e18  a1e4              ADR      r1,|L1.4524|
000e1a  48e5              LDR      r0,|L1.4528|
000e1c  9400              STR      r4,[sp,#0]
000e1e  f7fffffe          BL       SetAddr
;;;562    	SetAddr((void*)&pC,			"pC",			4,rw,NoHandle);	
000e22  2300              MOVS     r3,#0
000e24  2204              MOVS     r2,#4
000e26  a1e3              ADR      r1,|L1.4532|
000e28  48e3              LDR      r0,|L1.4536|
000e2a  9400              STR      r4,[sp,#0]
000e2c  f7fffffe          BL       SetAddr
;;;563    	SetAddr((void*)&pD,			"pD",			4,rw,NoHandle);	
000e30  2300              MOVS     r3,#0
000e32  2204              MOVS     r2,#4
000e34  a1e1              ADR      r1,|L1.4540|
000e36  48e2              LDR      r0,|L1.4544|
000e38  9400              STR      r4,[sp,#0]
000e3a  f7fffffe          BL       SetAddr
;;;564    
;;;565    	SetNewGroup();
000e3e  f7fffffe          BL       SetNewGroup
;;;566    	// минимальная скорость пиления
;;;567    	SetAddr((void*)&fmvc.Vmin,		"fmvc.Vmin",			4,rw,NoHandle);	
000e42  2300              MOVS     r3,#0
000e44  2204              MOVS     r2,#4
000e46  a1df              ADR      r1,|L1.4548|
000e48  48e1              LDR      r0,|L1.4560|
000e4a  9400              STR      r4,[sp,#0]
000e4c  f7fffffe          BL       SetAddr
;;;568    	// ускорение
;;;569    	SetAddr((void*)&fmvc.Vaccel,	"fmvc.Vaccel",		4,rw,NoHandle);	
000e50  48df              LDR      r0,|L1.4560|
000e52  2300              MOVS     r3,#0
000e54  2204              MOVS     r2,#4
000e56  a1df              ADR      r1,|L1.4564|
000e58  1d00              ADDS     r0,r0,#4
000e5a  9400              STR      r4,[sp,#0]
000e5c  f7fffffe          BL       SetAddr
;;;570    	// множитель
;;;571    	SetAddr((void*)&fmvc.Vmul,		"fmvc.Vmul",			4,rw,NoHandle);	
000e60  48db              LDR      r0,|L1.4560|
000e62  2300              MOVS     r3,#0
000e64  2204              MOVS     r2,#4
000e66  a1de              ADR      r1,|L1.4576|
000e68  3008              ADDS     r0,r0,#8
000e6a  9400              STR      r4,[sp,#0]
000e6c  f7fffffe          BL       SetAddr
;;;572    	// высота датчика в мм
;;;573    	SetAddr((void*)&pHdat,			"pHdat",			4,rw,NoHandle);	
000e70  2300              MOVS     r3,#0
000e72  2204              MOVS     r2,#4
000e74  a1dd              ADR      r1,|L1.4588|
000e76  48df              LDR      r0,|L1.4596|
000e78  9400              STR      r4,[sp,#0]
000e7a  f7fffffe          BL       SetAddr
;;;574    	//траекторный угол
;;;575    	SetAddr((void*)&pTrAngle,"pTrAngle"	,sizeof (*pTrAngle),rw,NoHandle);
000e7e  2300              MOVS     r3,#0
000e80  2204              MOVS     r2,#4
000e82  a1dd              ADR      r1,|L1.4600|
000e84  48df              LDR      r0,|L1.4612|
000e86  9400              STR      r4,[sp,#0]
000e88  f7fffffe          BL       SetAddr
;;;576    	// время разгона шпинделя
;;;577    	SetAddr((void*)&pRunSpPause,	"pRunSpPause",			4,rw,NoHandle);	
000e8c  2300              MOVS     r3,#0
000e8e  2204              MOVS     r2,#4
000e90  a1dd              ADR      r1,|L1.4616|
000e92  48e0              LDR      r0,|L1.4628|
000e94  9400              STR      r4,[sp,#0]
000e96  f7fffffe          BL       SetAddr
;;;578    
;;;579    	// настройка обмена по 485
;;;580    	SetNewGroup();
000e9a  f7fffffe          BL       SetNewGroup
;;;581    	// разрешение на использование пульта по RS-485
;;;582    	SetAddr((void*)&pUsesKP485, "pUsesKP485", 	1,rw,NoHandle);
000e9e  2300              MOVS     r3,#0
000ea0  2201              MOVS     r2,#1
000ea2  a1dd              ADR      r1,|L1.4632|
000ea4  48df              LDR      r0,|L1.4644|
000ea6  9400              STR      r4,[sp,#0]
000ea8  f7fffffe          BL       SetAddr
;;;583    	// адрес пульта
;;;584    	SetAddr((void*)&pAddrKPCtrl, "pAddrKPCtrl",			1,rw,NoHandle);// по идее нужен обработчик чтобы избежать конфликтов адресов 
000eac  2300              MOVS     r3,#0
000eae  2201              MOVS     r2,#1
000eb0  a1dd              ADR      r1,|L1.4648|
000eb2  48e0              LDR      r0,|L1.4660|
000eb4  9400              STR      r4,[sp,#0]
000eb6  f7fffffe          BL       SetAddr
;;;585    	// максимальное количество сбоев до выдачи неисправности
;;;586    	SetAddr((void*)&pKP_NA_Max, "pKP_NA_Max",			1,rw,NoHandle);
000eba  489e              LDR      r0,|L1.4404|
000ebc  2300              MOVS     r3,#0
000ebe  2201              MOVS     r2,#1
000ec0  a1dd              ADR      r1,|L1.4664|
000ec2  3810              SUBS     r0,r0,#0x10
000ec4  9400              STR      r4,[sp,#0]
000ec6  f7fffffe          BL       SetAddr
;;;587    	
;;;588    	SetNewGroup();
000eca  f7fffffe          BL       SetNewGroup
;;;589    	// интервал опроса пульта в режиме стоп
;;;590    	SetAddr((void*)&pIntKPCtrl, "pIntKPCtrl",			2,rw,NoHandle);
000ece  4899              LDR      r0,|L1.4404|
000ed0  2300              MOVS     r3,#0
000ed2  2202              MOVS     r2,#2
000ed4  a1db              ADR      r1,|L1.4676|
000ed6  3818              SUBS     r0,r0,#0x18
000ed8  9400              STR      r4,[sp,#0]
000eda  f7fffffe          BL       SetAddr
;;;591    	// интервал опроса пульта в режиме пуск
;;;592    	SetAddr((void*)&pIntKPCtrlStop, "pIntKPCtrlStop",			2,rw,NoHandle);
000ede  4895              LDR      r0,|L1.4404|
000ee0  2300              MOVS     r3,#0
000ee2  2202              MOVS     r2,#2
000ee4  a1da              ADR      r1,|L1.4688|
000ee6  3814              SUBS     r0,r0,#0x14
000ee8  9400              STR      r4,[sp,#0]
000eea  f7fffffe          BL       SetAddr
;;;593    	// таймаут ожидания в мс 
;;;594    	SetAddr((void*)&pQUTimeout, 	"pQUTimeout",			2,rw,NoHandle);
000eee  4891              LDR      r0,|L1.4404|
000ef0  2300              MOVS     r3,#0
000ef2  2202              MOVS     r2,#2
000ef4  a1da              ADR      r1,|L1.4704|
000ef6  3898              SUBS     r0,r0,#0x98
000ef8  9400              STR      r4,[sp,#0]
000efa  f7fffffe          BL       SetAddr
;;;595    	// количество повторов
;;;596    	SetAddr((void*)&pQURepCount, 	"pQURepCount",			1,rw,NoHandle);
000efe  488d              LDR      r0,|L1.4404|
000f00  2300              MOVS     r3,#0
000f02  2201              MOVS     r2,#1
000f04  a1d9              ADR      r1,|L1.4716|
000f06  389c              SUBS     r0,r0,#0x9c
000f08  9400              STR      r4,[sp,#0]
000f0a  f7fffffe          BL       SetAddr
;;;597    
;;;598    	SetNewGroup();
000f0e  f7fffffe          BL       SetNewGroup
;;;599    	// Pos остается без изменений после загрузки
;;;600    	SetAddr((void*)&ms_X.Pos,		"ms_X.Pos",			4,ro,NoHandle);
000f12  2301              MOVS     r3,#1
000f14  2204              MOVS     r2,#4
000f16  a1d8              ADR      r1,|L1.4728|
000f18  48da              LDR      r0,|L1.4740|
000f1a  9400              STR      r4,[sp,#0]
000f1c  f7fffffe          BL       SetAddr
;;;601    	SetAddr((void*)&ms_Y.Pos,		"ms_Y.Pos",			4,ro,NoHandle);
000f20  2301              MOVS     r3,#1
000f22  2204              MOVS     r2,#4
000f24  a1d8              ADR      r1,|L1.4744|
000f26  48db              LDR      r0,|L1.4756|
000f28  9400              STR      r4,[sp,#0]
000f2a  f7fffffe          BL       SetAddr
;;;602    	SetAddr((void*)&ms_Z.Pos,		"ms_Z.Pos",			4,ro,NoHandle);
000f2e  2301              MOVS     r3,#1
000f30  2204              MOVS     r2,#4
000f32  a1d9              ADR      r1,|L1.4760|
000f34  48db              LDR      r0,|L1.4772|
000f36  9400              STR      r4,[sp,#0]
000f38  f7fffffe          BL       SetAddr
;;;603    	SetAddr((void*)&pPrgRun,	"pPrgRun",			 	1,rw,PrgRunHandleFrz);
000f3c  f6af30a5          ADR      r0,PrgRunHandleFrz + 1
000f40  9000              STR      r0,[sp,#0]
000f42  2300              MOVS     r3,#0
000f44  2201              MOVS     r2,#1
000f46  a1d8              ADR      r1,|L1.4776|
000f48  48d9              LDR      r0,|L1.4784|
000f4a  f7fffffe          BL       SetAddr
;;;604    	SetAddr((void*)&pCurCadr,		"pCurCadr",		 	4,rw,pCurCadrHandleFrz);
000f4e  f6af7041          ADR      r0,pCurCadrHandleFrz + 1
000f52  9000              STR      r0,[sp,#0]
000f54  2300              MOVS     r3,#0
000f56  2204              MOVS     r2,#4
000f58  a1d6              ADR      r1,|L1.4788|
000f5a  48d9              LDR      r0,|L1.4800|
000f5c  f7fffffe          BL       SetAddr
;;;605    	SetAddr((void*)&pNumReadLine,		"pNumReadLine",		 	4,ro,NoHandle);
000f60  2301              MOVS     r3,#1
000f62  2204              MOVS     r2,#4
000f64  a1d7              ADR      r1,|L1.4804|
000f66  48db              LDR      r0,|L1.4820|
000f68  9400              STR      r4,[sp,#0]
000f6a  f7fffffe          BL       SetAddr
;;;606    	// остается без изменений после ЗП
;;;607    	SetAddr((void*)&pRCS,		"pRCS"					,1,rw,NoHandle);
000f6e  2300              MOVS     r3,#0
000f70  2201              MOVS     r2,#1
000f72  a1d9              ADR      r1,|L1.4824|
000f74  48da              LDR      r0,|L1.4832|
000f76  9400              STR      r4,[sp,#0]
000f78  f7fffffe          BL       SetAddr
;;;608    	// скорость резки в мм в сек
;;;609    	SetAddr((void*)&fmvs.Vc,			"fmvs.Vc",			4,ro,NoHandle);	
000f7c  2301              MOVS     r3,#1
000f7e  2204              MOVS     r2,#4
000f80  a1d8              ADR      r1,|L1.4836|
000f82  48da              LDR      r0,|L1.4844|
000f84  9400              STR      r4,[sp,#0]
000f86  f7fffffe          BL       SetAddr
;;;610    	// скорость резки в мм в сек
;;;611    	SetAddr((void*)&fmvc.V,			"fmvc.V",			4,rw,mvcVHandleFrz);	
000f8a  f6af30d3          ADR      r0,mvcVHandleFrz + 1
000f8e  9000              STR      r0,[sp,#0]
000f90  488f              LDR      r0,|L1.4560|
000f92  2300              MOVS     r3,#0
000f94  2204              MOVS     r2,#4
000f96  a1d6              ADR      r1,|L1.4848|
000f98  1f00              SUBS     r0,r0,#4
000f9a  f7fffffe          BL       SetAddr
;;;612    	// аварийные флаги
;;;613    	SetAddr((void*)&pCrushWater,"pCrushWater",			1,rw,NoHandle);	
000f9e  4865              LDR      r0,|L1.4404|
000fa0  2300              MOVS     r3,#0
000fa2  2201              MOVS     r2,#1
000fa4  a1d4              ADR      r1,|L1.4856|
000fa6  38a0              SUBS     r0,r0,#0xa0
000fa8  9400              STR      r4,[sp,#0]
000faa  f7fffffe          BL       SetAddr
;;;614    	// связь с устройствами линии RS-485
;;;615    	SetAddr((void*)&pLinkKP,"pLinkKP",			1,ro,NoHandle);	
000fae  4861              LDR      r0,|L1.4404|
000fb0  2301              MOVS     r3,#1
000fb2  461a              MOV      r2,r3
000fb4  a1d3              ADR      r1,|L1.4868|
000fb6  380c              SUBS     r0,r0,#0xc
000fb8  9400              STR      r4,[sp,#0]
000fba  f7fffffe          BL       SetAddr
;;;616    	SetAddr((void*)&pCorrStop,"pCorrStop",			1,ro,NoHandle);	
000fbe  485d              LDR      r0,|L1.4404|
000fc0  2301              MOVS     r3,#1
000fc2  461a              MOV      r2,r3
000fc4  a1d1              ADR      r1,|L1.4876|
000fc6  3808              SUBS     r0,r0,#8
000fc8  9400              STR      r4,[sp,#0]
000fca  f7fffffe          BL       SetAddr
;;;617    	SetAddr((void*)&pRecoverBlock,"pRecoverBlock",			1,ro,NoHandle);	
000fce  4859              LDR      r0,|L1.4404|
000fd0  2301              MOVS     r3,#1
000fd2  461a              MOV      r2,r3
000fd4  a1d0              ADR      r1,|L1.4888|
000fd6  1f00              SUBS     r0,r0,#4
000fd8  9400              STR      r4,[sp,#0]
000fda  f7fffffe          BL       SetAddr
;;;618    	SetAddr((void*)&pfZcomp,"pfZcomp",			1,ro,NoHandle);	
000fde  2301              MOVS     r3,#1
000fe0  461a              MOV      r2,r3
000fe2  a1d1              ADR      r1,|L1.4904|
000fe4  48d2              LDR      r0,|L1.4912|
000fe6  9400              STR      r4,[sp,#0]
000fe8  f7fffffe          BL       SetAddr
;;;619    	
;;;620    	SetNewGroup();
000fec  f7fffffe          BL       SetNewGroup
;;;621    	SetAddr((void*)&pPrgFileName,"pPrgFileName"	,sizeof (*pPrgFileName),rw,NoHandle);
000ff0  2300              MOVS     r3,#0
000ff2  2214              MOVS     r2,#0x14
000ff4  a1cf              ADR      r1,|L1.4916|
000ff6  48d3              LDR      r0,|L1.4932|
000ff8  9400              STR      r4,[sp,#0]
000ffa  f7fffffe          BL       SetAddr
;;;622    	SetAddr((void*)&pPrgFileHandle,"pPrgFileHandle"	,sizeof (*pPrgFileHandle),rw,NoHandle);
000ffe  2300              MOVS     r3,#0
001000  2201              MOVS     r2,#1
001002  a1d1              ADR      r1,|L1.4936|
001004  48d4              LDR      r0,|L1.4952|
001006  9400              STR      r4,[sp,#0]
001008  f7fffffe          BL       SetAddr
;;;623    	SetAddr((void*)&pPrgLineCount,"pPrgLineCount"	,sizeof (*pPrgLineCount),rw,NoHandle);
00100c  2300              MOVS     r3,#0
00100e  2204              MOVS     r2,#4
001010  a1d2              ADR      r1,|L1.4956|
001012  48d6              LDR      r0,|L1.4972|
001014  9400              STR      r4,[sp,#0]
001016  f7fffffe          BL       SetAddr
;;;624    	SetAddr((void*)&pWF_CRC,"pWF_CRC"	,2,rw,NoHandle);
00101a  2300              MOVS     r3,#0
00101c  2202              MOVS     r2,#2
00101e  a1d4              ADR      r1,|L1.4976|
001020  48d5              LDR      r0,|L1.4984|
001022  9400              STR      r4,[sp,#0]
001024  f7fffffe          BL       SetAddr
;;;625    	
;;;626    	
;;;627    	
;;;628    	SetNewGroup();
001028  f7fffffe          BL       SetNewGroup
;;;629    	// задержка анти дребезга
;;;630    	SetAddr((void*)&pDrDelay, 	"pDrDelay",			2,	rw,pDrDelayHandle);
00102c  f6af70ff          ADR      r0,pDrDelayHandle + 1
001030  9000              STR      r0,[sp,#0]
001032  2300              MOVS     r3,#0
001034  2202              MOVS     r2,#2
001036  a1d1              ADR      r1,|L1.4988|
001038  48d3              LDR      r0,|L1.5000|
00103a  f7fffffe          BL       SetAddr
;;;631    	// время DoubleClick в 0,01 с 
;;;632    	SetAddr((void*)&pDCTime, "pDCTime",		2,	rw,pDCTimeHandle);
00103e  f6af70e1          ADR      r0,pDCTimeHandle + 1
001042  9000              STR      r0,[sp,#0]
001044  2300              MOVS     r3,#0
001046  2202              MOVS     r2,#2
001048  a1d0              ADR      r1,|L1.5004|
00104a  48d2              LDR      r0,|L1.5012|
00104c  f7fffffe          BL       SetAddr
;;;633    	// минимальное значение скорости в процентах
;;;634    	SetAddr((void*)&pPercVmin, 	"pPercVmin",	2,	rw,pPercVminHandle);
001050  f6af70c7          ADR      r0,pPercVminHandle + 1
001054  9000              STR      r0,[sp,#0]
001056  2300              MOVS     r3,#0
001058  2202              MOVS     r2,#2
00105a  a1cf              ADR      r1,|L1.5016|
00105c  48d1              LDR      r0,|L1.5028|
00105e  f7fffffe          BL       SetAddr
;;;635    	// регистры управления движением -100 +100
;;;636    	SetAddr((void*)&pYmove, 		"pYmove"	, 	2,	rw,NoHandle);
001062  2300              MOVS     r3,#0
001064  2202              MOVS     r2,#2
001066  a1d0              ADR      r1,|L1.5032|
001068  48d1              LDR      r0,|L1.5040|
00106a  9400              STR      r4,[sp,#0]
00106c  f7fffffe          BL       SetAddr
;;;637    	SetAddr((void*)&pZmove,		"pZmove"	, 	2,	rw,NoHandle);
001070  2300              MOVS     r3,#0
001072  2202              MOVS     r2,#2
001074  a1cf              ADR      r1,|L1.5044|
001076  48d1              LDR      r0,|L1.5052|
001078  9400              STR      r4,[sp,#0]
00107a  f7fffffe          BL       SetAddr
;;;638    	SetAddr((void*)&pXmove,			"pXmove"	, 	2,	rw,NoHandle);
00107e  2300              MOVS     r3,#0
001080  2202              MOVS     r2,#2
001082  a1cf              ADR      r1,|L1.5056|
001084  48d0              LDR      r0,|L1.5064|
001086  9400              STR      r4,[sp,#0]
001088  f7fffffe          BL       SetAddr
;;;639    	SetAddr((void*)&pUnusedmove,		"pUnusedmove"	, 	2,	rw,NoHandle);
00108c  2300              MOVS     r3,#0
00108e  2202              MOVS     r2,#2
001090  a1ce              ADR      r1,|L1.5068|
001092  48d1              LDR      r0,|L1.5080|
001094  9400              STR      r4,[sp,#0]
001096  f7fffffe          BL       SetAddr
;;;640    	// 5 кнопка 0 100
;;;641    	SetAddr((void*)&pBtn5,			"pBtn5"		, 	2,	rw,NoHandle);
00109a  2300              MOVS     r3,#0
00109c  2202              MOVS     r2,#2
00109e  a1cf              ADR      r1,|L1.5084|
0010a0  48d0              LDR      r0,|L1.5092|
0010a2  9400              STR      r4,[sp,#0]
0010a4  f7fffffe          BL       SetAddr
;;;642    // переключение осей 0 или 100 по кнопке 6
;;;643    	SetAddr((void*)&pAxisSwitch,	"pAxisSwitch", 	2,	rw,NoHandle);
0010a8  2300              MOVS     r3,#0
0010aa  2202              MOVS     r2,#2
0010ac  a1ce              ADR      r1,|L1.5096|
0010ae  48d1              LDR      r0,|L1.5108|
0010b0  9400              STR      r4,[sp,#0]
0010b2  f7fffffe          BL       SetAddr
;;;644    // пищалка
;;;645    	SetAddr((void*)&pBUZZ,			"pBUZZ", 	2,	rw,NoHandle);	
0010b6  2300              MOVS     r3,#0
0010b8  2202              MOVS     r2,#2
0010ba  a1cf              ADR      r1,|L1.5112|
0010bc  48d0              LDR      r0,|L1.5120|
0010be  9400              STR      r4,[sp,#0]
0010c0  f7fffffe          BL       SetAddr
;;;646    
;;;647    	SetNewGroup();
0010c4  f7fffffe          BL       SetNewGroup
;;;648    // логирование правильно полученных квитанций по RS-485
;;;649    	SetAddr((void*)&pACmdDump, 		"pACmdDump",			1,rw,NoHandle);
0010c8  481a              LDR      r0,|L1.4404|
0010ca  2300              MOVS     r3,#0
0010cc  2201              MOVS     r2,#1
0010ce  a1cd              ADR      r1,|L1.5124|
0010d0  3894              SUBS     r0,r0,#0x94
0010d2  9400              STR      r4,[sp,#0]
0010d4  f7fffffe          BL       SetAddr
;;;650    	SetAddr((void*)&pAMsg,			"pAMsg",			1,rw,NoHandle);
0010d8  4816              LDR      r0,|L1.4404|
0010da  2300              MOVS     r3,#0
0010dc  2201              MOVS     r2,#1
0010de  a1cc              ADR      r1,|L1.5136|
0010e0  3890              SUBS     r0,r0,#0x90
0010e2  9400              STR      r4,[sp,#0]
0010e4  f7fffffe          BL       SetAddr
;;;651    	SetAddr((void*)&pAAnswDump, 	"pAAnswDump",			1,rw,NoHandle);
0010e8  4812              LDR      r0,|L1.4404|
0010ea  2300              MOVS     r3,#0
0010ec  2201              MOVS     r2,#1
0010ee  a1ca              ADR      r1,|L1.5144|
0010f0  388c              SUBS     r0,r0,#0x8c
0010f2  9400              STR      r4,[sp,#0]
0010f4  f7fffffe          BL       SetAddr
;;;652    // логирование ошибочных квитанций по RS-485
;;;653    	SetAddr((void*)&pAECmdDump, 	"pAECmdDump",			1,rw,NoHandle);
0010f8  480e              LDR      r0,|L1.4404|
0010fa  2300              MOVS     r3,#0
0010fc  2201              MOVS     r2,#1
0010fe  a1c9              ADR      r1,|L1.5156|
001100  3888              SUBS     r0,r0,#0x88
001102  9400              STR      r4,[sp,#0]
001104  f7fffffe          BL       SetAddr
;;;654    	SetAddr((void*)&pAEMsg, 		"pAEMsg",			1,rw,NoHandle);
001108  480a              LDR      r0,|L1.4404|
00110a  2300              MOVS     r3,#0
00110c  2201              MOVS     r2,#1
00110e  a1c8              ADR      r1,|L1.5168|
001110  3884              SUBS     r0,r0,#0x84
001112  9400              STR      r4,[sp,#0]
001114  f7fffffe          BL       SetAddr
;;;655    	SetAddr((void*)&pAEAnswDump, 	"pAEAnswDump",			1,rw,NoHandle);
001118  4806              LDR      r0,|L1.4404|
00111a  2300              MOVS     r3,#0
00111c  2201              MOVS     r2,#1
00111e  a1c6              ADR      r1,|L1.5176|
001120  3880              SUBS     r0,r0,#0x80
001122  9400              STR      r4,[sp,#0]
001124  f7fffffe          BL       SetAddr
;;;656    // логирование не полученных квитанций
;;;657    	SetAddr((void*)&pANCmdDump, 	"pANCmdDump",			1,rw,NoHandle);
001128  2300              MOVS     r3,#0
00112a  e18b              B        |L1.5188|
                  |L1.4396|
00112c  70485443          DCB      "pHTCorr",0
001130  6f727200
                  |L1.4404|
                          DCD      ||.data||+0xb0
                  |L1.4408|
001138  705a5a65          DCB      "pZZeroDat",0
00113c  726f4461
001140  7400    
001142  00                DCB      0
001143  00                DCB      0
                  |L1.4420|
001144  6458506f          DCB      "dXPos",0
001148  7300    
00114a  00                DCB      0
00114b  00                DCB      0
                  |L1.4428|
00114c  6459506f          DCB      "dYPos",0
001150  7300    
001152  00                DCB      0
001153  00                DCB      0
                  |L1.4436|
001154  645a506f          DCB      "dZPos",0
001158  7300    
00115a  00                DCB      0
00115b  00                DCB      0
                  |L1.4444|
00115c  70583100          DCB      "pX1",0
                  |L1.4448|
                          DCD      pX1
                  |L1.4452|
001164  70593100          DCB      "pY1",0
                  |L1.4456|
                          DCD      pY1
                  |L1.4460|
00116c  705a3100          DCB      "pZ1",0
                  |L1.4464|
                          DCD      pZ1
                  |L1.4468|
001174  70583200          DCB      "pX2",0
                  |L1.4472|
                          DCD      pX2
                  |L1.4476|
00117c  70593200          DCB      "pY2",0
                  |L1.4480|
                          DCD      pY2
                  |L1.4484|
001184  705a3200          DCB      "pZ2",0
                  |L1.4488|
                          DCD      pZ2
                  |L1.4492|
00118c  70583300          DCB      "pX3",0
                  |L1.4496|
                          DCD      pX3
                  |L1.4500|
001194  70593300          DCB      "pY3",0
                  |L1.4504|
                          DCD      pY3
                  |L1.4508|
00119c  705a3300          DCB      "pZ3",0
                  |L1.4512|
                          DCD      pZ3
                  |L1.4516|
0011a4  704100            DCB      "pA",0
0011a7  00                DCB      0
                  |L1.4520|
                          DCD      ||pA||
                  |L1.4524|
0011ac  704200            DCB      "pB",0
0011af  00                DCB      0
                  |L1.4528|
                          DCD      ||pB||
                  |L1.4532|
0011b4  704300            DCB      "pC",0
0011b7  00                DCB      0
                  |L1.4536|
                          DCD      ||pC||
                  |L1.4540|
0011bc  704400            DCB      "pD",0
0011bf  00                DCB      0
                  |L1.4544|
                          DCD      ||pD||
                  |L1.4548|
0011c4  666d7663          DCB      "fmvc.Vmin",0
0011c8  2e566d69
0011cc  6e00    
0011ce  00                DCB      0
0011cf  00                DCB      0
                  |L1.4560|
                          DCD      fmvc+0x8
                  |L1.4564|
0011d4  666d7663          DCB      "fmvc.Vaccel",0
0011d8  2e566163
0011dc  63656c00
                  |L1.4576|
0011e0  666d7663          DCB      "fmvc.Vmul",0
0011e4  2e566d75
0011e8  6c00    
0011ea  00                DCB      0
0011eb  00                DCB      0
                  |L1.4588|
0011ec  70486461          DCB      "pHdat",0
0011f0  7400    
0011f2  00                DCB      0
0011f3  00                DCB      0
                  |L1.4596|
                          DCD      pHdat
                  |L1.4600|
0011f8  70547241          DCB      "pTrAngle",0
0011fc  6e676c65
001200  00      
001201  00                DCB      0
001202  00                DCB      0
001203  00                DCB      0
                  |L1.4612|
                          DCD      pTrAngle
                  |L1.4616|
001208  7052756e          DCB      "pRunSpPause",0
00120c  53705061
001210  75736500
                  |L1.4628|
                          DCD      pRunSpPause
                  |L1.4632|
001218  70557365          DCB      "pUsesKP485",0
00121c  734b5034
001220  383500  
001223  00                DCB      0
                  |L1.4644|
                          DCD      pUsesKP485
                  |L1.4648|
001228  70416464          DCB      "pAddrKPCtrl",0
00122c  724b5043
001230  74726c00
                  |L1.4660|
                          DCD      pAddrKPCtrl
                  |L1.4664|
001238  704b505f          DCB      "pKP_NA_Max",0
00123c  4e415f4d
001240  617800  
001243  00                DCB      0
                  |L1.4676|
001244  70496e74          DCB      "pIntKPCtrl",0
001248  4b504374
00124c  726c00  
00124f  00                DCB      0
                  |L1.4688|
001250  70496e74          DCB      "pIntKPCtrlStop",0
001254  4b504374
001258  726c5374
00125c  6f7000  
00125f  00                DCB      0
                  |L1.4704|
001260  70515554          DCB      "pQUTimeout",0
001264  696d656f
001268  757400  
00126b  00                DCB      0
                  |L1.4716|
00126c  70515552          DCB      "pQURepCount",0
001270  6570436f
001274  756e7400
                  |L1.4728|
001278  6d735f58          DCB      "ms_X.Pos",0
00127c  2e506f73
001280  00      
001281  00                DCB      0
001282  00                DCB      0
001283  00                DCB      0
                  |L1.4740|
                          DCD      ms_X+0x8
                  |L1.4744|
001288  6d735f59          DCB      "ms_Y.Pos",0
00128c  2e506f73
001290  00      
001291  00                DCB      0
001292  00                DCB      0
001293  00                DCB      0
                  |L1.4756|
                          DCD      ms_Y+0x8
                  |L1.4760|
001298  6d735f5a          DCB      "ms_Z.Pos",0
00129c  2e506f73
0012a0  00      
0012a1  00                DCB      0
0012a2  00                DCB      0
0012a3  00                DCB      0
                  |L1.4772|
                          DCD      ms_Z+0x8
                  |L1.4776|
0012a8  70507267          DCB      "pPrgRun",0
0012ac  52756e00
                  |L1.4784|
                          DCD      pPrgRun
                  |L1.4788|
0012b4  70437572          DCB      "pCurCadr",0
0012b8  43616472
0012bc  00      
0012bd  00                DCB      0
0012be  00                DCB      0
0012bf  00                DCB      0
                  |L1.4800|
                          DCD      pCurCadr
                  |L1.4804|
0012c4  704e756d          DCB      "pNumReadLine",0
0012c8  52656164
0012cc  4c696e65
0012d0  00      
0012d1  00                DCB      0
0012d2  00                DCB      0
0012d3  00                DCB      0
                  |L1.4820|
                          DCD      pNumReadLine
                  |L1.4824|
0012d8  70524353          DCB      "pRCS",0
0012dc  00      
0012dd  00                DCB      0
0012de  00                DCB      0
0012df  00                DCB      0
                  |L1.4832|
                          DCD      pRCS
                  |L1.4836|
0012e4  666d7673          DCB      "fmvs.Vc",0
0012e8  2e566300
                  |L1.4844|
                          DCD      fmvs+0xc
                  |L1.4848|
0012f0  666d7663          DCB      "fmvc.V",0
0012f4  2e5600  
0012f7  00                DCB      0
                  |L1.4856|
0012f8  70437275          DCB      "pCrushWater",0
0012fc  73685761
001300  74657200
                  |L1.4868|
001304  704c696e          DCB      "pLinkKP",0
001308  6b4b5000
                  |L1.4876|
00130c  70436f72          DCB      "pCorrStop",0
001310  7253746f
001314  7000    
001316  00                DCB      0
001317  00                DCB      0
                  |L1.4888|
001318  70526563          DCB      "pRecoverBlock",0
00131c  6f766572
001320  426c6f63
001324  6b00    
001326  00                DCB      0
001327  00                DCB      0
                  |L1.4904|
001328  70665a63          DCB      "pfZcomp",0
00132c  6f6d7000
                  |L1.4912|
                          DCD      pfZcomp
                  |L1.4916|
001334  70507267          DCB      "pPrgFileName",0
001338  46696c65
00133c  4e616d65
001340  00      
001341  00                DCB      0
001342  00                DCB      0
001343  00                DCB      0
                  |L1.4932|
                          DCD      pPrgFileName
                  |L1.4936|
001348  70507267          DCB      "pPrgFileHandle",0
00134c  46696c65
001350  48616e64
001354  6c6500  
001357  00                DCB      0
                  |L1.4952|
                          DCD      pPrgFileHandle
                  |L1.4956|
00135c  70507267          DCB      "pPrgLineCount",0
001360  4c696e65
001364  436f756e
001368  7400    
00136a  00                DCB      0
00136b  00                DCB      0
                  |L1.4972|
                          DCD      pPrgLineCount
                  |L1.4976|
001370  7057465f          DCB      "pWF_CRC",0
001374  43524300
                  |L1.4984|
                          DCD      pWF_CRC
                  |L1.4988|
00137c  70447244          DCB      "pDrDelay",0
001380  656c6179
001384  00      
001385  00                DCB      0
001386  00                DCB      0
001387  00                DCB      0
                  |L1.5000|
                          DCD      pDrDelay
                  |L1.5004|
00138c  70444354          DCB      "pDCTime",0
001390  696d6500
                  |L1.5012|
                          DCD      pDCTime
                  |L1.5016|
001398  70506572          DCB      "pPercVmin",0
00139c  63566d69
0013a0  6e00    
0013a2  00                DCB      0
0013a3  00                DCB      0
                  |L1.5028|
                          DCD      pPercVmin
                  |L1.5032|
0013a8  70596d6f          DCB      "pYmove",0
0013ac  766500  
0013af  00                DCB      0
                  |L1.5040|
                          DCD      pYmove
                  |L1.5044|
0013b4  705a6d6f          DCB      "pZmove",0
0013b8  766500  
0013bb  00                DCB      0
                  |L1.5052|
                          DCD      pZmove
                  |L1.5056|
0013c0  70586d6f          DCB      "pXmove",0
0013c4  766500  
0013c7  00                DCB      0
                  |L1.5064|
                          DCD      pXmove
                  |L1.5068|
0013cc  70556e75          DCB      "pUnusedmove",0
0013d0  7365646d
0013d4  6f766500
                  |L1.5080|
                          DCD      pUnusedmove
                  |L1.5084|
0013dc  7042746e          DCB      "pBtn5",0
0013e0  3500    
0013e2  00                DCB      0
0013e3  00                DCB      0
                  |L1.5092|
                          DCD      pBtn5
                  |L1.5096|
0013e8  70417869          DCB      "pAxisSwitch",0
0013ec  73537769
0013f0  74636800
                  |L1.5108|
                          DCD      pAxisSwitch
                  |L1.5112|
0013f8  7042555a          DCB      "pBUZZ",0
0013fc  5a00    
0013fe  00                DCB      0
0013ff  00                DCB      0
                  |L1.5120|
                          DCD      pBUZZ
                  |L1.5124|
001404  7041436d          DCB      "pACmdDump",0
001408  6444756d
00140c  7000    
00140e  00                DCB      0
00140f  00                DCB      0
                  |L1.5136|
001410  70414d73          DCB      "pAMsg",0
001414  6700    
001416  00                DCB      0
001417  00                DCB      0
                  |L1.5144|
001418  7041416e          DCB      "pAAnswDump",0
00141c  73774475
001420  6d7000  
001423  00                DCB      0
                  |L1.5156|
001424  70414543          DCB      "pAECmdDump",0
001428  6d644475
00142c  6d7000  
00142f  00                DCB      0
                  |L1.5168|
001430  7041454d          DCB      "pAEMsg",0
001434  736700  
001437  00                DCB      0
                  |L1.5176|
001438  70414541          DCB      "pAEAnswDump",0
00143c  6e737744
001440  756d7000
                  |L1.5188|
001444  2201              MOVS     r2,#1
001446  a1fc              ADR      r1,|L1.6200|
001448  48fe              LDR      r0,|L1.6212|
00144a  9400              STR      r4,[sp,#0]
00144c  f7fffffe          BL       SetAddr
;;;658    	SetAddr((void*)&pANMsg, 		"pANMsg",			1,rw,NoHandle);
001450  48fc              LDR      r0,|L1.6212|
001452  2300              MOVS     r3,#0
001454  2201              MOVS     r2,#1
001456  a1fc              ADR      r1,|L1.6216|
001458  1d00              ADDS     r0,r0,#4
00145a  9400              STR      r4,[sp,#0]
00145c  f7fffffe          BL       SetAddr
;;;659    // логирование ошибок контрольной суммы UART1
;;;660    	SetAddr((void*)&pErrCSU1, 		"pErrCSU1",			1,rw,NoHandle);
001460  48f8              LDR      r0,|L1.6212|
001462  2300              MOVS     r3,#0
001464  2201              MOVS     r2,#1
001466  a1fa              ADR      r1,|L1.6224|
001468  3008              ADDS     r0,r0,#8
00146a  9400              STR      r4,[sp,#0]
00146c  f7fffffe          BL       SetAddr
;;;661    // логирование пропуска команд на постановку в очередь
;;;662    	SetAddr((void*)&pDropCmd, 		"pDropCmd",			1,rw,NoHandle);
001470  48f4              LDR      r0,|L1.6212|
001472  2300              MOVS     r3,#0
001474  2201              MOVS     r2,#1
001476  a1f9              ADR      r1,|L1.6236|
001478  300c              ADDS     r0,r0,#0xc
00147a  9400              STR      r4,[sp,#0]
00147c  f7fffffe          BL       SetAddr
;;;663    
;;;664    	SetNewGroup();
001480  f7fffffe          BL       SetNewGroup
;;;665    	// остается без изменений после ЗП
;;;666    	SetAddr((void*)&pBlock,		"pBlock"				,sizeof (*pBlock),ro,NoHandle);
001484  2301              MOVS     r3,#1
001486  22e8              MOVS     r2,#0xe8
001488  a1f7              ADR      r1,|L1.6248|
00148a  48f9              LDR      r0,|L1.6256|
00148c  9400              STR      r4,[sp,#0]
00148e  f7fffffe          BL       SetAddr
;;;667    //	SetAddr((void*)&eb,		"pBlock"				,sizeof (*pBlock),ro,NoHandle);
;;;668    	// контур заготовки
;;;669    	// остается без изменений после ЗП
;;;670    	SetNewGroup();
001492  e8bd4038          POP      {r3-r5,lr}
001496  f7ffbffe          B.W      SetNewGroup
;;;671    //	SetAddr((void*)&pBusy,		"pbusy",			1,rw,NoHandle);
;;;672    //	SetAddr((void*)&psG0,		"psG0",			 	1,rw,NoHandle);
;;;673    //	SetAddr((void*)&pscz,		"pscz",			 	804,rw,NoHandle);
;;;674    
;;;675    }
;;;676    
                          ENDP

                  InitFrzRegisters PROC
;;;677    void InitFrzRegisters (void) {
00149a  e92d41f0          PUSH     {r4-r8,lr}
;;;678    	
;;;679    	// инициализация пинов таблицей по умолчанию
;;;680    	memcpy(pvPins,&vPinsdef,sizeof vPinsdef);
00149e  48f6              LDR      r0,|L1.6264|
0014a0  226c              MOVS     r2,#0x6c
0014a2  49f4              LDR      r1,|L1.6260|
0014a4  6800              LDR      r0,[r0,#0]  ; pvPins
0014a6  f7fffffe          BL       __aeabi_memcpy
;;;681    	// формирование таблицы быстрых пинов
;;;682    	FormQPinTable();
0014aa  f7fffffe          BL       FormQPinTable
;;;683    	// X
;;;684     	// значение ведущей радиальной шестерни
;;;685    	*pX_PG_MM = 120.0; // (мм)
0014ae  4de5              LDR      r5,|L1.6212|
0014b0  4ff2              LDR      r7,|L1.6268|
0014b2  3d34              SUBS     r5,r5,#0x34
;;;686    	// шагов на оборот ведущей шестерни
;;;687    	*pX_SPR = 4000;
0014b4  f44f687a          MOV      r8,#0xfa0
0014b8  6c68              LDR      r0,[r5,#0x44]         ;685  ; pX_PG_MM
;;;688    	*pX_MIN = 0; 
0014ba  2400              MOVS     r4,#0
0014bc  6007              STR      r7,[r0,#0]            ;687
0014be  6ca9              LDR      r1,[r5,#0x48]         ;687  ; pX_SPR
0014c0  f8c18000          STR      r8,[r1,#0]
0014c4  6ce8              LDR      r0,[r5,#0x4c]  ; pX_MIN
;;;689    	// минимальная позиция по X в шагах
;;;690    	vX_MIN_POS = (s32)((*pX_MIN) * ((*pX_SPR)/(*pX_PG_MM))); 
0014c6  6004              STR      r4,[r0,#0]
0014c8  6ca8              LDR      r0,[r5,#0x48]  ; pX_SPR
0014ca  6800              LDR      r0,[r0,#0]
0014cc  f7fffffe          BL       __aeabi_ui2f
0014d0  6c69              LDR      r1,[r5,#0x44]  ; pX_PG_MM
0014d2  6809              LDR      r1,[r1,#0]
0014d4  f7fffffe          BL       __aeabi_fdiv
0014d8  4621              MOV      r1,r4
0014da  f7fffffe          BL       __aeabi_fmul
0014de  f7fffffe          BL       __aeabi_f2iz
;;;691    	// максимальная позиция по радиусу в мм
;;;692    	*pX_MAX = 1500;
0014e2  6568              STR      r0,[r5,#0x54]  ; vX_MIN_POS
0014e4  6d28              LDR      r0,[r5,#0x50]  ; pX_MAX
0014e6  4ee6              LDR      r6,|L1.6272|
;;;693    	// максимальная позиция по X в шагах
;;;694    	vX_MAX_POS = (s32)((*pX_MAX) * ((*pX_SPR)/(*pX_PG_MM))); 
0014e8  6006              STR      r6,[r0,#0]
0014ea  6ca8              LDR      r0,[r5,#0x48]  ; pX_SPR
0014ec  6800              LDR      r0,[r0,#0]
0014ee  f7fffffe          BL       __aeabi_ui2f
0014f2  6c69              LDR      r1,[r5,#0x44]  ; pX_PG_MM
0014f4  6809              LDR      r1,[r1,#0]
0014f6  f7fffffe          BL       __aeabi_fdiv
0014fa  4631              MOV      r1,r6
0014fc  f7fffffe          BL       __aeabi_fmul
001500  f7fffffe          BL       __aeabi_f2iz
;;;695    	// Y
;;;696     	// значение ведущей радиальной шестерни
;;;697    	*pY_PG_MM = 120.0; // (мм)
001504  65a8              STR      r0,[r5,#0x58]  ; vX_MAX_POS
001506  6de8              LDR      r0,[r5,#0x5c]  ; pY_PG_MM
;;;698    	*pY_SPR = 4000;
001508  6007              STR      r7,[r0,#0]
00150a  6e29              LDR      r1,[r5,#0x60]  ; pY_SPR
;;;699    	*pY_MIN = 0; 
00150c  f8c18000          STR      r8,[r1,#0]
001510  6e68              LDR      r0,[r5,#0x64]  ; pY_MIN
;;;700    	vY_MIN_POS = (s32)((*pY_MIN) * ((*pY_SPR)/(*pY_PG_MM))); 
001512  6004              STR      r4,[r0,#0]
001514  6e28              LDR      r0,[r5,#0x60]  ; pY_SPR
001516  6800              LDR      r0,[r0,#0]
001518  f7fffffe          BL       __aeabi_ui2f
00151c  6de9              LDR      r1,[r5,#0x5c]  ; pY_PG_MM
00151e  6809              LDR      r1,[r1,#0]
001520  f7fffffe          BL       __aeabi_fdiv
001524  4621              MOV      r1,r4
001526  f7fffffe          BL       __aeabi_fmul
00152a  f7fffffe          BL       __aeabi_f2iz
;;;701    	*pY_MAX = 1500;
00152e  66e8              STR      r0,[r5,#0x6c]  ; vY_MIN_POS
001530  6ea8              LDR      r0,[r5,#0x68]  ; pY_MAX
;;;702    	// максимальная позиция по X в шагах
;;;703    	vY_MAX_POS = (s32)((*pY_MAX) * ((*pY_SPR)/(*pY_PG_MM))); 
001532  6006              STR      r6,[r0,#0]
001534  6e28              LDR      r0,[r5,#0x60]  ; pY_SPR
001536  6800              LDR      r0,[r0,#0]
001538  f7fffffe          BL       __aeabi_ui2f
00153c  6de9              LDR      r1,[r5,#0x5c]  ; pY_PG_MM
00153e  6809              LDR      r1,[r1,#0]
001540  f7fffffe          BL       __aeabi_fdiv
001544  4631              MOV      r1,r6
001546  f7fffffe          BL       __aeabi_fmul
00154a  f7fffffe          BL       __aeabi_f2iz
;;;704    	// Z
;;;705    	*pZ_PG_MM = 10.0; // (мм)
00154e  6728              STR      r0,[r5,#0x70]  ; vY_MAX_POS
001550  6f69              LDR      r1,[r5,#0x74]  ; pZ_PG_MM
001552  48cc              LDR      r0,|L1.6276|
;;;706    	*pZ_SPR = 400;
001554  6008              STR      r0,[r1,#0]
001556  6fa9              LDR      r1,[r5,#0x78]  ; pZ_SPR
001558  f44f70c8          MOV      r0,#0x190
;;;707    	*pZ_MIN = 0; 
00155c  6008              STR      r0,[r1,#0]
00155e  6fe8              LDR      r0,[r5,#0x7c]  ; pZ_MIN
;;;708    	vZ_MIN_POS = (s32)((*pZ_MIN) * ((*pZ_SPR)/(*pZ_PG_MM))); 
001560  6004              STR      r4,[r0,#0]
001562  6fa8              LDR      r0,[r5,#0x78]  ; pZ_SPR
001564  6800              LDR      r0,[r0,#0]
001566  f7fffffe          BL       __aeabi_ui2f
00156a  6f69              LDR      r1,[r5,#0x74]  ; pZ_PG_MM
00156c  6809              LDR      r1,[r1,#0]
00156e  f7fffffe          BL       __aeabi_fdiv
001572  4621              MOV      r1,r4
001574  f7fffffe          BL       __aeabi_fmul
001578  f7fffffe          BL       __aeabi_f2iz
00157c  f1050680          ADD      r6,r5,#0x80
;;;709    	*pZ_MAX = 165;
001580  4fc1              LDR      r7,|L1.6280|
001582  6070              STR      r0,[r6,#4]  ; vZ_MIN_POS
001584  6830              LDR      r0,[r6,#0]  ; pZ_MAX
;;;710    	vZ_MAX_POS = (s32)((*pZ_MAX) * ((*pZ_SPR)/(*pZ_PG_MM))); 
001586  6007              STR      r7,[r0,#0]
001588  6fa8              LDR      r0,[r5,#0x78]  ; pZ_SPR
00158a  6800              LDR      r0,[r0,#0]
00158c  f7fffffe          BL       __aeabi_ui2f
001590  6f69              LDR      r1,[r5,#0x74]  ; pZ_PG_MM
001592  6809              LDR      r1,[r1,#0]
001594  f7fffffe          BL       __aeabi_fdiv
001598  4639              MOV      r1,r7
00159a  f7fffffe          BL       __aeabi_fmul
00159e  f7fffffe          BL       __aeabi_f2iz
;;;711    	
;;;712    	InitMotorStructF(&ms_X,&mc_X);
0015a2  60b0              STR      r0,[r6,#8]  ; vZ_MAX_POS
0015a4  49b9              LDR      r1,|L1.6284|
0015a6  48ba              LDR      r0,|L1.6288|
0015a8  f7fffffe          BL       InitMotorStructF
;;;713    	InitMotorStructF(&ms_Y,&mc_Y);
0015ac  49b9              LDR      r1,|L1.6292|
0015ae  48ba              LDR      r0,|L1.6296|
0015b0  f7fffffe          BL       InitMotorStructF
;;;714    	InitMotorStructF(&ms_Z,&mc_Z);
0015b4  49b9              LDR      r1,|L1.6300|
0015b6  48ba              LDR      r0,|L1.6304|
0015b8  f7fffffe          BL       InitMotorStructF
0015bc  e9d51015          LDRD     r1,r0,[r5,#0x54]
;;;715    	*(ms_X.Pos) = X_MIN_POS+(X_MAX_POS-X_MIN_POS)/2;
0015c0  1a40              SUBS     r0,r0,r1
0015c2  eb0070d0          ADD      r0,r0,r0,LSR #31
0015c6  eb010060          ADD      r0,r1,r0,ASR #1
0015ca  49b1              LDR      r1,|L1.6288|
0015cc  6889              LDR      r1,[r1,#8]  ; ms_X
0015ce  6008              STR      r0,[r1,#0]
0015d0  e9d5101b          LDRD     r1,r0,[r5,#0x6c]
;;;716    	*(ms_Y.Pos) = Y_MIN_POS+(Y_MAX_POS-Y_MIN_POS)/2;
0015d4  1a40              SUBS     r0,r0,r1
0015d6  eb0070d0          ADD      r0,r0,r0,LSR #31
0015da  eb010060          ADD      r0,r1,r0,ASR #1
0015de  49ae              LDR      r1,|L1.6296|
0015e0  6889              LDR      r1,[r1,#8]  ; ms_Y
0015e2  6008              STR      r0,[r1,#0]
0015e4  e9d60101          LDRD     r0,r1,[r6,#4]
;;;717    	*(ms_Z.Pos) = Z_MIN_POS+(Z_MAX_POS-Z_MIN_POS)/2;
0015e8  1a09              SUBS     r1,r1,r0
0015ea  eb0171d1          ADD      r1,r1,r1,LSR #31
0015ee  eb000061          ADD      r0,r0,r1,ASR #1
0015f2  49ab              LDR      r1,|L1.6304|
0015f4  6889              LDR      r1,[r1,#8]  ; ms_Z
0015f6  2202              MOVS     r2,#2
0015f8  6008              STR      r0,[r1,#0]
;;;718    	
;;;719    //	XCPos = X_MIN_POS+(X_MAX_POS-X_MIN_POS)/2;
;;;720    //	YCPos = Y_MIN_POS+(Y_MAX_POS-Y_MIN_POS)/2;
;;;721    //	ZCPos = Z_MIN_POS+(Z_MAX_POS-Z_MIN_POS)/2;
;;;722    	
;;;723    	*(mc_Z.FrReq) = 500*K1;
0015fa  48a8              LDR      r0,|L1.6300|
0015fc  49a9              LDR      r1,|L1.6308|
0015fe  6843              LDR      r3,[r0,#4]  ; mc_Z
001600  e9c31200          STRD     r1,r2,[r3,#0]
;;;724    	*(mc_Z.FrMax) = 500*K1;
001604  6880              LDR      r0,[r0,#8]  ; mc_Z
;;;725    	*(fmvc.LenOnPulse)=5000;
001606  f2413788          MOV      r7,#0x1388
00160a  e9c01200          STRD     r1,r2,[r0,#0]         ;724
00160e  48a6              LDR      r0,|L1.6312|
001610  6801              LDR      r1,[r0,#0]  ; fmvc
;;;726    	fmvc.Enable=0;
001612  600f              STR      r7,[r1,#0]
001614  7604              STRB     r4,[r0,#0x18]
;;;727    	
;;;728        *(fmvc.V)=0.5;
001616  6842              LDR      r2,[r0,#4]  ; fmvc
001618  f04f517c          MOV      r1,#0x3f000000
;;;729        *(fmvc.Vmin)=0.5;
00161c  6011              STR      r1,[r2,#0]
00161e  6882              LDR      r2,[r0,#8]  ; fmvc
;;;730        *(fmvc.Vaccel)=16.7;
001620  6011              STR      r1,[r2,#0]
001622  68c2              LDR      r2,[r0,#0xc]  ; fmvc
001624  49a1              LDR      r1,|L1.6316|
;;;731        *(fmvc.Vmul)=100;
001626  6011              STR      r1,[r2,#0]
001628  6902              LDR      r2,[r0,#0x10]  ; fmvc
00162a  49a1              LDR      r1,|L1.6320|
;;;732    //    *(fmvc.Break)=0;
;;;733    	fmvs.Level = 0;
00162c  6011              STR      r1,[r2,#0]
00162e  49a1              LDR      r1,|L1.6324|
001630  720c              STRB     r4,[r1,#8]
;;;734    	*(fmvs.Vc) = *(fmvc.Vmin);
001632  6882              LDR      r2,[r0,#8]  ; fmvc
001634  68cb              LDR      r3,[r1,#0xc]  ; fmvs
001636  6812              LDR      r2,[r2,#0]
;;;735    	fmvs.LPON = *(fmvc.LenOnPulse);
001638  601a              STR      r2,[r3,#0]
00163a  6800              LDR      r0,[r0,#0]  ; fmvc
00163c  6800              LDR      r0,[r0,#0]
;;;736    	fmvs.LPOFF = 1000;
00163e  6008              STR      r0,[r1,#0]  ; fmvs
001640  f44f707a          MOV      r0,#0x3e8
;;;737    	// обход заготовки выключен
;;;738    	*pByPass = 0;
001644  6048              STR      r0,[r1,#4]  ; fmvs
001646  68e8              LDR      r0,[r5,#0xc]  ; pByPass
;;;739    	*pHTCorr = 0; 
;;;740    	*pZZeroDat = 0;
;;;741    	// сброс контура заготовки
;;;742    //	memset((void*)pscz,0,804);
;;;743    	*pPrgRun = 0;
;;;744    	// зафиксировать состояние "чтение строки" - это превое состояние выполнения кадра
;;;745    	*pCurCadr = 0; // текущий номер кадра
;;;746    	
;;;747    	*pRCS = rcsGetBlock; // состояние выполнения кадра "чтение следующей строки" 
;;;748    	
;;;749    	*pRecoverBlock = 0; // блок восстановлен	
;;;750    	
;;;751    	// дескриптор файла программы
;;;752     	*pPrgFileHandle=-1;
001648  499e              LDR      r1,|L1.6340|
00164a  7004              STRB     r4,[r0,#0]            ;738
00164c  6b30              LDR      r0,[r6,#0x30]         ;739  ; pHTCorr
00164e  7004              STRB     r4,[r0,#0]            ;739
001650  6b70              LDR      r0,[r6,#0x34]         ;740  ; pZZeroDat
001652  7004              STRB     r4,[r0,#0]            ;740
001654  4898              LDR      r0,|L1.6328|
001656  6800              LDR      r0,[r0,#0]            ;743  ; pPrgRun
001658  7004              STRB     r4,[r0,#0]            ;743
00165a  4898              LDR      r0,|L1.6332|
00165c  6800              LDR      r0,[r0,#0]            ;745  ; pCurCadr
00165e  6004              STR      r4,[r0,#0]            ;747
001660  4897              LDR      r0,|L1.6336|
001662  6800              LDR      r0,[r0,#0]            ;747  ; pRCS
001664  7004              STRB     r4,[r0,#0]            ;747
001666  6af0              LDR      r0,[r6,#0x2c]         ;749  ; pRecoverBlock
001668  7004              STRB     r4,[r0,#0]            ;749
00166a  6809              LDR      r1,[r1,#0]  ; pPrgFileHandle
00166c  20ff              MOVS     r0,#0xff
00166e  7008              STRB     r0,[r1,#0]
;;;753    	// имя файла программы в G-коде
;;;754    	memset((void*)pPrgFileName,0,20);
001670  4895              LDR      r0,|L1.6344|
001672  2114              MOVS     r1,#0x14
001674  6800              LDR      r0,[r0,#0]  ; pPrgFileName
001676  f7fffffe          BL       __aeabi_memclr
;;;755    	*pCrushWater = 0;
00167a  6928              LDR      r0,[r5,#0x10]  ; pCrushWater
;;;756    	// смещения
;;;757     	*dXPos=0;
;;;758     	*dYPos=0;
;;;759     	*dZPos=0;
;;;760    
;;;761    	// разрешение на использование пульта по RS-485
;;;762    	*pUsesKP485 = 1; // запрещено 1-разрешено
00167c  4993              LDR      r1,|L1.6348|
;;;763    	
;;;764    	// задержка анти дребезга в 0,0001 с
;;;765    	*pDrDelay = 50;
00167e  4a94              LDR      r2,|L1.6352|
001680  7004              STRB     r4,[r0,#0]            ;755
001682  68f0              LDR      r0,[r6,#0xc]          ;757  ; dXPos
001684  6004              STR      r4,[r0,#0]            ;758
001686  6930              LDR      r0,[r6,#0x10]         ;758  ; dYPos
001688  6004              STR      r4,[r0,#0]            ;759
00168a  6970              LDR      r0,[r6,#0x14]         ;759  ; dZPos
00168c  6004              STR      r4,[r0,#0]            ;762
00168e  6809              LDR      r1,[r1,#0]            ;762  ; pUsesKP485
001690  2001              MOVS     r0,#1                 ;762
001692  7008              STRB     r0,[r1,#0]            ;762
001694  6812              LDR      r2,[r2,#0]  ; pDrDelay
001696  2132              MOVS     r1,#0x32
001698  8011              STRH     r1,[r2,#0]
;;;766    	// время DoubleClick в 0,01 с 
;;;767    	*pDCTime = 50; // 0,5 сек 
00169a  4a8e              LDR      r2,|L1.6356|
00169c  6812              LDR      r2,[r2,#0]  ; pDCTime
00169e  8011              STRH     r1,[r2,#0]
;;;768    	// процент увеличения скорости (в каких единицах? %/с ?)
;;;769    	*pPercVmin = 5; // %/c ???????
0016a0  4a8d              LDR      r2,|L1.6360|
0016a2  2105              MOVS     r1,#5
0016a4  6812              LDR      r2,[r2,#0]  ; pPercVmin
0016a6  8011              STRH     r1,[r2,#0]
;;;770    	// регистры управления движением -100 +100
;;;771    	*pYmove = 0;
0016a8  498c              LDR      r1,|L1.6364|
0016aa  6809              LDR      r1,[r1,#0]  ; pYmove
0016ac  800c              STRH     r4,[r1,#0]
;;;772    	*pZmove = 0;
0016ae  498c              LDR      r1,|L1.6368|
0016b0  6809              LDR      r1,[r1,#0]  ; pZmove
0016b2  800c              STRH     r4,[r1,#0]
;;;773    	*pXmove = 0;
0016b4  498b              LDR      r1,|L1.6372|
0016b6  6809              LDR      r1,[r1,#0]  ; pXmove
0016b8  800c              STRH     r4,[r1,#0]
;;;774    	*pUnusedmove = 0;
0016ba  498b              LDR      r1,|L1.6376|
0016bc  6809              LDR      r1,[r1,#0]  ; pUnusedmove
0016be  800c              STRH     r4,[r1,#0]
;;;775    	// 5 кнопка 0 100
;;;776    	*pBtn5 = 0;
0016c0  498a              LDR      r1,|L1.6380|
0016c2  6809              LDR      r1,[r1,#0]  ; pBtn5
0016c4  800c              STRH     r4,[r1,#0]
;;;777    	// переключение осей 0 или 100 по кнопке 6
;;;778    	*pAxisSwitch = 0; // выбраны оси R и A 
0016c6  498a              LDR      r1,|L1.6384|
0016c8  6809              LDR      r1,[r1,#0]  ; pAxisSwitch
0016ca  800c              STRH     r4,[r1,#0]
;;;779    	// пищалка
;;;780    	*pBUZZ = 0;
0016cc  4989              LDR      r1,|L1.6388|
0016ce  6809              LDR      r1,[r1,#0]  ; pBUZZ
0016d0  800c              STRH     r4,[r1,#0]
;;;781    	*pQURepCount = 3; // 3 повтора по умолчанию
0016d2  696a              LDR      r2,[r5,#0x14]  ; pQURepCount
0016d4  2103              MOVS     r1,#3
0016d6  7011              STRB     r1,[r2,#0]
;;;782     	*pQUTimeout = 100; // 100 мс ожидание 
0016d8  69aa              LDR      r2,[r5,#0x18]  ; pQUTimeout
0016da  2164              MOVS     r1,#0x64
0016dc  8011              STRH     r1,[r2,#0]
;;;783    
;;;784    // логирование правильно полученных квитанций по RS-485
;;;785    	*pACmdDump = 0;
0016de  69ea              LDR      r2,[r5,#0x1c]  ; pACmdDump
0016e0  7014              STRB     r4,[r2,#0]
;;;786    	*pAMsg = 0;
0016e2  6a2a              LDR      r2,[r5,#0x20]  ; pAMsg
0016e4  7014              STRB     r4,[r2,#0]
;;;787    	*pAAnswDump = 0;
0016e6  6a6a              LDR      r2,[r5,#0x24]  ; pAAnswDump
0016e8  7014              STRB     r4,[r2,#0]
;;;788    // логирование ошибочных квитанций по RS-485
;;;789    	*pAECmdDump = 0;
0016ea  6aaa              LDR      r2,[r5,#0x28]  ; pAECmdDump
0016ec  7014              STRB     r4,[r2,#0]
;;;790    	*pAEMsg = 0;
0016ee  6aea              LDR      r2,[r5,#0x2c]  ; pAEMsg
0016f0  7014              STRB     r4,[r2,#0]
;;;791    	*pAEAnswDump = 0;
0016f2  6b2a              LDR      r2,[r5,#0x30]  ; pAEAnswDump
0016f4  7014              STRB     r4,[r2,#0]
;;;792    // логирование не полученных квитанций
;;;793    	*pANCmdDump = 0;
0016f6  6b6a              LDR      r2,[r5,#0x34]  ; pANCmdDump
0016f8  7014              STRB     r4,[r2,#0]
;;;794    	*pANMsg = 0;
0016fa  6baa              LDR      r2,[r5,#0x38]  ; pANMsg
0016fc  7014              STRB     r4,[r2,#0]
;;;795    // логирование ошибок контрольной суммы UART1
;;;796    	*pErrCSU1 = 0;
0016fe  6bea              LDR      r2,[r5,#0x3c]  ; pErrCSU1
001700  7014              STRB     r4,[r2,#0]
;;;797    	// логирование пропуска команд на постановку в очередь
;;;798    	*pDropCmd = 0;
001702  6c2a              LDR      r2,[r5,#0x40]  ; pDropCmd
001704  7014              STRB     r4,[r2,#0]
;;;799    // пороговое количество команд без квитанций для пульта
;;;800    	*pKP_NA_Max = 1;
001706  6a32              LDR      r2,[r6,#0x20]  ; pKP_NA_Max
001708  7010              STRB     r0,[r2,#0]
;;;801    
;;;802    // количество команд без квитанций для пульта
;;;803    	KP_NA_Count = 0;
00170a  706c              STRB     r4,[r5,#1]
;;;804    // связь с ПУ 
;;;805    	*pLinkKP = 0;
00170c  6a72              LDR      r2,[r6,#0x24]  ; pLinkKP
00170e  7014              STRB     r4,[r2,#0]
;;;806    // признак корректной остановки 
;;;807    	*pCorrStop = 0;
001710  6ab2              LDR      r2,[r6,#0x28]  ; pCorrStop
;;;808    
;;;809    	// адрес пульта
;;;810    	*pAddrKPCtrl = 4;
001712  4b79              LDR      r3,|L1.6392|
001714  7014              STRB     r4,[r2,#0]            ;807
001716  681b              LDR      r3,[r3,#0]  ; pAddrKPCtrl
001718  2204              MOVS     r2,#4
00171a  701a              STRB     r2,[r3,#0]
;;;811    	
;;;812    	// интервалы опроса мс
;;;813    	*pIntKPCtrl = 5000;
00171c  69b2              LDR      r2,[r6,#0x18]  ; pIntKPCtrl
00171e  8017              STRH     r7,[r2,#0]
;;;814    	*pIntKPCtrlStop = 100;
001720  69f2              LDR      r2,[r6,#0x1c]  ; pIntKPCtrlStop
001722  8011              STRH     r1,[r2,#0]
;;;815    	*pTrAngle = 15.0;	
001724  4a76              LDR      r2,|L1.6400|
001726  4975              LDR      r1,|L1.6396|
001728  6812              LDR      r2,[r2,#0]  ; pTrAngle
;;;816    
;;;817    	*pFIPWM = 2000;
00172a  6011              STR      r1,[r2,#0]
00172c  4a75              LDR      r2,|L1.6404|
00172e  f44f61fa          MOV      r1,#0x7d0
001732  6812              LDR      r2,[r2,#0]  ; pFIPWM
;;;818    	*pFIPWMFreq = 3000;
001734  6011              STR      r1,[r2,#0]
001736  4a74              LDR      r2,|L1.6408|
001738  f64031b8          MOV      r1,#0xbb8
00173c  6812              LDR      r2,[r2,#0]  ; pFIPWMFreq
;;;819    
;;;820    	fStopPrg = 0;
00173e  6011              STR      r1,[r2,#0]
001740  70ac              STRB     r4,[r5,#2]
;;;821    	fStartPrg = 0;
;;;822    	fSaveRegs = 0;
;;;823    
;;;824    	*pX1=0;
001742  4972              LDR      r1,|L1.6412|
001744  70ec              STRB     r4,[r5,#3]            ;821
001746  712c              STRB     r4,[r5,#4]            ;822
001748  6809              LDR      r1,[r1,#0]  ; pX1
;;;825    	*pY1=0;
;;;826    	*pZ1=0;
;;;827    	*pX2=0;
;;;828    	*pY2=0;
;;;829    	*pZ2=0;
;;;830    	*pX3=0;
;;;831    	*pY3=0;
;;;832    	*pZ3=0;
;;;833    	*pHdat = 23.6;
00174a  4a7a              LDR      r2,|L1.6452|
00174c  600c              STR      r4,[r1,#0]            ;825
00174e  4970              LDR      r1,|L1.6416|
001750  6809              LDR      r1,[r1,#0]            ;825  ; pY1
001752  600c              STR      r4,[r1,#0]            ;826
001754  496f              LDR      r1,|L1.6420|
001756  6809              LDR      r1,[r1,#0]            ;826  ; pZ1
001758  600c              STR      r4,[r1,#0]            ;827
00175a  496f              LDR      r1,|L1.6424|
00175c  6809              LDR      r1,[r1,#0]            ;827  ; pX2
00175e  600c              STR      r4,[r1,#0]            ;828
001760  496e              LDR      r1,|L1.6428|
001762  6809              LDR      r1,[r1,#0]            ;828  ; pY2
001764  600c              STR      r4,[r1,#0]            ;829
001766  496e              LDR      r1,|L1.6432|
001768  6809              LDR      r1,[r1,#0]            ;829  ; pZ2
00176a  600c              STR      r4,[r1,#0]            ;830
00176c  496d              LDR      r1,|L1.6436|
00176e  6809              LDR      r1,[r1,#0]            ;830  ; pX3
001770  600c              STR      r4,[r1,#0]            ;831
001772  496d              LDR      r1,|L1.6440|
001774  6809              LDR      r1,[r1,#0]            ;831  ; pY3
001776  600c              STR      r4,[r1,#0]            ;832
001778  496c              LDR      r1,|L1.6444|
00177a  6809              LDR      r1,[r1,#0]            ;832  ; pZ3
00177c  600c              STR      r4,[r1,#0]
00177e  6812              LDR      r2,[r2,#0]  ; pHdat
001780  496b              LDR      r1,|L1.6448|
;;;834    	// индекс выдаваемой точки
;;;835    	Index = 1;
001782  6011              STR      r1,[r2,#0]
001784  496c              LDR      r1,|L1.6456|
;;;836    	// плоскостная компенсация
;;;837    	*pfZcomp = 0;
001786  6008              STR      r0,[r1,#0]  ; Index
001788  486c              LDR      r0,|L1.6460|
00178a  6800              LDR      r0,[r0,#0]  ; pfZcomp
00178c  7004              STRB     r4,[r0,#0]
;;;838    // частота вращения вала об/мин при номинальной частоте сети pFnom Гц
;;;839    	*pFdbyFnom = 18000;	
00178e  6bb1              LDR      r1,[r6,#0x38]  ; pFdbyFnom
001790  f2446050          MOV      r0,#0x4650
001794  8008              STRH     r0,[r1,#0]
;;;840    // номинальная частота сети Гц
;;;841    	*pFnom = 300;	
001796  6bf1              LDR      r1,[r6,#0x3c]  ; pFnom
001798  f44f7096          MOV      r0,#0x12c
00179c  8008              STRH     r0,[r1,#0]
;;;842    	
;;;843    	*pRunSpPause = 5000;
00179e  4868              LDR      r0,|L1.6464|
0017a0  6800              LDR      r0,[r0,#0]  ; pRunSpPause
;;;844    	// контрольная сумма записаного файла программы
;;;845    	*pWF_CRC = 0;
0017a2  6007              STR      r7,[r0,#0]
0017a4  4867              LDR      r0,|L1.6468|
0017a6  6800              LDR      r0,[r0,#0]  ; pWF_CRC
0017a8  8004              STRH     r4,[r0,#0]
                  |L1.6058|
;;;846    	// задержка при изменении направления 200 мкс 
;;;847    //	*pDirDelay = 5000;
;;;848    }
0017aa  e8bd81f0          POP      {r4-r8,pc}
;;;849    
                          ENDP

                  InitFrzRegsAfterLoad PROC
;;;850    void InitFrzRegsAfterLoad(void){
0017ae  e92d41f0          PUSH     {r4-r8,lr}
;;;851    	// инициализация структуры управления двигателем 
;;;852    	InitMotorStructALF(&ms_X,&mc_X);
0017b2  4936              LDR      r1,|L1.6284|
0017b4  4836              LDR      r0,|L1.6288|
0017b6  f7fffffe          BL       InitMotorStructALF
;;;853    	InitMotorStructALF(&ms_Y,&mc_Y);
0017ba  4936              LDR      r1,|L1.6292|
0017bc  4836              LDR      r0,|L1.6296|
0017be  f7fffffe          BL       InitMotorStructALF
;;;854    	InitMotorStructALF(&ms_Z,&mc_Z);
0017c2  4936              LDR      r1,|L1.6300|
0017c4  4836              LDR      r0,|L1.6304|
0017c6  f7fffffe          BL       InitMotorStructALF
;;;855    	*pByPass = 0;
0017ca  4c1e              LDR      r4,|L1.6212|
0017cc  2000              MOVS     r0,#0
0017ce  3c34              SUBS     r4,r4,#0x34
;;;856    	*pHTCorr = 0; 
0017d0  f1040580          ADD      r5,r4,#0x80
0017d4  68e1              LDR      r1,[r4,#0xc]          ;855  ; pByPass
0017d6  7008              STRB     r0,[r1,#0]            ;855
0017d8  6b29              LDR      r1,[r5,#0x30]  ; pHTCorr
0017da  7008              STRB     r0,[r1,#0]
;;;857    	*pZZeroDat = 0;
0017dc  6b69              LDR      r1,[r5,#0x34]  ; pZZeroDat
0017de  7008              STRB     r0,[r1,#0]
;;;858    	
;;;859    	if (*pPrgRun) {
0017e0  4935              LDR      r1,|L1.6328|
0017e2  6809              LDR      r1,[r1,#0]  ; pPrgRun
0017e4  780a              LDRB     r2,[r1,#0]
0017e6  b11a              CBZ      r2,|L1.6128|
;;;860    		*pPrgRun = 0;
0017e8  7008              STRB     r0,[r1,#0]
;;;861    		BR_pPrgRun = *pPrgRun;
0017ea  4957              LDR      r1,|L1.6472|
0017ec  f8810060          STRB     r0,[r1,#0x60]
                  |L1.6128|
;;;862    	}		
;;;863    	vX_MIN_POS = (s32)((*pX_MIN) * (X_SPR/(*pX_PG_MM))); 
0017f0  6ca7              LDR      r7,[r4,#0x48]  ; pX_SPR
0017f2  6838              LDR      r0,[r7,#0]
0017f4  f7fffffe          BL       __aeabi_ui2f
0017f8  6c66              LDR      r6,[r4,#0x44]  ; pX_PG_MM
0017fa  6831              LDR      r1,[r6,#0]
0017fc  f7fffffe          BL       __aeabi_fdiv
001800  6ce1              LDR      r1,[r4,#0x4c]  ; pX_MIN
001802  6809              LDR      r1,[r1,#0]
001804  f7fffffe          BL       __aeabi_fmul
001808  f7fffffe          BL       __aeabi_f2iz
;;;864    	vX_MAX_POS = (s32)((*pX_MAX) * (X_SPR/(*pX_PG_MM))); 
00180c  6560              STR      r0,[r4,#0x54]  ; vX_MIN_POS
00180e  6838              LDR      r0,[r7,#0]
001810  f7fffffe          BL       __aeabi_ui2f
001814  6831              LDR      r1,[r6,#0]
001816  f7fffffe          BL       __aeabi_fdiv
00181a  6d21              LDR      r1,[r4,#0x50]  ; pX_MAX
00181c  6809              LDR      r1,[r1,#0]
00181e  f7fffffe          BL       __aeabi_fmul
001822  f7fffffe          BL       __aeabi_f2iz
;;;865    	vY_MIN_POS = (s32)((*pY_MIN) * (Y_SPR/(*pY_PG_MM))); 
001826  65a0              STR      r0,[r4,#0x58]  ; vX_MAX_POS
001828  6e27              LDR      r7,[r4,#0x60]  ; pY_SPR
00182a  6838              LDR      r0,[r7,#0]
00182c  f7fffffe          BL       __aeabi_ui2f
001830  6de6              LDR      r6,[r4,#0x5c]  ; pY_PG_MM
001832  6831              LDR      r1,[r6,#0]
001834  e08a              B        |L1.6476|
001836  0000              DCW      0x0000
                  |L1.6200|
001838  70414e43          DCB      "pANCmdDump",0
00183c  6d644475
001840  6d7000  
001843  00                DCB      0
                  |L1.6212|
                          DCD      ||.data||+0x34
                  |L1.6216|
001848  70414e4d          DCB      "pANMsg",0
00184c  736700  
00184f  00                DCB      0
                  |L1.6224|
001850  70457272          DCB      "pErrCSU1",0
001854  43535531
001858  00      
001859  00                DCB      0
00185a  00                DCB      0
00185b  00                DCB      0
                  |L1.6236|
00185c  7044726f          DCB      "pDropCmd",0
001860  70436d64
001864  00      
001865  00                DCB      0
001866  00                DCB      0
001867  00                DCB      0
                  |L1.6248|
001868  70426c6f          DCB      "pBlock",0
00186c  636b00  
00186f  00                DCB      0
                  |L1.6256|
                          DCD      pBlock
                  |L1.6260|
                          DCD      vPinsdef
                  |L1.6264|
                          DCD      pvPins
                  |L1.6268|
                          DCD      0x42f00000
                  |L1.6272|
                          DCD      0x44bb8000
                  |L1.6276|
                          DCD      0x41200000
                  |L1.6280|
                          DCD      0x43250000
                  |L1.6284|
                          DCD      mc_X
                  |L1.6288|
                          DCD      ms_X
                  |L1.6292|
                          DCD      mc_Y
                  |L1.6296|
                          DCD      ms_Y
                  |L1.6300|
                          DCD      mc_Z
                  |L1.6304|
                          DCD      ms_Z
                  |L1.6308|
                          DCD      0xe90edd00
                  |L1.6312|
                          DCD      fmvc
                  |L1.6316|
                          DCD      0x4185999a
                  |L1.6320|
                          DCD      0x42c80000
                  |L1.6324|
                          DCD      fmvs
                  |L1.6328|
                          DCD      pPrgRun
                  |L1.6332|
                          DCD      pCurCadr
                  |L1.6336|
                          DCD      pRCS
                  |L1.6340|
                          DCD      pPrgFileHandle
                  |L1.6344|
                          DCD      pPrgFileName
                  |L1.6348|
                          DCD      pUsesKP485
                  |L1.6352|
                          DCD      pDrDelay
                  |L1.6356|
                          DCD      pDCTime
                  |L1.6360|
                          DCD      pPercVmin
                  |L1.6364|
                          DCD      pYmove
                  |L1.6368|
                          DCD      pZmove
                  |L1.6372|
                          DCD      pXmove
                  |L1.6376|
                          DCD      pUnusedmove
                  |L1.6380|
                          DCD      pBtn5
                  |L1.6384|
                          DCD      pAxisSwitch
                  |L1.6388|
                          DCD      pBUZZ
                  |L1.6392|
                          DCD      pAddrKPCtrl
                  |L1.6396|
                          DCD      0x41700000
                  |L1.6400|
                          DCD      pTrAngle
                  |L1.6404|
                          DCD      pFIPWM
                  |L1.6408|
                          DCD      pFIPWMFreq
                  |L1.6412|
                          DCD      pX1
                  |L1.6416|
                          DCD      pY1
                  |L1.6420|
                          DCD      pZ1
                  |L1.6424|
                          DCD      pX2
                  |L1.6428|
                          DCD      pY2
                  |L1.6432|
                          DCD      pZ2
                  |L1.6436|
                          DCD      pX3
                  |L1.6440|
                          DCD      pY3
                  |L1.6444|
                          DCD      pZ3
                  |L1.6448|
                          DCD      0x41bccccd
                  |L1.6452|
                          DCD      pHdat
                  |L1.6456|
                          DCD      Index
                  |L1.6460|
                          DCD      pfZcomp
                  |L1.6464|
                          DCD      pRunSpPause
                  |L1.6468|
                          DCD      pWF_CRC
                  |L1.6472|
                          DCD      0x40024000
                  |L1.6476|
00194c  f7fffffe          BL       __aeabi_fdiv
001950  6e61              LDR      r1,[r4,#0x64]  ; pY_MIN
001952  6809              LDR      r1,[r1,#0]
001954  f7fffffe          BL       __aeabi_fmul
001958  f7fffffe          BL       __aeabi_f2iz
;;;866    	vY_MAX_POS = (s32)((*pY_MAX) * (Y_SPR/(*pY_PG_MM))); 
00195c  66e0              STR      r0,[r4,#0x6c]  ; vY_MIN_POS
00195e  6838              LDR      r0,[r7,#0]
001960  f7fffffe          BL       __aeabi_ui2f
001964  6831              LDR      r1,[r6,#0]
001966  f7fffffe          BL       __aeabi_fdiv
00196a  6ea1              LDR      r1,[r4,#0x68]  ; pY_MAX
00196c  6809              LDR      r1,[r1,#0]
00196e  f7fffffe          BL       __aeabi_fmul
001972  f7fffffe          BL       __aeabi_f2iz
;;;867    	vZ_MIN_POS = (s32)((*pZ_MIN) * (Z_SPR/(*pZ_PG_MM))); 
001976  6720              STR      r0,[r4,#0x70]  ; vY_MAX_POS
001978  6fa7              LDR      r7,[r4,#0x78]  ; pZ_SPR
00197a  6838              LDR      r0,[r7,#0]
00197c  f7fffffe          BL       __aeabi_ui2f
001980  6f66              LDR      r6,[r4,#0x74]  ; pZ_PG_MM
001982  6831              LDR      r1,[r6,#0]
001984  f7fffffe          BL       __aeabi_fdiv
001988  6fe1              LDR      r1,[r4,#0x7c]  ; pZ_MIN
00198a  6809              LDR      r1,[r1,#0]
00198c  f7fffffe          BL       __aeabi_fmul
001990  f7fffffe          BL       __aeabi_f2iz
;;;868    	vZ_MAX_POS = (s32)((*pZ_MAX) * (Z_SPR/(*pZ_PG_MM))); 
001994  6068              STR      r0,[r5,#4]  ; vZ_MIN_POS
001996  6838              LDR      r0,[r7,#0]
001998  f7fffffe          BL       __aeabi_ui2f
00199c  6831              LDR      r1,[r6,#0]
00199e  f7fffffe          BL       __aeabi_fdiv
0019a2  6829              LDR      r1,[r5,#0]  ; pZ_MAX
0019a4  6809              LDR      r1,[r1,#0]
0019a6  f7fffffe          BL       __aeabi_fmul
0019aa  f7fffffe          BL       __aeabi_f2iz
;;;869    	// CloseFilesHandles();
;;;870    	// инициализировать pPrgFileHandle
;;;871    	*pPrgFileHandle = -1;
0019ae  4943              LDR      r1,|L1.6844|
0019b0  60a8              STR      r0,[r5,#8]  ; vZ_MAX_POS
0019b2  20ff              MOVS     r0,#0xff
0019b4  6809              LDR      r1,[r1,#0]  ; pPrgFileHandle
0019b6  7008              STRB     r0,[r1,#0]
;;;872    //	Msg("%d\r\n",OUTF1(1.0*ms_Y.LPON));
;;;873    	fmvs.LPON = *(fmvc.LenOnPulse);
0019b8  4841              LDR      r0,|L1.6848|
0019ba  4942              LDR      r1,|L1.6852|
0019bc  6800              LDR      r0,[r0,#0]  ; fmvc
0019be  6800              LDR      r0,[r0,#0]
0019c0  6008              STR      r0,[r1,#0]  ; fmvs
;;;874    	
;;;875    }
0019c2  e6f2              B        |L1.6058|
;;;876    
                          ENDP

                  LoadFrzBackupRegs PROC
;;;877    void LoadFrzBackupRegs(void){
0019c4  e92d4ff8          PUSH     {r3-r11,lr}
;;;878    /*
;;;879    #define BR_ms_X_Pos LPC_RTC->GPREG0
;;;880    #define BR_ms_Y_Pos LPC_RTC->GPREG1
;;;881    #define BR_ms_Z_Pos	LPC_RTC->GPREG2
;;;882    #define BR_fmvc_V	LPC_RTC->GPREG3
;;;883    #define BR_pCurCadr	LPC_RTC->GPREG4
;;;884    #define BR_pPrgRun	LPC_RTC->ALSEC
;;;885    #define BR_pPrgPause	LPC_RTC->ALMIN
;;;886    #define BR_pCorrStop	LPC_RTC->ALDOW 
;;;887    
;;;888    */
;;;889    	tFile f;
;;;890    	s8 res;
;;;891    	// открыть файл regs.bin
;;;892    	res = FS_Assign("startup.cmd",&f);
0019c8  4669              MOV      r1,sp
0019ca  483f              LDR      r0,|L1.6856|
0019cc  f7fffffe          BL       FS_Assign
0019d0  0001              MOVS     r1,r0
;;;893    	if (res == FS_RESULT_OK) {
0019d2  d004              BEQ      |L1.6622|
;;;894    		res = FS_Reset(f);
;;;895    		if (res == FS_RESULT_OK) {
;;;896    			FS_Close(&f);
;;;897    			//	файл есть - загрузка регистров
;;;898    
;;;899    			*(ms_X.Pos) = BR_ms_X_Pos;
;;;900    			*(ms_Y.Pos) = BR_ms_Y_Pos;
;;;901    			*(ms_Z.Pos) = BR_ms_Z_Pos;
;;;902    			//memcpy((void*)mvc.V,(void*)&(BR_mvc_V),4);
;;;903    			//*(fmvc.V) = BR_fmvc_V;
;;;904    			//memcpy((void*)pCurCadr,(void*)&(BR_pCurCadr),2);	
;;;905    			//*pCurCadr = BR_pCurCadr;
;;;906    			
;;;907    			memcpy((void*)fmvc.V,(void*)&(BR_fmvc_V),4);
;;;908    			memcpy((void*)pCurCadr,(void*)&(BR_pCurCadr),4);
;;;909    			if (*pCurCadr) *pRecoverBlock = 1;
;;;910    			else *pRecoverBlock = 0;
;;;911    //			Msg("pCurCadr %d RecBlock %d\r\n",*pCurCadr,*pRecoverBlock);
;;;912    			*pPrgRun = BR_pPrgRun;
;;;913    			*pCorrStop = BR_pCorrStop;
;;;914    			if (*pPrgRun) {
;;;915    				*pPrgRun = 0;
;;;916    				BR_pPrgRun = *pPrgRun;
;;;917    			}	
;;;918    			Msg("Load Backup Regs Ok.\r\n");
;;;919    			
;;;920    		} else {
;;;921    			// файла нет - очитка регистров
;;;922    
;;;923    			BR_ms_X_Pos = *(ms_X.Pos);
;;;924    			BR_ms_Y_Pos = *(ms_Y.Pos);
;;;925    			BR_ms_Z_Pos = *(ms_Z.Pos);
;;;926    
;;;927    			memcpy((void*)&(BR_fmvc_V),(void*)fmvc.V,4);
;;;928    			memcpy((void*)&(BR_pCurCadr),(void*)pCurCadr,4);
;;;929    //			Msg("BR_pCurCadr %d\r\n",BR_pCurCadr);
;;;930    			BR_pPrgRun = *pPrgRun;
;;;931    			BR_pCorrStop = *pCorrStop;
;;;932    			FS_Close(&f);
;;;933    			Msg("Not Load Backup Regs. (err reset startup.cmd %d) h %d\r\n",res,f);
;;;934    		}
;;;935    	} else {
;;;936    		Msg("Not Load Backup Regs. (err assing startup.cmd %d)\r\n",res);
0019d4  a03d              ADR      r0,|L1.6860|
0019d6  f7fffffe          BL       Msg
                  |L1.6618|
;;;937    		//FS_Close(&f);
;;;938    	}
;;;939    }
0019da  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.6622|
0019de  f99d0000          LDRSB    r0,[sp,#0]            ;894
0019e2  f7fffffe          BL       FS_Reset
0019e6  f8dfa118          LDR      r10,|L1.6912|
0019ea  f8df8118          LDR      r8,|L1.6916|
0019ee  f8dfb118          LDR      r11,|L1.6920|
0019f2  f8df9118          LDR      r9,|L1.6924|
0019f6  4e46              LDR      r6,|L1.6928|
0019f8  4d46              LDR      r5,|L1.6932|
0019fa  4c47              LDR      r4,|L1.6936|
0019fc  0007              MOVS     r7,r0                 ;894
0019fe  d028              BEQ      |L1.6738|
001a00  f8da0008          LDR      r0,[r10,#8]           ;923  ; ms_X
001a04  6800              LDR      r0,[r0,#0]            ;923
001a06  6460              STR      r0,[r4,#0x44]         ;923
001a08  f8d80008          LDR      r0,[r8,#8]            ;924  ; ms_Y
001a0c  6800              LDR      r0,[r0,#0]            ;924
001a0e  64a0              STR      r0,[r4,#0x48]         ;924
001a10  f8db0008          LDR      r0,[r11,#8]           ;925  ; ms_Z
001a14  6800              LDR      r0,[r0,#0]            ;925
001a16  64e0              STR      r0,[r4,#0x4c]         ;925
001a18  4829              LDR      r0,|L1.6848|
001a1a  6841              LDR      r1,[r0,#4]            ;927  ; fmvc
001a1c  f1090004          ADD      r0,r9,#4              ;928
001a20  6809              LDR      r1,[r1,#0]            ;927
001a22  f8c91000          STR      r1,[r9,#0]            ;928
001a26  6831              LDR      r1,[r6,#0]            ;928  ; pCurCadr
001a28  6809              LDR      r1,[r1,#0]            ;928
001a2a  6001              STR      r1,[r0,#0]            ;930
001a2c  483b              LDR      r0,|L1.6940|
001a2e  6800              LDR      r0,[r0,#0]            ;930  ; pPrgRun
001a30  7800              LDRB     r0,[r0,#0]            ;930
001a32  f8840060          STRB     r0,[r4,#0x60]         ;930
001a36  6aa8              LDR      r0,[r5,#0x28]         ;931  ; pCorrStop
001a38  7800              LDRB     r0,[r0,#0]            ;931
001a3a  f8840070          STRB     r0,[r4,#0x70]         ;931
001a3e  4668              MOV      r0,sp                 ;932
001a40  f7fffffe          BL       FS_Close
001a44  f99d2000          LDRSB    r2,[sp,#0]            ;933
001a48  4639              MOV      r1,r7                 ;933
001a4a  a035              ADR      r0,|L1.6944|
001a4c  f7fffffe          BL       Msg
001a50  e7c3              B        |L1.6618|
                  |L1.6738|
001a52  4668              MOV      r0,sp                 ;896
001a54  f7fffffe          BL       FS_Close
001a58  6c61              LDR      r1,[r4,#0x44]         ;899
001a5a  f8da0008          LDR      r0,[r10,#8]           ;899  ; ms_X
001a5e  6001              STR      r1,[r0,#0]            ;900
001a60  6ca1              LDR      r1,[r4,#0x48]         ;900
001a62  f8d80008          LDR      r0,[r8,#8]            ;900  ; ms_Y
001a66  6001              STR      r1,[r0,#0]            ;901
001a68  6ce1              LDR      r1,[r4,#0x4c]         ;901
001a6a  f8db0008          LDR      r0,[r11,#8]           ;901  ; ms_Z
001a6e  6001              STR      r1,[r0,#0]            ;907
001a70  4813              LDR      r0,|L1.6848|
001a72  6841              LDR      r1,[r0,#4]            ;907  ; fmvc
001a74  f8d90000          LDR      r0,[r9,#0]            ;907
001a78  6008              STR      r0,[r1,#0]            ;908
001a7a  4824              LDR      r0,|L1.6924|
001a7c  6832              LDR      r2,[r6,#0]            ;908  ; pCurCadr
001a7e  1d00              ADDS     r0,r0,#4              ;908
001a80  6801              LDR      r1,[r0,#0]            ;908
001a82  2000              MOVS     r0,#0                 ;908
001a84  6011              STR      r1,[r2,#0]            ;909
001a86  b119              CBZ      r1,|L1.6800|
001a88  6aea              LDR      r2,[r5,#0x2c]         ;909  ; pRecoverBlock
001a8a  2101              MOVS     r1,#1                 ;909
001a8c  7011              STRB     r1,[r2,#0]            ;909
001a8e  e001              B        |L1.6804|
                  |L1.6800|
001a90  6ae9              LDR      r1,[r5,#0x2c]         ;910  ; pRecoverBlock
001a92  7008              STRB     r0,[r1,#0]            ;910
                  |L1.6804|
001a94  f8942060          LDRB     r2,[r4,#0x60]         ;912
001a98  4920              LDR      r1,|L1.6940|
001a9a  680b              LDR      r3,[r1,#0]            ;912  ; pPrgRun
001a9c  701a              STRB     r2,[r3,#0]            ;912
001a9e  f8942070          LDRB     r2,[r4,#0x70]         ;913
001aa2  6aab              LDR      r3,[r5,#0x28]         ;913  ; pCorrStop
001aa4  701a              STRB     r2,[r3,#0]            ;913
001aa6  6809              LDR      r1,[r1,#0]            ;914  ; pPrgRun
001aa8  780a              LDRB     r2,[r1,#0]            ;914
001aaa  b112              CBZ      r2,|L1.6834|
001aac  7008              STRB     r0,[r1,#0]            ;915
001aae  f8840060          STRB     r0,[r4,#0x60]         ;916
                  |L1.6834|
001ab2  a029              ADR      r0,|L1.7000|
001ab4  f7fffffe          BL       Msg
001ab8  e78f              B        |L1.6618|
;;;940    
                          ENDP

001aba  0000              DCW      0x0000
                  |L1.6844|
                          DCD      pPrgFileHandle
                  |L1.6848|
                          DCD      fmvc
                  |L1.6852|
                          DCD      fmvs
                  |L1.6856|
                          DCD      ||.text||+0x48c
                  |L1.6860|
001acc  4e6f7420          DCB      "Not Load Backup Regs. (err assing startup.cmd %d)\r\n",0
001ad0  4c6f6164
001ad4  20426163
001ad8  6b757020
001adc  52656773
001ae0  2e202865
001ae4  72722061
001ae8  7373696e
001aec  67207374
001af0  61727475
001af4  702e636d
001af8  64202564
001afc  290d0a00
                  |L1.6912|
                          DCD      ms_X
                  |L1.6916|
                          DCD      ms_Y
                  |L1.6920|
                          DCD      ms_Z
                  |L1.6924|
                          DCD      0x40024050
                  |L1.6928|
                          DCD      pCurCadr
                  |L1.6932|
                          DCD      ||.data||+0x80
                  |L1.6936|
                          DCD      0x40024000
                  |L1.6940|
                          DCD      pPrgRun
                  |L1.6944|
001b20  4e6f7420          DCB      "Not Load Backup Regs. (err reset startup.cmd %d) h %d\r"
001b24  4c6f6164
001b28  20426163
001b2c  6b757020
001b30  52656773
001b34  2e202865
001b38  72722072
001b3c  65736574
001b40  20737461
001b44  72747570
001b48  2e636d64
001b4c  20256429
001b50  20682025
001b54  640d    
001b56  0a00              DCB      "\n",0
                  |L1.7000|
001b58  4c6f6164          DCB      "Load Backup Regs Ok.\r\n",0
001b5c  20426163
001b60  6b757020
001b64  52656773
001b68  204f6b2e
001b6c  0d0a00  
001b6f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||va||
                          %        7200
                  regs
                          %        1000

                          AREA ||.data||, DATA, ALIGN=2

                  VChange
000000  00                DCB      0x00
                  KP_NA_Count
000001  00                DCB      0x00
                  fStopPrg
000002  00                DCB      0x00
                  fStartPrg
000003  00                DCB      0x00
                  fSaveRegs
000004  0000              DCB      0x00,0x00
                  iva
000006  0000              DCW      0x0000
                  CurBase
                          DCD      0x00000000
                  pByPass
                          DCD      0x00000000
                  pCrushWater
                          DCD      0x00000000
                  pQURepCount
                          DCD      0x00000000
                  pQUTimeout
                          DCD      0x00000000
                  pACmdDump
                          DCD      0x00000000
                  pAMsg
                          DCD      0x00000000
                  pAAnswDump
                          DCD      0x00000000
                  pAECmdDump
                          DCD      0x00000000
                  pAEMsg
                          DCD      0x00000000
                  pAEAnswDump
                          DCD      0x00000000
                  pANCmdDump
                          DCD      0x00000000
                  pANMsg
                          DCD      0x00000000
                  pErrCSU1
                          DCD      0x00000000
                  pDropCmd
                          DCD      0x00000000
                  pX_PG_MM
                          DCD      0x00000000
                  pX_SPR
                          DCD      0x00000000
                  pX_MIN
                          DCD      0x00000000
                  pX_MAX
                          DCD      0x00000000
                  vX_MIN_POS
                          DCD      0x00000000
                  vX_MAX_POS
                          DCD      0x00000000
                  pY_PG_MM
                          DCD      0x00000000
                  pY_SPR
                          DCD      0x00000000
                  pY_MIN
                          DCD      0x00000000
                  pY_MAX
                          DCD      0x00000000
                  vY_MIN_POS
                          DCD      0x00000000
                  vY_MAX_POS
                          DCD      0x00000000
                  pZ_PG_MM
                          DCD      0x00000000
                  pZ_SPR
                          DCD      0x00000000
                  pZ_MIN
                          DCD      0x00000000
                  pZ_MAX
                          DCD      0x00000000
                  vZ_MIN_POS
                          DCD      0x00000000
                  vZ_MAX_POS
                          DCD      0x00000000
                  dXPos
                          DCD      0x00000000
                  dYPos
                          DCD      0x00000000
                  dZPos
                          DCD      0x00000000
                  pIntKPCtrl
                          DCD      0x00000000
                  pIntKPCtrlStop
                          DCD      0x00000000
                  pKP_NA_Max
                          DCD      0x00000000
                  pLinkKP
                          DCD      0x00000000
                  pCorrStop
                          DCD      0x00000000
                  pRecoverBlock
                          DCD      0x00000000
                  pHTCorr
                          DCD      0x00000000
                  pZZeroDat
                          DCD      0x00000000
                  pFdbyFnom
                          DCD      0x00000000
                  pFnom
                          DCD      0x00000000
                  CurOffset
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  OutAllocTable
000000  00                DCB      0x00

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  CurVarIndex
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Main\\regs.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_regs_c_iva____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_regs_c_iva____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_regs_c_iva____REVSH|
#line 462
|__asm___6_regs_c_iva____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_regs_c_iva____RRX|
#line 649
|__asm___6_regs_c_iva____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

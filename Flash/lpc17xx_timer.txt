; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\lpc17xx_timer.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\lpc17xx_timer.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\Drivers\include -I.\Common -I.\Retarget -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\lpc17xx_timer.crf Drivers\source\lpc17xx_timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM_GetIntStatus PROC
;;;162     **********************************************************************/
;;;163    FlagStatus TIM_GetIntStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
000000  6800              LDR      r0,[r0,#0]
;;;164    {
;;;165    	uint8_t temp;
;;;166    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;167    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;168    	temp = (TIMx->IR)& TIM_IR_CLR(IntFlag);
000002  2201              MOVS     r2,#1
000004  408a              LSLS     r2,r2,r1
000006  b2d1              UXTB     r1,r2
000008  4008              ANDS     r0,r0,r1
00000a  d000              BEQ      |L1.14|
;;;169    	if (temp)
;;;170    		return SET;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;171    
;;;172    	return RESET;
;;;173    
;;;174    }
00000e  4770              BX       lr
;;;175    /*********************************************************************//**
                          ENDP

                  TIM_GetIntCaptureStatus PROC
;;;192     **********************************************************************/
;;;193    FlagStatus TIM_GetIntCaptureStatus(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
000010  6800              LDR      r0,[r0,#0]
;;;194    {
;;;195    	uint8_t temp;
;;;196    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;197    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;198    	temp = (TIMx->IR) & (1<<(4+IntFlag));
000012  2201              MOVS     r2,#1
000014  1d09              ADDS     r1,r1,#4
000016  408a              LSLS     r2,r2,r1
000018  b2d1              UXTB     r1,r2
00001a  4008              ANDS     r0,r0,r1
00001c  d000              BEQ      |L1.32|
;;;199    	if(temp)
;;;200    		return SET;
00001e  2001              MOVS     r0,#1
                  |L1.32|
;;;201    	return RESET;
;;;202    }
000020  4770              BX       lr
;;;203    /*********************************************************************//**
                          ENDP

                  TIM_ClearIntPending PROC
;;;218     **********************************************************************/
;;;219    void TIM_ClearIntPending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
000022  2201              MOVS     r2,#1
;;;220    {
;;;221    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;222    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;223    	TIMx->IR = TIM_IR_CLR(IntFlag);
000024  408a              LSLS     r2,r2,r1
000026  6002              STR      r2,[r0,#0]
;;;224    }
000028  4770              BX       lr
;;;225    
                          ENDP

                  TIM_ClearIntCapturePending PROC
;;;241     **********************************************************************/
;;;242    void TIM_ClearIntCapturePending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
00002a  2201              MOVS     r2,#1
;;;243    {
;;;244    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;245    	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
;;;246    	TIMx->IR = (1<<(4+IntFlag));
00002c  1d09              ADDS     r1,r1,#4
00002e  408a              LSLS     r2,r2,r1
000030  6002              STR      r2,[r0,#0]
;;;247    }
000032  4770              BX       lr
;;;248    
                          ENDP

                  TIM_ConfigStructInit PROC
;;;259     **********************************************************************/
;;;260    void TIM_ConfigStructInit(TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
000034  b110              CBZ      r0,|L1.60|
;;;261    {
;;;262    	if (TimerCounterMode == TIM_TIMER_MODE )
;;;263    	{
;;;264    		TIM_TIMERCFG_Type * pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
;;;265    		pTimeCfg->PrescaleOption = TIM_PRESCALE_USVAL;
;;;266    		pTimeCfg->PrescaleValue = 1;
;;;267    	}
;;;268    	else
;;;269    	{
;;;270    		TIM_COUNTERCFG_Type * pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
;;;271    		pCounterCfg->CountInputSelect = TIM_COUNTER_INCAP0;
000036  2000              MOVS     r0,#0
000038  7048              STRB     r0,[r1,#1]
;;;272    	}
;;;273    }
00003a  4770              BX       lr
                  |L1.60|
00003c  2001              MOVS     r0,#1                 ;265
00003e  7008              STRB     r0,[r1,#0]            ;265
000040  6048              STR      r0,[r1,#4]            ;266
000042  4770              BX       lr
;;;274    
                          ENDP

                  TIM_Init PROC
;;;293     **********************************************************************/
;;;294    void TIM_Init(LPC_TIM_TypeDef *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
000044  e92d5ff0          PUSH     {r4-r12,lr}
;;;295    {
;;;296    	TIM_TIMERCFG_Type *pTimeCfg;
;;;297    	TIM_COUNTERCFG_Type *pCounterCfg;
;;;298    
;;;299    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;300    	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
;;;301    
;;;302    	//set power
;;;303    
;;;304    	if (TIMx== LPC_TIM0)
000048  f04f2b40          MOV      r11,#0x40004000
;;;305    	{
;;;306    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, ENABLE);
;;;307    		//PCLK_Timer0 = CCLK/4
;;;308    		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_4);
;;;309    	}
;;;310    	else if (TIMx== LPC_TIM1)
00004c  f8dfa298          LDR      r10,|L1.744|
;;;311    	{
;;;312    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, ENABLE);
;;;313    		//PCLK_Timer1 = CCLK/4			 4					  0
;;;314    		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_1);
;;;315    
;;;316    	}
;;;317    
;;;318    	else if (TIMx== LPC_TIM2)
000050  4ea6              LDR      r6,|L1.748|
;;;319    	{
;;;320    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, ENABLE);
;;;321    		//PCLK_Timer2= CCLK/4
;;;322    		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER2, CLKPWR_PCLKSEL_CCLK_DIV_4);
;;;323    	}
;;;324    	else if (TIMx== LPC_TIM3)
000052  4fa7              LDR      r7,|L1.752|
000054  4615              MOV      r5,r2                 ;295
000056  4604              MOV      r4,r0                 ;295
000058  4689              MOV      r9,r1                 ;295
00005a  4558              CMP      r0,r11                ;304
00005c  d106              BNE      |L1.108|
00005e  2101              MOVS     r1,#1                 ;306
000060  2002              MOVS     r0,#2                 ;306
000062  f7fffffe          BL       CLKPWR_ConfigPPWR
000066  2100              MOVS     r1,#0                 ;308
000068  2002              MOVS     r0,#2                 ;308
00006a  e019              B        |L1.160|
                  |L1.108|
00006c  4554              CMP      r4,r10                ;310
00006e  d106              BNE      |L1.126|
000070  2101              MOVS     r1,#1                 ;312
000072  2004              MOVS     r0,#4                 ;312
000074  f7fffffe          BL       CLKPWR_ConfigPPWR
000078  2101              MOVS     r1,#1                 ;314
00007a  2004              MOVS     r0,#4                 ;314
00007c  e010              B        |L1.160|
                  |L1.126|
00007e  42b4              CMP      r4,r6                 ;318
000080  d106              BNE      |L1.144|
000082  2101              MOVS     r1,#1                 ;320
000084  0588              LSLS     r0,r1,#22             ;320
000086  f7fffffe          BL       CLKPWR_ConfigPPWR
00008a  2100              MOVS     r1,#0                 ;322
00008c  202c              MOVS     r0,#0x2c              ;322
00008e  e007              B        |L1.160|
                  |L1.144|
000090  42bc              CMP      r4,r7
000092  d107              BNE      |L1.164|
;;;325    	{
;;;326    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM3, ENABLE);
000094  2101              MOVS     r1,#1
000096  05c8              LSLS     r0,r1,#23
000098  f7fffffe          BL       CLKPWR_ConfigPPWR
;;;327    		//PCLK_Timer3= CCLK/4
;;;328    		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_4);
00009c  2100              MOVS     r1,#0
00009e  202e              MOVS     r0,#0x2e
                  |L1.160|
0000a0  f7fffffe          BL       CLKPWR_SetPCLKDiv
                  |L1.164|
;;;329    
;;;330    	}
;;;331    
;;;332    	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
0000a4  6aa0              LDR      r0,[r4,#0x28]
0000a6  f0200003          BIC      r0,r0,#3
0000aa  62a0              STR      r0,[r4,#0x28]
;;;333    	TIMx->CCR |= TIM_TIMER_MODE;
0000ac  6aa0              LDR      r0,[r4,#0x28]
0000ae  62a0              STR      r0,[r4,#0x28]
;;;334    
;;;335    	TIMx->TC =0;
0000b0  f04f0800          MOV      r8,#0
0000b4  f8c48008          STR      r8,[r4,#8]
;;;336    	TIMx->PC =0;
0000b8  f8c48010          STR      r8,[r4,#0x10]
;;;337    	TIMx->PR =0;
0000bc  f8c4800c          STR      r8,[r4,#0xc]
;;;338    	TIMx->TCR |= (1<<1); //Reset Counter
0000c0  6860              LDR      r0,[r4,#4]
0000c2  f0400002          ORR      r0,r0,#2
0000c6  6060              STR      r0,[r4,#4]
;;;339    	TIMx->TCR &= ~(1<<1); //release reset
0000c8  6860              LDR      r0,[r4,#4]
0000ca  f0200002          BIC      r0,r0,#2
0000ce  6060              STR      r0,[r4,#4]
;;;340    	if (TimerCounterMode == TIM_TIMER_MODE )
0000d0  ea5f0009          MOVS     r0,r9
0000d4  f04f39ff          MOV      r9,#0xffffffff
0000d8  d007              BEQ      |L1.234|
;;;341    	{
;;;342    		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
;;;343    		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
;;;344    		{
;;;345    			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
;;;346    		}
;;;347    		else
;;;348    		{
;;;349    			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
;;;350    		}
;;;351    	}
;;;352    	else
;;;353    	{
;;;354    
;;;355    		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
;;;356    		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
0000da  6aa0              LDR      r0,[r4,#0x28]
0000dc  f020000c          BIC      r0,r0,#0xc
0000e0  62a0              STR      r0,[r4,#0x28]
;;;357    		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
0000e2  7868              LDRB     r0,[r5,#1]
0000e4  2801              CMP      r0,#1
0000e6  d037              BEQ      |L1.344|
0000e8  e03a              B        |L1.352|
                  |L1.234|
0000ea  7828              LDRB     r0,[r5,#0]            ;343
0000ec  b120              CBZ      r0,|L1.248|
0000ee  4648              MOV      r0,r9                 ;343
0000f0  455c              CMP      r4,r11                ;343
0000f2  d103              BNE      |L1.252|
0000f4  2000              MOVS     r0,#0                 ;343
0000f6  e00f              B        |L1.280|
                  |L1.248|
0000f8  6868              LDR      r0,[r5,#4]            ;345
0000fa  e02a              B        |L1.338|
                  |L1.252|
0000fc  4651              MOV      r1,r10                ;345
0000fe  4622              MOV      r2,r4                 ;345
000100  428c              CMP      r4,r1                 ;345
000102  d101              BNE      |L1.264|
000104  2001              MOVS     r0,#1                 ;345
000106  e007              B        |L1.280|
                  |L1.264|
000108  4611              MOV      r1,r2                 ;345
00010a  42b2              CMP      r2,r6                 ;345
00010c  d101              BNE      |L1.274|
00010e  2002              MOVS     r0,#2                 ;345
000110  e002              B        |L1.280|
                  |L1.274|
000112  42b9              CMP      r1,r7                 ;345
000114  d100              BNE      |L1.280|
000116  2003              MOVS     r0,#3                 ;345
                  |L1.280|
000118  686d              LDR      r5,[r5,#4]            ;349
00011a  b130              CBZ      r0,|L1.298|
00011c  2801              CMP      r0,#1                 ;349
00011e  d006              BEQ      |L1.302|
000120  2802              CMP      r0,#2                 ;349
000122  d006              BEQ      |L1.306|
000124  2803              CMP      r0,#3                 ;349
000126  d10a              BNE      |L1.318|
000128  e005              B        |L1.310|
                  |L1.298|
00012a  2002              MOVS     r0,#2                 ;349
00012c  e004              B        |L1.312|
                  |L1.302|
00012e  2004              MOVS     r0,#4                 ;349
000130  e002              B        |L1.312|
                  |L1.306|
000132  202c              MOVS     r0,#0x2c              ;349
000134  e000              B        |L1.312|
                  |L1.310|
000136  202e              MOVS     r0,#0x2e              ;349
                  |L1.312|
000138  f7fffffe          BL       CLKPWR_GetPCLK
00013c  4601              MOV      r1,r0                 ;349
                  |L1.318|
00013e  fba10205          UMULL    r0,r2,r1,r5           ;349
000142  fb082205          MLA      r2,r8,r5,r2           ;349
000146  fb012108          MLA      r1,r1,r8,r2           ;349
00014a  4a6a              LDR      r2,|L1.756|
00014c  2300              MOVS     r3,#0                 ;349
00014e  f7fffffe          BL       __aeabi_uldivmod
                  |L1.338|
000152  1e40              SUBS     r0,r0,#1              ;349
000154  60e0              STR      r0,[r4,#0xc]          ;345
000156  e003              B        |L1.352|
                  |L1.344|
;;;358    			TIMx->CCR |= _BIT(2);
000158  6aa0              LDR      r0,[r4,#0x28]
00015a  f0400004          ORR      r0,r0,#4
00015e  62a0              STR      r0,[r4,#0x28]
                  |L1.352|
;;;359    	}
;;;360    
;;;361    	// Clear interrupt pending
;;;362    	TIMx->IR = 0xFFFFFFFF;
000160  f8c49000          STR      r9,[r4,#0]
;;;363    
;;;364    }
000164  e8bd9ff0          POP      {r4-r12,pc}
;;;365    
                          ENDP

                  TIM_DeInit PROC
;;;374     **********************************************************************/
;;;375    void TIM_DeInit (LPC_TIM_TypeDef *TIMx)
000168  2100              MOVS     r1,#0
;;;376    {
;;;377    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;378    	// Disable timer/counter
;;;379    	TIMx->TCR = 0x00;
00016a  6041              STR      r1,[r0,#4]
;;;380    
;;;381    	// Disable power
;;;382    	if (TIMx== LPC_TIM0)
00016c  f1b02f40          CMP      r0,#0x40004000
000170  d005              BEQ      |L1.382|
;;;383    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, DISABLE);
;;;384    
;;;385    	else if (TIMx== LPC_TIM1)
000172  495d              LDR      r1,|L1.744|
000174  4288              CMP      r0,r1
000176  d105              BNE      |L1.388|
;;;386    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, DISABLE);
000178  2100              MOVS     r1,#0
00017a  2004              MOVS     r0,#4
00017c  e00c              B        |L1.408|
                  |L1.382|
00017e  2100              MOVS     r1,#0                 ;383
000180  2002              MOVS     r0,#2                 ;383
000182  e009              B        |L1.408|
                  |L1.388|
;;;387    
;;;388    	else if (TIMx== LPC_TIM2)
000184  4959              LDR      r1,|L1.748|
;;;389    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
000186  f44f0280          MOV      r2,#0x400000
00018a  4288              CMP      r0,r1                 ;388
00018c  d002              BEQ      |L1.404|
;;;390    
;;;391    	else if (TIMx== LPC_TIM3)
00018e  4958              LDR      r1,|L1.752|
000190  4288              CMP      r0,r1
000192  d103              BNE      |L1.412|
                  |L1.404|
;;;392    		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, DISABLE);
000194  2100              MOVS     r1,#0
000196  4610              MOV      r0,r2
                  |L1.408|
000198  f7ffbffe          B.W      CLKPWR_ConfigPPWR
                  |L1.412|
;;;393    
;;;394    }
00019c  4770              BX       lr
;;;395    
                          ENDP

                  TIM_Cmd PROC
;;;407     **********************************************************************/
;;;408    void TIM_Cmd(LPC_TIM_TypeDef *TIMx, FunctionalState NewState)
00019e  2901              CMP      r1,#1
;;;409    {
;;;410    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;411    	if (NewState == ENABLE)
;;;412    	{
;;;413    		TIMx->TCR	|=  TIM_ENABLE;
;;;414    	}
;;;415    	else
;;;416    	{
;;;417    		TIMx->TCR &= ~TIM_ENABLE;
0001a0  6841              LDR      r1,[r0,#4]
0001a2  d003              BEQ      |L1.428|
0001a4  f0210101          BIC      r1,r1,#1
                  |L1.424|
0001a8  6041              STR      r1,[r0,#4]            ;413
;;;418    	}
;;;419    }
0001aa  4770              BX       lr
                  |L1.428|
0001ac  f0410101          ORR      r1,r1,#1              ;413
0001b0  e7fa              B        |L1.424|
;;;420    
                          ENDP

                  TIM_ResetCounter PROC
;;;431     **********************************************************************/
;;;432    void TIM_ResetCounter(LPC_TIM_TypeDef *TIMx)
0001b2  6841              LDR      r1,[r0,#4]
;;;433    {
;;;434    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;435    	TIMx->TCR |= TIM_RESET;
0001b4  f0410102          ORR      r1,r1,#2
0001b8  6041              STR      r1,[r0,#4]
;;;436    	TIMx->TCR &= ~TIM_RESET;
0001ba  6841              LDR      r1,[r0,#4]
0001bc  f0210102          BIC      r1,r1,#2
0001c0  6041              STR      r1,[r0,#4]
;;;437    }
0001c2  4770              BX       lr
;;;438    
                          ENDP

                  TIM_ConfigMatch PROC
;;;461     **********************************************************************/
;;;462    void TIM_ConfigMatch(LPC_TIM_TypeDef *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
0001c4  b530              PUSH     {r4,r5,lr}
;;;463    {
;;;464    
;;;465    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;466    	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
;;;467    
;;;468    	switch(TIM_MatchConfigStruct->MatchChannel)
0001c6  780a              LDRB     r2,[r1,#0]
0001c8  b132              CBZ      r2,|L1.472|
0001ca  2a01              CMP      r2,#1
0001cc  d007              BEQ      |L1.478|
0001ce  2a02              CMP      r2,#2
0001d0  d008              BEQ      |L1.484|
0001d2  2a03              CMP      r2,#3
0001d4  d009              BEQ      |L1.490|
                  |L1.470|
;;;469    	{
;;;470    	case 0:
;;;471    		TIMx->MR0 = TIM_MatchConfigStruct->MatchValue;
;;;472    		break;
;;;473    	case 1:
;;;474    		TIMx->MR1 = TIM_MatchConfigStruct->MatchValue;
;;;475    		break;
;;;476    	case 2:
;;;477    		TIMx->MR2 = TIM_MatchConfigStruct->MatchValue;
;;;478    		break;
;;;479    	case 3:
;;;480    		TIMx->MR3 = TIM_MatchConfigStruct->MatchValue;
;;;481    		break;
;;;482    	default:
;;;483    		//Error match value
;;;484    		//Error loop
;;;485    		while(1);
0001d6  e7fe              B        |L1.470|
                  |L1.472|
0001d8  688a              LDR      r2,[r1,#8]            ;471
0001da  6182              STR      r2,[r0,#0x18]         ;471
0001dc  e007              B        |L1.494|
                  |L1.478|
0001de  688a              LDR      r2,[r1,#8]            ;474
0001e0  61c2              STR      r2,[r0,#0x1c]         ;474
0001e2  e004              B        |L1.494|
                  |L1.484|
0001e4  688a              LDR      r2,[r1,#8]            ;477
0001e6  6202              STR      r2,[r0,#0x20]         ;477
0001e8  e001              B        |L1.494|
                  |L1.490|
0001ea  688a              LDR      r2,[r1,#8]            ;480
0001ec  6242              STR      r2,[r0,#0x24]         ;480
                  |L1.494|
;;;486    	}
;;;487    	//interrupt on MRn
;;;488    	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
0001ee  6942              LDR      r2,[r0,#0x14]
0001f0  780b              LDRB     r3,[r1,#0]
0001f2  eb030443          ADD      r4,r3,r3,LSL #1
0001f6  2307              MOVS     r3,#7
0001f8  40a3              LSLS     r3,r3,r4
0001fa  439a              BICS     r2,r2,r3
0001fc  6142              STR      r2,[r0,#0x14]
;;;489    
;;;490    	if (TIM_MatchConfigStruct->IntOnMatch)
0001fe  784b              LDRB     r3,[r1,#1]
000200  2201              MOVS     r2,#1                 ;468
000202  b13b              CBZ      r3,|L1.532|
;;;491    		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
000204  6943              LDR      r3,[r0,#0x14]
000206  780c              LDRB     r4,[r1,#0]
000208  eb040444          ADD      r4,r4,r4,LSL #1
00020c  fa02f404          LSL      r4,r2,r4
000210  4323              ORRS     r3,r3,r4
000212  6143              STR      r3,[r0,#0x14]
                  |L1.532|
;;;492    
;;;493    	//reset on MRn
;;;494    	if (TIM_MatchConfigStruct->ResetOnMatch)
000214  78cb              LDRB     r3,[r1,#3]
000216  b143              CBZ      r3,|L1.554|
;;;495    		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
000218  6943              LDR      r3,[r0,#0x14]
00021a  780c              LDRB     r4,[r1,#0]
00021c  eb040444          ADD      r4,r4,r4,LSL #1
000220  1c64              ADDS     r4,r4,#1
000222  fa02f404          LSL      r4,r2,r4
000226  4323              ORRS     r3,r3,r4
000228  6143              STR      r3,[r0,#0x14]
                  |L1.554|
;;;496    
;;;497    	//stop on MRn
;;;498    	if (TIM_MatchConfigStruct->StopOnMatch)
00022a  788b              LDRB     r3,[r1,#2]
00022c  b13b              CBZ      r3,|L1.574|
;;;499    		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
00022e  6943              LDR      r3,[r0,#0x14]
000230  780c              LDRB     r4,[r1,#0]
000232  eb040444          ADD      r4,r4,r4,LSL #1
000236  1ca4              ADDS     r4,r4,#2
000238  40a2              LSLS     r2,r2,r4
00023a  4313              ORRS     r3,r3,r2
00023c  6143              STR      r3,[r0,#0x14]
                  |L1.574|
;;;500    
;;;501    	// match output type
;;;502    
;;;503    	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
00023e  6bc3              LDR      r3,[r0,#0x3c]
000240  780c              LDRB     r4,[r1,#0]
000242  2204              MOVS     r2,#4
000244  eb020544          ADD      r5,r2,r4,LSL #1
000248  2403              MOVS     r4,#3
00024a  40ac              LSLS     r4,r4,r5
00024c  43a3              BICS     r3,r3,r4
00024e  63c3              STR      r3,[r0,#0x3c]
;;;504    	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
000250  790b              LDRB     r3,[r1,#4]
000252  7809              LDRB     r1,[r1,#0]
000254  f0030303          AND      r3,r3,#3
000258  eb020141          ADD      r1,r2,r1,LSL #1
00025c  408b              LSLS     r3,r3,r1
00025e  6bc1              LDR      r1,[r0,#0x3c]
000260  430b              ORRS     r3,r3,r1
000262  63c3              STR      r3,[r0,#0x3c]
;;;505    }
000264  bd30              POP      {r4,r5,pc}
;;;506    /*********************************************************************//**
                          ENDP

                  TIM_UpdateMatchValue PROC
;;;516     **********************************************************************/
;;;517    void TIM_UpdateMatchValue(LPC_TIM_TypeDef *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
000266  b131              CBZ      r1,|L1.630|
;;;518    {
;;;519    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;520    	switch(MatchChannel)
000268  2901              CMP      r1,#1
00026a  d006              BEQ      |L1.634|
00026c  2902              CMP      r1,#2
00026e  d006              BEQ      |L1.638|
000270  2903              CMP      r1,#3
000272  d006              BEQ      |L1.642|
                  |L1.628|
;;;521    	{
;;;522    	case 0:
;;;523    		TIMx->MR0 = MatchValue;
;;;524    		break;
;;;525    	case 1:
;;;526    		TIMx->MR1 = MatchValue;
;;;527    		break;
;;;528    	case 2:
;;;529    		TIMx->MR2 = MatchValue;
;;;530    		break;
;;;531    	case 3:
;;;532    		TIMx->MR3 = MatchValue;
;;;533    		break;
;;;534    	default:
;;;535    		//Error Loop
;;;536    		while(1);
000274  e7fe              B        |L1.628|
                  |L1.630|
000276  6182              STR      r2,[r0,#0x18]         ;523
;;;537    	}
;;;538    
;;;539    }
000278  4770              BX       lr
                  |L1.634|
00027a  61c2              STR      r2,[r0,#0x1c]         ;526
00027c  4770              BX       lr
                  |L1.638|
00027e  6202              STR      r2,[r0,#0x20]         ;529
000280  4770              BX       lr
                  |L1.642|
000282  6242              STR      r2,[r0,#0x24]         ;532
000284  4770              BX       lr
;;;540    /*********************************************************************//**
                          ENDP

                  TIM_ConfigCapture PROC
;;;553     **********************************************************************/
;;;554    void TIM_ConfigCapture(LPC_TIM_TypeDef *TIMx, TIM_CAPTURECFG_Type *TIM_CaptureConfigStruct)
000286  b510              PUSH     {r4,lr}
;;;555    {
;;;556    
;;;557    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;558    	TIMx->CCR &= ~TIM_CCR_CHANNEL_MASKBIT(TIM_CaptureConfigStruct->CaptureChannel);
000288  6a82              LDR      r2,[r0,#0x28]
00028a  780b              LDRB     r3,[r1,#0]
00028c  eb030443          ADD      r4,r3,r3,LSL #1
000290  2307              MOVS     r3,#7
000292  40a3              LSLS     r3,r3,r4
000294  439a              BICS     r2,r2,r3
000296  6282              STR      r2,[r0,#0x28]
;;;559    
;;;560    	if (TIM_CaptureConfigStruct->RisingEdge)
000298  784b              LDRB     r3,[r1,#1]
;;;561    		TIMx->CCR |= TIM_CAP_RISING(TIM_CaptureConfigStruct->CaptureChannel);
00029a  2201              MOVS     r2,#1
00029c  b13b              CBZ      r3,|L1.686|
00029e  6a83              LDR      r3,[r0,#0x28]
0002a0  780c              LDRB     r4,[r1,#0]
0002a2  eb040444          ADD      r4,r4,r4,LSL #1
0002a6  fa02f404          LSL      r4,r2,r4
0002aa  4323              ORRS     r3,r3,r4
0002ac  6283              STR      r3,[r0,#0x28]
                  |L1.686|
;;;562    
;;;563    	if (TIM_CaptureConfigStruct->FallingEdge)
0002ae  788b              LDRB     r3,[r1,#2]
0002b0  b143              CBZ      r3,|L1.708|
;;;564    		TIMx->CCR |= TIM_CAP_FALLING(TIM_CaptureConfigStruct->CaptureChannel);
0002b2  6a83              LDR      r3,[r0,#0x28]
0002b4  780c              LDRB     r4,[r1,#0]
0002b6  eb040444          ADD      r4,r4,r4,LSL #1
0002ba  1c64              ADDS     r4,r4,#1
0002bc  fa02f404          LSL      r4,r2,r4
0002c0  4323              ORRS     r3,r3,r4
0002c2  6283              STR      r3,[r0,#0x28]
                  |L1.708|
;;;565    
;;;566    	if (TIM_CaptureConfigStruct->IntOnCaption)
0002c4  78cb              LDRB     r3,[r1,#3]
0002c6  2b00              CMP      r3,#0
0002c8  d007              BEQ      |L1.730|
;;;567    		TIMx->CCR |= TIM_INT_ON_CAP(TIM_CaptureConfigStruct->CaptureChannel);
0002ca  6a83              LDR      r3,[r0,#0x28]
0002cc  7809              LDRB     r1,[r1,#0]
0002ce  eb010141          ADD      r1,r1,r1,LSL #1
0002d2  1c89              ADDS     r1,r1,#2
0002d4  408a              LSLS     r2,r2,r1
0002d6  4313              ORRS     r3,r3,r2
0002d8  6283              STR      r3,[r0,#0x28]
                  |L1.730|
;;;568    }
0002da  bd10              POP      {r4,pc}
;;;569    
                          ENDP

                  TIM_GetCaptureValue PROC
;;;581     **********************************************************************/
;;;582    uint32_t TIM_GetCaptureValue(LPC_TIM_TypeDef *TIMx, TIM_COUNTER_INPUT_OPT CaptureChannel)
0002dc  b109              CBZ      r1,|L1.738|
;;;583    {
;;;584    	CHECK_PARAM(PARAM_TIMx(TIMx));
;;;585    	CHECK_PARAM(PARAM_TIM_COUNTER_INPUT_OPT(CaptureChannel));
;;;586    
;;;587    	if(CaptureChannel==0)
;;;588    		return TIMx->CR0;
;;;589    	else
;;;590    		return TIMx->CR1;
0002de  6b00              LDR      r0,[r0,#0x30]
;;;591    }
0002e0  4770              BX       lr
                  |L1.738|
0002e2  6ac0              LDR      r0,[r0,#0x2c]         ;588
0002e4  4770              BX       lr
;;;592    
                          ENDP

0002e6  0000              DCW      0x0000
                  |L1.744|
                          DCD      0x40008000
                  |L1.748|
                          DCD      0x40090000
                  |L1.752|
                          DCD      0x40094000
                  |L1.756|
                          DCD      0x000f4240

;*** Start embedded assembler ***

#line 1 "Drivers\\source\\lpc17xx_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_timer_c_6c20b5c9____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_lpc17xx_timer_c_6c20b5c9____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_timer_c_6c20b5c9____REVSH|
#line 462
|__asm___15_lpc17xx_timer_c_6c20b5c9____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_lpc17xx_timer_c_6c20b5c9____RRX|
#line 649
|__asm___15_lpc17xx_timer_c_6c20b5c9____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\msg.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\msg.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\Main -I.\Drivers -I.\Drivers\include -I.\UCNC -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\msg.crf Main\msg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  Msg PROC
;;;14     
;;;15     void  Msg (const  u8 *format, ...)
000000  b40f              PUSH     {r0-r3}
;;;16     {
000002  b570              PUSH     {r4-r6,lr}
;;;17     //	char * pb;
;;;18     	int len = 0;
;;;19     //    va_list     vArgs;
;;;20     	memset(bufmsg,0,120);
000004  2178              MOVS     r1,#0x78
000006  482e              LDR      r0,|L1.192|
000008  f7fffffe          BL       __aeabi_memclr
;;;21         va_start(vArgs, format);
00000c  4d2d              LDR      r5,|L1.196|
00000e  aa05              ADD      r2,sp,#0x14
;;;22         vsprintf(bufmsg, (char const *)format, vArgs);
000010  1f2c              SUBS     r4,r5,#4
000012  602a              STR      r2,[r5,#0]  ; vArgs
000014  482a              LDR      r0,|L1.192|
000016  9904              LDR      r1,[sp,#0x10]
000018  f7fffffe          BL       __c89vsprintf
;;;23         va_end(vArgs);
00001c  2000              MOVS     r0,#0
;;;24     //	pb = buffer;
;;;25     	//while (*pb++ != 0) len++;
;;;26     	len = strlen(bufmsg);
00001e  6028              STR      r0,[r5,#0]  ; vArgs
000020  4827              LDR      r0,|L1.192|
000022  f7fffffe          BL       strlen
000026  4605              MOV      r5,r0
;;;27     	if ((len+MsgLen) < MsgBufSize) {
000028  8820              LDRH     r0,[r4,#0]  ; MsgLen
00002a  1829              ADDS     r1,r5,r0
00002c  29c8              CMP      r1,#0xc8
00002e  da09              BGE      |L1.68|
;;;28     		memcpy(&(MsgBuf[MsgLen]),bufmsg,len);
000030  4923              LDR      r1,|L1.192|
000032  462a              MOV      r2,r5
000034  39c8              SUBS     r1,r1,#0xc8
000036  4408              ADD      r0,r0,r1
000038  31c8              ADDS     r1,r1,#0xc8
00003a  f7fffffe          BL       __aeabi_memcpy
;;;29     		MsgLen+=len;
00003e  8820              LDRH     r0,[r4,#0]  ; MsgLen
000040  4428              ADD      r0,r0,r5
000042  8020              STRH     r0,[r4,#0]
                  |L1.68|
;;;30     	}
;;;31     }
000044  bc70              POP      {r4-r6}
000046  f85dfb14          LDR      pc,[sp],#0x14
;;;32     
                          ENDP

                  Dump PROC
;;;33     void Dump(u8 * buffer,u16 count){
00004a  e92d41f0          PUSH     {r4-r8,lr}
00004e  b09a              SUB      sp,sp,#0x68
;;;34     	u16 i;
;;;35     	u8 * ptr;
;;;36     	char dmp[100];
;;;37     	u16 j = 0;
000050  2600              MOVS     r6,#0
000052  460f              MOV      r7,r1                 ;33
;;;38     	for (i=0, ptr=buffer;i<count;i++) {
000054  4635              MOV      r5,r6
000056  4604              MOV      r4,r0
000058  46e8              MOV      r8,sp                 ;36
00005a  e00a              B        |L1.114|
                  |L1.92|
;;;39     		j += sprintf(dmp+j,"%02X ",*ptr++);
00005c  f8142b01          LDRB     r2,[r4],#1
000060  eb080006          ADD      r0,r8,r6
000064  a118              ADR      r1,|L1.200|
000066  f7fffffe          BL       __2sprintf
00006a  4430              ADD      r0,r0,r6
00006c  1c6d              ADDS     r5,r5,#1
00006e  b286              UXTH     r6,r0
000070  b2ad              UXTH     r5,r5                 ;38
                  |L1.114|
000072  42bd              CMP      r5,r7                 ;38
000074  d3f2              BCC      |L1.92|
;;;40     	}
;;;41     	Msg((const uint8_t *)dmp);
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       Msg
;;;42     }
00007c  b01a              ADD      sp,sp,#0x68
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;43     
                          ENDP

                  SMsg PROC
;;;44     void	SMsg(void){
000082  b510              PUSH     {r4,lr}
;;;45     
;;;46     	if (MsgLen > 0) {
000084  4c0f              LDR      r4,|L1.196|
000086  1f24              SUBS     r4,r4,#4
000088  8820              LDRH     r0,[r4,#0]  ; MsgLen
00008a  2800              CMP      r0,#0                 ;44
00008c  d017              BEQ      |L1.190|
;;;47     		mbByteToPack(0,0x44);
00008e  2144              MOVS     r1,#0x44
000090  2000              MOVS     r0,#0
000092  f7fffffe          BL       mbByteToPack
;;;48     		mbByteToPack(0,cmDbgMsg);
000096  2166              MOVS     r1,#0x66
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       mbByteToPack
;;;49     		//Проверка максимального значения MsgLen
;;;50     		if (MsgLen >= MsgBufSize) MsgLen = MsgBufSize-1; 
00009e  8820              LDRH     r0,[r4,#0]  ; MsgLen
0000a0  28c8              CMP      r0,#0xc8
0000a2  d301              BCC      |L1.168|
0000a4  20c7              MOVS     r0,#0xc7
0000a6  8020              STRH     r0,[r4,#0]
                  |L1.168|
;;;51     		mbBufferToPack(0,&(MsgBuf[0]), MsgLen);
0000a8  4905              LDR      r1,|L1.192|
0000aa  b282              UXTH     r2,r0
0000ac  39c8              SUBS     r1,r1,#0xc8
0000ae  2000              MOVS     r0,#0
0000b0  f7fffffe          BL       mbBufferToPack
;;;52     		mbSendPack(0);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       mbSendPack
;;;53     		MsgLen = 0;
0000ba  2000              MOVS     r0,#0
0000bc  8020              STRH     r0,[r4,#0]
                  |L1.190|
;;;54     	}
;;;55     }
0000be  bd10              POP      {r4,pc}
                          ENDP

                  |L1.192|
                          DCD      ||.bss||+0xc8
                  |L1.196|
                          DCD      ||.data||+0x4
                  |L1.200|
0000c8  25303258          DCB      "%02X ",0
0000cc  2000    
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MsgBuf
                          %        200
                  bufmsg
                          %        120

                          AREA ||.data||, DATA, ALIGN=2

                  MsgLen
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  vArgs
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Main\\msg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_msg_c_MsgLen____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_msg_c_MsgLen____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_msg_c_MsgLen____REVSH|
#line 462
|__asm___5_msg_c_MsgLen____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_msg_c_MsgLen____RRX|
#line 649
|__asm___5_msg_c_MsgLen____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\bfs.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\bfs.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\Main -I.\Drivers -I.\Drivers\include -I.\UCNC -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\bfs.crf Main\bFS.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  bFS_Read PROC
;;;5      
;;;6      s8 bFS_Read(tFile fcs_num, u8 *buffer, u32 size, u32 * rbc) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  461d              MOV      r5,r3
000006  0016              MOVS     r6,r2
000008  460f              MOV      r7,r1
00000a  4680              MOV      r8,r0
00000c  d003              BEQ      |L1.22|
;;;7      	u32 i;
;;;8      	s8 res;
;;;9      	if (size == 0) return FS_RESULT_OK;
;;;10     	*rbc = 0;
00000e  2100              MOVS     r1,#0
;;;11     	for (i=0;i < size;i++){
000010  460c              MOV      r4,r1
000012  6029              STR      r1,[r5,#0]
000014  e00c              B        |L1.48|
                  |L1.22|
000016  2000              MOVS     r0,#0                 ;9
                  |L1.24|
;;;12     		res = FS_ReadByte(fcs_num,buffer+i);
;;;13     		if (res < 0) {
;;;14     			return res;
;;;15     		} else {
;;;16     			(*rbc)++;
;;;17     		}
;;;18     	}	
;;;19     	return res;
;;;20     }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  1939              ADDS     r1,r7,r4              ;12
00001e  4640              MOV      r0,r8                 ;12
000020  f7fffffe          BL       FS_ReadByte
000024  2800              CMP      r0,#0                 ;13
000026  dbf7              BLT      |L1.24|
000028  6829              LDR      r1,[r5,#0]            ;16
00002a  1c49              ADDS     r1,r1,#1              ;16
00002c  1c64              ADDS     r4,r4,#1              ;16
00002e  6029              STR      r1,[r5,#0]            ;16
                  |L1.48|
000030  42b4              CMP      r4,r6                 ;11
000032  d3f3              BCC      |L1.28|
000034  e7f0              B        |L1.24|
;;;21     
                          ENDP

                  bFS_ReadLn PROC
;;;22     
;;;23     s8 bFS_ReadLn(tFile fcs_num, u8 *str, u32 max_size) {
000036  e92d43f8          PUSH     {r3-r9,lr}
;;;24     	u32 i;
;;;25     	u8 s;
;;;26     	u8 b;
;;;27     	s8 res;
;;;28     
;;;29     	s = 0; 
00003a  2500              MOVS     r5,#0
00003c  4617              MOV      r7,r2                 ;23
00003e  460e              MOV      r6,r1                 ;23
000040  4680              MOV      r8,r0                 ;23
;;;30     	i = 0;
000042  462c              MOV      r4,r5
;;;31     	if (FS_Eof(fcs_num)==FS_EOF) return FS_EOF;
000044  f7fffffe          BL       FS_Eof
000048  3015              ADDS     r0,r0,#0x15
00004a  d103              BNE      |L1.84|
00004c  f06f0014          MVN      r0,#0x14
                  |L1.80|
;;;32     	do {
;;;33     		res = FS_ReadByte(fcs_num,&b);
;;;34     		if (res < 0) return res;
;;;35     		else {
;;;36     			switch (s) {
;;;37     				case 0:
;;;38     					// читаем все символы до 13
;;;39     					*(str+i) = b;
;;;40     					if (b == 13) s=1;
;;;41     				break;
;;;42     	
;;;43     				case 1:
;;;44     					if (b == 10) {
;;;45     						// следующий симпол за 13 должен быть 10
;;;46     						*(str+i) = b;
;;;47     						// выходим
;;;48     						return FS_RESULT_OK;
;;;49     					} else {
;;;50     						// следующий за 13 символ не 10
;;;51     						FS_RSeek(fcs_num,-1);
;;;52     						// сдвигаемся на предыдущий символ и выходим
;;;53     						return FS_RESULT_OK;
;;;54     					}
;;;55     //				break;
;;;56     			}
;;;57     		}
;;;58     		i++;
;;;59     	} while	(i<max_size);
;;;60     	// если переехали max_size тоже выходим
;;;61     	return FS_RESULT_OK;
;;;62     }
000050  e8bd83f8          POP      {r3-r9,pc}
                  |L1.84|
000054  4669              MOV      r1,sp                 ;33
000056  4640              MOV      r0,r8                 ;33
000058  f7fffffe          BL       FS_ReadByte
00005c  2800              CMP      r0,#0                 ;34
00005e  dbf7              BLT      |L1.80|
000060  b115              CBZ      r5,|L1.104|
000062  2d01              CMP      r5,#1                 ;36
000064  d108              BNE      |L1.120|
000066  e00c              B        |L1.130|
                  |L1.104|
000068  f89d0000          LDRB     r0,[sp,#0]            ;39
00006c  5530              STRB     r0,[r6,r4]            ;39
00006e  f89d0000          LDRB     r0,[sp,#0]            ;40
000072  280d              CMP      r0,#0xd               ;40
000074  d100              BNE      |L1.120|
000076  2501              MOVS     r5,#1                 ;40
                  |L1.120|
000078  1c64              ADDS     r4,r4,#1              ;40
00007a  42bc              CMP      r4,r7                 ;59
00007c  d3ea              BCC      |L1.84|
                  |L1.126|
00007e  2000              MOVS     r0,#0                 ;61
000080  e7e6              B        |L1.80|
                  |L1.130|
000082  f89d0000          LDRB     r0,[sp,#0]            ;44
000086  280a              CMP      r0,#0xa               ;44
000088  d005              BEQ      |L1.150|
00008a  f04f31ff          MOV      r1,#0xffffffff        ;51
00008e  4640              MOV      r0,r8                 ;51
000090  f7fffffe          BL       FS_RSeek
000094  e7f3              B        |L1.126|
                  |L1.150|
000096  5530              STRB     r0,[r6,r4]            ;46
000098  e7f1              B        |L1.126|
;;;63     
                          ENDP

                  FS_ReadPrevByte PROC
;;;64     s8 FS_ReadPrevByte(tFile fcs_num,u8 * b){
00009a  b5f8              PUSH     {r3-r7,lr}
00009c  460c              MOV      r4,r1
00009e  4606              MOV      r6,r0
;;;65     	s32 pos;
;;;66     	s8 res;
;;;67     	res = FS_Pos(fcs_num,&pos);
0000a0  4669              MOV      r1,sp
0000a2  f7fffffe          BL       FS_Pos
;;;68     	if (res) return res;
0000a6  2800              CMP      r0,#0
0000a8  d113              BNE      |L1.210|
;;;69     	// получили позицию в pos
;;;70     	if (pos) {
0000aa  9800              LDR      r0,[sp,#0]
0000ac  b190              CBZ      r0,|L1.212|
;;;71     		res = FS_RSeek(fcs_num,-1);
0000ae  f04f35ff          MOV      r5,#0xffffffff
0000b2  4629              MOV      r1,r5
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       FS_RSeek
;;;72     		if (res) return res;
0000ba  2800              CMP      r0,#0
0000bc  d109              BNE      |L1.210|
;;;73     		res = FS_ReadByte(fcs_num,b);
0000be  4621              MOV      r1,r4
0000c0  4630              MOV      r0,r6
0000c2  f7fffffe          BL       FS_ReadByte
;;;74     		if (res) return res;
0000c6  2800              CMP      r0,#0
0000c8  d103              BNE      |L1.210|
;;;75     		res = FS_RSeek(fcs_num,-1);
0000ca  4629              MOV      r1,r5
0000cc  4630              MOV      r0,r6
0000ce  f7fffffe          BL       FS_RSeek
                  |L1.210|
;;;76     		return res;
;;;77     	} else {
;;;78     		*b = 0;
;;;79     		return FS_BOF;
;;;80     	}
;;;81     }
0000d2  bdf8              POP      {r3-r7,pc}
                  |L1.212|
0000d4  2000              MOVS     r0,#0                 ;78
0000d6  7020              STRB     r0,[r4,#0]            ;78
0000d8  f06f0015          MVN      r0,#0x15              ;79
0000dc  bdf8              POP      {r3-r7,pc}
;;;82     
                          ENDP

                  bFS_BReadLn PROC
;;;83     s8 bFS_BReadLn(tFile fcs_num, u8 *str, u32 max_size) {
0000de  b5fe              PUSH     {r1-r7,lr}
0000e0  460e              MOV      r6,r1
0000e2  4615              MOV      r5,r2
0000e4  4607              MOV      r7,r0
;;;84     // прочитать строку в обратном направлении
;;;85     	u8 s;
;;;86     	u8 b;
;;;87     	s8 res;
;;;88     	s32 fixpos;
;;;89     	s32 pos;
;;;90     
;;;91     	s = 0; 
0000e6  2400              MOVS     r4,#0
;;;92     
;;;93     	// если стоим в начале то ничего вычитать не можем
;;;94     	res = FS_Pos(fcs_num,&pos);
0000e8  a901              ADD      r1,sp,#4
0000ea  f7fffffe          BL       FS_Pos
;;;95     	if (res) return res;
0000ee  2800              CMP      r0,#0
0000f0  d103              BNE      |L1.250|
;;;96     	if (pos==0) return FS_BOF; // выходим
0000f2  9801              LDR      r0,[sp,#4]
0000f4  b940              CBNZ     r0,|L1.264|
0000f6  f06f0015          MVN      r0,#0x15
                  |L1.250|
;;;97     
;;;98     	// идем по файлу в обратном направлении
;;;99     	// до начала или до 2-х вхождений символа 13
;;;100    	while ((FS_ReadPrevByte(fcs_num,&b)==0)&&(s < 2)) {
;;;101    		if (b == 13) s++;
;;;102    	}
;;;103    	res = FS_Pos(fcs_num,&pos);
;;;104    	if (res) return res;
;;;105    	if (pos) {
;;;106    		// если не в начале файла
;;;107    		// вычитываем три символа XX 13 10
;;;108    		FS_ReadByte(fcs_num,&b);
;;;109    		FS_ReadByte(fcs_num,&b);
;;;110    		FS_ReadByte(fcs_num,&b);
;;;111    	}	
;;;112    	// здесь гарантированно стоим на первом символе пред строки
;;;113    	// фиксирум позицию чтобы вернуться в нее
;;;114    	res = FS_Pos(fcs_num,&fixpos);
;;;115    	if (res) return res;
;;;116    	// читаем строку
;;;117    	res = bFS_ReadLn(fcs_num,str,max_size);
;;;118    	if (res) return res;
;;;119    	// возвращаемся в позицию
;;;120    	res = FS_Seek(fcs_num,fixpos);
;;;121    	return res;
;;;122    }
0000fa  bdfe              POP      {r1-r7,pc}
                  |L1.252|
0000fc  f89d0000          LDRB     r0,[sp,#0]            ;101
000100  280d              CMP      r0,#0xd               ;101
000102  d101              BNE      |L1.264|
000104  1c64              ADDS     r4,r4,#1              ;101
000106  b2e4              UXTB     r4,r4                 ;101
                  |L1.264|
000108  4669              MOV      r1,sp                 ;100
00010a  4638              MOV      r0,r7                 ;100
00010c  f7fffffe          BL       FS_ReadPrevByte
000110  b908              CBNZ     r0,|L1.278|
000112  2c02              CMP      r4,#2                 ;100
000114  d3f2              BCC      |L1.252|
                  |L1.278|
000116  a901              ADD      r1,sp,#4              ;103
000118  4638              MOV      r0,r7                 ;103
00011a  f7fffffe          BL       FS_Pos
00011e  2800              CMP      r0,#0                 ;104
000120  d1eb              BNE      |L1.250|
000122  9801              LDR      r0,[sp,#4]            ;105
000124  b158              CBZ      r0,|L1.318|
000126  4669              MOV      r1,sp                 ;108
000128  4638              MOV      r0,r7                 ;108
00012a  f7fffffe          BL       FS_ReadByte
00012e  4669              MOV      r1,sp                 ;109
000130  4638              MOV      r0,r7                 ;109
000132  f7fffffe          BL       FS_ReadByte
000136  4669              MOV      r1,sp                 ;110
000138  4638              MOV      r0,r7                 ;110
00013a  f7fffffe          BL       FS_ReadByte
                  |L1.318|
00013e  a902              ADD      r1,sp,#8              ;114
000140  4638              MOV      r0,r7                 ;114
000142  f7fffffe          BL       FS_Pos
000146  2800              CMP      r0,#0                 ;115
000148  d1d7              BNE      |L1.250|
00014a  462a              MOV      r2,r5                 ;117
00014c  4631              MOV      r1,r6                 ;117
00014e  4638              MOV      r0,r7                 ;117
000150  f7fffffe          BL       bFS_ReadLn
000154  2800              CMP      r0,#0                 ;118
000156  d1d0              BNE      |L1.250|
000158  4638              MOV      r0,r7                 ;120
00015a  9902              LDR      r1,[sp,#8]            ;120
00015c  f7fffffe          BL       FS_Seek
000160  bdfe              POP      {r1-r7,pc}
;;;123    
                          ENDP

                  bFS_Write PROC
;;;124    s8 bFS_Write(tFile fcs_num, const u8 *buffer, u32 size, u32 * wbc) {
000162  e92d41f0          PUSH     {r4-r8,lr}
000166  460f              MOV      r7,r1
;;;125    	u32 i;
;;;126    	s8 res;
;;;127    	*wbc = 0;
000168  f04f0100          MOV      r1,#0
00016c  461d              MOV      r5,r3                 ;124
00016e  0016              MOVS     r6,r2                 ;124
000170  4680              MOV      r8,r0                 ;124
000172  6019              STR      r1,[r3,#0]            ;124
000174  d001              BEQ      |L1.378|
;;;128    	if (size == 0) return FS_RESULT_OK;
;;;129    	for (i=0;i<size;i++) {
000176  2400              MOVS     r4,#0
000178  e00b              B        |L1.402|
                  |L1.378|
00017a  2000              MOVS     r0,#0                 ;128
                  |L1.380|
;;;130    		res = FS_WriteByte(fcs_num,*(buffer+i));
;;;131    //		res = 0;
;;;132    		if (res < 0) {
;;;133    			return res;
;;;134    		} else {
;;;135    			(*wbc)++;
;;;136    		}
;;;137    	}
;;;138    	return res;
;;;139    }
00017c  e74c              B        |L1.24|
                  |L1.382|
00017e  5d39              LDRB     r1,[r7,r4]            ;130
000180  4640              MOV      r0,r8                 ;130
000182  f7fffffe          BL       FS_WriteByte
000186  2800              CMP      r0,#0                 ;132
000188  dbf8              BLT      |L1.380|
00018a  6829              LDR      r1,[r5,#0]            ;135
00018c  1c49              ADDS     r1,r1,#1              ;135
00018e  1c64              ADDS     r4,r4,#1              ;135
000190  6029              STR      r1,[r5,#0]            ;135
                  |L1.402|
000192  42b4              CMP      r4,r6                 ;129
000194  d3f3              BCC      |L1.382|
000196  e73f              B        |L1.24|
;;;140    
                          ENDP

                  InitStream PROC
;;;141    s8 InitStream(TFileStream *s,tFile fs){
000198  000a              MOVS     r2,r1
00019a  d005              BEQ      |L1.424|
;;;142    	// инициализация потока
;;;143    	if (fs != 0) {
;;;144    		(*s).Pos = 0;
00019c  2100              MOVS     r1,#0
;;;145    		(*s).f = fs;
00019e  6041              STR      r1,[r0,#4]
0001a0  7002              STRB     r2,[r0,#0]
;;;146    		return FS_Seek(fs,((*s).Pos));
0001a2  4610              MOV      r0,r2
0001a4  f7ffbffe          B.W      FS_Seek
                  |L1.424|
;;;147    	} 	
;;;148    	else return -100;
0001a8  f06f0063          MVN      r0,#0x63
;;;149    }
0001ac  4770              BX       lr
;;;150    
                          ENDP

                  bsFS_ReadLn PROC
;;;151    s8 bsFS_ReadLn(TFileStream *s, u8 *str, u32 max_size){
0001ae  b570              PUSH     {r4-r6,lr}
0001b0  460e              MOV      r6,r1
0001b2  4604              MOV      r4,r0
;;;152    	s8 res;	
;;;153       	res = FS_Seek((*s).f,(*s).Pos);
0001b4  6841              LDR      r1,[r0,#4]
0001b6  4615              MOV      r5,r2                 ;151
0001b8  f9900000          LDRSB    r0,[r0,#0]
0001bc  f7fffffe          BL       FS_Seek
;;;154    //	Msg("FS_Seek (%d,%d) = %d \r\n",(*s).f,(*s).Pos,res);
;;;155    	if (res == FS_RESULT_OK) {
0001c0  2800              CMP      r0,#0
0001c2  d10e              BNE      |L1.482|
;;;156    		// позиция есть можно читать
;;;157    		res = bFS_ReadLn((*s).f,str,max_size);
0001c4  f9940000          LDRSB    r0,[r4,#0]
0001c8  462a              MOV      r2,r5
0001ca  4631              MOV      r1,r6
0001cc  f7fffffe          BL       bFS_ReadLn
;;;158    //		Msg("Strm Line: %s\r\n",str);
;;;159    		if (res == FS_RESULT_OK) {
0001d0  2800              CMP      r0,#0
0001d2  d106              BNE      |L1.482|
;;;160    //			res = FS_Pos((*s).f,&((*s).Pos));
;;;161    			return FS_Pos((*s).f,&((*s).Pos));
0001d4  f9940000          LDRSB    r0,[r4,#0]
0001d8  1d21              ADDS     r1,r4,#4
0001da  e8bd4070          POP      {r4-r6,lr}
0001de  f7ffbffe          B.W      FS_Pos
                  |L1.482|
;;;162    //			Msg("FS_Pos( %d, %d) = %d \r\n",(*s).f,((*s).Pos),res);
;;;163    //			return res;
;;;164    		} else return res;
;;;165    	}
;;;166    	else return res;
;;;167    }
0001e2  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  bsFS_BReadLn PROC
;;;169    s8 bsFS_BReadLn(TFileStream *s, u8 *str, u32 max_size){
0001e4  b570              PUSH     {r4-r6,lr}
0001e6  460e              MOV      r6,r1
0001e8  4604              MOV      r4,r0
;;;170    	s8 res;	
;;;171       	res = FS_Seek((*s).f,(*s).Pos);
0001ea  6841              LDR      r1,[r0,#4]
0001ec  4615              MOV      r5,r2                 ;169
0001ee  f9900000          LDRSB    r0,[r0,#0]
0001f2  f7fffffe          BL       FS_Seek
;;;172    	if (res == FS_RESULT_OK) {
0001f6  2800              CMP      r0,#0
0001f8  d10e              BNE      |L1.536|
;;;173    		// позиция есть можно читать
;;;174    		res = bFS_BReadLn((*s).f,str,max_size);
0001fa  f9940000          LDRSB    r0,[r4,#0]
0001fe  462a              MOV      r2,r5
000200  4631              MOV      r1,r6
000202  f7fffffe          BL       bFS_BReadLn
;;;175    		if (res == FS_RESULT_OK) {
000206  2800              CMP      r0,#0
000208  d106              BNE      |L1.536|
;;;176    			return FS_Pos((*s).f,&((*s).Pos));
00020a  f9940000          LDRSB    r0,[r4,#0]
00020e  1d21              ADDS     r1,r4,#4
000210  e8bd4070          POP      {r4-r6,lr}
000214  f7ffbffe          B.W      FS_Pos
                  |L1.536|
;;;177    		} else return res;
;;;178    	}
;;;179    	else return res;
;;;180    }
000218  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP

                  bsFS_Seek PROC
;;;182    s8 bsFS_Seek(TFileStream *s,u32 position){
00021a  b570              PUSH     {r4-r6,lr}
00021c  4604              MOV      r4,r0
00021e  460d              MOV      r5,r1
;;;183    	s8 res;
;;;184    	res = FS_Seek((*s).f,position);
000220  f9900000          LDRSB    r0,[r0,#0]
000224  f7fffffe          BL       FS_Seek
;;;185    	if (res == FS_RESULT_OK) {
000228  2800              CMP      r0,#0
00022a  d100              BNE      |L1.558|
;;;186    		(*s).Pos = position;
00022c  6065              STR      r5,[r4,#4]
                  |L1.558|
;;;187    	}
;;;188    	return res;
;;;189    }
00022e  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

                  bsFS_Pos PROC
;;;191    s8 bsFS_Pos(TFileStream * s,s32 * pos){
000230  6840              LDR      r0,[r0,#4]
;;;192    	*pos = (*s).Pos;
;;;193    	return FS_RESULT_OK;
000232  6008              STR      r0,[r1,#0]
000234  2000              MOVS     r0,#0
;;;194    }
000236  4770              BX       lr
                          ENDP


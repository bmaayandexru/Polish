L 1 "UCNC\ti.c"
N#include "Defs.h"
L 1 "UCNC\Defs.h" 1
N/*****************************************************************/
N//
N//  лндскэ наыху нопедекемхи
N//
N/*****************************************************************/
N
N#ifndef __DEFS_H_
N#define __DEFS_H_
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 11 "UCNC\Defs.h" 2
N
N#define TRUE 	1
N#define FALSE 	0
N
N//--------------------------------------------------
N// йНПНРЙХЕ ХЛЕМЮ ЯРЮМДЮПРМШУ РХОНБ
N//--------------------------------------------------
Ntypedef int8_t   s8;
Ntypedef int16_t  s16;
Ntypedef int32_t  s32;
Ntypedef int64_t  s64;
Ntypedef uint8_t  u8;
Ntypedef uint16_t u16;
Ntypedef uint32_t u32;
Ntypedef uint64_t u64;
Ntypedef u8 bool;
Ntypedef u8 BOOL;
N
N//#define VERSION 0x01020124
N#define VERSION 0x01020124
N// НРКЮДЙЮ ТСМЙЖХХ Move_Handler
N//#define MOVE_D
N// ОХКЮ
N// НРЙКЧВЕМХЕ ГЮЦПСГЙХ ОЮПЮЛЕРПНБ Я ТКЩЬ
N//#define __NOT_LOAD_PARAMS__
N// ОХКЮ
N//#define __SAW__
N// ТПЕГЕП
N#define __FREZER__
N#endif // __DEFS_H_
L 2 "UCNC\ti.c" 2
N#include "ti.h"
L 1 "UCNC\ti.h" 1
N#ifndef __TI_H__
N#define	__TI_H__
N#include "Defs.h"
N#include "Timers.h"
L 1 "UCNC\Timers.h" 1
N#ifndef __TIMERS_H__
N#define __TIMERS_H__
N
N//#include <RTL.h>
N#include "Defs.h"
N
N// ОЕПХНД ЯВЕРЮ ПЕЦХЯРПЮ TC Б МЯ (МЮМНЯЕЙСМДЮУ) ДКЪ БЯЕУ РЮИЛЕПНБ
N#define tmPeriod (100) 
N// ОПНЖЕДСПШ ОЕПЕЯВЕРЮ ДКЪ ЛНДСКЪ Timers
N#define tmSecToTick(x) 	(x*(1000000*1000/tmPeriod))
N#define tmMsToTick(x) 	(x*(1000*1000/tmPeriod))
N#define tmMksToTick(x) 	(x*1000/tmPeriod)
N#define tmTickToMs(x)	((x*tmPeriod)/1000000)
N#define tmTickToMks(x) 	((x*tmPeriod)/1000)
N
N#define TCS_SetInterval(cs,i) 	cs.interval = i
N
N// нркюдйю !!!!
N//#define TCS_SetInterval(cs,i) 	{cs.interval = i; if ((i<5000)&&(i > 2500000)) Msg("i %d\r\n",i);}
N#define TCS_Start(cs) 			{if (!cs.enabled) {*(cs.pMR) = *(cs.pTC) + 2500000; cs.enabled = TRUE;}}
N#define TCS_Stop(cs) 			cs.enabled = FALSE
N#define TCS_Started(cs) 		(cs.enabled)
N
Ntypedef void(*TTimerHandler)(void);
N
Ntypedef struct
N{
N  volatile 	BOOL 	enabled; 
N  volatile 	u32 	interval;   	// Б РХЙЮУ РЮИЛЕПЮ (0,04 ЛЙЯ)
N	volatile	u32*	pMR;
N	volatile 	u32*	pTC;	
N	TTimerHandler 	handler;		// ЮДПЕЯ НАПЮАНРВХЙЮ
N	// НРКЮДЙЮ ОЕПЕУКЕЯРЮ ОПЕПШБЮМХИ
N  volatile 	u32 	dtfix;   		
N  volatile 	u32 	intfix;   	
N} TIMER_CONTROL_STRUCT;
N
N// ТХЙЯХПНБЮМХЕ
Nextern volatile u32 T1T0p,U1T0p,U0T0p;
N// БШМЕЯЕМН ДКЪ НРКЮДЙХ РЮИЛЕПНБ ОНРНЛ САПЮРЭ
N// ХЯОНКЭГСЕРЯЪ Б main.c
Nextern volatile TIMER_CONTROL_STRUCT *T0MR0,*T0MR1,*T0MR2,*T0MR3;
Nextern volatile TIMER_CONTROL_STRUCT *T1MR0,*T1MR1,*T1MR2,*T1MR3;
Nextern volatile TIMER_CONTROL_STRUCT *T2MR0,*T2MR1,*T2MR2,*T2MR3;
Nextern volatile TIMER_CONTROL_STRUCT *T3MR0,*T3MR1,*T3MR2,*T3MR3;
N
Nvoid Init_TCS(volatile TIMER_CONTROL_STRUCT* CTS,u8 t,u8 mr,TTimerHandler h);
N
N
Nvoid InitTimer(u8 num);
Nvoid InitTimer1(u8 num);
N
N//void InitTimer0(u32 pv,u32 mv);
N
N#endif
L 5 "UCNC\ti.h" 2
N
N// ХМРЕПБЮК TIMER1 MR0
N// ЯЛ. InitPlatform() Б main.c
N#define tickPeriod 5000
N// ОЕПХНД Б ЛХЙПНЯЕЙСМДЮУ
N#define timerPeriod (tickPeriod/100) 
N// ОПНЖЕДСПШ ОЕПЕЯВЕРЮ ДКЪ ЛНДСКЪ ti
N#define tiSecToTick(x) 	((x)*(1000000/timerPeriod))
N#define tiMsToTick(x) 	((x)*(1000/timerPeriod))
N#define tiMksToTick(x) 	((x)/timerPeriod)
N#define tiTickToMs(x)	(((x)*timerPeriod)/1000)
N#define tiTickToMks(x) 	((x)*timerPeriod)
N
N// ЯРЮПР ХМРЕПБЮКЮ ni МЮ tickcount ХМРЕПБЮКНБ РЮИЛЕПЮ
N#define StartTI(ni,tickcount) 	ti[ni]=tickcount+1
N// НЯРБМНБЙЮ ХМРЕПБЮКЮ
N#define StopTI(ni)				ti[ni]=1
N// ОПНБЕПЙЮ ХМРЕПБЮКЮ
N#define EndTI(ni)				(ti[ni]==1)
N
N// ЯРЮПР ХМРЕПБЮКЮ ni 
N#define StartTime(ni) 			time[ni] = 1
N// НЯРБМНБЙЮ ХМРЕПБЮКЮ
N#define StopTime(ni)			time[ni] = 0
N// ОПНБЕПЙЮ ХМРЕПБЮКЮ (ПЮГЛЕП)
N#define GetTime(ni)				(time[ni]==0 ? 0:time[ni]-1)
N// ОПНБЕПЙЮ ОСЯЙЮ БПЕЛЕМХ
N#define StartedTime(ni) 			(time[ni] > 0)
N
N
N#define TITimer(Name,Interval,Code,ElseCode) if(EndTI(Name)) \
N	{ \
N		if (Interval) { \
N		{ Code;  StartTI(Name,Interval); } 	\
N		} \
N	} else { \
N		ElseCode; \
N	}
X#define TITimer(Name,Interval,Code,ElseCode) if(EndTI(Name)) 	{ 		if (Interval) { 		{ Code;  StartTI(Name,Interval); } 			} 	} else { 		ElseCode; 	}
N
N#define StartTimeTC(t) t=LPC_TIM0->TC
N#define ShowTimeTC(t,n) if(t)\
N	{\
N		if (t < LPC_TIM0->TC) t=LPC_TIM0->TC-t;\
N		else t=0xFFFFFFFF+LPC_TIM0->TC-t;\
N		Msg("tc%d: %d\r\n",n,t);\
N		t=0;\
N	}
X#define ShowTimeTC(t,n) if(t)	{		if (t < LPC_TIM0->TC) t=LPC_TIM0->TC-t;		else t=0xFFFFFFFF+LPC_TIM0->TC-t;		Msg("tc%d: %d\r\n",n,t);		t=0;	}
N
N// НАЫХИ ДЕЙПЕЛЕМР РЮИЛЕПНБ. пЮЯОНКЮЦЮЕРЯЪ Б НАПЮАНРВХЙЕ РЮИЛЕПЮ
N//inline void DecTIs(void); 
N//inline void IncTimes(void); 
N
Nextern volatile 	u32 	ti[];	// ЛЮЯЯХБ ХМРЕПБЮКНБ ЯВХРЮЧРЯЪ ДЕЙПЕЛЕМРНЛ
Nextern volatile	u32 	time[];	// ЛЮЯЯХБ БПЕЛЕМ ЯВХРЮЧРЯЪ ХМЙПЕЛЕМРНЛ
Nextern TIMER_CONTROL_STRUCT tcs_TI;
Nextern u32 T1,T2,T3;
N
Nvoid TI_Handler(void);
N
N#define tiTx485Delay 0
N
N#define tiTest 		1
N#define tiQTest 	2
N#define tiLensSmdWait 3
N#define tiOutAT 	4
N#define tiPrgExe 	5
N#define tiPrgPause 	6
N#define tiCtrlBlk 	7
N#define tiMBWait 	8
N#define tiQueue 	9
N#define tiTest2 	10
N#define tiFQGetPult 11
N//#define tiFQGetLS	12
N#define tiFQGetPress 13
N#define tiFQTest 	14
N#define tiTestTime	15
N#define tiPrgExeNonStop 16
N#define tiRecBlock 	17
N#define tiRetrySendPoint	18
N
N#define timeWaitUART0 0
N#define timeWaitUART1 1
N#define timeTest	2
N
N#ifdef __FREZER__
N#define timeXdir	3
N#define timeXback	4
N#define timeYdir	5
N#define timeYback	6
N#define timeZdir	7
N#define timeZback	8
N#endif
N
N#define timeIN1		11	
N#define timeIN2		12
N#define timeIN3		13
N#define timeIN4		14
N#define timeIN5		16
N#define timeIN6		17
N#define timeIN7		18
N#define timeIN8		19
N#define timeIN9		20
N#define timeIN10	21
N#define timeIN11	22
N#define timeIN12	23
N#define timeIN13	24
N#define timeIN14	25
N#define timeIN15	26
N#define timeIN16	27
N#define timeSTH		28
N#define timeTrCalc		29
N
N#endif
L 3 "UCNC\ti.c" 2
N#include "Timers.h"
N
N// ДКЪ ОХМНБ
N//#include "VirtualPins.h"
N
N#define ticount 30
N
Nu32 T1=0,T2=0,T3=0;
N
Nvolatile u32 	ti[ticount];
Xvolatile u32 	ti[30];
Nvolatile u32 	time[ticount];	
Xvolatile u32 	time[30];	
N
NTIMER_CONTROL_STRUCT tcs_TI;
N
Nvoid TI_Handler(void){
N	u32 i;
N	for (i=0;i<ticount;i++){
X	for (i=0;i<30;i++){
N		if (ti[i]>1) ti[i]--;
N		if (time[i]>0) time[i]++;
N	}
N}

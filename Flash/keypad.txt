; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\keypad.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\keypad.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\keypad.crf Main\KeyPad.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  KPInit PROC
;;;41     
;;;42     void KPInit(void){
000000  b510              PUSH     {r4,lr}
;;;43     	if (*pUsesKP485) {
000002  4c3a              LDR      r4,|L1.236|
000004  6820              LDR      r0,[r4,#0]  ; pUsesKP485
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0                 ;42
00000a  d025              BEQ      |L1.88|
;;;44     		// установка адреса
;;;45     	//	mbCmd485(0xAA,6,1212,*pAddrKPCtrl);
;;;46     		// отключение 5-й лампы от кнопки
;;;47     		mbCmd485(*pAddrKPCtrl,5,1111,0xFF00);
00000c  6860              LDR      r0,[r4,#4]  ; pAddrKPCtrl
00000e  f44f437f          MOV      r3,#0xff00
000012  f2404257          MOV      r2,#0x457
000016  7800              LDRB     r0,[r0,#0]
000018  2105              MOVS     r1,#5
00001a  f7fffffe          BL       mbCmd485
;;;48     		// настроечные регистры пульта
;;;49     		mbCmd485(*pAddrKPCtrl,6,1200,*pDrDelay); // задержка анти дребезга
00001e  68a0              LDR      r0,[r4,#8]  ; pDrDelay
000020  f44f6296          MOV      r2,#0x4b0
000024  2106              MOVS     r1,#6
000026  8803              LDRH     r3,[r0,#0]
000028  6860              LDR      r0,[r4,#4]  ; pAddrKPCtrl
00002a  7800              LDRB     r0,[r0,#0]
00002c  f7fffffe          BL       mbCmd485
;;;50     		mbCmd485(*pAddrKPCtrl,6,1201,*pDCTime);  // время DoubleClick
000030  68e0              LDR      r0,[r4,#0xc]  ; pDCTime
000032  f24042b1          MOV      r2,#0x4b1
000036  2106              MOVS     r1,#6
000038  8803              LDRH     r3,[r0,#0]
00003a  6860              LDR      r0,[r4,#4]  ; pAddrKPCtrl
00003c  7800              LDRB     r0,[r0,#0]
00003e  f7fffffe          BL       mbCmd485
;;;51     		// установка порога	минимальной скорости
;;;52     		mbCmd485(*pAddrKPCtrl,6,1202,*pPercVmin);
000042  6920              LDR      r0,[r4,#0x10]  ; pPercVmin
000044  f24042b2          MOV      r2,#0x4b2
000048  2106              MOVS     r1,#6
00004a  8803              LDRH     r3,[r0,#0]
00004c  6860              LDR      r0,[r4,#4]  ; pAddrKPCtrl
00004e  7800              LDRB     r0,[r0,#0]
000050  e8bd4010          POP      {r4,lr}
000054  f7ffbffe          B.W      mbCmd485
                  |L1.88|
;;;53     	}
;;;54     }
000058  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  KPQuery PROC
;;;56     void KPQuery(void){
00005a  4824              LDR      r0,|L1.236|
;;;57     	// добавляем в очередь опрос регистров пульта
;;;58     	mbCmd485(*pAddrKPCtrl,3,1200,12);
00005c  230c              MOVS     r3,#0xc
00005e  f44f6296          MOV      r2,#0x4b0
000062  6840              LDR      r0,[r0,#4]  ; pAddrKPCtrl
000064  2103              MOVS     r1,#3
000066  7800              LDRB     r0,[r0,#0]
000068  f7ffbffe          B.W      mbCmd485
;;;59     }
;;;60     
                          ENDP

                  KPAnswer PROC
;;;61     void KPAnswer(u8 * buffer,u16 len){
00006c  b530              PUSH     {r4,r5,lr}
00006e  4604              MOV      r4,r0
;;;62     	u16 Addr;
;;;63     	u8 i;
;;;64     	s16 wbuf[10];
;;;65     //	Msg("kpA %d %d",*(buffer+1),*(buffer+2));
;;;66     //	Dump(buffer,len);
;;;67     	if ((*(buffer+1)==3)&&(*(buffer+2)>=20)){
000070  7840              LDRB     r0,[r0,#1]
000072  b085              SUB      sp,sp,#0x14           ;61
000074  2803              CMP      r0,#3
000076  d137              BNE      |L1.232|
000078  78a0              LDRB     r0,[r4,#2]
00007a  2814              CMP      r0,#0x14
00007c  d334              BCC      |L1.232|
;;;68     		// это ответ на запрос с длиной больше либо равной 20
;;;69     		// проверяем адрес по которому он выполнен
;;;70     		memcpy(&Addr,&(qu.aqu[qu.head].buf[2]),2);
00007e  481c              LDR      r0,|L1.240|
000080  f8b01ce4          LDRH     r1,[r0,#0xce4]  ; qu
000084  eb0102c1          ADD      r2,r1,r1,LSL #3
000088  ebc21181          RSB      r1,r2,r1,LSL #6
00008c  eb000041          ADD      r0,r0,r1,LSL #1
000090  8840              LDRH     r0,[r0,#2]
;;;71     		Addr = swap(Addr);
000092  f7fffffe          BL       swap
;;;72     		//Msg("Addr %d",Addr);
;;;73     		if (Addr == 1200) {
000096  f5b06f96          CMP      r0,#0x4b0
00009a  d125              BNE      |L1.232|
;;;74     			// наш адрес 
;;;75     			// свопим массив
;;;76     			memcpy((u8*)wbuf,(buffer+3),20);
00009c  2214              MOVS     r2,#0x14
00009e  1ce1              ADDS     r1,r4,#3
0000a0  4668              MOV      r0,sp
0000a2  f7fffffe          BL       __aeabi_memcpy
;;;77     			for (i=0;i<10;i++) {wbuf[i]=swap(wbuf[i]);}
0000a6  2400              MOVS     r4,#0
0000a8  ea4f050d          MOV.W    r5,sp                 ;64
                  |L1.172|
0000ac  f8350014          LDRH     r0,[r5,r4,LSL #1]
0000b0  f7fffffe          BL       swap
0000b4  f8250014          STRH     r0,[r5,r4,LSL #1]
0000b8  1c64              ADDS     r4,r4,#1
0000ba  b2e4              UXTB     r4,r4
0000bc  2c0a              CMP      r4,#0xa
0000be  d3f5              BCC      |L1.172|
;;;78     			// отражаем в регистрах если разрешено
;;;79     			if (*pUsesKP485) {
0000c0  480a              LDR      r0,|L1.236|
0000c2  6801              LDR      r1,[r0,#0]  ; pUsesKP485
0000c4  7809              LDRB     r1,[r1,#0]
0000c6  2900              CMP      r1,#0
0000c8  d00e              BEQ      |L1.232|
;;;80     				// здесь нужно поменять знак у wbuf[3,4] 
;;;81     				wbuf[3] = - wbuf[3];
0000ca  f8bd1006          LDRH     r1,[sp,#6]
;;;82     				wbuf[4] = - wbuf[4];
;;;83     				// чтобы не переделывать прошивку пульта
;;;84     				memcpy((u8*)pDrDelay,(u8*)wbuf,20);
0000ce  2214              MOVS     r2,#0x14
0000d0  4249              RSBS     r1,r1,#0              ;81
0000d2  f8ad1006          STRH     r1,[sp,#6]            ;81
0000d6  f8bd1008          LDRH     r1,[sp,#8]            ;82
0000da  4249              RSBS     r1,r1,#0              ;82
0000dc  f8ad1008          STRH     r1,[sp,#8]            ;82
0000e0  4669              MOV      r1,sp
0000e2  6880              LDR      r0,[r0,#8]  ; pDrDelay
0000e4  f7fffffe          BL       __aeabi_memcpy
                  |L1.232|
;;;85     			}
;;;86     		}
;;;87     	}
;;;88     }
0000e8  b005              ADD      sp,sp,#0x14
0000ea  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.236|
                          DCD      ||.data||
                  |L1.240|
                          DCD      ||qu||

                          AREA ||.data||, DATA, ALIGN=2

                  pUsesKP485
                          DCD      0x00000000
                  pAddrKPCtrl
                          DCD      0x00000000
                  pDrDelay
                          DCD      0x00000000
                  pDCTime
                          DCD      0x00000000
                  pPercVmin
                          DCD      0x00000000

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  pYmove
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  pZmove
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  pXmove
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  pUnusedmove
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.data||
                  pBtn5
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  pAxisSwitch
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  pBUZZ
                          DCD      0x00000000

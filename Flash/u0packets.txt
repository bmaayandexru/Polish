; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\u0packets.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\u0packets.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I.\UCNC -I.\Drivers\include -I.\Drivers -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\u0packets.crf Main\u0packets.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DataToU1 PROC
;;;27     
;;;28     void	DataToU1(u8 * buffer,u16 len){
000000  1f89              SUBS     r1,r1,#6
;;;29     	// транзитная передача команд частотника
;;;30     	mbBufferToPack(1,buffer+2,len-6);
000002  b28a              UXTH     r2,r1
000004  b510              PUSH     {r4,lr}               ;28
000006  1c81              ADDS     r1,r0,#2
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       mbBufferToPack
;;;31     	mbInsPackToQueue(quCmdTransit,1);
00000e  2101              MOVS     r1,#1
000010  e8bd4010          POP      {r4,lr}
000014  4608              MOV      r0,r1
000016  f7ffbffe          B.W      mbInsPackToQueue
;;;32     }
;;;33     
                          ENDP

                  RunBootLoader PROC
;;;34     void 	RunBootLoader(void){
00001a  b510              PUSH     {r4,lr}
;;;35     	//SaveRegs();
;;;36     	NVIC_DisableIRQ(UART0_IRQn); 
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       __NVIC_DisableIRQ
;;;37      	NVIC_DisableIRQ(UART1_IRQn); 
000022  2006              MOVS     r0,#6
000024  f7fffffe          BL       __NVIC_DisableIRQ
;;;38     	NVIC_DisableIRQ(TIMER0_IRQn);
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       __NVIC_DisableIRQ
;;;39     	NVIC_DisableIRQ(TIMER1_IRQn);
00002e  2002              MOVS     r0,#2
000030  f7fffffe          BL       __NVIC_DisableIRQ
;;;40     
;;;41     	__disable_irq();
000034  b672              CPSID    i
;;;42     	SCB->VTOR = 0x00000000 & 0x1FFFFF80;
000036  2000              MOVS     r0,#0
000038  49fe              LDR      r1,|L1.1076|
00003a  6008              STR      r0,[r1,#0]
;;;43     	boot_jump(0);
00003c  e8bd4010          POP      {r4,lr}
000040  f7ffbffe          B.W      boot_jump
;;;44     }
;;;45     
                          ENDP

                  ReadRegs PROC
;;;46     void ReadRegs(u8 * buffer,u16 len){
000044  b5f8              PUSH     {r3-r7,lr}
000046  4604              MOV      r4,r0
;;;47     	u16 saddr;
;;;48     	u8 count;
;;;49     	// чтение выходных регистров
;;;50     	memcpy(&saddr,buffer+2,2); // стартовый адрес регистров
000048  8840              LDRH     r0,[r0,#2]
00004a  f8ad0000          STRH     r0,[sp,#0]
;;;51     	//saddr = swap(saddr);
;;;52     	memcpy(&count,buffer+4,1);
;;;53     //	Msg("RR A %X C %d \r\n",saddr,count);
;;;54     	//count = swap(count);
;;;55     	if (saddr > REGS_COUNT-1) {
00004e  b285              UXTH     r5,r0
000050  7926              LDRB     r6,[r4,#4]            ;52
;;;56     		// ошибка
;;;57     		mbByteToPack(0,*buffer);
000052  7821              LDRB     r1,[r4,#0]
000054  f5b57f7a          CMP      r5,#0x3e8             ;55
;;;58     		mbByteToPack(0,*(buffer+1)|0x80);
;;;59     		mbByteToPack(0,MBE_ADDR_FAULT);
;;;60     	} else {
;;;61     		// всё в порядке
;;;62     		mbByteToPack(0,*buffer);
000058  f04f0000          MOV      r0,#0
00005c  d30c              BCC      |L1.120|
00005e  f7fffffe          BL       mbByteToPack
000062  7860              LDRB     r0,[r4,#1]            ;58
000064  f0400180          ORR      r1,r0,#0x80           ;58
000068  2000              MOVS     r0,#0                 ;58
00006a  f7fffffe          BL       mbByteToPack
00006e  2102              MOVS     r1,#2                 ;59
000070  2000              MOVS     r0,#0                 ;59
000072  f7fffffe          BL       mbByteToPack
000076  e013              B        |L1.160|
                  |L1.120|
000078  f7fffffe          BL       mbByteToPack
;;;63     		mbByteToPack(0,*(buffer+1));
00007c  7861              LDRB     r1,[r4,#1]
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       mbByteToPack
000084  4629              MOV      r1,r5
;;;64     		mbWordToPackNoSwap(0,saddr);
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       mbWordToPackNoSwap
00008c  4631              MOV      r1,r6
;;;65     		mbByteToPack(0,(u8)(count));
00008e  2000              MOVS     r0,#0
000090  f7fffffe          BL       mbByteToPack
;;;66     		mbBufferToPack(0,(u8*)&(regs[saddr]),count);
000094  48e8              LDR      r0,|L1.1080|
000096  4632              MOV      r2,r6
000098  1941              ADDS     r1,r0,r5
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       mbBufferToPack
                  |L1.160|
;;;67     //		Msg("D0 %x",regs[saddr]);
;;;68     	}
;;;69     	mbSendPack(0);
0000a0  e8bd40f8          POP      {r3-r7,lr}
0000a4  2000              MOVS     r0,#0
0000a6  f7ffbffe          B.W      mbSendPack
;;;70     }
;;;71     
                          ENDP

                  EnableWrite PROC
;;;72     u8 EnableWrite(u8 * data,u16 saddr,u8 len){
0000aa  e92d5ff0          PUSH     {r4-r12,lr}
0000ae  4683              MOV      r11,r0
;;;73     // возвращает 0 если запись разрешена
;;;74     // 1 если обнаружена попытка записи в регистр только для чтения
;;;75     // 2 регистр пишется не полностью (не сначала)
;;;76     // 3 не хватает данных для записи регистра
;;;77     	u32 tp;
;;;78     	u16 i;
;;;79     	u8 Ecode;
;;;80     	u8 tlen;
;;;81     	int ofs;
;;;82     	tp = (u32)&(regs[saddr]);
0000b0  48e1              LDR      r0,|L1.1080|
;;;83     //	Msg("EnWr a %d l %d\r\n",saddr,len);
;;;84     	// проверка правомерности записи
;;;85     	// поиск адреса в массиве атрибутов и вызов обработчика
;;;86     	Ecode = 0;
0000b2  2500              MOVS     r5,#0
0000b4  4692              MOV      r10,r2                ;72
0000b6  eb000901          ADD      r9,r0,r1              ;82
;;;87     	for (i=0;i<iva;i++) {
0000ba  462e              MOV      r6,r5
;;;88     		if (Cross(tp,len,(u32)va[i].p,va[i].len)){
0000bc  f8df837c          LDR      r8,|L1.1084|
0000c0  4fdf              LDR      r7,|L1.1088|
0000c2  e02b              B        |L1.284|
                  |L1.196|
0000c4  eb0601c6          ADD      r1,r6,r6,LSL #3
0000c8  eb080481          ADD      r4,r8,r1,LSL #2
0000cc  4651              MOV      r1,r10
0000ce  8b23              LDRH     r3,[r4,#0x18]
0000d0  4648              MOV      r0,r9
0000d2  6962              LDR      r2,[r4,#0x14]
0000d4  f7fffffe          BL       Cross
0000d8  b1f0              CBZ      r0,|L1.280|
;;;89     		 	if (va[i].attr==ro) {
0000da  69e0              LDR      r0,[r4,#0x1c]
0000dc  2801              CMP      r0,#1
0000de  d001              BEQ      |L1.228|
;;;90     				// атрибут только чтение
;;;91     				Ecode = 1;
;;;92     			} else
;;;93     			if (va[i].attr==rw) { 
0000e0  b110              CBZ      r0,|L1.232|
0000e2  e019              B        |L1.280|
                  |L1.228|
0000e4  2501              MOVS     r5,#1                 ;91
0000e6  e01c              B        |L1.290|
                  |L1.232|
;;;94     				// атрибут чтение и запись
;;;95     				if (va[i].handle != 0) {
0000e8  6a23              LDR      r3,[r4,#0x20]
0000ea  b1a3              CBZ      r3,|L1.278|
;;;96     					// есть обработчик
;;;97     					// определить смещение данных для регистра и длину
;;;98     					ofs = (int)((u32)va[i].p - tp);
0000ec  6961              LDR      r1,[r4,#0x14]
0000ee  ebb10009          SUBS     r0,r1,r9
;;;99     					if (ofs >= 0) {
0000f2  d40e              BMI      |L1.274|
;;;100    						tlen = len - ofs;
0000f4  ebaa0100          SUB      r1,r10,r0
0000f8  b2ca              UXTB     r2,r1
;;;101    						if (tlen >= va[i].len) {
0000fa  8b21              LDRH     r1,[r4,#0x18]
0000fc  4291              CMP      r1,r2
0000fe  d806              BHI      |L1.270|
;;;102    							// данных достаточно
;;;103    							Ecode = (*(va[i].handle))(va[i].name,data+ofs,tlen);
000100  eb0b0100          ADD      r1,r11,r0
000104  4620              MOV      r0,r4
000106  4798              BLX      r3
000108  0005              MOVS     r5,r0
00010a  d10a              BNE      |L1.290|
00010c  e004              B        |L1.280|
                  |L1.270|
;;;104    						} else {
;;;105    							// данных не достаточно
;;;106    							Ecode = 3;
00010e  2503              MOVS     r5,#3
000110  e007              B        |L1.290|
                  |L1.274|
;;;107    						}
;;;108    					} else {
;;;109    						// смещение отрицательно - регистр пишется не полностью
;;;110    						Ecode = 2;
000112  2502              MOVS     r5,#2
000114  e005              B        |L1.290|
                  |L1.278|
;;;111    					}
;;;112    				} else 
;;;113    					// нет обработчика - запись разрешена	
;;;114    					Ecode = 0;
000116  2500              MOVS     r5,#0
                  |L1.280|
000118  1c76              ADDS     r6,r6,#1
00011a  b2b6              UXTH     r6,r6                 ;87
                  |L1.284|
00011c  8838              LDRH     r0,[r7,#0]            ;87  ; iva
00011e  4286              CMP      r6,r0                 ;87
000120  d3d0              BCC      |L1.196|
                  |L1.290|
;;;115    			}
;;;116    		}
;;;117    		if (Ecode) break;
;;;118    	}
;;;119    	return Ecode;
000122  4628              MOV      r0,r5
;;;120    }
000124  e8bd9ff0          POP      {r4-r12,pc}
;;;121    
                          ENDP

                  _memcpy PROC
;;;122    void _memcpy(u8 * d,u8 * s,u16 count){
000128  b510              PUSH     {r4,lr}
;;;123    	u16 i;
;;;124    	u8 * ps;
;;;125    	u8 * pd;
;;;126    	ps = s;
;;;127    	pd = d;
;;;128    	for (i=0;i<count;i++){
00012a  2300              MOVS     r3,#0
00012c  e006              B        |L1.316|
;;;129    		*pd=*ps;
00012e  bf00              NOP      
                  |L1.304|
000130  f8114b01          LDRB     r4,[r1],#1
000134  1c5b              ADDS     r3,r3,#1
000136  f8004b01          STRB     r4,[r0],#1
00013a  b29b              UXTH     r3,r3                 ;128
                  |L1.316|
00013c  4293              CMP      r3,r2                 ;128
00013e  d3f7              BCC      |L1.304|
;;;130    		pd++; ps++;
;;;131    	}
;;;132    }
000140  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  WriteRegs PROC
;;;134    void WriteRegs(u8 * buffer,u16 len){
000142  b5f0              PUSH     {r4-r7,lr}
000144  4604              MOV      r4,r0
000146  b0c1              SUB      sp,sp,#0x104
;;;135    	// запись РОНов
;;;136    	u16 saddr;
;;;137    	u8 count;
;;;138    	u8 data[255];
;;;139    	u8 ECode;
;;;140    	memcpy(&saddr,buffer+2,2); // стартовый адрес регистров
000148  8840              LDRH     r0,[r0,#2]
00014a  f8ad0100          STRH     r0,[sp,#0x100]
;;;141    	memcpy(&count,buffer+4,1); // количество
00014e  7926              LDRB     r6,[r4,#4]
;;;142    	memcpy(data,buffer+5,count);
000150  1d61              ADDS     r1,r4,#5
000152  4632              MOV      r2,r6
000154  4668              MOV      r0,sp
000156  f7fffffe          BL       __aeabi_memcpy
;;;143    //	Msg("WA a %X с %d %d\r\n",saddr,count,data[0]);
;;;144    //	Dump(data,count);
;;;145    	ECode = EnableWrite(data,saddr,count);
00015a  f8bd1100          LDRH     r1,[sp,#0x100]
00015e  4632              MOV      r2,r6                 ;142
000160  460f              MOV      r7,r1
000162  4668              MOV      r0,sp
000164  f7fffffe          BL       EnableWrite
000168  0005              MOVS     r5,r0
;;;146    //	Msg("WA a %X с %d ecode %d\r\n",saddr,count,ECode);
;;;147    	if (ECode == 0) {
00016a  d012              BEQ      |L1.402|
;;;148    		// всё в порядке
;;;149    //		memcpy(data,buffer+5,count);
;;;150    //		memcpy(regs+saddr,data,count);
;;;151    		_memcpy(&(regs[saddr]),data,count);
;;;152    		mbByteToPack(0,*buffer);
;;;153    		mbByteToPack(0,*(buffer+1));
;;;154    		mbBufferToPack(0,buffer+2,2);
;;;155    		mbBufferToPack(0,buffer+4,1);
;;;156    		mbBufferToPack(0,buffer+5,count);
;;;157    		//Msg("D0 %d",regs[saddr]);
;;;158    	} else {
;;;159    		// ошибка
;;;160    		mbByteToPack(0,*buffer);
00016c  7821              LDRB     r1,[r4,#0]
00016e  2000              MOVS     r0,#0
000170  f7fffffe          BL       mbByteToPack
;;;161    		mbByteToPack(0,*(buffer+1)|0x80);
000174  7860              LDRB     r0,[r4,#1]
000176  f0400180          ORR      r1,r0,#0x80
00017a  2000              MOVS     r0,#0
00017c  f7fffffe          BL       mbByteToPack
;;;162    		mbByteToPack(0,ECode);
000180  4629              MOV      r1,r5
000182  2000              MOVS     r0,#0
000184  f7fffffe          BL       mbByteToPack
                  |L1.392|
;;;163    	}
;;;164    	mbSendPack(0);
000188  2000              MOVS     r0,#0
00018a  f7fffffe          BL       mbSendPack
;;;165    }
00018e  b041              ADD      sp,sp,#0x104
000190  bdf0              POP      {r4-r7,pc}
                  |L1.402|
000192  48a9              LDR      r0,|L1.1080|
000194  4632              MOV      r2,r6                 ;151
000196  4438              ADD      r0,r0,r7              ;151
000198  4669              MOV      r1,sp                 ;151
00019a  f7fffffe          BL       _memcpy
00019e  7821              LDRB     r1,[r4,#0]            ;152
0001a0  2000              MOVS     r0,#0                 ;152
0001a2  f7fffffe          BL       mbByteToPack
0001a6  7861              LDRB     r1,[r4,#1]            ;153
0001a8  2000              MOVS     r0,#0                 ;153
0001aa  f7fffffe          BL       mbByteToPack
0001ae  2202              MOVS     r2,#2                 ;154
0001b0  1ca1              ADDS     r1,r4,#2              ;154
0001b2  2000              MOVS     r0,#0                 ;154
0001b4  f7fffffe          BL       mbBufferToPack
0001b8  2201              MOVS     r2,#1                 ;155
0001ba  1d21              ADDS     r1,r4,#4              ;155
0001bc  2000              MOVS     r0,#0                 ;155
0001be  f7fffffe          BL       mbBufferToPack
0001c2  4632              MOV      r2,r6                 ;155
0001c4  1d61              ADDS     r1,r4,#5              ;156
0001c6  2000              MOVS     r0,#0                 ;156
0001c8  f7fffffe          BL       mbBufferToPack
0001cc  e7dc              B        |L1.392|
;;;166    
                          ENDP

                  GoToPoint PROC
;;;167    void GoToPoint(u8* buffer,u16 len) {
0001ce  e92d41f0          PUSH     {r4-r8,lr}
0001d2  4604              MOV      r4,r0
;;;168    	u8 en;
;;;169    	float x,y;//,xs,ys;
;;;170    	memcpy((u8*)&en,(buffer+2),1);
0001d4  7886              LDRB     r6,[r0,#2]
;;;171    	memcpy((u8*)&x,(buffer+3),4);
0001d6  f8d07003          LDR      r7,[r0,#3]
;;;172    	memcpy((u8*)&y,(buffer+7),4);
0001da  f8d00007          LDR      r0,[r0,#7]
;;;173    	Msg("GoTo en %d x %d y %d\r\n",en,(int)(x),(int)(y));
0001de  f7fffffe          BL       __aeabi_f2iz
0001e2  4605              MOV      r5,r0
0001e4  4638              MOV      r0,r7
0001e6  f7fffffe          BL       __aeabi_f2iz
0001ea  4602              MOV      r2,r0
0001ec  462b              MOV      r3,r5
0001ee  4631              MOV      r1,r6
0001f0  a094              ADR      r0,|L1.1092|
0001f2  f7fffffe          BL       Msg
;;;174    #ifdef __SAW__
;;;175    	InitMove(en,x,y);
;;;176    #endif
;;;177    //	XYToARImp(xs,ys,&ms_A.Pos,&ms_R.Pos);
;;;178    //	Msg(" xs %d ys %d Apos %d Rpos %d\r\n",(int)(xs*1000),(int)(ys*1000),ms_A.Pos,ms_R.Pos);
;;;179    	mbByteToPack(0,*buffer);
0001f6  7821              LDRB     r1,[r4,#0]
0001f8  2000              MOVS     r0,#0
0001fa  f7fffffe          BL       mbByteToPack
;;;180    	mbByteToPack(0,*(buffer+1));
0001fe  7861              LDRB     r1,[r4,#1]
000200  2000              MOVS     r0,#0
000202  f7fffffe          BL       mbByteToPack
;;;181    	mbSendPack(0);
000206  e8bd41f0          POP      {r4-r8,lr}
00020a  2000              MOVS     r0,#0
00020c  f7ffbffe          B.W      mbSendPack
;;;182    }
;;;183    
                          ENDP

                  LSSendProc PROC
;;;184    void LSSendProc(u8* buffer,u16 len) {
000210  b5f8              PUSH     {r3-r7,lr}
;;;185    	u8 st,rev;
;;;186    	u16 Freq,Speed;
;;;187    	memcpy((u8*)&st,(buffer+2),1);
;;;188    	memcpy((u8*)&rev,(buffer+3),1);
000212  78c2              LDRB     r2,[r0,#3]
000214  4604              MOV      r4,r0                 ;184
000216  7887              LDRB     r7,[r0,#2]            ;187
;;;189    	memcpy((u8*)&Speed,(buffer+4),2);
000218  8880              LDRH     r0,[r0,#4]
00021a  f8ad0000          STRH     r0,[sp,#0]
;;;190    	Freq = (int)(Speed  * (*pFnom)/ (*pFdbyFnom));
00021e  488f              LDR      r0,|L1.1116|
000220  498f              LDR      r1,|L1.1120|
000222  f8bd3000          LDRH     r3,[sp,#0]
000226  6800              LDR      r0,[r0,#0]  ; pFnom
000228  6809              LDR      r1,[r1,#0]  ; pFdbyFnom
00022a  4615              MOV      r5,r2                 ;188
00022c  8800              LDRH     r0,[r0,#0]
00022e  8809              LDRH     r1,[r1,#0]
000230  4358              MULS     r0,r3,r0
000232  fb90f0f1          SDIV     r0,r0,r1
000236  b286              UXTH     r6,r0
;;;191    // частота вращения вала об/мин при номинальной частоте сети pFnom Гц
;;;192    //	*pFdbyFnom = 18000;	
;;;193    // номинальная частота сети Гц
;;;194    //	*pFnom = 300;	
;;;195    	Msg("FrConv St %d Rev %d Speed %d Fr %d\r\n",st,rev,Speed,Freq);
000238  4639              MOV      r1,r7
00023a  a08a              ADR      r0,|L1.1124|
00023c  9600              STR      r6,[sp,#0]
00023e  f7fffffe          BL       Msg
;;;196    	if (st) {
;;;197    		QSetPin(COOLER1);
;;;198    		FIUnlock();
;;;199    		FISetFreq(Freq);
;;;200    		FISetDir(rev);
;;;201    		FIStart();		
;;;202    	} else {
;;;203    		QClrPin(COOLER1);
000242  f04f000c          MOV      r0,#0xc
000246  b167              CBZ      r7,|L1.610|
000248  f7fffffe          BL       QSetPin
00024c  f7fffffe          BL       FIUnlock
000250  4630              MOV      r0,r6                 ;199
000252  f7fffffe          BL       FISetFreq
000256  4628              MOV      r0,r5                 ;199
000258  f7fffffe          BL       FISetDir
00025c  f7fffffe          BL       FIStart
000260  e003              B        |L1.618|
                  |L1.610|
000262  f7fffffe          BL       QClrPin
;;;204    		FIStop();
000266  f7fffffe          BL       FIStop
                  |L1.618|
;;;205    	}
;;;206    	mbByteToPack(0,*buffer);
00026a  7821              LDRB     r1,[r4,#0]
00026c  2000              MOVS     r0,#0
00026e  f7fffffe          BL       mbByteToPack
;;;207    	mbByteToPack(0,*(buffer+1));
000272  7861              LDRB     r1,[r4,#1]
000274  2000              MOVS     r0,#0
000276  f7fffffe          BL       mbByteToPack
;;;208    	mbSendPack(0);
00027a  e8bd40f8          POP      {r3-r7,lr}
00027e  2000              MOVS     r0,#0
000280  f7ffbffe          B.W      mbSendPack
;;;209    }
;;;210    
                          ENDP

                  QAllocTable PROC
;;;211    void QAllocTable(u8* buffer,u16 len) {
000284  b510              PUSH     {r4,lr}
000286  4604              MOV      r4,r0
;;;212    	OutAllocTable = 1;
000288  4880              LDR      r0,|L1.1164|
00028a  2101              MOVS     r1,#1
;;;213    	CurVarIndex = 0;
00028c  2200              MOVS     r2,#0
00028e  7001              STRB     r1,[r0,#0]            ;212
000290  487f              LDR      r0,|L1.1168|
;;;214    	Msg("QAllocTable... %d %d %d\r\n",OutAllocTable,CurVarIndex,iva);
000292  6002              STR      r2,[r0,#0]  ; CurVarIndex
000294  486a              LDR      r0,|L1.1088|
000296  8803              LDRH     r3,[r0,#0]  ; iva
000298  a07e              ADR      r0,|L1.1172|
00029a  f7fffffe          BL       Msg
;;;215    	StartTI(tiOutAT,tiMsToTick(200));
00029e  4984              LDR      r1,|L1.1200|
0002a0  f64070a1          MOV      r0,#0xfa1
0002a4  6108              STR      r0,[r1,#0x10]  ; ti
;;;216    	mbByteToPack(0,*buffer);
0002a6  7821              LDRB     r1,[r4,#0]
0002a8  2000              MOVS     r0,#0
0002aa  f7fffffe          BL       mbByteToPack
;;;217    	mbByteToPack(0,*(buffer+1));
0002ae  7861              LDRB     r1,[r4,#1]
0002b0  2000              MOVS     r0,#0
0002b2  f7fffffe          BL       mbByteToPack
;;;218    	mbSendPack(0);
0002b6  e8bd4010          POP      {r4,lr}
0002ba  2000              MOVS     r0,#0
0002bc  f7ffbffe          B.W      mbSendPack
;;;219    }
;;;220    			
                          ENDP

                  pFS_FInfo PROC
;;;221    void pFS_FInfo(u8* buffer,u16 len) {
0002c0  b530              PUSH     {r4,r5,lr}
0002c2  b093              SUB      sp,sp,#0x4c
;;;222    	// объявили структуру 
;;;223    	FInfo vf;
;;;224    	u32 index;
;;;225    	u8 name[15];
;;;226    	u8 ext[4];
;;;227    	u8 attr;
;;;228    	u32 size;
;;;229    	tFile f;
;;;230    	s8 res;
;;;231    
;;;232    	memset(name,0,15);
0002c4  2100              MOVS     r1,#0
0002c6  910e              STR      r1,[sp,#0x38]
;;;233    	memset(ext,0,4);
0002c8  910f              STR      r1,[sp,#0x3c]
;;;234    	index=0;
;;;235    	attr = 0;
0002ca  9110              STR      r1,[sp,#0x40]
0002cc  4604              MOV      r4,r0                 ;221
0002ce  910c              STR      r1,[sp,#0x30]         ;232
0002d0  910d              STR      r1,[sp,#0x34]         ;232
0002d2  f88d1028          STRB     r1,[sp,#0x28]
;;;236    	size = 0;
;;;237    	f = 0;
0002d6  910b              STR      r1,[sp,#0x2c]
0002d8  f88d1024          STRB     r1,[sp,#0x24]
;;;238    
;;;239    	// очистили структуру
;;;240    	memset((void*)&vf,0,sizeof vf);
0002dc  211c              MOVS     r1,#0x1c
0002de  a802              ADD      r0,sp,#8
0002e0  f7fffffe          BL       __aeabi_memclr4
;;;241    	memcpy((u8*)&index,(buffer+2),sizeof index); 
0002e4  f8d40002          LDR      r0,[r4,#2]
;;;242    //	Msg("FS_FInfo Num %d size vf %d\r\n",index,sizeof vf);
;;;243    	// читаем с *(buffer+2) индекс файла
;;;244    	// ищем его в файловой системе
;;;245    	// предполагаем что он найден 
;;;246    	res = FS_GetFileInfo(
0002e8  9011              STR      r0,[sp,#0x44]
0002ea  a909              ADD      r1,sp,#0x24
0002ec  a80b              ADD      r0,sp,#0x2c
0002ee  e9cd0100          STRD     r0,r1,[sp,#0]
0002f2  ab0a              ADD      r3,sp,#0x28
0002f4  aa10              ADD      r2,sp,#0x40
0002f6  a90c              ADD      r1,sp,#0x30
0002f8  a811              ADD      r0,sp,#0x44
0002fa  f7fffffe          BL       FS_GetFileInfo
0002fe  0005              MOVS     r5,r0
;;;247    				&index,
;;;248    				name,
;;;249    				ext,
;;;250    				&attr,
;;;251    				&size,
;;;252    				&f
;;;253    			 );
;;;254    //	Msg("Info i:%d n:%s e:%s a:%2X s:%d f:%d res %d\r\n",index,name,ext,attr,size,f,res);
;;;255    	if (res == FS_RESULT_OK) {
000300  d114              BNE      |L1.812|
;;;256    		vf.index = index;
000302  9811              LDR      r0,[sp,#0x44]
;;;257    		memcpy(vf.name,name,15);
000304  9002              STR      r0,[sp,#8]
000306  220f              MOVS     r2,#0xf
000308  a90c              ADD      r1,sp,#0x30
00030a  a803              ADD      r0,sp,#0xc
00030c  f7fffffe          BL       __aeabi_memcpy4
;;;258    		memcpy(vf.ext,ext,4);
000310  9810              LDR      r0,[sp,#0x40]
000312  f8cd001a          STR      r0,[sp,#0x1a]
;;;259    		vf.attr = attr;
000316  f89d0028          LDRB     r0,[sp,#0x28]
00031a  f88d001e          STRB     r0,[sp,#0x1e]
;;;260    		vf.size = size;
00031e  980b              LDR      r0,[sp,#0x2c]
000320  f8cd001f          STR      r0,[sp,#0x1f]
;;;261    		vf.f = f;
000324  f89d0024          LDRB     r0,[sp,#0x24]
000328  f88d0023          STRB     r0,[sp,#0x23]
                  |L1.812|
;;;262    	}
;;;263    
;;;264    	mbByteToPack(0,*buffer);
00032c  7821              LDRB     r1,[r4,#0]
00032e  2000              MOVS     r0,#0
000330  f7fffffe          BL       mbByteToPack
;;;265    	mbByteToPack(0,*(buffer+1));
000334  7861              LDRB     r1,[r4,#1]
000336  2000              MOVS     r0,#0
000338  f7fffffe          BL       mbByteToPack
;;;266    	mbByteToPack(0,res);
00033c  b2e9              UXTB     r1,r5
00033e  2000              MOVS     r0,#0
000340  f7fffffe          BL       mbByteToPack
;;;267    	mbBufferToPack(0,(u8*)&vf,sizeof vf);
000344  221c              MOVS     r2,#0x1c
000346  a902              ADD      r1,sp,#8
000348  2000              MOVS     r0,#0
00034a  f7fffffe          BL       mbBufferToPack
;;;268    	mbSendPack(0);
00034e  2000              MOVS     r0,#0
000350  f7fffffe          BL       mbSendPack
;;;269    }
000354  b013              ADD      sp,sp,#0x4c
000356  bd30              POP      {r4,r5,pc}
;;;270    
                          ENDP

                  pFS_SetFInfo PROC
;;;271    void pFS_SetFInfo(u8* buffer,u16 len) {
000358  b510              PUSH     {r4,lr}
00035a  4604              MOV      r4,r0
;;;272    	Msg("FS_SetFInfo\r\n");
00035c  a055              ADR      r0,|L1.1204|
00035e  f7fffffe          BL       Msg
;;;273    	// читаем с *(buffer+2) индекс файла
;;;274    	// читаем с *(buffer+3) FInfo
;;;275    	// применяем к файлу с индексом *(buffer+2) параметры FInfo
;;;276    	mbByteToPack(0,*buffer);
000362  7821              LDRB     r1,[r4,#0]
000364  2000              MOVS     r0,#0
000366  f7fffffe          BL       mbByteToPack
;;;277    	mbByteToPack(0,*(buffer+1));
00036a  7861              LDRB     r1,[r4,#1]
00036c  2000              MOVS     r0,#0
00036e  f7fffffe          BL       mbByteToPack
;;;278    	// тут добавить в пакет результат операции
;;;279    	// 0 - всё хорошо
;;;280    	// 1 - нет файла с таким индексом
;;;281    	// 2 - файл открыт
;;;282    	// 
;;;283    	mbSendPack(0);
000372  e8bd4010          POP      {r4,lr}
000376  2000              MOVS     r0,#0
000378  f7ffbffe          B.W      mbSendPack
;;;284    }
;;;285    void pFS_Delete(u8* buffer,u16 len) {
                          ENDP

                  pFS_Delete PROC
00037c  b530              PUSH     {r4,r5,lr}
00037e  b085              SUB      sp,sp,#0x14
000380  4604              MOV      r4,r0
;;;286    	u8 name[20];
;;;287    	s8 res;
;;;288    	memset(name,0,20);
000382  2114              MOVS     r1,#0x14
000384  4668              MOV      r0,sp
000386  f7fffffe          BL       __aeabi_memclr4
;;;289    	memcpy(name,(buffer+3),*(buffer+2));
00038a  78a2              LDRB     r2,[r4,#2]
00038c  1ce1              ADDS     r1,r4,#3
00038e  4668              MOV      r0,sp
000390  f7fffffe          BL       __aeabi_memcpy
;;;290    	res = FS_Delete(name);
000394  4668              MOV      r0,sp
000396  f7fffffe          BL       FS_Delete
00039a  0005              MOVS     r5,r0
;;;291    	if (res < 0) Msg("FS_Delete %s r:%d\r\n",name,res);
00039c  d504              BPL      |L1.936|
00039e  4602              MOV      r2,r0
0003a0  4669              MOV      r1,sp
0003a2  a048              ADR      r0,|L1.1220|
0003a4  f7fffffe          BL       Msg
                  |L1.936|
;;;292    	mbByteToPack(0,*buffer);
0003a8  7821              LDRB     r1,[r4,#0]
0003aa  2000              MOVS     r0,#0
0003ac  f7fffffe          BL       mbByteToPack
;;;293    	mbByteToPack(0,*(buffer+1));
0003b0  7861              LDRB     r1,[r4,#1]
0003b2  2000              MOVS     r0,#0
0003b4  f7fffffe          BL       mbByteToPack
;;;294    	mbByteToPack(0,res);
0003b8  b2e9              UXTB     r1,r5
0003ba  2000              MOVS     r0,#0
0003bc  f7fffffe          BL       mbByteToPack
;;;295    	mbSendPack(0);
0003c0  2000              MOVS     r0,#0
0003c2  f7fffffe          BL       mbSendPack
;;;296    }
0003c6  b005              ADD      sp,sp,#0x14
0003c8  bd30              POP      {r4,r5,pc}
;;;297    
                          ENDP

                  pFS_Create PROC
;;;298    void pFS_Create(u8* buffer,u16 len) {
0003ca  b530              PUSH     {r4,r5,lr}
0003cc  b087              SUB      sp,sp,#0x1c
0003ce  4605              MOV      r5,r0
;;;299    	u8 name[20];
;;;300    	tFile f;
;;;301    	s8 res;
;;;302    	// *(buffer+2)  - 14 байт имени
;;;303    	memset(name,0,20);
0003d0  2114              MOVS     r1,#0x14
0003d2  4668              MOV      r0,sp
0003d4  f7fffffe          BL       __aeabi_memclr4
;;;304    	memcpy(name,(buffer+3),*(buffer+2));
0003d8  78aa              LDRB     r2,[r5,#2]
0003da  1ce9              ADDS     r1,r5,#3
0003dc  4668              MOV      r0,sp
0003de  f7fffffe          BL       __aeabi_memcpy
;;;305    //	Msg("FS_Create %s\r\n",name);
;;;306    	res = FS_Delete(name); // пока не переделан Rewrite нужно удалить
0003e2  4668              MOV      r0,sp
0003e4  f7fffffe          BL       FS_Delete
0003e8  0002              MOVS     r2,r0
;;;307    	if (res < 0) Msg("FS_Cr Del %s r:%d\r\n",name,res);
0003ea  d503              BPL      |L1.1012|
0003ec  4669              MOV      r1,sp
0003ee  a03a              ADR      r0,|L1.1240|
0003f0  f7fffffe          BL       Msg
                  |L1.1012|
;;;308    	res = FS_Assign(name,&f);
0003f4  a905              ADD      r1,sp,#0x14
0003f6  4668              MOV      r0,sp
0003f8  f7fffffe          BL       FS_Assign
0003fc  0004              MOVS     r4,r0
;;;309    	if (res == FS_RESULT_OK) { 
0003fe  d017              BEQ      |L1.1072|
;;;310    		res = FS_Rewrite(f);
;;;311    		if (res < 0) {
;;;312    			 Msg("FS_Cr Rewrite %s r:%d\r\n",name,res);
;;;313    			 FS_Close(&f);
;;;314    		}
;;;315    		else Msg("FS_Create %s f:%d res:%d\r\n",name,f,res);
;;;316    	} else Msg("FS_Cr Assign %s res:%d \r\n",name,res); 
000400  4602              MOV      r2,r0
000402  4669              MOV      r1,sp
000404  a039              ADR      r0,|L1.1260|
000406  f7fffffe          BL       Msg
                  |L1.1034|
;;;317    
;;;318    	// *(buffer+16)	- 4 байта расширения
;;;319    	mbByteToPack(0,*buffer);
00040a  7829              LDRB     r1,[r5,#0]
00040c  2000              MOVS     r0,#0
00040e  f7fffffe          BL       mbByteToPack
;;;320    	mbByteToPack(0,*(buffer+1));
000412  7869              LDRB     r1,[r5,#1]
000414  2000              MOVS     r0,#0
000416  f7fffffe          BL       mbByteToPack
;;;321    	mbByteToPack(0,res);  	// результат создания
00041a  b2e1              UXTB     r1,r4
00041c  2000              MOVS     r0,#0
00041e  f7fffffe          BL       mbByteToPack
;;;322    	mbByteToPack(0,(u8)f);  // индекс файла
000422  f89d1014          LDRB     r1,[sp,#0x14]
000426  2000              MOVS     r0,#0
000428  f7fffffe          BL       mbByteToPack
;;;323    	// добавить результат
;;;324    	// 0 - всё хорошо
;;;325    	// 1 - файл с таким именем существует
;;;326    	mbSendPack(0);
00042c  2000              MOVS     r0,#0
00042e  e06b              B        |L1.1288|
                  |L1.1072|
000430  e06e              B        |L1.1296|
000432  0000              DCW      0x0000
                  |L1.1076|
                          DCD      0xe000ed08
                  |L1.1080|
                          DCD      regs
                  |L1.1084|
                          DCD      ||va||
                  |L1.1088|
                          DCD      iva
                  |L1.1092|
000444  476f546f          DCB      "GoTo en %d x %d y %d\r\n",0
000448  20656e20
00044c  25642078
000450  20256420
000454  79202564
000458  0d0a00  
00045b  00                DCB      0
                  |L1.1116|
                          DCD      pFnom
                  |L1.1120|
                          DCD      pFdbyFnom
                  |L1.1124|
000464  4672436f          DCB      "FrConv St %d Rev %d Speed %d Fr %d\r\n",0
000468  6e762053
00046c  74202564
000470  20526576
000474  20256420
000478  53706565
00047c  64202564
000480  20467220
000484  25640d0a
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
                          DCD      OutAllocTable
                  |L1.1168|
                          DCD      CurVarIndex
                  |L1.1172|
000494  51416c6c          DCB      "QAllocTable... %d %d %d\r\n",0
000498  6f635461
00049c  626c652e
0004a0  2e2e2025
0004a4  64202564
0004a8  2025640d
0004ac  0a00    
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L1.1200|
                          DCD      ||ti||
                  |L1.1204|
0004b4  46535f53          DCB      "FS_SetFInfo\r\n",0
0004b8  65744649
0004bc  6e666f0d
0004c0  0a00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L1.1220|
0004c4  46535f44          DCB      "FS_Delete %s r:%d\r\n",0
0004c8  656c6574
0004cc  65202573
0004d0  20723a25
0004d4  640d0a00
                  |L1.1240|
0004d8  46535f43          DCB      "FS_Cr Del %s r:%d\r\n",0
0004dc  72204465
0004e0  6c202573
0004e4  20723a25
0004e8  640d0a00
                  |L1.1260|
0004ec  46535f43          DCB      "FS_Cr Assign %s res:%d \r\n",0
0004f0  72204173
0004f4  7369676e
0004f8  20257320
0004fc  7265733a
000500  2564200d
000504  0a00    
000506  00                DCB      0
000507  00                DCB      0
                  |L1.1288|
000508  f7fffffe          BL       mbSendPack
                  |L1.1292|
;;;327    }
00050c  b007              ADD      sp,sp,#0x1c
00050e  bd30              POP      {r4,r5,pc}
                  |L1.1296|
000510  f99d0014          LDRSB    r0,[sp,#0x14]         ;310
000514  f7fffffe          BL       FS_Rewrite
000518  0004              MOVS     r4,r0                 ;310
00051a  d508              BPL      |L1.1326|
00051c  4602              MOV      r2,r0                 ;312
00051e  4669              MOV      r1,sp                 ;312
000520  a0fa              ADR      r0,|L1.2316|
000522  f7fffffe          BL       Msg
000526  a805              ADD      r0,sp,#0x14           ;313
000528  f7fffffe          BL       FS_Close
00052c  e76d              B        |L1.1034|
                  |L1.1326|
00052e  4603              MOV      r3,r0                 ;315
000530  f99d2014          LDRSB    r2,[sp,#0x14]         ;315
000534  4669              MOV      r1,sp                 ;315
000536  a0fb              ADR      r0,|L1.2340|
000538  f7fffffe          BL       Msg
00053c  e765              B        |L1.1034|
;;;328    
                          ENDP

                  pFS_Rewrite PROC
;;;329    void pFS_Rewrite(u8* buffer,u16 len) {
00053e  b530              PUSH     {r4,r5,lr}
000540  b087              SUB      sp,sp,#0x1c
000542  4605              MOV      r5,r0
;;;330    	u8 name[20];
;;;331    	tFile f;
;;;332    	s8 res;
;;;333    	memset(name,0,20);
000544  2114              MOVS     r1,#0x14
000546  a802              ADD      r0,sp,#8
000548  f7fffffe          BL       __aeabi_memclr4
;;;334    	memcpy(name,(buffer+3),*(buffer+2));
00054c  78aa              LDRB     r2,[r5,#2]
00054e  1ce9              ADDS     r1,r5,#3
000550  a802              ADD      r0,sp,#8
000552  f7fffffe          BL       __aeabi_memcpy
;;;335    	res = FS_Assign(name,&f);
000556  a901              ADD      r1,sp,#4
000558  a802              ADD      r0,sp,#8
00055a  f7fffffe          BL       FS_Assign
00055e  0004              MOVS     r4,r0
;;;336    	if (res == FS_RESULT_OK) { 
000560  d003              BEQ      |L1.1386|
;;;337    		res = FS_Rewrite(f);
;;;338    		if (res < 0) {
;;;339    			FS_Close(&f);
;;;340    			Msg("FS_Rewrite %s r:%d h %d\r\n",name,res,f);
;;;341    		}
;;;342    		else Msg("FS_Rewrite %s f:%d\r\n",name,f); 
;;;343    	} else Msg("FS_Rewrite FS_Assign %s res:%d\r\n",name,res); 
000562  4602              MOV      r2,r0
000564  a902              ADD      r1,sp,#8
000566  a0f6              ADR      r0,|L1.2368|
000568  e014              B        |L1.1428|
                  |L1.1386|
00056a  f99d0004          LDRSB    r0,[sp,#4]            ;337
00056e  f7fffffe          BL       FS_Rewrite
000572  0004              MOVS     r4,r0                 ;337
000574  d50a              BPL      |L1.1420|
000576  a801              ADD      r0,sp,#4              ;339
000578  f7fffffe          BL       FS_Close
00057c  f99d3004          LDRSB    r3,[sp,#4]            ;340
000580  4622              MOV      r2,r4                 ;340
000582  a902              ADD      r1,sp,#8              ;340
000584  a0f7              ADR      r0,|L1.2404|
000586  f7fffffe          BL       Msg
00058a  e005              B        |L1.1432|
                  |L1.1420|
00058c  f99d2004          LDRSB    r2,[sp,#4]            ;342
000590  a902              ADD      r1,sp,#8              ;342
000592  a0fb              ADR      r0,|L1.2432|
                  |L1.1428|
000594  f7fffffe          BL       Msg
                  |L1.1432|
;;;344    	mbByteToPack(0,*buffer);
000598  7829              LDRB     r1,[r5,#0]
00059a  2000              MOVS     r0,#0
00059c  f7fffffe          BL       mbByteToPack
;;;345    	mbByteToPack(0,*(buffer+1));
0005a0  7869              LDRB     r1,[r5,#1]
0005a2  2000              MOVS     r0,#0
0005a4  f7fffffe          BL       mbByteToPack
;;;346    	mbByteToPack(0,res);  
0005a8  b2e1              UXTB     r1,r4
0005aa  2000              MOVS     r0,#0
0005ac  f7fffffe          BL       mbByteToPack
;;;347    	mbByteToPack(0,(u8)f);
0005b0  f89d1004          LDRB     r1,[sp,#4]
0005b4  2000              MOVS     r0,#0
0005b6  f7fffffe          BL       mbByteToPack
;;;348    	mbSendPack(0);
0005ba  2000              MOVS     r0,#0
0005bc  f7fffffe          BL       mbSendPack
;;;349    }
0005c0  e7a4              B        |L1.1292|
;;;350    
                          ENDP

                  pFS_RewriteHandle PROC
;;;351    void pFS_RewriteHandle(u8* buffer,u16 len) {
0005c2  b538              PUSH     {r3-r5,lr}
;;;352    	tFile f;
;;;353    	s8 res;
;;;354    	f = (tFile)*(buffer+2);
0005c4  f9901002          LDRSB    r1,[r0,#2]
0005c8  4605              MOV      r5,r0                 ;351
0005ca  f88d1000          STRB     r1,[sp,#0]
;;;355    	Msg("FS_Rewrite in h %d\r\n",f);
0005ce  a0f2              ADR      r0,|L1.2456|
0005d0  f7fffffe          BL       Msg
;;;356    	res = FS_Rewrite(f);
0005d4  f99d0000          LDRSB    r0,[sp,#0]
0005d8  f7fffffe          BL       FS_Rewrite
0005dc  0004              MOVS     r4,r0
;;;357    	if (res < 0) {
0005de  d509              BPL      |L1.1524|
;;;358    		FS_Close(&f);
0005e0  4668              MOV      r0,sp
0005e2  f7fffffe          BL       FS_Close
;;;359    		Msg("FS_Rewrite r:%d h %d\r\n",res,f);
0005e6  f99d2000          LDRSB    r2,[sp,#0]
0005ea  4621              MOV      r1,r4
0005ec  a0f0              ADR      r0,|L1.2480|
0005ee  f7fffffe          BL       Msg
0005f2  e004              B        |L1.1534|
                  |L1.1524|
;;;360    	}
;;;361    	else Msg("FS_Rewrite h:%d\r\n",f); 
0005f4  f99d1000          LDRSB    r1,[sp,#0]
0005f8  a0f3              ADR      r0,|L1.2504|
0005fa  f7fffffe          BL       Msg
                  |L1.1534|
;;;362    	mbByteToPack(0,*buffer);
0005fe  7829              LDRB     r1,[r5,#0]
000600  2000              MOVS     r0,#0
000602  f7fffffe          BL       mbByteToPack
;;;363    	mbByteToPack(0,*(buffer+1));
000606  7869              LDRB     r1,[r5,#1]
000608  2000              MOVS     r0,#0
00060a  f7fffffe          BL       mbByteToPack
;;;364    	mbByteToPack(0,res);  
00060e  b2e1              UXTB     r1,r4
000610  2000              MOVS     r0,#0
000612  f7fffffe          BL       mbByteToPack
;;;365    	mbByteToPack(0,(u8)f);
000616  f89d1000          LDRB     r1,[sp,#0]
00061a  2000              MOVS     r0,#0
00061c  f7fffffe          BL       mbByteToPack
;;;366    	mbSendPack(0);
000620  2000              MOVS     r0,#0
000622  f7fffffe          BL       mbSendPack
;;;367    }
000626  bd38              POP      {r3-r5,pc}
;;;368    
                          ENDP

                  pFS_Append PROC
;;;369    void pFS_Append(u8* buffer,u16 len) {
000628  b530              PUSH     {r4,r5,lr}
00062a  b087              SUB      sp,sp,#0x1c
00062c  4605              MOV      r5,r0
;;;370    	u8 name[20];
;;;371    	tFile f;
;;;372    	s8 res;
;;;373    	memset(name,0,20);
00062e  2114              MOVS     r1,#0x14
000630  4668              MOV      r0,sp
000632  f7fffffe          BL       __aeabi_memclr4
;;;374    	memcpy(name,(buffer+3),*(buffer+2));
000636  78aa              LDRB     r2,[r5,#2]
000638  1ce9              ADDS     r1,r5,#3
00063a  4668              MOV      r0,sp
00063c  f7fffffe          BL       __aeabi_memcpy
;;;375    	res = FS_Assign(name,&f);
000640  a905              ADD      r1,sp,#0x14
000642  4668              MOV      r0,sp
000644  f7fffffe          BL       FS_Assign
000648  0004              MOVS     r4,r0
;;;376    	if (res == FS_RESULT_OK) { 
00064a  d003              BEQ      |L1.1620|
;;;377    		res = FS_Append(f);
;;;378    		if (res < 0) Msg("FS_Append %s r:%d\r\n",name,res);
;;;379    		else Msg("FS_Append %s f:%d\r\n",name,f);
;;;380    	} else Msg("FS_Append FS_Assign %s r:%d\r\n",name,res); 
00064c  4602              MOV      r2,r0
00064e  4669              MOV      r1,sp
000650  a0e2              ADR      r0,|L1.2524|
000652  e00d              B        |L1.1648|
                  |L1.1620|
000654  f99d0014          LDRSB    r0,[sp,#0x14]         ;377
000658  f7fffffe          BL       FS_Append
00065c  0004              MOVS     r4,r0                 ;377
00065e  d503              BPL      |L1.1640|
000660  4602              MOV      r2,r0                 ;378
000662  4669              MOV      r1,sp                 ;378
000664  a0e5              ADR      r0,|L1.2556|
000666  e003              B        |L1.1648|
                  |L1.1640|
000668  f99d2014          LDRSB    r2,[sp,#0x14]         ;379
00066c  4669              MOV      r1,sp                 ;379
00066e  a0e8              ADR      r0,|L1.2576|
                  |L1.1648|
000670  f7fffffe          BL       Msg
;;;381    	mbByteToPack(0,*buffer);
000674  7829              LDRB     r1,[r5,#0]
000676  2000              MOVS     r0,#0
000678  f7fffffe          BL       mbByteToPack
;;;382    	mbByteToPack(0,*(buffer+1));
00067c  7869              LDRB     r1,[r5,#1]
00067e  2000              MOVS     r0,#0
000680  f7fffffe          BL       mbByteToPack
;;;383    	mbByteToPack(0,res);
000684  b2e1              UXTB     r1,r4
000686  2000              MOVS     r0,#0
000688  f7fffffe          BL       mbByteToPack
;;;384    	mbByteToPack(0,f);
00068c  f89d1014          LDRB     r1,[sp,#0x14]
000690  2000              MOVS     r0,#0
000692  f7fffffe          BL       mbByteToPack
;;;385    	mbSendPack(0);
000696  2000              MOVS     r0,#0
000698  f7fffffe          BL       mbSendPack
;;;386    }
00069c  e736              B        |L1.1292|
;;;387    
                          ENDP

                  pFS_Reset PROC
;;;388    void pFS_Reset(u8* buffer,u16 len) {
00069e  b530              PUSH     {r4,r5,lr}
0006a0  b087              SUB      sp,sp,#0x1c
0006a2  4605              MOV      r5,r0
;;;389    	u8 name[20];
;;;390    	tFile f;
;;;391    	s8 res;
;;;392    	memset(name,0,20);
0006a4  2114              MOVS     r1,#0x14
0006a6  a802              ADD      r0,sp,#8
0006a8  f7fffffe          BL       __aeabi_memclr4
;;;393    	memcpy(name,(buffer+3),*(buffer+2));
0006ac  78aa              LDRB     r2,[r5,#2]
0006ae  1ce9              ADDS     r1,r5,#3
0006b0  a802              ADD      r0,sp,#8
0006b2  f7fffffe          BL       __aeabi_memcpy
;;;394    	res = FS_Assign(name,&f);  // 0 - всё хорошо
0006b6  a901              ADD      r1,sp,#4
0006b8  a802              ADD      r0,sp,#8
0006ba  f7fffffe          BL       FS_Assign
0006be  0004              MOVS     r4,r0
;;;395    	if (res == FS_RESULT_OK) { 
0006c0  d004              BEQ      |L1.1740|
;;;396    		res = FS_Reset(f);   // 0 - всё хорошо
;;;397    		if (res < 0) Msg("FS_Reset %s r:%d\r\n",name,res);
;;;398    	} else Msg("FS_Reset FS_Assign %s f:%d\r\n",name,f); 
0006c2  f99d2004          LDRSB    r2,[sp,#4]
0006c6  a902              ADD      r1,sp,#8
0006c8  a0d6              ADR      r0,|L1.2596|
0006ca  e008              B        |L1.1758|
                  |L1.1740|
0006cc  f99d0004          LDRSB    r0,[sp,#4]            ;396
0006d0  f7fffffe          BL       FS_Reset
0006d4  0004              MOVS     r4,r0                 ;396
0006d6  d504              BPL      |L1.1762|
0006d8  4602              MOV      r2,r0                 ;397
0006da  a902              ADD      r1,sp,#8              ;397
0006dc  a0d9              ADR      r0,|L1.2628|
                  |L1.1758|
0006de  f7fffffe          BL       Msg
                  |L1.1762|
;;;399    	Msg("FS_Reset %s h:%d r:%d\r\n",name,f,res); 
0006e2  4623              MOV      r3,r4
0006e4  f99d2004          LDRSB    r2,[sp,#4]
0006e8  a902              ADD      r1,sp,#8
0006ea  a0db              ADR      r0,|L1.2648|
0006ec  f7fffffe          BL       Msg
;;;400    	mbByteToPack(0,*buffer);
0006f0  7829              LDRB     r1,[r5,#0]
0006f2  2000              MOVS     r0,#0
0006f4  f7fffffe          BL       mbByteToPack
;;;401    	mbByteToPack(0,*(buffer+1));
0006f8  7869              LDRB     r1,[r5,#1]
0006fa  2000              MOVS     r0,#0
0006fc  f7fffffe          BL       mbByteToPack
;;;402    	mbByteToPack(0,res);
000700  b2e1              UXTB     r1,r4
000702  2000              MOVS     r0,#0
000704  f7fffffe          BL       mbByteToPack
;;;403    	mbByteToPack(0,f);
000708  f89d1004          LDRB     r1,[sp,#4]
00070c  2000              MOVS     r0,#0
00070e  f7fffffe          BL       mbByteToPack
;;;404    	mbSendPack(0);
000712  2000              MOVS     r0,#0
000714  f7fffffe          BL       mbSendPack
;;;405    }
000718  e6f8              B        |L1.1292|
;;;406    
                          ENDP

                  pFS_Write PROC
;;;408    
;;;409    void pFS_Write(u8* buffer,u16 len) {
00071a  b53e              PUSH     {r1-r5,lr}
00071c  4604              MOV      r4,r0
;;;410    	tFile f;
;;;411    	s8 res;
;;;412    	u16 size;
;;;413    	u32 wbc;
;;;414    //	memset(wbuffer,0,255);
;;;415    	f = (tFile)*(buffer+2); 	// - номер или описатель куда пишем
00071e  f9905002          LDRSB    r5,[r0,#2]
;;;416    //	size = *(buffer+3);		// - количество байт данных
;;;417    	memcpy(&size,(buffer+3),2);	// - количество байт данных
000722  f8b00003          LDRH     r0,[r0,#3]
000726  f8ad0004          STRH     r0,[sp,#4]
;;;418    //	memcpy(wbuffer,(buffer+5),size);	// - данные 
;;;419    //	Msg("FS_Write in f:%d size:%d\r\n",f,size);
;;;420    //	res = bFS_Write(f,wbuffer,size,&wbc);
;;;421    	res = bFS_Write(f,(buffer+5),size,&wbc);
00072a  b282              UXTH     r2,r0
00072c  ab02              ADD      r3,sp,#8
00072e  1d61              ADDS     r1,r4,#5
000730  4628              MOV      r0,r5
000732  f7fffffe          BL       bFS_Write
000736  f88d0000          STRB     r0,[sp,#0]
00073a  1e02              SUBS     r2,r0,#0
;;;422    //	res = 0;
;;;423    	if (res < 0) Msg("FS_Write f:%d r:%d\r\n",f,res);
00073c  da03              BGE      |L1.1862|
00073e  4629              MOV      r1,r5
000740  a0cb              ADR      r0,|L1.2672|
000742  f7fffffe          BL       Msg
                  |L1.1862|
;;;424    //	res = bFS_Write((tFile)*(buffer+2),(buffer+4),*(buffer+3));
;;;425    	//Msg("FS_Write f:%d s:%d buf[0]:%X res:%d\r\n",f,size,buf[0],res);
;;;426    //	Msg("%d",len);
;;;427    //	if (len!=16) {
;;;428    //		Dump(buffer,len);
;;;429    //	}
;;;430    	mbByteToPack(0,*buffer);
000746  7821              LDRB     r1,[r4,#0]
000748  2000              MOVS     r0,#0
00074a  f7fffffe          BL       mbByteToPack
;;;431    	mbByteToPack(0,*(buffer+1));
00074e  7861              LDRB     r1,[r4,#1]
000750  2000              MOVS     r0,#0
000752  f7fffffe          BL       mbByteToPack
;;;432    //	mbByteToPack(0,*(buffer+2));
;;;433    //	mbByteToPack(0,*(buffer+3));
;;;434    //	mbBufferToPack(0,wbuf,size);
;;;435    	mbBufferToPack(0,(u8*)&res,sizeof res); // код завершения операции
000756  2201              MOVS     r2,#1
000758  4669              MOV      r1,sp
00075a  2000              MOVS     r0,#0
00075c  f7fffffe          BL       mbBufferToPack
;;;436    	mbSendPack(0);
000760  2000              MOVS     r0,#0
000762  f7fffffe          BL       mbSendPack
;;;437    }
000766  bd3e              POP      {r1-r5,pc}
;;;438    
                          ENDP

                  bFS_WriteLn PROC
;;;439    s8 bFS_WriteLn(tFile fcs_num, const u8 *str) {
000768  b570              PUSH     {r4-r6,lr}
00076a  460d              MOV      r5,r1
00076c  4606              MOV      r6,r0
;;;440    	s8 res;
;;;441    	s32 i;
;;;442    	i = 0;
00076e  2400              MOVS     r4,#0
000770  e005              B        |L1.1918|
                  |L1.1906|
;;;443    	while (*(str+i)) {
;;;444    		res = FS_WriteByte(fcs_num,*(str+i));
000772  4630              MOV      r0,r6
000774  f7fffffe          BL       FS_WriteByte
;;;445    		//res = 0;
;;;446    		if (res < 0) return res;
000778  2800              CMP      r0,#0
00077a  db03              BLT      |L1.1924|
00077c  1c64              ADDS     r4,r4,#1
                  |L1.1918|
00077e  5d29              LDRB     r1,[r5,r4]            ;443
000780  2900              CMP      r1,#0                 ;443
000782  d1f6              BNE      |L1.1906|
                  |L1.1924|
;;;447    		i++;
;;;448    	}
;;;449    	return res; 
;;;450    }
000784  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP

                  pFS_WriteLn PROC
;;;452    void pFS_WriteLn(u8* buffer,u16 len) {
000786  b530              PUSH     {r4,r5,lr}
000788  b0c1              SUB      sp,sp,#0x104
00078a  4604              MOV      r4,r0
;;;453    	tFile f;
;;;454    	s8 res;
;;;455    	u8 size;
;;;456    	u8 buf[255];
;;;457    	memset(buf,0,255);
00078c  f44f7180          MOV      r1,#0x100
000790  4668              MOV      r0,sp
000792  f7fffffe          BL       __aeabi_memclr4
;;;458    	f = (tFile)*(buffer+2); 	// - номер или описатель куда пишем
000796  f9945002          LDRSB    r5,[r4,#2]
;;;459    	size = *(buffer+3);		// - количество байт данных
00079a  78e2              LDRB     r2,[r4,#3]
;;;460    	memcpy(buf,(buffer+4),size);	// - данные 
00079c  1d21              ADDS     r1,r4,#4
00079e  4668              MOV      r0,sp
0007a0  f7fffffe          BL       __aeabi_memcpy
;;;461    	res = bFS_WriteLn(f,buf);
0007a4  4669              MOV      r1,sp
0007a6  4628              MOV      r0,r5
0007a8  f7fffffe          BL       bFS_WriteLn
0007ac  4605              MOV      r5,r0
;;;462    	//res = 0;
;;;463    	//if (res < 0) Msg("FS_Write f:%d buf:%s res:%d\r\n",f,buf,res);
;;;464    	mbByteToPack(0,*buffer);
0007ae  7821              LDRB     r1,[r4,#0]
0007b0  2000              MOVS     r0,#0
0007b2  f7fffffe          BL       mbByteToPack
;;;465    	mbByteToPack(0,*(buffer+1));
0007b6  7861              LDRB     r1,[r4,#1]
0007b8  2000              MOVS     r0,#0
0007ba  f7fffffe          BL       mbByteToPack
;;;466    	mbByteToPack(0,res); // код завершения операции
0007be  b2e9              UXTB     r1,r5
0007c0  2000              MOVS     r0,#0
0007c2  f7fffffe          BL       mbByteToPack
;;;467    	mbSendPack(0);
0007c6  2000              MOVS     r0,#0
0007c8  f7fffffe          BL       mbSendPack
;;;468    }
0007cc  b041              ADD      sp,sp,#0x104
0007ce  bd30              POP      {r4,r5,pc}
;;;469    
                          ENDP

                  pFS_Read PROC
;;;470    void pFS_Read(u8* buffer,u16 len) {
0007d0  b5f8              PUSH     {r3-r7,lr}
0007d2  4604              MOV      r4,r0
;;;471    	tFile f;
;;;472    	s8 res;
;;;473    	u8 size;
;;;474    	u32 rbc;
;;;475    	memset(rbuf,0,255);
0007d4  21ff              MOVS     r1,#0xff
0007d6  48ac              LDR      r0,|L1.2696|
0007d8  f7fffffe          BL       __aeabi_memclr
;;;476    	f = (tFile)*(buffer+2); 		// - описатель откуда читаем
0007dc  f9947002          LDRSB    r7,[r4,#2]
;;;477    	size = *(buffer+3);				// - количество байт данных
0007e0  78e6              LDRB     r6,[r4,#3]
;;;478    	res = bFS_Read(f,rbuf,size,&rbc);
0007e2  466b              MOV      r3,sp
0007e4  4632              MOV      r2,r6
0007e6  49a8              LDR      r1,|L1.2696|
0007e8  4638              MOV      r0,r7
0007ea  f7fffffe          BL       bFS_Read
0007ee  0005              MOVS     r5,r0
;;;479    	if (res < 0) Msg("FS_Read f:%d s%d res:%d\r\n",f,size,res);
0007f0  d505              BPL      |L1.2046|
0007f2  4603              MOV      r3,r0
0007f4  4632              MOV      r2,r6
0007f6  4639              MOV      r1,r7
0007f8  a0a4              ADR      r0,|L1.2700|
0007fa  f7fffffe          BL       Msg
                  |L1.2046|
;;;480    	mbByteToPack(0,*buffer);
0007fe  7821              LDRB     r1,[r4,#0]
000800  2000              MOVS     r0,#0
000802  f7fffffe          BL       mbByteToPack
;;;481    	mbByteToPack(0,*(buffer+1));
000806  7861              LDRB     r1,[r4,#1]
000808  2000              MOVS     r0,#0
00080a  f7fffffe          BL       mbByteToPack
;;;482    	mbByteToPack(0,res);
00080e  b2e9              UXTB     r1,r5
000810  2000              MOVS     r0,#0
000812  f7fffffe          BL       mbByteToPack
;;;483    	mbByteToPack(0,size);
000816  4631              MOV      r1,r6
000818  2000              MOVS     r0,#0
00081a  f7fffffe          BL       mbByteToPack
;;;484    	mbBufferToPack(0,rbuf,size);
00081e  4632              MOV      r2,r6
000820  4999              LDR      r1,|L1.2696|
000822  2000              MOVS     r0,#0
000824  f7fffffe          BL       mbBufferToPack
;;;485    	mbSendPack(0);
000828  2000              MOVS     r0,#0
00082a  f7fffffe          BL       mbSendPack
;;;486    }
00082e  bdf8              POP      {r3-r7,pc}
;;;487    
                          ENDP

                  pFS_ReadLn PROC
;;;488    void pFS_ReadLn(u8* buffer,u16 len) {
000830  b570              PUSH     {r4-r6,lr}
000832  b0c0              SUB      sp,sp,#0x100
000834  4605              MOV      r5,r0
;;;489    	tFile f;
;;;490    	s8 res;
;;;491    	u8 buf[255];
;;;492    	memset(buf,0,255);
000836  f44f7180          MOV      r1,#0x100
00083a  4668              MOV      r0,sp
00083c  f7fffffe          BL       __aeabi_memclr4
;;;493    	f = (tFile)*(buffer+2); 		// - описатель откуда читаем
000840  f9956002          LDRSB    r6,[r5,#2]
;;;494    	res = bFS_ReadLn(f,buf,50);
000844  2232              MOVS     r2,#0x32
000846  4669              MOV      r1,sp
000848  4630              MOV      r0,r6
00084a  f7fffffe          BL       bFS_ReadLn
00084e  0004              MOVS     r4,r0
;;;495    	if (res < 0) Msg("FS_ReadLn f:%d buf:%s res:%d\r\n",f,buf,res);
000850  d505              BPL      |L1.2142|
000852  4603              MOV      r3,r0
000854  466a              MOV      r2,sp
000856  4631              MOV      r1,r6
000858  a093              ADR      r0,|L1.2728|
00085a  f7fffffe          BL       Msg
                  |L1.2142|
;;;496    	mbByteToPack(0,*buffer);
00085e  7829              LDRB     r1,[r5,#0]
000860  2000              MOVS     r0,#0
000862  f7fffffe          BL       mbByteToPack
;;;497    	mbByteToPack(0,*(buffer+1));
000866  7869              LDRB     r1,[r5,#1]
000868  2000              MOVS     r0,#0
00086a  f7fffffe          BL       mbByteToPack
;;;498    	mbByteToPack(0,res);
00086e  b2e1              UXTB     r1,r4
000870  2000              MOVS     r0,#0
000872  f7fffffe          BL       mbByteToPack
;;;499    	mbByteToPack(0,strlen((const char*)buf));
000876  4668              MOV      r0,sp
000878  f7fffffe          BL       strlen
00087c  b2c1              UXTB     r1,r0
00087e  2000              MOVS     r0,#0
000880  f7fffffe          BL       mbByteToPack
;;;500    	mbBufferToPack(0,buf,strlen((const char*)buf));
000884  4668              MOV      r0,sp
000886  f7fffffe          BL       strlen
00088a  b282              UXTH     r2,r0
00088c  4669              MOV      r1,sp
00088e  2000              MOVS     r0,#0
000890  f7fffffe          BL       mbBufferToPack
;;;501    	mbSendPack(0);
000894  2000              MOVS     r0,#0
000896  f7fffffe          BL       mbSendPack
                  |L1.2202|
;;;502    }
00089a  b040              ADD      sp,sp,#0x100
00089c  bd70              POP      {r4-r6,pc}
;;;503    
                          ENDP

                  pFS_BReadLn PROC
;;;504    void pFS_BReadLn(u8* buffer,u16 len) {
00089e  b570              PUSH     {r4-r6,lr}
0008a0  b0c0              SUB      sp,sp,#0x100
0008a2  4605              MOV      r5,r0
;;;505    	tFile f;
;;;506    	s8 res;
;;;507    	u8 buf[255];
;;;508    	memset(buf,0,255);
0008a4  f44f7180          MOV      r1,#0x100
0008a8  4668              MOV      r0,sp
0008aa  f7fffffe          BL       __aeabi_memclr4
;;;509    	f = (tFile)*(buffer+2); 		// - описатель откуда читаем
0008ae  f9956002          LDRSB    r6,[r5,#2]
;;;510    	res = bFS_BReadLn(f,buf,50);
0008b2  2232              MOVS     r2,#0x32
0008b4  4669              MOV      r1,sp
0008b6  4630              MOV      r0,r6
0008b8  f7fffffe          BL       bFS_BReadLn
0008bc  0004              MOVS     r4,r0
;;;511    //	Dump(buf,strlen((const char*)buf));
;;;512    	if (res < 0) Msg("FS_ReadLn f:%d buf:%s res:%d\r\n",f,buf,res);
0008be  d505              BPL      |L1.2252|
0008c0  4603              MOV      r3,r0
0008c2  466a              MOV      r2,sp
0008c4  4631              MOV      r1,r6
0008c6  a078              ADR      r0,|L1.2728|
0008c8  f7fffffe          BL       Msg
                  |L1.2252|
;;;513    	mbByteToPack(0,*buffer);
0008cc  7829              LDRB     r1,[r5,#0]
0008ce  2000              MOVS     r0,#0
0008d0  f7fffffe          BL       mbByteToPack
;;;514    	mbByteToPack(0,*(buffer+1));
0008d4  7869              LDRB     r1,[r5,#1]
0008d6  2000              MOVS     r0,#0
0008d8  f7fffffe          BL       mbByteToPack
;;;515    	mbByteToPack(0,res);
0008dc  b2e1              UXTB     r1,r4
0008de  2000              MOVS     r0,#0
0008e0  f7fffffe          BL       mbByteToPack
;;;516    	mbByteToPack(0,strlen((const char*)buf));
0008e4  4668              MOV      r0,sp
0008e6  f7fffffe          BL       strlen
0008ea  b2c1              UXTB     r1,r0
0008ec  2000              MOVS     r0,#0
0008ee  f7fffffe          BL       mbByteToPack
;;;517    	mbBufferToPack(0,buf,strlen((const char*)buf));
0008f2  4668              MOV      r0,sp
0008f4  f7fffffe          BL       strlen
0008f8  b282              UXTH     r2,r0
0008fa  4669              MOV      r1,sp
0008fc  2000              MOVS     r0,#0
0008fe  f7fffffe          BL       mbBufferToPack
;;;518    	mbSendPack(0);
000902  2000              MOVS     r0,#0
000904  f7fffffe          BL       mbSendPack
;;;519    }
000908  e7c7              B        |L1.2202|
00090a  0000              DCW      0x0000
                  |L1.2316|
00090c  46535f43          DCB      "FS_Cr Rewrite %s r:%d\r\n",0
000910  72205265
000914  77726974
000918  65202573
00091c  20723a25
000920  640d0a00
                  |L1.2340|
000924  46535f43          DCB      "FS_Create %s f:%d res:%d\r\n",0
000928  72656174
00092c  65202573
000930  20663a25
000934  64207265
000938  733a2564
00093c  0d0a00  
00093f  00                DCB      0
                  |L1.2368|
000940  46535f52          DCB      "FS_Rewrite FS_Assign %s res:%d\r\n",0
000944  65777269
000948  74652046
00094c  535f4173
000950  7369676e
000954  20257320
000958  7265733a
00095c  25640d0a
000960  00      
000961  00                DCB      0
000962  00                DCB      0
000963  00                DCB      0
                  |L1.2404|
000964  46535f52          DCB      "FS_Rewrite %s r:%d h %d\r\n",0
000968  65777269
00096c  74652025
000970  7320723a
000974  25642068
000978  2025640d
00097c  0a00    
00097e  00                DCB      0
00097f  00                DCB      0
                  |L1.2432|
000980  46535f52          DCB      "FS_Rewrite %s f:%d\r\n",0
000984  65777269
000988  74652025
00098c  7320663a
000990  25640d0a
000994  00      
000995  00                DCB      0
000996  00                DCB      0
000997  00                DCB      0
                  |L1.2456|
000998  46535f52          DCB      "FS_Rewrite in h %d\r\n",0
00099c  65777269
0009a0  74652069
0009a4  6e206820
0009a8  25640d0a
0009ac  00      
0009ad  00                DCB      0
0009ae  00                DCB      0
0009af  00                DCB      0
                  |L1.2480|
0009b0  46535f52          DCB      "FS_Rewrite r:%d h %d\r\n",0
0009b4  65777269
0009b8  74652072
0009bc  3a256420
0009c0  68202564
0009c4  0d0a00  
0009c7  00                DCB      0
                  |L1.2504|
0009c8  46535f52          DCB      "FS_Rewrite h:%d\r\n",0
0009cc  65777269
0009d0  74652068
0009d4  3a25640d
0009d8  0a00    
0009da  00                DCB      0
0009db  00                DCB      0
                  |L1.2524|
0009dc  46535f41          DCB      "FS_Append FS_Assign %s r:%d\r\n",0
0009e0  7070656e
0009e4  64204653
0009e8  5f417373
0009ec  69676e20
0009f0  25732072
0009f4  3a25640d
0009f8  0a00    
0009fa  00                DCB      0
0009fb  00                DCB      0
                  |L1.2556|
0009fc  46535f41          DCB      "FS_Append %s r:%d\r\n",0
000a00  7070656e
000a04  64202573
000a08  20723a25
000a0c  640d0a00
                  |L1.2576|
000a10  46535f41          DCB      "FS_Append %s f:%d\r\n",0
000a14  7070656e
000a18  64202573
000a1c  20663a25
000a20  640d0a00
                  |L1.2596|
000a24  46535f52          DCB      "FS_Reset FS_Assign %s f:%d\r\n",0
000a28  65736574
000a2c  2046535f
000a30  41737369
000a34  676e2025
000a38  7320663a
000a3c  25640d0a
000a40  00      
000a41  00                DCB      0
000a42  00                DCB      0
000a43  00                DCB      0
                  |L1.2628|
000a44  46535f52          DCB      "FS_Reset %s r:%d\r\n",0
000a48  65736574
000a4c  20257320
000a50  723a2564
000a54  0d0a00  
000a57  00                DCB      0
                  |L1.2648|
000a58  46535f52          DCB      "FS_Reset %s h:%d r:%d\r\n",0
000a5c  65736574
000a60  20257320
000a64  683a2564
000a68  20723a25
000a6c  640d0a00
                  |L1.2672|
000a70  46535f57          DCB      "FS_Write f:%d r:%d\r\n",0
000a74  72697465
000a78  20663a25
000a7c  6420723a
000a80  25640d0a
000a84  00      
000a85  00                DCB      0
000a86  00                DCB      0
000a87  00                DCB      0
                  |L1.2696|
                          DCD      ||area_number.4||
                  |L1.2700|
000a8c  46535f52          DCB      "FS_Read f:%d s%d res:%d\r\n",0
000a90  65616420
000a94  663a2564
000a98  20732564
000a9c  20726573
000aa0  3a25640d
000aa4  0a00    
000aa6  00                DCB      0
000aa7  00                DCB      0
                  |L1.2728|
000aa8  46535f52          DCB      "FS_ReadLn f:%d buf:%s res:%d\r\n",0
000aac  6561644c
000ab0  6e20663a
000ab4  25642062
000ab8  75663a25
000abc  73207265
000ac0  733a2564
000ac4  0d0a00  
000ac7  00                DCB      0
                          ENDP

                  pFS_Pos PROC
;;;520    
;;;521    void pFS_Pos(u8* buffer,u16 len) {
000ac8  b538              PUSH     {r3-r5,lr}
000aca  4604              MOV      r4,r0
;;;522    	tFile f;
;;;523    	s32 res;
;;;524    	s32 pos;
;;;525    	f = (tFile)*(buffer+2); 		// - описатель
000acc  f9900002          LDRSB    r0,[r0,#2]
;;;526    	res = FS_Pos(f,&pos);
000ad0  4669              MOV      r1,sp
000ad2  f7fffffe          BL       FS_Pos
000ad6  4605              MOV      r5,r0
;;;527    //	Dump(buf,strlen((const char*)buf));
;;;528    //	Msg("FS_Pos f:%d res:%d\r\n",f,res);
;;;529    	mbByteToPack(0,*buffer);
000ad8  7821              LDRB     r1,[r4,#0]
000ada  2000              MOVS     r0,#0
000adc  f7fffffe          BL       mbByteToPack
;;;530    	mbByteToPack(0,*(buffer+1));
000ae0  7861              LDRB     r1,[r4,#1]
000ae2  2000              MOVS     r0,#0
000ae4  f7fffffe          BL       mbByteToPack
;;;531    	mbByteToPack(0,res);
000ae8  b2e9              UXTB     r1,r5
000aea  2000              MOVS     r0,#0
000aec  f7fffffe          BL       mbByteToPack
;;;532    	mbBufferToPack(0,(u8*)&pos,sizeof pos);
000af0  2204              MOVS     r2,#4
000af2  4669              MOV      r1,sp
000af4  2000              MOVS     r0,#0
000af6  f7fffffe          BL       mbBufferToPack
;;;533    	mbSendPack(0);
000afa  2000              MOVS     r0,#0
000afc  f7fffffe          BL       mbSendPack
;;;534    }
000b00  bd38              POP      {r3-r5,pc}
;;;535    
                          ENDP

                  pFS_Seek PROC
;;;536    void pFS_Seek(u8* buffer,u16 len) {
000b02  e92d41f0          PUSH     {r4-r8,lr}
;;;537    	tFile f;
;;;538    	u32 pos;
;;;539    	s8 res;
;;;540    	f = (tFile)*(buffer+2); 
000b06  f9907002          LDRSB    r7,[r0,#2]
;;;541    	memcpy((u8*)&pos,(buffer+3),sizeof pos);
000b0a  f8d06003          LDR      r6,[r0,#3]
000b0e  4604              MOV      r4,r0                 ;536
;;;542    	res = FS_Seek(f,pos);	
000b10  4631              MOV      r1,r6
000b12  4638              MOV      r0,r7
000b14  f7fffffe          BL       FS_Seek
000b18  0005              MOVS     r5,r0
;;;543    	if (res < 0) Msg("FS_Seek f:%d pos:%d res:%d\r\n",f,pos,res);
000b1a  d505              BPL      |L1.2856|
000b1c  4603              MOV      r3,r0
000b1e  4632              MOV      r2,r6
000b20  4639              MOV      r1,r7
000b22  a0fe              ADR      r0,|L1.3868|
000b24  f7fffffe          BL       Msg
                  |L1.2856|
;;;544    	mbByteToPack(0,*buffer);
000b28  7821              LDRB     r1,[r4,#0]
000b2a  2000              MOVS     r0,#0
000b2c  f7fffffe          BL       mbByteToPack
;;;545    	mbByteToPack(0,*(buffer+1));
000b30  7861              LDRB     r1,[r4,#1]
000b32  2000              MOVS     r0,#0
000b34  f7fffffe          BL       mbByteToPack
;;;546    	mbByteToPack(0,res);
000b38  b2e9              UXTB     r1,r5
000b3a  2000              MOVS     r0,#0
000b3c  f7fffffe          BL       mbByteToPack
;;;547    	mbSendPack(0);
000b40  e8bd41f0          POP      {r4-r8,lr}
000b44  2000              MOVS     r0,#0
000b46  f7ffbffe          B.W      mbSendPack
;;;548    }
;;;549    
                          ENDP

                  pFS_Close PROC
;;;550    void pFS_Close(u8* buffer,u16 len) {
000b4a  b538              PUSH     {r3-r5,lr}
000b4c  4605              MOV      r5,r0
;;;551    	tFile f;
;;;552    	s8 res;
;;;553    	f = (tFile)*(buffer+2); 
000b4e  7880              LDRB     r0,[r0,#2]
000b50  f88d0000          STRB     r0,[sp,#0]
;;;554    	res = FS_Close(&f);
000b54  4668              MOV      r0,sp
000b56  f7fffffe          BL       FS_Close
000b5a  0004              MOVS     r4,r0
;;;555    	if (res<0)	Msg("FS_Close f:%d res:%d\r\n",f,res);
000b5c  d505              BPL      |L1.2922|
000b5e  4602              MOV      r2,r0
000b60  f99d1000          LDRSB    r1,[sp,#0]
000b64  a0f5              ADR      r0,|L1.3900|
000b66  f7fffffe          BL       Msg
                  |L1.2922|
;;;556    	mbByteToPack(0,*buffer);
000b6a  7829              LDRB     r1,[r5,#0]
000b6c  2000              MOVS     r0,#0
000b6e  f7fffffe          BL       mbByteToPack
;;;557    	mbByteToPack(0,*(buffer+1));
000b72  7869              LDRB     r1,[r5,#1]
000b74  2000              MOVS     r0,#0
000b76  f7fffffe          BL       mbByteToPack
;;;558    	mbByteToPack(0,res);
000b7a  b2e1              UXTB     r1,r4
000b7c  2000              MOVS     r0,#0
000b7e  f7fffffe          BL       mbByteToPack
;;;559    	mbSendPack(0);
000b82  2000              MOVS     r0,#0
000b84  f7fffffe          BL       mbSendPack
;;;560    }
000b88  bd38              POP      {r3-r5,pc}
;;;561    
                          ENDP

                  pCreateRegsBin PROC
;;;562    void pCreateRegsBin(u8* buffer,u16 len) {
000b8a  b510              PUSH     {r4,lr}
000b8c  4604              MOV      r4,r0
;;;563    	SaveRegs();
000b8e  f7fffffe          BL       SaveRegs
;;;564    	mbByteToPack(0,*buffer);
000b92  7821              LDRB     r1,[r4,#0]
000b94  2000              MOVS     r0,#0
000b96  f7fffffe          BL       mbByteToPack
;;;565    	mbByteToPack(0,*(buffer+1));
000b9a  7861              LDRB     r1,[r4,#1]
000b9c  2000              MOVS     r0,#0
000b9e  f7fffffe          BL       mbByteToPack
;;;566    	mbSendPack(0);
000ba2  e8bd4010          POP      {r4,lr}
000ba6  2000              MOVS     r0,#0
000ba8  f7ffbffe          B.W      mbSendPack
;;;567    }
;;;568    
                          ENDP

                  pApplyRegsBin PROC
;;;569    void pApplyRegsBin(u8* buffer,u16 len) {
000bac  b510              PUSH     {r4,lr}
000bae  4604              MOV      r4,r0
;;;570    	LoadRegsFromFile();
000bb0  f7fffffe          BL       LoadRegsFromFile
;;;571    #ifdef __SAW__
;;;572    	InitSawRegsAfterLoad();
;;;573    	LoadSawBackupRegs();	
;;;574    #endif 
;;;575    #ifdef __FREZER__
;;;576    	InitFrzRegsAfterLoad();
000bb4  f7fffffe          BL       InitFrzRegsAfterLoad
;;;577    	LoadFrzBackupRegs();	
000bb8  f7fffffe          BL       LoadFrzBackupRegs
;;;578    #endif 
;;;579    	InitVirtualPins();
000bbc  f7fffffe          BL       InitVirtualPins
;;;580    	mbByteToPack(0,*buffer);
000bc0  7821              LDRB     r1,[r4,#0]
000bc2  2000              MOVS     r0,#0
000bc4  f7fffffe          BL       mbByteToPack
;;;581    	mbByteToPack(0,*(buffer+1));
000bc8  7861              LDRB     r1,[r4,#1]
000bca  2000              MOVS     r0,#0
000bcc  f7fffffe          BL       mbByteToPack
;;;582    	mbSendPack(0);
000bd0  e8bd4010          POP      {r4,lr}
000bd4  2000              MOVS     r0,#0
000bd6  f7ffbffe          B.W      mbSendPack
;;;583    }
;;;584    
                          ENDP

                  pReset PROC
;;;585    void pReset(u8* buffer,u16 len) {
000bda  b510              PUSH     {r4,lr}
;;;586    	// пока не переделан Rewrite
;;;587    	NVIC_DisableIRQ(UART0_IRQn); 
000bdc  2005              MOVS     r0,#5
000bde  f7fffffe          BL       __NVIC_DisableIRQ
;;;588     	NVIC_DisableIRQ(UART1_IRQn); 
000be2  2006              MOVS     r0,#6
000be4  f7fffffe          BL       __NVIC_DisableIRQ
;;;589    	NVIC_DisableIRQ(TIMER0_IRQn);
000be8  2001              MOVS     r0,#1
000bea  f7fffffe          BL       __NVIC_DisableIRQ
;;;590    	NVIC_DisableIRQ(TIMER1_IRQn);
000bee  2002              MOVS     r0,#2
000bf0  f7fffffe          BL       __NVIC_DisableIRQ
;;;591    
;;;592    	__disable_irq();
000bf4  b672              CPSID    i
;;;593    	SCB->VTOR = 0x00000000 & 0x1FFFFF80;
000bf6  2000              MOVS     r0,#0
000bf8  49d6              LDR      r1,|L1.3924|
000bfa  6008              STR      r0,[r1,#0]
;;;594    	boot_jump(0x2000);
000bfc  e8bd4010          POP      {r4,lr}
000c00  f44f5000          MOV      r0,#0x2000
000c04  f7ffbffe          B.W      boot_jump
;;;595    }
;;;596    
                          ENDP

                  pFl_GetUsing PROC
;;;597    void pFl_GetUsing(u8 *buffer,u16 len) {
000c08  b570              PUSH     {r4-r6,lr}
000c0a  4604              MOV      r4,r0
;;;598    	u8 FNTU,CATU;
;;;599    
;;;600    	FNTU=(u8)(FS_FindFreeFNT()*100/FNTRecordsNumber);	
000c0c  f7fffffe          BL       FS_FindFreeFNT
000c10  2164              MOVS     r1,#0x64
000c12  4348              MULS     r0,r1,r0
000c14  49d0              LDR      r1,|L1.3928|
000c16  6809              LDR      r1,[r1,#0]  ; FNTRecordsNumber
000c18  fbb0f0f1          UDIV     r0,r0,r1
000c1c  b2c6              UXTB     r6,r0
;;;601    	CATU=(u8)(FS_FindFreeCluster()*100/CATRecordsNumber);
000c1e  f7fffffe          BL       FS_FindFreeCluster
000c22  2164              MOVS     r1,#0x64
000c24  4348              MULS     r0,r1,r0
000c26  49cd              LDR      r1,|L1.3932|
000c28  8809              LDRH     r1,[r1,#0]  ; CATRecordsNumber
000c2a  fbb0f0f1          UDIV     r0,r0,r1
000c2e  b2c5              UXTB     r5,r0
;;;602    
;;;603    //	Msg("Fl_GetUsing %d %d\r\n",FNTU,CATU);
;;;604    	mbByteToPack(0,*buffer);
000c30  7821              LDRB     r1,[r4,#0]
000c32  2000              MOVS     r0,#0
000c34  f7fffffe          BL       mbByteToPack
;;;605    	mbByteToPack(0,*(buffer+1));
000c38  7861              LDRB     r1,[r4,#1]
000c3a  2000              MOVS     r0,#0
000c3c  f7fffffe          BL       mbByteToPack
;;;606    	mbByteToPack(0,FNTU);
000c40  4631              MOV      r1,r6
000c42  2000              MOVS     r0,#0
000c44  f7fffffe          BL       mbByteToPack
;;;607    	mbByteToPack(0,CATU);
000c48  4629              MOV      r1,r5
000c4a  2000              MOVS     r0,#0
000c4c  f7fffffe          BL       mbByteToPack
;;;608    	mbSendPack(0);
000c50  e8bd4070          POP      {r4-r6,lr}
000c54  2000              MOVS     r0,#0
000c56  f7ffbffe          B.W      mbSendPack
;;;609    }
;;;610    
                          ENDP

                  pFl_BulkErase PROC
;;;611    void pFl_BulkErase(u8 *buffer,u16 len) {
000c5a  b570              PUSH     {r4-r6,lr}
000c5c  4605              MOV      r5,r0
;;;612    	u8 res;
;;;613    	Msg("Fl_BulkErase\r\n");
000c5e  a0c0              ADR      r0,|L1.3936|
000c60  f7fffffe          BL       Msg
;;;614    	FLASH_BulkErase();
000c64  f7fffffe          BL       FLASH_BulkErase
;;;615    	res = FS_Init();
000c68  f7fffffe          BL       FS_Init
000c6c  f01004ff          ANDS     r4,r0,#0xff
;;;616    	if (res==FS_RESULT_OK) {
000c70  d014              BEQ      |L1.3228|
;;;617    		Msg("FS Init Ok.\r\n");
;;;618    	}
;;;619    	else Msg("FS Init Fault. Err %d\r\n",res);
000c72  4621              MOV      r1,r4
000c74  a0be              ADR      r0,|L1.3952|
000c76  f7fffffe          BL       Msg
                  |L1.3194|
;;;620    	mbByteToPack(0,*buffer);
000c7a  7829              LDRB     r1,[r5,#0]
000c7c  2000              MOVS     r0,#0
000c7e  f7fffffe          BL       mbByteToPack
;;;621    	mbByteToPack(0,*(buffer+1));
000c82  7869              LDRB     r1,[r5,#1]
000c84  2000              MOVS     r0,#0
000c86  f7fffffe          BL       mbByteToPack
;;;622    	mbByteToPack(0,res);
000c8a  4621              MOV      r1,r4
000c8c  2000              MOVS     r0,#0
000c8e  f7fffffe          BL       mbByteToPack
;;;623    	mbSendPack(0);
000c92  e8bd4070          POP      {r4-r6,lr}
000c96  2000              MOVS     r0,#0
000c98  f7ffbffe          B.W      mbSendPack
                  |L1.3228|
000c9c  a0ba              ADR      r0,|L1.3976|
000c9e  f7fffffe          BL       Msg
000ca2  e7ea              B        |L1.3194|
;;;624    }
;;;625    
                          ENDP

                  pFl_GetTimeouts PROC
;;;626    void pFl_GetTimeouts(u8 *buffer,u16 len) {
000ca4  b510              PUSH     {r4,lr}
000ca6  4604              MOV      r4,r0
;;;627    	mbByteToPack(0,*buffer);
000ca8  7801              LDRB     r1,[r0,#0]
000caa  2000              MOVS     r0,#0
000cac  f7fffffe          BL       mbByteToPack
;;;628    	mbByteToPack(0,*(buffer+1));
000cb0  7861              LDRB     r1,[r4,#1]
000cb2  2000              MOVS     r0,#0
000cb4  f7fffffe          BL       mbByteToPack
;;;629    	mbSendPack(0);
000cb8  e8bd4010          POP      {r4,lr}
000cbc  2000              MOVS     r0,#0
000cbe  f7ffbffe          B.W      mbSendPack
;;;630    }
;;;631    
                          ENDP

                  pFl_SetTimeouts PROC
;;;632    void pFl_SetTimeouts(u8 *buffer,u16 len) {
000cc2  b510              PUSH     {r4,lr}
000cc4  4604              MOV      r4,r0
;;;633    	mbByteToPack(0,*buffer);
000cc6  7801              LDRB     r1,[r0,#0]
000cc8  2000              MOVS     r0,#0
000cca  f7fffffe          BL       mbByteToPack
;;;634    	mbByteToPack(0,*(buffer+1));
000cce  7861              LDRB     r1,[r4,#1]
000cd0  2000              MOVS     r0,#0
000cd2  f7fffffe          BL       mbByteToPack
;;;635    	mbSendPack(0);
000cd6  e8bd4010          POP      {r4,lr}
000cda  2000              MOVS     r0,#0
000cdc  f7ffbffe          B.W      mbSendPack
;;;636    }
;;;637    
                          ENDP

                  pFl_EraseSector PROC
;;;638    void pFl_EraseSector(u8 *buffer,u16 len) {
000ce0  b510              PUSH     {r4,lr}
000ce2  4604              MOV      r4,r0
;;;639    	mbByteToPack(0,*buffer);
000ce4  7801              LDRB     r1,[r0,#0]
000ce6  2000              MOVS     r0,#0
000ce8  f7fffffe          BL       mbByteToPack
;;;640    	mbByteToPack(0,*(buffer+1));
000cec  7861              LDRB     r1,[r4,#1]
000cee  2000              MOVS     r0,#0
000cf0  f7fffffe          BL       mbByteToPack
;;;641    	mbSendPack(0);
000cf4  e8bd4010          POP      {r4,lr}
000cf8  2000              MOVS     r0,#0
000cfa  f7ffbffe          B.W      mbSendPack
;;;642    }
;;;643    
                          ENDP

                  pGetRegInfo PROC
;;;644    void pGetRegInfo(u8 *buffer,u16 len) {
000cfe  b570              PUSH     {r4-r6,lr}
000d00  4606              MOV      r6,r0
;;;645    	u8 Index;
;;;646    	u16 Ofs,Size;
;;;647    	char name[20];
;;;648    	Index = *(buffer+2);
000d02  7885              LDRB     r5,[r0,#2]
;;;649    	if (Index >= iva) {
000d04  48a4              LDR      r0,|L1.3992|
000d06  b088              SUB      sp,sp,#0x20           ;644
000d08  8800              LDRH     r0,[r0,#0]  ; iva
000d0a  4285              CMP      r5,r0
000d0c  d30b              BCC      |L1.3366|
;;;650    		Ofs = 0xFFFF; Size = 0; memset(name,0,20);
000d0e  f64f70ff          MOV      r0,#0xffff
000d12  f8ad0014          STRH     r0,[sp,#0x14]
000d16  2000              MOVS     r0,#0
000d18  f8ad0018          STRH     r0,[sp,#0x18]
000d1c  2114              MOVS     r1,#0x14
000d1e  4668              MOV      r0,sp
000d20  f7fffffe          BL       __aeabi_memclr4
000d24  e011              B        |L1.3402|
                  |L1.3366|
;;;651    	} else {
;;;652    		memcpy(name,va[Index].name,20);	// имя
000d26  489d              LDR      r0,|L1.3996|
000d28  eb0501c5          ADD      r1,r5,r5,LSL #3
000d2c  eb000481          ADD      r4,r0,r1,LSL #2
000d30  2214              MOVS     r2,#0x14
000d32  4621              MOV      r1,r4
000d34  4668              MOV      r0,sp
000d36  f7fffffe          BL       __aeabi_memcpy4
;;;653    		Ofs = (u32)va[Index].p - (u32)&regs[0];			// указатель
000d3a  8aa0              LDRH     r0,[r4,#0x14]
000d3c  4998              LDR      r1,|L1.4000|
000d3e  1a40              SUBS     r0,r0,r1
000d40  f8ad0014          STRH     r0,[sp,#0x14]
;;;654    		Size = va[Index].len;
000d44  8b20              LDRH     r0,[r4,#0x18]
000d46  f8ad0018          STRH     r0,[sp,#0x18]
                  |L1.3402|
;;;655    	}
;;;656    	//Msg("Index %d Ofs %d Size %d name %s\r\n",Index,Ofs,Size,name);
;;;657    	mbByteToPack(0,*buffer);
000d4a  7831              LDRB     r1,[r6,#0]
000d4c  2000              MOVS     r0,#0
000d4e  f7fffffe          BL       mbByteToPack
;;;658    	mbByteToPack(0,*(buffer+1));
000d52  7871              LDRB     r1,[r6,#1]
000d54  2000              MOVS     r0,#0
000d56  f7fffffe          BL       mbByteToPack
;;;659    	mbByteToPack(0,Index);
000d5a  4629              MOV      r1,r5
000d5c  2000              MOVS     r0,#0
000d5e  f7fffffe          BL       mbByteToPack
;;;660    	mbBufferToPack(0,(u8*)&Ofs,sizeof Ofs);
000d62  2202              MOVS     r2,#2
000d64  a905              ADD      r1,sp,#0x14
000d66  2000              MOVS     r0,#0
000d68  f7fffffe          BL       mbBufferToPack
;;;661    	mbBufferToPack(0,(u8*)&Size,sizeof Size);
000d6c  2202              MOVS     r2,#2
000d6e  a906              ADD      r1,sp,#0x18
000d70  2000              MOVS     r0,#0
000d72  f7fffffe          BL       mbBufferToPack
;;;662    	mbBufferToPack(0,(u8*)name,sizeof name);
000d76  2214              MOVS     r2,#0x14
000d78  4669              MOV      r1,sp
000d7a  2000              MOVS     r0,#0
000d7c  f7fffffe          BL       mbBufferToPack
;;;663    	mbSendPack(0);
000d80  2000              MOVS     r0,#0
000d82  f7fffffe          BL       mbSendPack
;;;664    }
000d86  b008              ADD      sp,sp,#0x20
000d88  bd70              POP      {r4-r6,pc}
;;;665    
                          ENDP

                  pGetVersion PROC
;;;666    void pGetVersion(u8 *buffer,u16 len) {
000d8a  b538              PUSH     {r3-r5,lr}
000d8c  4604              MOV      r4,r0
;;;667    	u32 ver;
;;;668    	ver = VERSION;
000d8e  4985              LDR      r1,|L1.4004|
;;;669    	Msg("GetVersion %08X \r\n",ver);
000d90  a085              ADR      r0,|L1.4008|
000d92  9100              STR      r1,[sp,#0]
000d94  f7fffffe          BL       Msg
;;;670    	mbByteToPack(0,*buffer);
000d98  7821              LDRB     r1,[r4,#0]
000d9a  2000              MOVS     r0,#0
000d9c  f7fffffe          BL       mbByteToPack
;;;671    	mbByteToPack(0,*(buffer+1));
000da0  7861              LDRB     r1,[r4,#1]
000da2  2000              MOVS     r0,#0
000da4  f7fffffe          BL       mbByteToPack
;;;672    	mbBufferToPack(0,(u8*)&ver,sizeof ver);
000da8  2204              MOVS     r2,#4
000daa  4669              MOV      r1,sp
000dac  2000              MOVS     r0,#0
000dae  f7fffffe          BL       mbBufferToPack
;;;673    	mbSendPack(0);
000db2  2000              MOVS     r0,#0
000db4  f7fffffe          BL       mbSendPack
;;;674    }
000db8  bd38              POP      {r3-r5,pc}
;;;675    
                          ENDP

                  pGetBusy PROC
;;;676    void pGetBusy(u8 *buffer,u16 len) {
000dba  b538              PUSH     {r3-r5,lr}
000dbc  4604              MOV      r4,r0
;;;677    	Msg("Busy %d En %d mr3 %d tc %d\r\n",Busy,fmvc.Enable,LPC_TIM1->MR3,LPC_TIM1->TC);
000dbe  487f              LDR      r0,|L1.4028|
000dc0  6881              LDR      r1,[r0,#8]
000dc2  9100              STR      r1,[sp,#0]
000dc4  6a43              LDR      r3,[r0,#0x24]
000dc6  487e              LDR      r0,|L1.4032|
000dc8  7e02              LDRB     r2,[r0,#0x18]  ; fmvc
000dca  487e              LDR      r0,|L1.4036|
000dcc  7801              LDRB     r1,[r0,#0]  ; Busy
000dce  a07e              ADR      r0,|L1.4040|
000dd0  f7fffffe          BL       Msg
;;;678    	 
;;;679    //	Msg("Z L %d MP %d T %d LPOFF %d LPON%d\r\n",ms_Z.Level,*(mc_Z.MovePos),ms_Z.Tcur,ms_Z.LPOFF,ms_Z.LPON);
;;;680    //	QSetPin(MOTOR_X_STEP);
;;;681    	//QSetPin(MOTOR_Yl_STEP);
;;;682    	//QSetPin(MOTOR_Yr_STEP);
;;;683    	//QSetPin(MOTOR_Z_STEP);
;;;684    //	Msg("GetPin sZ %d \r\n",QGetPin(SENS_MOTOR_Z));
;;;685    	mbByteToPack(0,*buffer);
000dd4  7821              LDRB     r1,[r4,#0]
000dd6  2000              MOVS     r0,#0
000dd8  f7fffffe          BL       mbByteToPack
;;;686    	mbByteToPack(0,*(buffer+1));
000ddc  7861              LDRB     r1,[r4,#1]
000dde  2000              MOVS     r0,#0
000de0  f7fffffe          BL       mbByteToPack
;;;687    	mbSendPack(0);
000de4  e8bd4038          POP      {r3-r5,lr}
000de8  2000              MOVS     r0,#0
000dea  f7ffbffe          B.W      mbSendPack
;;;688    }
;;;689    
                          ENDP

                  pGetBlock PROC
;;;690    void pGetBlock(u8 *buffer,u16 len) {
000dee  b510              PUSH     {r4,lr}
000df0  4604              MOV      r4,r0
;;;691    	mbByteToPack(0,*buffer);
000df2  7801              LDRB     r1,[r0,#0]
000df4  2000              MOVS     r0,#0
000df6  f7fffffe          BL       mbByteToPack
;;;692    	mbByteToPack(0,*(buffer+1));
000dfa  7861              LDRB     r1,[r4,#1]
000dfc  2000              MOVS     r0,#0
000dfe  f7fffffe          BL       mbByteToPack
;;;693    	mbBufferToPack(0,(u8*)eb,sizeof (*eb));
000e02  4879              LDR      r0,|L1.4072|
000e04  22e8              MOVS     r2,#0xe8
000e06  6801              LDR      r1,[r0,#0]  ; eb
000e08  2000              MOVS     r0,#0
000e0a  f7fffffe          BL       mbBufferToPack
;;;694    	mbSendPack(0);
000e0e  e8bd4010          POP      {r4,lr}
000e12  2000              MOVS     r0,#0
000e14  f7ffbffe          B.W      mbSendPack
;;;695    }
;;;696    
                          ENDP

                  pGetTimers PROC
;;;697    void pGetTimers(u8 *buffer,u16 len) {
000e18  b538              PUSH     {r3-r5,lr}
;;;698    	u8 Tnum, MR;
;;;699    	LPC_TIM_TypeDef       * pT;
;;;700    	u32*	pMR;
;;;701    //	QClrPin(MOTOR_X_STEP);
;;;702    	//QClrPin(MOTOR_Yl_STEP);
;;;703    	//QClrPin(MOTOR_Yr_STEP);
;;;704    	//QClrPin(MOTOR_Z_STEP);
;;;705    	Tnum = *(buffer+2); // таймер
000e1a  7881              LDRB     r1,[r0,#2]
;;;706    	MR = *(buffer+3);	// MR
000e1c  78c3              LDRB     r3,[r0,#3]
000e1e  4605              MOV      r5,r0                 ;697
000e20  b131              CBZ      r1,|L1.3632|
;;;707    	switch (Tnum) {	
000e22  2901              CMP      r1,#1
000e24  d007              BEQ      |L1.3638|
000e26  2902              CMP      r1,#2
000e28  d007              BEQ      |L1.3642|
000e2a  2903              CMP      r1,#3
000e2c  d108              BNE      |L1.3648|
000e2e  e006              B        |L1.3646|
                  |L1.3632|
;;;708    		case 0:pT=LPC_TIM0; break;
000e30  f04f2240          MOV      r2,#0x40004000
000e34  e004              B        |L1.3648|
                  |L1.3638|
;;;709    		case 1:pT=LPC_TIM1; break;		
000e36  4a61              LDR      r2,|L1.4028|
000e38  e002              B        |L1.3648|
                  |L1.3642|
;;;710    		case 2:pT=LPC_TIM2; break;
000e3a  4a6c              LDR      r2,|L1.4076|
000e3c  e000              B        |L1.3648|
                  |L1.3646|
;;;711    		case 3:pT=LPC_TIM3; break;
000e3e  4a6c              LDR      r2,|L1.4080|
                  |L1.3648|
;;;712    	}
;;;713    
;;;714     	switch (MR){
000e40  b133              CBZ      r3,|L1.3664|
000e42  2b01              CMP      r3,#1
000e44  d007              BEQ      |L1.3670|
000e46  2b02              CMP      r3,#2
000e48  d008              BEQ      |L1.3676|
000e4a  2b03              CMP      r3,#3
000e4c  d10b              BNE      |L1.3686|
000e4e  e008              B        |L1.3682|
                  |L1.3664|
;;;715    		case 0:	pMR=(u32*)&(pT->MR0); break;
000e50  f1020418          ADD      r4,r2,#0x18
000e54  e007              B        |L1.3686|
                  |L1.3670|
;;;716    		case 1: pMR=(u32*)&(pT->MR1); break;
000e56  f102041c          ADD      r4,r2,#0x1c
000e5a  e004              B        |L1.3686|
                  |L1.3676|
;;;717    		case 2:	pMR=(u32*)&(pT->MR2); break;
000e5c  f1020420          ADD      r4,r2,#0x20
000e60  e001              B        |L1.3686|
                  |L1.3682|
;;;718    		case 3: pMR=(u32*)&(pT->MR3); break;
000e62  f1020424          ADD      r4,r2,#0x24
                  |L1.3686|
;;;719    	}
;;;720    
;;;721    	Msg("T%d TC %u MR%d %u\r\n",Tnum,pT->TC,MR,*pMR);
000e66  6820              LDR      r0,[r4,#0]
000e68  9000              STR      r0,[sp,#0]
000e6a  6892              LDR      r2,[r2,#8]
000e6c  a061              ADR      r0,|L1.4084|
000e6e  f7fffffe          BL       Msg
;;;722    	mbByteToPack(0,*buffer);
000e72  7829              LDRB     r1,[r5,#0]
000e74  2000              MOVS     r0,#0
000e76  f7fffffe          BL       mbByteToPack
;;;723    	mbByteToPack(0,*(buffer+1));
000e7a  7869              LDRB     r1,[r5,#1]
000e7c  2000              MOVS     r0,#0
000e7e  f7fffffe          BL       mbByteToPack
;;;724    	mbSendPack(0);
000e82  e8bd4038          POP      {r3-r5,lr}
000e86  2000              MOVS     r0,#0
000e88  f7ffbffe          B.W      mbSendPack
;;;725    }
;;;726    
                          ENDP

                  pInitZCorr PROC
;;;727    void pInitZCorr(u8 *buffer,u16 len) {
000e8c  b510              PUSH     {r4,lr}
000e8e  4604              MOV      r4,r0
;;;728    	InitZComp();
000e90  f7fffffe          BL       InitZComp
;;;729    	mbByteToPack(0,*buffer);
000e94  7821              LDRB     r1,[r4,#0]
000e96  2000              MOVS     r0,#0
000e98  f7fffffe          BL       mbByteToPack
;;;730    	mbByteToPack(0,*(buffer+1));
000e9c  7861              LDRB     r1,[r4,#1]
000e9e  2000              MOVS     r0,#0
000ea0  f7fffffe          BL       mbByteToPack
;;;731    	mbSendPack(0);
000ea4  e8bd4010          POP      {r4,lr}
000ea8  2000              MOVS     r0,#0
000eaa  f7ffbffe          B.W      mbSendPack
;;;732    }
;;;733    void pSetPin(u8 *buffer,u16 len) {
                          ENDP

                  pSetPin PROC
000eae  b510              PUSH     {r4,lr}
000eb0  4604              MOV      r4,r0
;;;734    	if (*(buffer+3)) QSetPin(*(buffer+2));
000eb2  78c1              LDRB     r1,[r0,#3]
000eb4  7880              LDRB     r0,[r0,#2]
000eb6  b111              CBZ      r1,|L1.3774|
000eb8  f7fffffe          BL       QSetPin
000ebc  e001              B        |L1.3778|
                  |L1.3774|
;;;735    	else QClrPin(*(buffer+2));
000ebe  f7fffffe          BL       QClrPin
                  |L1.3778|
;;;736    //	Msg("SetPin n %d s %d\r\n",*(buffer+2),*(buffer+3));
;;;737    	mbByteToPack(0,*buffer);
000ec2  7821              LDRB     r1,[r4,#0]
000ec4  2000              MOVS     r0,#0
000ec6  f7fffffe          BL       mbByteToPack
;;;738    	mbByteToPack(0,*(buffer+1));
000eca  7861              LDRB     r1,[r4,#1]
000ecc  2000              MOVS     r0,#0
000ece  f7fffffe          BL       mbByteToPack
;;;739    	mbSendPack(0);
000ed2  e8bd4010          POP      {r4,lr}
000ed6  2000              MOVS     r0,#0
000ed8  f7ffbffe          B.W      mbSendPack
;;;740    }
;;;741    
                          ENDP

                  SendAddPointPack PROC
;;;742    void SendAddPointPack(s32 * pIndex,float * px, float * py) {
000edc  b570              PUSH     {r4-r6,lr}
000ede  460d              MOV      r5,r1
000ee0  4604              MOV      r4,r0
000ee2  4616              MOV      r6,r2
;;;743    	mbByteToPack(0,0x44);
000ee4  2144              MOVS     r1,#0x44
000ee6  2000              MOVS     r0,#0
000ee8  f7fffffe          BL       mbByteToPack
;;;744    	mbByteToPack(0,cmAddPoint);
000eec  2170              MOVS     r1,#0x70
000eee  2000              MOVS     r0,#0
000ef0  f7fffffe          BL       mbByteToPack
;;;745    	mbBufferToPack(0,(u8*)pIndex,4);
000ef4  2204              MOVS     r2,#4
000ef6  4621              MOV      r1,r4
000ef8  2000              MOVS     r0,#0
000efa  f7fffffe          BL       mbBufferToPack
;;;746    	mbBufferToPack(0,(u8*)px,4);
000efe  2204              MOVS     r2,#4
000f00  4629              MOV      r1,r5
000f02  2000              MOVS     r0,#0
000f04  f7fffffe          BL       mbBufferToPack
;;;747    	mbBufferToPack(0,(u8*)py,4);
000f08  2204              MOVS     r2,#4
000f0a  4631              MOV      r1,r6
000f0c  2000              MOVS     r0,#0
000f0e  f7fffffe          BL       mbBufferToPack
;;;748    	mbSendPack(0);
000f12  e8bd4070          POP      {r4-r6,lr}
000f16  2000              MOVS     r0,#0
000f18  e076              B        |L1.4104|
000f1a  0000              DCW      0x0000
                  |L1.3868|
000f1c  46535f53          DCB      "FS_Seek f:%d pos:%d res:%d\r\n",0
000f20  65656b20
000f24  663a2564
000f28  20706f73
000f2c  3a256420
000f30  7265733a
000f34  25640d0a
000f38  00      
000f39  00                DCB      0
000f3a  00                DCB      0
000f3b  00                DCB      0
                  |L1.3900|
000f3c  46535f43          DCB      "FS_Close f:%d res:%d\r\n",0
000f40  6c6f7365
000f44  20663a25
000f48  64207265
000f4c  733a2564
000f50  0d0a00  
000f53  00                DCB      0
                  |L1.3924|
                          DCD      0xe000ed08
                  |L1.3928|
                          DCD      FNTRecordsNumber
                  |L1.3932|
                          DCD      CATRecordsNumber
                  |L1.3936|
000f60  466c5f42          DCB      "Fl_BulkErase\r\n",0
000f64  756c6b45
000f68  72617365
000f6c  0d0a00  
000f6f  00                DCB      0
                  |L1.3952|
000f70  46532049          DCB      "FS Init Fault. Err %d\r\n",0
000f74  6e697420
000f78  4661756c
000f7c  742e2045
000f80  72722025
000f84  640d0a00
                  |L1.3976|
000f88  46532049          DCB      "FS Init Ok.\r\n",0
000f8c  6e697420
000f90  4f6b2e0d
000f94  0a00    
000f96  00                DCB      0
000f97  00                DCB      0
                  |L1.3992|
                          DCD      iva
                  |L1.3996|
                          DCD      ||va||
                  |L1.4000|
                          DCD      regs
                  |L1.4004|
                          DCD      0x01020124
                  |L1.4008|
000fa8  47657456          DCB      "GetVersion %08X \r\n",0
000fac  65727369
000fb0  6f6e2025
000fb4  30385820
000fb8  0d0a00  
000fbb  00                DCB      0
                  |L1.4028|
                          DCD      0x40008000
                  |L1.4032|
                          DCD      fmvc
                  |L1.4036|
                          DCD      Busy
                  |L1.4040|
000fc8  42757379          DCB      "Busy %d En %d mr3 %d tc %d\r\n",0
000fcc  20256420
000fd0  456e2025
000fd4  64206d72
000fd8  33202564
000fdc  20746320
000fe0  25640d0a
000fe4  00      
000fe5  00                DCB      0
000fe6  00                DCB      0
000fe7  00                DCB      0
                  |L1.4072|
                          DCD      ||eb||
                  |L1.4076|
                          DCD      0x40090000
                  |L1.4080|
                          DCD      0x40094000
                  |L1.4084|
000ff4  54256420          DCB      "T%d TC %u MR%d %u\r\n",0
000ff8  54432025
000ffc  75204d52
001000  25642025
001004  750d0a00
                  |L1.4104|
001008  f7ffbffe          B.W      mbSendPack
;;;749    }
;;;750    
                          ENDP

                  SendAddPointPackFrz PROC
;;;751    void SendAddPointPackFrz(s32 * pIndex,float * px, float * py, float * pz) {
00100c  e92d41f0          PUSH     {r4-r8,lr}
001010  460d              MOV      r5,r1
001012  4604              MOV      r4,r0
001014  461e              MOV      r6,r3
001016  4617              MOV      r7,r2
;;;752    	mbByteToPack(0,0x44);
001018  2144              MOVS     r1,#0x44
00101a  2000              MOVS     r0,#0
00101c  f7fffffe          BL       mbByteToPack
;;;753    	mbByteToPack(0,cmAddPoint);
001020  2170              MOVS     r1,#0x70
001022  2000              MOVS     r0,#0
001024  f7fffffe          BL       mbByteToPack
;;;754    	mbBufferToPack(0,(u8*)pIndex,4);
001028  2204              MOVS     r2,#4
00102a  4621              MOV      r1,r4
00102c  2000              MOVS     r0,#0
00102e  f7fffffe          BL       mbBufferToPack
;;;755    	mbBufferToPack(0,(u8*)px,4);
001032  2204              MOVS     r2,#4
001034  4629              MOV      r1,r5
001036  2000              MOVS     r0,#0
001038  f7fffffe          BL       mbBufferToPack
;;;756    	mbBufferToPack(0,(u8*)py,4);
00103c  2204              MOVS     r2,#4
00103e  4639              MOV      r1,r7
001040  2000              MOVS     r0,#0
001042  f7fffffe          BL       mbBufferToPack
;;;757    	mbBufferToPack(0,(u8*)pz,4);
001046  2204              MOVS     r2,#4
001048  4631              MOV      r1,r6
00104a  2000              MOVS     r0,#0
00104c  f7fffffe          BL       mbBufferToPack
;;;758    	mbSendPack(0);
001050  e8bd41f0          POP      {r4-r8,lr}
001054  2000              MOVS     r0,#0
001056  f7ffbffe          B.W      mbSendPack
;;;759    }
;;;760    
                          ENDP

                  FixPointPackFrz PROC
;;;761    void FixPointPackFrz(s32 * pIndex,float * px, float * py, float * pz) {
00105a  6800              LDR      r0,[r0,#0]
;;;762    	switch (*pIndex){
00105c  2801              CMP      r0,#1
00105e  d010              BEQ      |L1.4226|
001060  2802              CMP      r0,#2
001062  d019              BEQ      |L1.4248|
001064  2803              CMP      r0,#3
001066  d10b              BNE      |L1.4224|
;;;763    		case 1:
;;;764    			*pX1 = *px; *pY1 = *py; *pZ1 = *pz;
;;;765    			break;
;;;766    		case 2:
;;;767    			*pX2 = *px; *pY2 = *py; *pZ2 = *pz;
;;;768    			break;
;;;769    		case 3:
;;;770    			*pX3 = *px; *pY3 = *py; *pZ3 = *pz;
001068  6808              LDR      r0,[r1,#0]
00106a  498f              LDR      r1,|L1.4776|
00106c  6809              LDR      r1,[r1,#0]  ; pX3
00106e  6008              STR      r0,[r1,#0]
001070  498e              LDR      r1,|L1.4780|
001072  6810              LDR      r0,[r2,#0]
001074  6809              LDR      r1,[r1,#0]  ; pY3
001076  6008              STR      r0,[r1,#0]
001078  498d              LDR      r1,|L1.4784|
00107a  6818              LDR      r0,[r3,#0]
                  |L1.4220|
00107c  6809              LDR      r1,[r1,#0]  ; pZ3
00107e  6008              STR      r0,[r1,#0]
                  |L1.4224|
;;;771    			break;
;;;772    	}
;;;773    }
001080  4770              BX       lr
                  |L1.4226|
001082  6808              LDR      r0,[r1,#0]            ;764
001084  498b              LDR      r1,|L1.4788|
001086  6809              LDR      r1,[r1,#0]            ;764  ; pX1
001088  6008              STR      r0,[r1,#0]            ;764
00108a  498b              LDR      r1,|L1.4792|
00108c  6810              LDR      r0,[r2,#0]            ;764
00108e  6809              LDR      r1,[r1,#0]            ;764  ; pY1
001090  6008              STR      r0,[r1,#0]            ;764
001092  498a              LDR      r1,|L1.4796|
001094  6818              LDR      r0,[r3,#0]            ;765
001096  e7f1              B        |L1.4220|
                  |L1.4248|
001098  6808              LDR      r0,[r1,#0]            ;767
00109a  4989              LDR      r1,|L1.4800|
00109c  6809              LDR      r1,[r1,#0]            ;767  ; pX2
00109e  6008              STR      r0,[r1,#0]            ;767
0010a0  4988              LDR      r1,|L1.4804|
0010a2  6810              LDR      r0,[r2,#0]            ;767
0010a4  6809              LDR      r1,[r1,#0]            ;767  ; pY2
0010a6  6008              STR      r0,[r1,#0]            ;767
0010a8  4987              LDR      r1,|L1.4808|
0010aa  6818              LDR      r0,[r3,#0]            ;768
0010ac  e7e6              B        |L1.4220|
;;;774    
                          ENDP

                  mbFrzPackHandler0 PROC
;;;775    void mbFrzPackHandler0(u8 * buffer,u16 len){
0010ae  b510              PUSH     {r4,lr}
;;;776    	// проверка адреса
;;;777    	// if ((*buffer) != Addr) return;
;;;778    	//Dump(buffer,len);
;;;779    	//return;
;;;780    
;;;781    	switch (*(buffer+1)) {
0010b0  7842              LDRB     r2,[r0,#1]
0010b2  2a31              CMP      r2,#0x31
0010b4  d07d              BEQ      |L1.4530|
0010b6  dc26              BGT      |L1.4358|
0010b8  2a28              CMP      r2,#0x28
0010ba  d07b              BEQ      |L1.4532|
0010bc  dc1a              BGT      |L1.4340|
0010be  2a23              CMP      r2,#0x23
0010c0  d06c              BEQ      |L1.4508|
0010c2  dc0b              BGT      |L1.4316|
0010c4  2a03              CMP      r2,#3
0010c6  d046              BEQ      |L1.4438|
0010c8  2a06              CMP      r2,#6
0010ca  d048              BEQ      |L1.4446|
0010cc  2a21              CMP      r2,#0x21
0010ce  d061              BEQ      |L1.4500|
0010d0  2a22              CMP      r2,#0x22
0010d2  d170              BNE      |L1.4534|
;;;782    		case cmReadRegs: ReadRegs(buffer,len); break;
;;;783    		case cmWriteRegs: WriteRegs(buffer,len); break;
;;;784    		case cmGoToPoint:GoToPoint(buffer,len); break;
;;;785    		case cmTest :
;;;786    			// тест  - петля
;;;787    			mbBufferToPack(0,buffer,len-2);
;;;788    			mbSendPack(0);
;;;789    			break;
;;;790    		case cmRunBootLoader: RunBootLoader(); 		break;
;;;791    		case cmDbgMsg 		:						break;
;;;792    		case cmDataToU1		: DataToU1(buffer,len);	break;
;;;793    		// во фрезере нет поворота и смещения
;;;794    		//case cmShiftRotate	: ShiftRotate(buffer,len);	break;
;;;795    		case cmLSSend		: LSSendProc(buffer,len);	break;
;;;796    		case cmQAllocTable  : QAllocTable(buffer,len);	break;
;;;797    
;;;798     		case cmFS_FInfo 	: pFS_FInfo(buffer,len); break;
;;;799     		case cmFS_SetFInfo 	: pFS_SetFInfo(buffer,len); break;
0010d4  e8bd4010          POP      {r4,lr}
0010d8  f7ffbffe          B.W      pFS_SetFInfo
                  |L1.4316|
0010dc  2a24              CMP      r2,#0x24              ;781
0010de  d061              BEQ      |L1.4516|
0010e0  2a25              CMP      r2,#0x25              ;781
0010e2  d063              BEQ      |L1.4524|
0010e4  2a26              CMP      r2,#0x26              ;781
0010e6  d06e              BEQ      |L1.4550|
0010e8  2a27              CMP      r2,#0x27              ;781
0010ea  d164              BNE      |L1.4534|
;;;800     		case cmFS_Delete 	: pFS_Delete(buffer,len); break;
;;;801    							  
;;;802     		case cmFS_Create 	: pFS_Create(buffer,len); break;
;;;803     		case cmFS_Rewrite 	: pFS_Rewrite(buffer,len); break;
;;;804     		case cmFS_RewriteHandle : pFS_RewriteHandle(buffer,len); break;
;;;805     		case cmFS_Append 	: pFS_Append(buffer,len); break;
;;;806     		case cmFS_Reset 	: pFS_Reset(buffer,len); break;
0010ec  e8bd4010          POP      {r4,lr}
0010f0  f7ffbffe          B.W      pFS_Reset
                  |L1.4340|
0010f4  3a29              SUBS     r2,r2,#0x29
0010f6  2a08              CMP      r2,#8                 ;781
0010f8  d25d              BCS      |L1.4534|
0010fa  e8dff002          TBB      [pc,r2]               ;781
0010fe  7e68              DCB      0x7e,0x68
001100  6c707376          DCB      0x6c,0x70,0x73,0x76
001104  7a8e              DCB      0x7a,0x8e
                  |L1.4358|
001106  2a74              CMP      r2,#0x74              ;781
001108  d040              BEQ      |L1.4492|
00110a  dc18              BGT      |L1.4414|
00110c  2a67              CMP      r2,#0x67              ;781
00110e  d039              BEQ      |L1.4484|
001110  dc09              BGT      |L1.4390|
001112  2a32              CMP      r2,#0x32              ;781
001114  d075              BEQ      |L1.4610|
001116  2a64              CMP      r2,#0x64              ;781
001118  d029              BEQ      |L1.4462|
00111a  2a65              CMP      r2,#0x65              ;781
00111c  d14b              BNE      |L1.4534|
00111e  e8bd4010          POP      {r4,lr}               ;790
001122  f7ffbffe          B.W      RunBootLoader
                  |L1.4390|
001126  2a68              CMP      r2,#0x68              ;781
001128  d01d              BEQ      |L1.4454|
00112a  2a71              CMP      r2,#0x71              ;781
00112c  d06c              BEQ      |L1.4616|
00112e  2a72              CMP      r2,#0x72              ;781
001130  d06d              BEQ      |L1.4622|
001132  2a73              CMP      r2,#0x73              ;781
001134  d13f              BNE      |L1.4534|
001136  e8bd4010          POP      {r4,lr}               ;795
00113a  f7ffbffe          B.W      LSSendProc
                  |L1.4414|
00113e  3a75              SUBS     r2,r2,#0x75           ;795
001140  2a0e              CMP      r2,#0xe               ;781
001142  d238              BCS      |L1.4534|
001144  e8dff002          TBB      [pc,r2]               ;781
001148  666f7275          DCB      0x66,0x6f,0x72,0x75
00114c  78848484          DCB      0x78,0x84,0x84,0x84
001150  8484847b          DCB      0x84,0x84,0x84,0x7b
001154  7e81              DCB      0x7e,0x81
                  |L1.4438|
001156  e8bd4010          POP      {r4,lr}               ;782
00115a  f7ffbffe          B.W      ReadRegs
                  |L1.4446|
00115e  e8bd4010          POP      {r4,lr}               ;783
001162  f7ffbffe          B.W      WriteRegs
                  |L1.4454|
001166  e8bd4010          POP      {r4,lr}               ;784
00116a  f7ffbffe          B.W      GoToPoint
                  |L1.4462|
00116e  1e89              SUBS     r1,r1,#2              ;784
001170  b28a              UXTH     r2,r1                 ;787
001172  4601              MOV      r1,r0                 ;787
001174  2000              MOVS     r0,#0                 ;787
001176  f7fffffe          BL       mbBufferToPack
00117a  e8bd4010          POP      {r4,lr}               ;788
00117e  2000              MOVS     r0,#0                 ;788
001180  f7ffbffe          B.W      mbSendPack
                  |L1.4484|
001184  e8bd4010          POP      {r4,lr}               ;792
001188  f7ffbffe          B.W      DataToU1
                  |L1.4492|
00118c  e8bd4010          POP      {r4,lr}               ;796
001190  f7ffbffe          B.W      QAllocTable
                  |L1.4500|
001194  e8bd4010          POP      {r4,lr}               ;798
001198  f7ffbffe          B.W      pFS_FInfo
                  |L1.4508|
00119c  e8bd4010          POP      {r4,lr}               ;800
0011a0  f7ffbffe          B.W      pFS_Delete
                  |L1.4516|
0011a4  e8bd4010          POP      {r4,lr}               ;802
0011a8  f7ffbffe          B.W      pFS_Create
                  |L1.4524|
0011ac  e8bd4010          POP      {r4,lr}               ;803
0011b0  e003              B        |L1.4538|
                  |L1.4530|
0011b2  e035              B        |L1.4640|
                  |L1.4532|
0011b4  e003              B        |L1.4542|
                  |L1.4534|
0011b6  e04b              B        |L1.4688|
0011b8  e005              B        |L1.4550|
                  |L1.4538|
0011ba  f7ffbffe          B.W      pFS_Rewrite
                  |L1.4542|
0011be  e8bd4010          POP      {r4,lr}               ;804
0011c2  f7ffbffe          B.W      pFS_RewriteHandle
                  |L1.4550|
0011c6  e8bd4010          POP      {r4,lr}               ;805
0011ca  f7ffbffe          B.W      pFS_Append
;;;807    
;;;808     		case cmFS_Write 	: pFS_Write(buffer,len); break;
0011ce  e8bd4010          POP      {r4,lr}
0011d2  f7ffbffe          B.W      pFS_Write
;;;809     		case cmFS_Read 		: pFS_Read(buffer,len); break;
0011d6  e8bd4010          POP      {r4,lr}
0011da  f7ffbffe          B.W      pFS_Read
;;;810     		case cmFS_Seek 		: pFS_Seek(buffer,len); break;
0011de  e8bd4010          POP      {r4,lr}
0011e2  e7fe              B        pFS_Seek
;;;811     		case cmFS_Close 	: pFS_Close(buffer,len); break;
0011e4  e8bd4010          POP      {r4,lr}
0011e8  e7fe              B        pFS_Close
;;;812     		case cmFS_WriteLn 	: pFS_WriteLn(buffer,len); break;
0011ea  e8bd4010          POP      {r4,lr}
0011ee  f7ffbffe          B.W      pFS_WriteLn
;;;813     		case cmFS_ReadLn	: pFS_ReadLn(buffer,len); break;
0011f2  e8bd4010          POP      {r4,lr}
0011f6  f7ffbffe          B.W      pFS_ReadLn
;;;814     		case cmFS_BReadLn	: pFS_BReadLn(buffer,len); break;
0011fa  e8bd4010          POP      {r4,lr}
0011fe  f7ffbffe          B.W      pFS_BReadLn
                  |L1.4610|
;;;815     		case cmFS_Pos		: pFS_Pos(buffer,len); break;
001202  e8bd4010          POP      {r4,lr}
001206  e7fe              B        pFS_Pos
                  |L1.4616|
;;;816     		case cmCreateRegsBin: pCreateRegsBin(buffer,len); break;
001208  e8bd4010          POP      {r4,lr}
00120c  e7fe              B        pCreateRegsBin
                  |L1.4622|
;;;817     		case cmApplyRegsBin	: pApplyRegsBin(buffer,len); break;
00120e  e8bd4010          POP      {r4,lr}
001212  e7fe              B        pApplyRegsBin
;;;818     		case cmReset		: pReset(buffer,len); break;
001214  e8bd4010          POP      {r4,lr}
001218  e7fe              B        pReset
;;;819    
;;;820     		case cmFl_GetUsing  : pFl_GetUsing(buffer,len); break;
00121a  e8bd4010          POP      {r4,lr}
00121e  e7fe              B        pFl_GetUsing
                  |L1.4640|
;;;821     		case cmFl_BulkErase : pFl_BulkErase(buffer,len); break;
001220  e8bd4010          POP      {r4,lr}
001224  e7fe              B        pFl_BulkErase
;;;822    		case cmGetRegInfo : pGetRegInfo(buffer,len); break;
001226  e8bd4010          POP      {r4,lr}
00122a  e7fe              B        pGetRegInfo
;;;823    		case cmGetVersion : pGetVersion(buffer,len); break;
00122c  e8bd4010          POP      {r4,lr}
001230  e7fe              B        pGetVersion
;;;824    		case cmGetBusy : pGetBusy(buffer,len); break;
001232  e8bd4010          POP      {r4,lr}
001236  e7fe              B        pGetBusy
;;;825    		case cmGetBlock : pGetBlock(buffer,len); break;
001238  e8bd4010          POP      {r4,lr}
00123c  e7fe              B        pGetBlock
;;;826    		case cmGetTimers : pGetTimers(buffer,len); break;
00123e  e8bd4010          POP      {r4,lr}
001242  e7fe              B        pGetTimers
;;;827    		case cmInitZCorr : pInitZCorr(buffer,len); break;
001244  e8bd4010          POP      {r4,lr}
001248  e7fe              B        pInitZCorr
;;;828    		case cmSetPin : pSetPin(buffer,len); break;
00124a  e8bd4010          POP      {r4,lr}
00124e  e7fe              B        pSetPin
                  |L1.4688|
;;;829    
;;;830    /*
;;;831     		case cmFl_GetTimeouts : pFl_GetTimeouts(buffer,len); break;
;;;832     		case cmFl_SetTimeouts : pFl_SetTimeouts(buffer,len); break;
;;;833     		case cmFl_EraseSector : pFl_EraseSector(buffer,len); break;
;;;834    */
;;;835    
;;;836    		default :
;;;837    			// неизвестная команда
;;;838    			break;
;;;839    	}
;;;840    }
001250  bd10              POP      {r4,pc}
;;;841    
                          ENDP

                  UART0_Thread PROC
;;;843    u8 buffer0[10];
;;;844    void	UART0_Thread(void){
001252  b510              PUSH     {r4,lr}
;;;845    	u16 Count;
;;;846    	Count=0;
;;;847    //	buffer[0]=0x55;
;;;848    	Count=UARTx_ReadyRecvData(0);
001254  2000              MOVS     r0,#0
001256  f7fffffe          BL       UARTx_ReadyRecvData
00125a  0004              MOVS     r4,r0
;;;849    //	TITimer(tiTest2,tiMsToTick(1000), Msg("u"));
;;;850    	if (Count) {
00125c  d00c              BEQ      |L1.4728|
;;;851    		// данные есть
;;;852    //			if (EndTI(tiTestTime)){
;;;853    //				Msg("#\r\n");
;;;854    //				StartTI(tiTestTime,tiMsToTick(100));
;;;855    //			}
;;;856    //		if (UARTx_RecvBuffer(0,buffer0,Count)){
;;;857    		if (UART0_RecvBuffer(buffer0,Count)){
00125e  4601              MOV      r1,r0
001260  481a              LDR      r0,|L1.4812|
001262  f7fffffe          BL       UART0_RecvBuffer
001266  2800              CMP      r0,#0
001268  d00b              BEQ      |L1.4738|
;;;858    			mbRecvBuffer(0,buffer0,Count);
00126a  4622              MOV      r2,r4
00126c  e8bd4010          POP      {r4,lr}
001270  4916              LDR      r1,|L1.4812|
001272  2000              MOVS     r0,#0
001274  f7ffbffe          B.W      mbRecvBuffer
                  |L1.4728|
;;;859    		} 
;;;860    	} else {
;;;861    		mbIdle(0);
001278  e8bd4010          POP      {r4,lr}
00127c  2000              MOVS     r0,#0
00127e  f7ffbffe          B.W      mbIdle
                  |L1.4738|
;;;862    	}
;;;863    }
001282  bd10              POP      {r4,pc}
                          ENDP

                  __NVIC_DisableIRQ PROC
;;;1531    */
;;;1532   __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
001284  2800              CMP      r0,#0
;;;1533   {
001286  db0d              BLT      |L1.4772|
;;;1534     if ((int32_t)(IRQn) >= 0)
;;;1535     {
;;;1536       NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
001288  f000021f          AND      r2,r0,#0x1f
00128c  2101              MOVS     r1,#1
00128e  4091              LSLS     r1,r1,r2
001290  0940              LSRS     r0,r0,#5
001292  0080              LSLS     r0,r0,#2
001294  f10020e0          ADD      r0,r0,#0xe000e000
001298  f8c01180          STR      r1,[r0,#0x180]
;;;1537       __DSB();
00129c  f3bf8f4f          DSB      
;;;1538       __ISB();
0012a0  f3bf8f6f          ISB      
                  |L1.4772|
;;;1539     }
;;;1540   }
0012a4  4770              BX       lr
;;;1541   
                          ENDP

0012a6  0000              DCW      0x0000
                  |L1.4776|
                          DCD      pX3
                  |L1.4780|
                          DCD      pY3
                  |L1.4784|
                          DCD      pZ3
                  |L1.4788|
                          DCD      pX1
                  |L1.4792|
                          DCD      pY1
                  |L1.4796|
                          DCD      pZ1
                  |L1.4800|
                          DCD      pX2
                  |L1.4804|
                          DCD      pY2
                  |L1.4808|
                          DCD      pZ2
                  |L1.4812|
                          DCD      ||area_number.4||+0xff

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  wbuf
                          %        255

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.4||, ||.bss||
                  rbuf
                          %        255
                  buffer0
                          %        10

;*** Start embedded assembler ***

#line 1 "Main\\u0packets.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_u0packets_c_DataToU1____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_u0packets_c_DataToU1____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_u0packets_c_DataToU1____REVSH|
#line 462
|__asm___11_u0packets_c_DataToU1____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_u0packets_c_DataToU1____RRX|
#line 649
|__asm___11_u0packets_c_DataToU1____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

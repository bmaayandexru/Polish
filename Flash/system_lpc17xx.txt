; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\flash\system_lpc17xx.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -ID:\Projects\Frezer\Frezer.keil\01020124\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.3.0\Device\Include -D__UVISION_VERSION=517 -D_RTE_ -DLPC175x_6x --omf_browse=.\flash\system_lpc17xx.crf CM3\DeviceSupport\NXP\LPC17xx\system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;447    
;;;448    void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  4852              LDR      r0,|L1.332|
;;;449    {
;;;450      /* Determine clock frequency according to clock register values             */
;;;451      if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
000002  f8d01088          LDR      r1,[r0,#0x88]
000006  ea6f6111          MVN      r1,r1,LSR #24
00000a  078a              LSLS     r2,r1,#30
;;;452        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;453          case 0:                                /* Int. RC oscillator => PLL0    */
;;;454          case 3:                                /* Reserved, default to Int. RC  */
;;;455            SystemCoreClock = (IRC_OSC *
00000c  4950              LDR      r1,|L1.336|
;;;456                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;457                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;458                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;459            break;
;;;460          case 1:                                /* Main oscillator => PLL0       */
;;;461            SystemCoreClock = (OSC_CLK *
;;;462                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;463                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;464                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;465            break;
;;;466          case 2:                                /* RTC oscillator => PLL0        */
;;;467            SystemCoreClock = (RTC_CLK *
;;;468                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;469                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;470                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;471            break;
;;;472        }
;;;473      } else {
;;;474        switch (LPC_SC->CLKSRCSEL & 0x03) {
00000e  f8d0210c          LDR      r2,[r0,#0x10c]
000012  f0020203          AND      r2,r2,#3
000016  d00b              BEQ      |L1.48|
000018  b12a              CBZ      r2,|L1.38|
00001a  2a01              CMP      r2,#1
00001c  d03f              BEQ      |L1.158|
00001e  2a02              CMP      r2,#2
000020  d042              BEQ      |L1.168|
000022  2a03              CMP      r2,#3
000024  d12b              BNE      |L1.126|
                  |L1.38|
;;;475          case 0:                                /* Int. RC oscillator => PLL0    */
;;;476          case 3:                                /* Reserved, default to Int. RC  */
;;;477            SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000026  f8d00104          LDR      r0,[r0,#0x104]
00002a  4a4a              LDR      r2,|L1.340|
00002c  b2c0              UXTB     r0,r0
;;;478            break;
00002e  e040              B        |L1.178|
                  |L1.48|
000030  b12a              CBZ      r2,|L1.62|
000032  2a01              CMP      r2,#1                 ;452
000034  d011              BEQ      |L1.90|
000036  2a02              CMP      r2,#2                 ;452
000038  d022              BEQ      |L1.128|
00003a  2a03              CMP      r2,#3                 ;452
00003c  d11f              BNE      |L1.126|
                  |L1.62|
00003e  f8502f88          LDR      r2,[r0,#0x88]!        ;455
000042  6fc3              LDR      r3,[r0,#0x7c]         ;455
000044  f3c24207          UBFX     r2,r2,#16,#8          ;455
000048  b2db              UXTB     r3,r3                 ;455
00004a  1c52              ADDS     r2,r2,#1              ;455
00004c  1c5b              ADDS     r3,r3,#1              ;455
00004e  6800              LDR      r0,[r0,#0]            ;455
000050  435a              MULS     r2,r3,r2              ;455
000052  f3c0000e          UBFX     r0,r0,#0,#15          ;455
000056  4b40              LDR      r3,|L1.344|
000058  e00c              B        |L1.116|
                  |L1.90|
00005a  f8502f88          LDR      r2,[r0,#0x88]!        ;461
00005e  6fc3              LDR      r3,[r0,#0x7c]         ;461
000060  f3c24207          UBFX     r2,r2,#16,#8          ;461
000064  b2db              UXTB     r3,r3                 ;461
000066  1c52              ADDS     r2,r2,#1              ;461
000068  1c5b              ADDS     r3,r3,#1              ;461
00006a  6800              LDR      r0,[r0,#0]            ;461
00006c  435a              MULS     r2,r3,r2              ;461
00006e  4b3b              LDR      r3,|L1.348|
000070  f3c0000e          UBFX     r0,r0,#0,#15          ;461
                  |L1.116|
000074  1c40              ADDS     r0,r0,#1              ;461
000076  4358              MULS     r0,r3,r0              ;455
                  |L1.120|
000078  fbb0f0f2          UDIV     r0,r0,r2              ;455
                  |L1.124|
00007c  6008              STR      r0,[r1,#0]            ;455  ; SystemCoreClock
                  |L1.126|
;;;479          case 1:                                /* Main oscillator => PLL0       */
;;;480            SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
;;;481            break;
;;;482          case 2:                                /* RTC oscillator => PLL0        */
;;;483            SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
;;;484            break;
;;;485        }
;;;486      }
;;;487    
;;;488    }
00007e  4770              BX       lr
                  |L1.128|
000080  f8502f88          LDR      r2,[r0,#0x88]!        ;467
000084  6fc3              LDR      r3,[r0,#0x7c]         ;467
000086  f3c24207          UBFX     r2,r2,#16,#8          ;467
00008a  b2db              UXTB     r3,r3                 ;467
00008c  1c52              ADDS     r2,r2,#1              ;467
00008e  1c5b              ADDS     r3,r3,#1              ;467
000090  6800              LDR      r0,[r0,#0]            ;467
000092  435a              MULS     r2,r3,r2              ;467
000094  f3c0000e          UBFX     r0,r0,#0,#15          ;467
000098  1c40              ADDS     r0,r0,#1              ;467
00009a  0400              LSLS     r0,r0,#16             ;467
00009c  e7ec              B        |L1.120|
                  |L1.158|
00009e  f8d00104          LDR      r0,[r0,#0x104]        ;480
0000a2  4a2f              LDR      r2,|L1.352|
0000a4  b2c0              UXTB     r0,r0                 ;480
0000a6  e004              B        |L1.178|
                  |L1.168|
0000a8  f8d00104          LDR      r0,[r0,#0x104]        ;483
0000ac  f44f4200          MOV      r2,#0x8000            ;483
0000b0  b2c0              UXTB     r0,r0                 ;483
                  |L1.178|
0000b2  1c40              ADDS     r0,r0,#1              ;483
0000b4  fbb2f0f0          UDIV     r0,r2,r0              ;483
0000b8  e7e0              B        |L1.124|
;;;489    
                          ENDP

                  SystemInit PROC
;;;498     */
;;;499    void SystemInit (void)
0000ba  b530              PUSH     {r4,r5,lr}
;;;500    {
;;;501    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;502      LPC_SC->SCS       = SCS_Val;
0000bc  4823              LDR      r0,|L1.332|
0000be  2120              MOVS     r1,#0x20
0000c0  f8c011a0          STR      r1,[r0,#0x1a0]
;;;503      if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
0000c4  f8d011a0          LDR      r1,[r0,#0x1a0]
0000c8  0689              LSLS     r1,r1,#26
0000ca  d503              BPL      |L1.212|
                  |L1.204|
;;;504        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
0000cc  f8d011a0          LDR      r1,[r0,#0x1a0]
0000d0  0649              LSLS     r1,r1,#25
0000d2  d5fb              BPL      |L1.204|
                  |L1.212|
;;;505      }
;;;506    
;;;507      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
0000d4  2403              MOVS     r4,#3
0000d6  f8c04104          STR      r4,[r0,#0x104]
;;;508      /* Periphral clock must be selected before PLL0 enabling and connecting
;;;509       * - according errata.lpc1768-16.March.2010 -
;;;510       */
;;;511      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
0000da  4922              LDR      r1,|L1.356|
0000dc  f8c011a8          STR      r1,[r0,#0x1a8]
;;;512      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
0000e0  4921              LDR      r1,|L1.360|
0000e2  f8c011ac          STR      r1,[r0,#0x1ac]
;;;513    
;;;514    #if (PLL0_SETUP)
;;;515      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
0000e6  2201              MOVS     r2,#1
0000e8  f8c0210c          STR      r2,[r0,#0x10c]
;;;516    
;;;517      LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
0000ec  491f              LDR      r1,|L1.364|
0000ee  f8c01084          STR      r1,[r0,#0x84]
;;;518      LPC_SC->PLL0FEED  = 0xAA;
0000f2  23aa              MOVS     r3,#0xaa
0000f4  f8c0308c          STR      r3,[r0,#0x8c]
;;;519      LPC_SC->PLL0FEED  = 0x55;
0000f8  2155              MOVS     r1,#0x55
0000fa  f8c0108c          STR      r1,[r0,#0x8c]
;;;520    
;;;521      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
0000fe  f8c02080          STR      r2,[r0,#0x80]
;;;522      LPC_SC->PLL0FEED  = 0xAA;
000102  f8c0308c          STR      r3,[r0,#0x8c]
;;;523      LPC_SC->PLL0FEED  = 0x55;
000106  f8c0108c          STR      r1,[r0,#0x8c]
;;;524      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
00010a  bf00              NOP      
                  |L1.268|
00010c  f8d05088          LDR      r5,[r0,#0x88]
000110  016d              LSLS     r5,r5,#5
000112  d5fb              BPL      |L1.268|
;;;525    
;;;526      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000114  f8c04080          STR      r4,[r0,#0x80]
;;;527      LPC_SC->PLL0FEED  = 0xAA;
000118  f8c0308c          STR      r3,[r0,#0x8c]
;;;528      LPC_SC->PLL0FEED  = 0x55;
00011c  f8c0108c          STR      r1,[r0,#0x8c]
                  |L1.288|
;;;529      while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
000120  f8d01088          LDR      r1,[r0,#0x88]
000124  f0117f40          TST      r1,#0x3000000
000128  d0fa              BEQ      |L1.288|
;;;530    #endif
;;;531    
;;;532    #if (PLL1_SETUP)
;;;533      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;534      LPC_SC->PLL1FEED  = 0xAA;
;;;535      LPC_SC->PLL1FEED  = 0x55;
;;;536    
;;;537      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;538      LPC_SC->PLL1FEED  = 0xAA;
;;;539      LPC_SC->PLL1FEED  = 0x55;
;;;540      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;541    
;;;542      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;543      LPC_SC->PLL1FEED  = 0xAA;
;;;544      LPC_SC->PLL1FEED  = 0x55;
;;;545      while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
;;;546    #else
;;;547      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
00012a  f8c02108          STR      r2,[r0,#0x108]
;;;548    #endif
;;;549      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00012e  4910              LDR      r1,|L1.368|
000130  f8c010c4          STR      r1,[r0,#0xc4]
;;;550    
;;;551      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000134  2100              MOVS     r1,#0
000136  f8c011c8          STR      r1,[r0,#0x1c8]
;;;552    #endif
;;;553    
;;;554    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;555      LPC_SC->FLASHCFG  = FLASHCFG_Val;
00013a  f244013a          MOV      r1,#0x403a
00013e  6001              STR      r1,[r0,#0]
;;;556    #endif
;;;557    
;;;558    //  Set Vector table offset value
;;;559    #if (__RAM_MODE__==1)
;;;560      SCB->VTOR  = 0x10000000 & 0x3FFFFF80;
;;;561    #else
;;;562      SCB->VTOR  = 0x00002000 & 0x3FFFFF80;
000140  490c              LDR      r1,|L1.372|
000142  f44f5000          MOV      r0,#0x2000
000146  6008              STR      r0,[r1,#0]
;;;563    #endif
;;;564    }
000148  bd30              POP      {r4,r5,pc}
;;;565    
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      0x400fc000
                  |L1.336|
                          DCD      ||.data||
                  |L1.340|
                          DCD      0x003d0900
                  |L1.344|
                          DCD      0x007a1200
                  |L1.348|
                          DCD      0x016e3600
                  |L1.352|
                          DCD      0x00b71b00
                  |L1.356|
                          DCD      0x55515155
                  |L1.360|
                          DCD      0x54555455
                  |L1.364|
                          DCD      0x00050063
                  |L1.368|
                          DCD      0x0028875e
                  |L1.372|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x05f5e100

;*** Start embedded assembler ***

#line 1 "CM3\\DeviceSupport\\NXP\\LPC17xx\\system_LPC17xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_system_LPC17xx_c_5d646a67____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____REVSH|
#line 462
|__asm___16_system_LPC17xx_c_5d646a67____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____RRX|
#line 649
|__asm___16_system_LPC17xx_c_5d646a67____RRX| PROC
#line 650

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

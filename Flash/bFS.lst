L 1 "Main\bFS.c"
N#include "Defs.h"
L 1 ".\UCNC\Defs.h" 1
N/*****************************************************************/
N//
N//  лндскэ наыху нопедекемхи
N//
N/*****************************************************************/
N
N#ifndef __DEFS_H_
N#define __DEFS_H_
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 11 ".\UCNC\Defs.h" 2
N
N#define TRUE 	1
N#define FALSE 	0
N
N//--------------------------------------------------
N// йНПНРЙХЕ ХЛЕМЮ ЯРЮМДЮПРМШУ РХОНБ
N//--------------------------------------------------
Ntypedef int8_t   s8;
Ntypedef int16_t  s16;
Ntypedef int32_t  s32;
Ntypedef int64_t  s64;
Ntypedef uint8_t  u8;
Ntypedef uint16_t u16;
Ntypedef uint32_t u32;
Ntypedef uint64_t u64;
Ntypedef u8 bool;
Ntypedef u8 BOOL;
N
N//#define VERSION 0x01020124
N#define VERSION 0x01020124
N// НРКЮДЙЮ ТСМЙЖХХ Move_Handler
N//#define MOVE_D
N// ОХКЮ
N// НРЙКЧВЕМХЕ ГЮЦПСГЙХ ОЮПЮЛЕРПНБ Я ТКЩЬ
N//#define __NOT_LOAD_PARAMS__
N// ОХКЮ
N//#define __SAW__
N// ТПЕГЕП
N#define __FREZER__
N#endif // __DEFS_H_
L 2 "Main\bFS.c" 2
N#include "msg.h"
L 1 "Main\msg.h" 1
N#ifndef __MSG_H__
N#define __MSG_H__
N#include <stdarg.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 190986 $
N * Checkin $Date: 2015-02-04 14:26:49 +0000 (Wed, 04 Feb 2015) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5060002
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N#ifdef __clang__
S  typedef __builtin_va_list va_list;
S  #define va_start(ap, param) __builtin_va_start(ap, param)
S  #define va_end(ap)          __builtin_va_end(ap)
S  #define va_arg(ap, type)    __builtin_va_arg(ap, type)
S  #if __STDC_VERSION__ >= 199900L || __cplusplus >= 201103L || !defined(__STRICT_ANSI__)
S  #define va_copy(dest, src)  __builtin_va_copy(dest, src)
S  #endif
N#else
N  #ifdef __TARGET_ARCH_AARCH64
S    typedef struct __va_list {
S      void *__stack;
S      void *__gr_top;
S      void *__vr_top;
S      int __gr_offs;
S      int __vr_offs;
S    } va_list;
N  #else
N    typedef struct __va_list { void *__ap; } va_list;
N  #endif
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N#endif /* __clang__ */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N#endif
N
N/* end of stdarg.h */
N
L 4 "Main\msg.h" 2
N#include "Defs.h"
N
N#define cmDbgMsg        	0x66
N
Nvoid  Msg (const  u8 *format, ...);
Nvoid Dump(u8 * buffer,u16 count);
Nvoid	SMsg(void);
N
N#endif
L 3 "Main\bFS.c" 2
N#include "FS.h"
L 1 "Main\FS.h" 1
N
N//****************************************************************************
N//
N//                            тЮИКНБЮЪ ЯХЯРЕЛЮ
N//
N//****************************************************************************
N
N
N
N#ifndef __FS_H_
N#define __FS_H_
N
N
N#include "Defs.h"
N
N#define FS_RESULT_OK				0
N#define EFS_FLASH_NOT_INITED		-1
N#define EFS_FS_NOT_INITED 			-2
N#define EFS_INVALID_FILE_NAME		-3
N#define EFS_FILE_IS_USED			-4
N#define EFS_NO_FREE_FCS				-5
N#define EFS_INVALID_FSC				-6
N#define EFS_FCS_NOT_OPENED			-7
N#define EFS_FILE_NAME_IS_EXIST		-8
N#define EFS_NO_FREE_FNT				-9
N#define EFS_NO_FREE_SPACE			-10
N#define EFS_FILE_NOT_FOUND			-11
N#define EFS_WRITE_DISABLED			-12
N#define EFS_FCS_NOT_OPENED_WRITE	-13
N#define EFS_FCS_NOT_OPENED_READ		-14
N#define EFS_NO_DATA					-15
N#define EFS_INVALID_POSITION		-16 
N#define EFS_FILE_IS_CLOSED			-17 
N#define EFS_UNKNOWN_FILE_STATE		-18 
N#define EFS_FILE_INFO_NOT_FOUND		-19
N#define FS_NOT_EOF	 				-20
N#define FS_EOF						-21
N#define FS_BOF						-22
N
N// рХО ТЮИКНБНИ ОЕПЕЛЕММНИ
Ntypedef s8 tFile;
N
Nextern u16 CATRecordsNumber;															// йНК-БН ГЮОХЯЕИ Б РЮАКХЖЕ CAT
Nextern u32 FNTRecordsNumber;															// йНК-БН ГЮОХЯЕИ Б РЮАКХЖЕ FNT
N
N// хМХЖХЮКХГХПНБЮРЭ ТЮИКНБСЧ ЯХЯРЕЛС
Ns8 FS_Init(void);
N
N// мЮГМЮВХРЭ ТЮИКНБСЧ ОЕПЕЛЕММСЧ ТЮИКС
Ns8 FS_Assign(const u8 *file_name, tFile * f);
N// >= 0 - МНЛЕП НОХЯЮРЕКЪ
N// "тЮИКНБЮЪ ЯХЯРЕЛЮ МЕ ХМХЖХЮКХГХПНБЮМЮ" (НЬХАЙЮ -1)
N// "мЕБЕПМШИ ТНПЛЮР ХЛЕМХ ТЮИКЮ" (НЬХАЙЮ -3)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ ХЯОНКЭГСЕРЯЪ" (НЬХАЙЮ -4)
N// "мЕР ЯБНАНДМНИ ЯРПСЙРСПШ FCS" (НЬХАЙЮ -2)
N
N// яНГДЮРЭ МНБШИ ТЮИК ДКЪ ГЮОХЯХ
Ns8 FS_Rewrite(tFile f);
N// 0 - БЯ╦ УНПНЬН
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ" (НЬХАЙЮ -1)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ СФЕ ЯСЫЕЯРБСЕР" (НЬХАЙЮ -2)
N// "мЕР ЯБНАНДМНИ ГЮОХЯХ FNT" (НЬХАЙЮ -3)
N// "мЕДНЯРЮРНВМН ЛЕЯРЮ" (НЬХАЙЮ -4)
N
N// нРЙПШРЭ ТЮИК ДКЪ ДНАЮБКЕМХЪ
Ns8 FS_Append(tFile f);
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ" (НЬХАЙЮ -1)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ МЕ МЮИДЕМ" (НЬХАЙЮ -2)
N// "мЕР ЯБНАНДМНИ ГЮОХЯХ FNT" (НЬХАЙЮ -3)
N// нРЙПШРЭ ТЮИК ДКЪ ВРЕМХЪ
Ns8 FS_Reset(tFile f);
N// 0 - БЯ╦ УНПНЬН
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ" (НЬХАЙЮ -1)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ МЕ МЮИДЕМ" (НЬХАЙЮ -2)
N
N// гЮОХЯЮРЭ АЮИР Б НРЙПШРШИ ТЮИК
Ns8 FS_WriteByte(tFile f, u8 data);
N// 0 - АЮИР ГЮОХЯЮМ
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ГЮОХЯХ ТЮИКЮ" (НЬХАЙЮ -1)
N// "мЕДНЯРЮРНВМН ЛЕЯРЮ ДКЪ ОНЯКЕДСЧЫЕИ ГЮОХЯХ" (НЬХАЙЮ -2)
N// "тЮИК ОСЯР" (НЬХАЙЮ -2)
N
N// оПНВХРЮРЭ АЮИР ХГ НРЙПШРНЦН ТЮИКЮ
Ns8 FS_ReadByte(tFile f, u8 *data);
N// 0 - АЮИР ОПНВХРЮМ
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ВРЕМХЪ ТЮИКЮ" (НЬХАЙЮ -1)
N
N// тсмйжхъ ме дндекюмю !!!
N// гЮОХЯЮРЭ АСТЕП Б НРЙПШРШИ ТЮИК
Ns32 FS_Write(tFile f, const u8 *buffer, u32 size);
N
N// тсмйжхъ ме дндекюмю !!!
N// оПНВХРЮРЭ АСТЕП ХГ НРЙПШРНЦН ТЮИКЮ
Ns32 FS_Read(tFile f, u8 *buffer, u32 size);
N
N// тсмйжхъ ме дндекюмю !!!
N// гЮОХЯЮРЭ ЯРПНЙС Б НРЙПШРШИ ТЮИК
Ns32 FS_WriteLn(tFile f, const u8 *string);
N
N// оПНВХРЮРЭ ЯРПНЙС ХГ НРЙПШРНЦН ТЮИКЮ Б ОПЪЛНЛ МЮОПЮБКЕМХХ
Ns8 FS_ReadLn(tFile f, u8 *string, u32 max_size);
N
N// тсмйжхъ ме дндекюмю !!!
N// оПНВХРЮРЭ ЯРПНЙС ХГ НРЙПШРНЦН ТЮИКЮ Б НАПЮРМНЛ МЮОПЮБКЕМХХ
Ns8 FS_ReadPrevLn(tFile f, u8 *string, u32 max_size);
N
N// йНКХВЕЯРБН МЕОПНВХРЮММШУ АЮИР Б НРЙПШРНЛ ДКЪ ВРЕМХЪ ТЮИКЕ
Ns32 FS_RemainSize(tFile f);
N
N// оЕПЕИРХ Б ГЮДЮММСЧ ОНГХЖХЧ Б НРЙПШРНЛ ДКЪ ВРЕМХЪ ТЮИКЕ
Ns8 FS_Seek(tFile f, u32 position);
N// 0 - ОЕПЕУНД БШОНКМЕМ
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ВРЕМХЪ ТЮИКЮ" (НЬХАЙЮ -1)
N// "гЮДЮММЮЪ ОНГХЖХЪ МЕ ЯСЫЕЯРБСЕР" (НЬХАЙЮ -2)
N
N// яЛЕЯРХРЭ РЕЙСЫСЧ ОНГХЖХЧ Б НРЙПШРНЛ ДКЪ ВРЕМХЪ ТЮИКЕ
Ns8 FS_RSeek(tFile fcs_num, s32 disp);
N//"тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N//"яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ВРЕМХЪ ТЮИКЮ" (НЬХАЙЮ -1)
N// гЮЙПШРЭ ТЮИК
N
Ns8 FS_Close(tFile *f);
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ" (НЬХАЙЮ -1)
N// "мЕХГБЕЯРМНЕ ЯНЯРНЪМХЕ ЯРПСЙРСПШ FCS" (НЬХАЙЮ -2)
N
N// сДЮКХРЭ ТЮИК
Ns8 FS_Delete(const u8 *file_name);
N// 0 - ТЮИК СДЮКЕМ
N// "тЮИКНБЮЪ ЯХЯРЕЛЮ МЕ ХМХЖХЮКХГХПНБЮМЮ" (НЬХАЙЮ -1)
N// "мЕБЕПМШИ ТНПЛЮР ХЛЕМХ ТЮИКЮ" (НЬХАЙЮ -3)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ ХЯОНКЭГСЕРЯЪ" (НЬХАЙЮ -4)
N// "тЮИК Я ГЮДЮММШЛ ХЛЕМЕЛ МЕ МЮИДЕМ" (НЬХАЙЮ -2)
N
N// оНКСВХРЭ ХМТНПЛЮЖХЧ Н ТЮИКЕ
Ns8 FS_GetFileInfo(u32 * start_fnt_num, u8 *name, u8 *type, u8 *attr, u32 *size, tFile *f);
N// БНГБПЮЫЮЕРЯЪ АКХФЮИЬХИ Й start_fnt_num  fnt_num  
N// 0xFFFFFFFF - НВЕПЕДМНИ МЕ МЮИДЕМ
N
N//	оПНБЕПХРЭ ЙНМЕЖ НРЙПШРНЦН ДКЪ ВРЕМХЪ ТЮИКЮ
Ns8 FS_Eof(tFile f);
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ВРЕМХЪ ТЮИКЮ" (НЬХАЙЮ -1)
N// оНКСВХРЭ РЕЙСЫСЧ ОНГХЖХЧ НРЙПШРНЦН ДКЪ ВРЕМХЪ ТЮИКЮ
Ns8 FS_Pos(tFile fcs_num,s32 * pos);
N// "тЮИКНБЮЪ ОЕПЕЛЕММЮЪ МЕ МЮГМЮВЕМЮ ТЮИКС" (НЬХАЙЮ -9)
N// "яРПСЙРСПЮ FCS МЕ НРЙПШРЮ ДКЪ ВРЕМХЪ ТЮИКЮ" (НЬХАЙЮ -1)
N//-----------------------------------------------------------------------------
N//			онксвхрэ пюглеп нрйпшрнцн тюикю
N//-----------------------------------------------------------------------------
Ns32 FS_Size(tFile f);
N// ме мюдн ?
N//-----------------------------------------------------------------------------
N//			онксвхрэ йнкхвеярбн тюикнб
N//-----------------------------------------------------------------------------
Ns32 FS_FilesCount(void);
N
N//-----------------------------------------------------------------------------
N//			оепехлемнбюрэ тюик
N//-----------------------------------------------------------------------------
Ns8 FS_Rename(const u8 *old_file_name, const u8 *new_file_name);
N
N//-----------------------------------------------------------------------------
N//			гюдюрэ юрпхасрш тюикю
N//-----------------------------------------------------------------------------
Ns8 FS_SetAttr(const u8 *file_name, u8 attr);
N
N
N//
N//
N//
N
N
N//-----------------------------------------------------------------------------
N//			йнкхвеярбн меопнвхрюммшу аюир б нрйпшрнл дкъ времхъ тюике
N//-----------------------------------------------------------------------------
Ns32 FS_RemainSize(tFile f);
N
N//-----------------------------------------
N// реяр<!>
N//-----------------------------------------
N
N// ОНКСВХРЭ ЯНЯРНЪМХЕ ЯРПСЙРСПШ FCS
Nu8 FS_GetFCSState( u8 fcs_num);
N
N// НРНАПЮГХРЭ ЯРПСЙРСПС FCS
Nvoid FS_FCS_Show( u8 fcs_num, void page_buf_view(u8 *buffer, u32 addr) );
N
N// НРНАПЮГХРЭ ОЮПЮЛЕРПШ ТЮИКНБНИ ЯХЯРЕЛШ
Nvoid FS_Params_Show(void);
N
Nu32 FS_FindFreeFNT(void);
Nu16 FS_FindFreeCluster(void);
N
N
N
N
N#endif // __FS_H_
L 4 "Main\bFS.c" 2
N#include "bFS.h"
L 1 "Main\bFS.h" 1
N#ifndef __bFS_H__
N#define __bFS_H__
N
N#include "Defs.h"
N#include "fs.h"
N
N// ОНРНЙХ
Ntypedef struct tagTFileStream{
N	tFile 	f;	 // ТЮИК
N	s32 	Pos; // ОНГХЖХЪ ОНРНЙЮ Б ТЮИКЕ
N} TFileStream;
N
N
N// ГЮЛЕМЮ ФЕМХМШЛ ОПНЖЕДСПЮЛ
Ns8 bFS_Read(tFile fcs_num, u8 *buffer, u32 size, u32 * rb);
Ns8 bFS_ReadLn(tFile fcs_num, u8 *str, u32 max_size);
Ns8 bFS_BReadLn(tFile fcs_num, u8 *str, u32 max_size);
Ns8 bFS_Write(tFile fcs_num, const u8 *buffer, u32 size, u32 * wbc);
N
N// ОПНЖЕДСПШ ПЮАНРШ Я ОНРНЙЮЛХ
Ns8 InitStream(TFileStream *s,tFile fs);
Ns8 bsFS_ReadLn(TFileStream *s, u8 *str, u32 max_size);
Ns8 bsFS_BReadLn(TFileStream *s, u8 *str, u32 max_size);
Ns8 bsFS_Seek(TFileStream *s,u32 position);
Ns8 bsFS_Pos(TFileStream *s,s32 * pos);
N
N#endif
L 5 "Main\bFS.c" 2
N
Ns8 bFS_Read(tFile fcs_num, u8 *buffer, u32 size, u32 * rbc) {
N	u32 i;
N	s8 res;
N	if (size == 0) return FS_RESULT_OK;
X	if (size == 0) return 0;
N	*rbc = 0;
N	for (i=0;i < size;i++){
N		res = FS_ReadByte(fcs_num,buffer+i);
N		if (res < 0) {
N			return res;
N		} else {
N			(*rbc)++;
N		}
N	}	
N	return res;
N}
N
N
Ns8 bFS_ReadLn(tFile fcs_num, u8 *str, u32 max_size) {
N	u32 i;
N	u8 s;
N	u8 b;
N	s8 res;
N
N	s = 0; 
N	i = 0;
N	if (FS_Eof(fcs_num)==FS_EOF) return FS_EOF;
X	if (FS_Eof(fcs_num)== -21) return -21;
N	do {
N		res = FS_ReadByte(fcs_num,&b);
N		if (res < 0) return res;
N		else {
N			switch (s) {
N				case 0:
N					// ВХРЮЕЛ БЯЕ ЯХЛБНКШ ДН 13
N					*(str+i) = b;
N					if (b == 13) s=1;
N				break;
N	
N				case 1:
N					if (b == 10) {
N						// ЯКЕДСЧЫХИ ЯХЛОНК ГЮ 13 ДНКФЕМ АШРЭ 10
N						*(str+i) = b;
N						// БШУНДХЛ
N						return FS_RESULT_OK;
X						return 0;
N					} else {
N						// ЯКЕДСЧЫХИ ГЮ 13 ЯХЛБНК МЕ 10
N						FS_RSeek(fcs_num,-1);
N						// ЯДБХЦЮЕЛЯЪ МЮ ОПЕДШДСЫХИ ЯХЛБНК Х БШУНДХЛ
N						return FS_RESULT_OK;
X						return 0;
N					}
N//				break;
N			}
N		}
N		i++;
N	} while	(i<max_size);
N	// ЕЯКХ ОЕПЕЕУЮКХ max_size РНФЕ БШУНДХЛ
N	return FS_RESULT_OK;
X	return 0;
N}
N
Ns8 FS_ReadPrevByte(tFile fcs_num,u8 * b){
N	s32 pos;
N	s8 res;
N	res = FS_Pos(fcs_num,&pos);
N	if (res) return res;
N	// ОНКСВХКХ ОНГХЖХЧ Б pos
N	if (pos) {
N		res = FS_RSeek(fcs_num,-1);
N		if (res) return res;
N		res = FS_ReadByte(fcs_num,b);
N		if (res) return res;
N		res = FS_RSeek(fcs_num,-1);
N		return res;
N	} else {
N		*b = 0;
N		return FS_BOF;
X		return -22;
N	}
N}
N
Ns8 bFS_BReadLn(tFile fcs_num, u8 *str, u32 max_size) {
N// ОПНВХРЮРЭ ЯРПНЙС Б НАПЮРМНЛ МЮОПЮБКЕМХХ
N	u8 s;
N	u8 b;
N	s8 res;
N	s32 fixpos;
N	s32 pos;
N
N	s = 0; 
N
N	// ЕЯКХ ЯРНХЛ Б МЮВЮКЕ РН МХВЕЦН БШВХРЮРЭ МЕ ЛНФЕЛ
N	res = FS_Pos(fcs_num,&pos);
N	if (res) return res;
N	if (pos==0) return FS_BOF; // БШУНДХЛ
X	if (pos==0) return -22; 
N
N	// ХДЕЛ ОН ТЮИКС Б НАПЮРМНЛ МЮОПЮБКЕМХХ
N	// ДН МЮВЮКЮ ХКХ ДН 2-У БУНФДЕМХИ ЯХЛБНКЮ 13
N	while ((FS_ReadPrevByte(fcs_num,&b)==0)&&(s < 2)) {
N		if (b == 13) s++;
N	}
N	res = FS_Pos(fcs_num,&pos);
N	if (res) return res;
N	if (pos) {
N		// ЕЯКХ МЕ Б МЮВЮКЕ ТЮИКЮ
N		// БШВХРШБЮЕЛ РПХ ЯХЛБНКЮ XX 13 10
N		FS_ReadByte(fcs_num,&b);
N		FS_ReadByte(fcs_num,&b);
N		FS_ReadByte(fcs_num,&b);
N	}	
N	// ГДЕЯЭ ЦЮПЮМРХПНБЮММН ЯРНХЛ МЮ ОЕПБНЛ ЯХЛБНКЕ ОПЕД ЯРПНЙХ
N	// ТХЙЯХПСЛ ОНГХЖХЧ ВРНАШ БЕПМСРЭЯЪ Б МЕЕ
N	res = FS_Pos(fcs_num,&fixpos);
N	if (res) return res;
N	// ВХРЮЕЛ ЯРПНЙС
N	res = bFS_ReadLn(fcs_num,str,max_size);
N	if (res) return res;
N	// БНГБПЮЫЮЕЛЯЪ Б ОНГХЖХЧ
N	res = FS_Seek(fcs_num,fixpos);
N	return res;
N}
N
Ns8 bFS_Write(tFile fcs_num, const u8 *buffer, u32 size, u32 * wbc) {
N	u32 i;
N	s8 res;
N	*wbc = 0;
N	if (size == 0) return FS_RESULT_OK;
X	if (size == 0) return 0;
N	for (i=0;i<size;i++) {
N		res = FS_WriteByte(fcs_num,*(buffer+i));
N//		res = 0;
N		if (res < 0) {
N			return res;
N		} else {
N			(*wbc)++;
N		}
N	}
N	return res;
N}
N
Ns8 InitStream(TFileStream *s,tFile fs){
N	// ХМХЖХЮКХГЮЖХЪ ОНРНЙЮ
N	if (fs != 0) {
N		(*s).Pos = 0;
N		(*s).f = fs;
N		return FS_Seek(fs,((*s).Pos));
N	} 	
N	else return -100;
N}
N
Ns8 bsFS_ReadLn(TFileStream *s, u8 *str, u32 max_size){
N	s8 res;	
N   	res = FS_Seek((*s).f,(*s).Pos);
N//	Msg("FS_Seek (%d,%d) = %d \r\n",(*s).f,(*s).Pos,res);
N	if (res == FS_RESULT_OK) {
X	if (res == 0) {
N		// ОНГХЖХЪ ЕЯРЭ ЛНФМН ВХРЮРЭ
N		res = bFS_ReadLn((*s).f,str,max_size);
N//		Msg("Strm Line: %s\r\n",str);
N		if (res == FS_RESULT_OK) {
X		if (res == 0) {
N//			res = FS_Pos((*s).f,&((*s).Pos));
N			return FS_Pos((*s).f,&((*s).Pos));
N//			Msg("FS_Pos( %d, %d) = %d \r\n",(*s).f,((*s).Pos),res);
N//			return res;
N		} else return res;
N	}
N	else return res;
N}
N
Ns8 bsFS_BReadLn(TFileStream *s, u8 *str, u32 max_size){
N	s8 res;	
N   	res = FS_Seek((*s).f,(*s).Pos);
N	if (res == FS_RESULT_OK) {
X	if (res == 0) {
N		// ОНГХЖХЪ ЕЯРЭ ЛНФМН ВХРЮРЭ
N		res = bFS_BReadLn((*s).f,str,max_size);
N		if (res == FS_RESULT_OK) {
X		if (res == 0) {
N			return FS_Pos((*s).f,&((*s).Pos));
N		} else return res;
N	}
N	else return res;
N}
N
Ns8 bsFS_Seek(TFileStream *s,u32 position){
N	s8 res;
N	res = FS_Seek((*s).f,position);
N	if (res == FS_RESULT_OK) {
X	if (res == 0) {
N		(*s).Pos = position;
N	}
N	return res;
N}
N
Ns8 bsFS_Pos(TFileStream * s,s32 * pos){
N	*pos = (*s).Pos;
N	return FS_RESULT_OK;
X	return 0;
N}


//****************************************************************************
//
//                            Файловая система
//
//****************************************************************************



#ifndef __FS_H_
#define __FS_H_


#include "Defs.h"

#define FS_RESULT_OK				0
#define EFS_FLASH_NOT_INITED		-1
#define EFS_FS_NOT_INITED 			-2
#define EFS_INVALID_FILE_NAME		-3
#define EFS_FILE_IS_USED			-4
#define EFS_NO_FREE_FCS				-5
#define EFS_INVALID_FSC				-6
#define EFS_FCS_NOT_OPENED			-7
#define EFS_FILE_NAME_IS_EXIST		-8
#define EFS_NO_FREE_FNT				-9
#define EFS_NO_FREE_SPACE			-10
#define EFS_FILE_NOT_FOUND			-11
#define EFS_WRITE_DISABLED			-12
#define EFS_FCS_NOT_OPENED_WRITE	-13
#define EFS_FCS_NOT_OPENED_READ		-14
#define EFS_NO_DATA					-15
#define EFS_INVALID_POSITION		-16 
#define EFS_FILE_IS_CLOSED			-17 
#define EFS_UNKNOWN_FILE_STATE		-18 
#define EFS_FILE_INFO_NOT_FOUND		-19
#define FS_NOT_EOF	 				-20
#define FS_EOF						-21
#define FS_BOF						-22

// Тип файловой переменной
typedef s8 tFile;

extern u16 CATRecordsNumber;															// Кол-во записей в таблице CAT
extern u32 FNTRecordsNumber;															// Кол-во записей в таблице FNT

// Инициализировать файловую систему
s8 FS_Init(void);

// Назначить файловую переменную файлу
s8 FS_Assign(const u8 *file_name, tFile * f);
// >= 0 - номер описателя
// "Файловая система не инициализирована" (ошибка -1)
// "Неверный формат имени файла" (ошибка -3)
// "Файл с заданным именем используется" (ошибка -4)
// "Нет свободной структуры FCS" (ошибка -2)

// Создать новый файл для записи
s8 FS_Rewrite(tFile f);
// 0 - всё хорошо
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта" (ошибка -1)
// "Файл с заданным именем уже существует" (ошибка -2)
// "Нет свободной записи FNT" (ошибка -3)
// "Недостаточно места" (ошибка -4)

// Открыть файл для добавления
s8 FS_Append(tFile f);
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта" (ошибка -1)
// "Файл с заданным именем не найден" (ошибка -2)
// "Нет свободной записи FNT" (ошибка -3)
// Открыть файл для чтения
s8 FS_Reset(tFile f);
// 0 - всё хорошо
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта" (ошибка -1)
// "Файл с заданным именем не найден" (ошибка -2)

// Записать байт в открытый файл
s8 FS_WriteByte(tFile f, u8 data);
// 0 - байт записан
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта для записи файла" (ошибка -1)
// "Недостаточно места для последующей записи" (ошибка -2)
// "Файл пуст" (ошибка -2)

// Прочитать байт из открытого файла
s8 FS_ReadByte(tFile f, u8 *data);
// 0 - байт прочитан
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта для чтения файла" (ошибка -1)

// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
// Записать буфер в открытый файл
s32 FS_Write(tFile f, const u8 *buffer, u32 size);

// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
// Прочитать буфер из открытого файла
s32 FS_Read(tFile f, u8 *buffer, u32 size);

// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
// Записать строку в открытый файл
s32 FS_WriteLn(tFile f, const u8 *string);

// Прочитать строку из открытого файла в прямом направлении
s8 FS_ReadLn(tFile f, u8 *string, u32 max_size);

// ФУНКЦИЯ НЕ ДОДЕЛАНА !!!
// Прочитать строку из открытого файла в обратном направлении
s8 FS_ReadPrevLn(tFile f, u8 *string, u32 max_size);

// Количество непрочитанных байт в открытом для чтения файле
s32 FS_RemainSize(tFile f);

// Перейти в заданную позицию в открытом для чтения файле
s8 FS_Seek(tFile f, u32 position);
// 0 - переход выполнен
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта для чтения файла" (ошибка -1)
// "Заданная позиция не существует" (ошибка -2)

// Сместить текущую позицию в открытом для чтения файле
s8 FS_RSeek(tFile fcs_num, s32 disp);
//"Файловая переменная не назначена файлу" (ошибка -9)
//"Структура FCS не открыта для чтения файла" (ошибка -1)
// Закрыть файл

s8 FS_Close(tFile *f);
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта" (ошибка -1)
// "Неизвестное состояние структуры FCS" (ошибка -2)

// Удалить файл
s8 FS_Delete(const u8 *file_name);
// 0 - файл удален
// "Файловая система не инициализирована" (ошибка -1)
// "Неверный формат имени файла" (ошибка -3)
// "Файл с заданным именем используется" (ошибка -4)
// "Файл с заданным именем не найден" (ошибка -2)

// Получить информацию о файле
s8 FS_GetFileInfo(u32 * start_fnt_num, u8 *name, u8 *type, u8 *attr, u32 *size, tFile *f);
// возвращается ближайший к start_fnt_num  fnt_num  
// 0xFFFFFFFF - очередной не найден

//	Проверить конец открытого для чтения файла
s8 FS_Eof(tFile f);
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта для чтения файла" (ошибка -1)
// Получить текущую позицию открытого для чтения файла
s8 FS_Pos(tFile fcs_num,s32 * pos);
// "Файловая переменная не назначена файлу" (ошибка -9)
// "Структура FCS не открыта для чтения файла" (ошибка -1)
//-----------------------------------------------------------------------------
//			ПОЛУЧИТЬ РАЗМЕР ОТКРЫТОГО ФАЙЛА
//-----------------------------------------------------------------------------
s32 FS_Size(tFile f);
// НЕ НАДО ?
//-----------------------------------------------------------------------------
//			ПОЛУЧИТЬ КОЛИЧЕСТВО ФАЙЛОВ
//-----------------------------------------------------------------------------
s32 FS_FilesCount(void);

//-----------------------------------------------------------------------------
//			ПЕРЕИМЕНОВАТЬ ФАЙЛ
//-----------------------------------------------------------------------------
s8 FS_Rename(const u8 *old_file_name, const u8 *new_file_name);

//-----------------------------------------------------------------------------
//			ЗАДАТЬ АТРИБУТЫ ФАЙЛА
//-----------------------------------------------------------------------------
s8 FS_SetAttr(const u8 *file_name, u8 attr);


//
//
//


//-----------------------------------------------------------------------------
//			КОЛИЧЕСТВО НЕПРОЧИТАННЫХ БАЙТ В ОТКРЫТОМ ДЛЯ ЧТЕНИЯ ФАЙЛЕ
//-----------------------------------------------------------------------------
s32 FS_RemainSize(tFile f);

//-----------------------------------------
// ТЕСТ<!>
//-----------------------------------------

// получить состояние структуры FCS
u8 FS_GetFCSState( u8 fcs_num);

// отобразить структуру FCS
void FS_FCS_Show( u8 fcs_num, void page_buf_view(u8 *buffer, u32 addr) );

// отобразить параметры файловой системы
void FS_Params_Show(void);

u32 FS_FindFreeFNT(void);
u16 FS_FindFreeCluster(void);




#endif // __FS_H_

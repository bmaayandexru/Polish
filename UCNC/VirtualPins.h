#ifndef __VIRTUALPINS_H__
#define __VIRTUALPINS_H__

//#include <RTL.h>
#include "Defs.h"

//нумерация реальных пинов
// смещения в таблице aPin введены для удобства использования
// они прописываются в таблице виртуальных пинов в поле nPin

#define OUT1	0
#define OUT2  	1
#define OUT3  	2
#define OUT4  	3
#define OUT5  	4
#define OUT6  	5
#define OUT7  	6
#define OUT8  	7
#define OUT9  	8
#define OUT10 	9
#define OUT11 	10
#define OUT12 	11
#define OUT13 	12
#define OUT14 	13
#define OUT15 	14
#define OUT16 	15
#define OUT17 	16
#define OUT18 	17
#define OUT19 	18
#define OUT20 	19

#define IN1   	20
#define IN2   	21
#define IN3   	22
#define IN4   	23
#define IN5   	24
#define IN6   	25
#define IN7   	26
#define IN8   	27
#define IN9   	28
#define IN10  	29
#define IN11  	30
#define IN12  	31
#define IN13  	32
#define IN14  	33
#define IN15  	34
#define IN16  	35

// размер таблицы виртуальных пинов
#define VIRTUAL_PINTAB_SIZE 36

// структура возвращаемая обработчиком ошибок
typedef struct{
	u16 ErrorCode; 	// код ошибки 
	u8 vNum;		// номер в таблице виртуальных пинов 
	u8 sNum;		// номер в таблице статических пинов (FF не определено)
	u8 sPort;		// порт [0..3] или FF - не определено
	u32 sPin;		// пин [0..31] или FF - не определено
	u8 Dir;			// направление 0 - IN, 1-OUT, FF - не определено
	u8 Inv;			// инверсия 0 - нет, 1 - есть, FF - не определено
} TPinError;

// Значения  ErrorCode:
// 0x1X - ошибка инициализации
// 		0x10 - нет физичecкого пина с таким номером
//		0x11 - неправильное значение направления (и не DIR_IN и не DIR_OUT)
// 0x2X - ошибка установки
// 		0x20 - нет физичecкого пина с таким номером
//		0x21 - неправильное значение направления (не DIR_OUT)
// 0x3X - ошибка сброса
// 		0x30 - нет физичecкого пина с таким номером
//		0x31 - неправильное значение направления (не DIR_OUT)
// 0x4X - ошибка чтения
// 		0x40 - нет физичecкого пина с таким номером
//		0x41 - неправильное значение направления (не DIR_IN)
// 0x5X - ошибка чтения направления
// 		0x50 - нет физичecкого пина с таким номером
// 0x6X - ошибка записи направления
// 		0x60 - нет физичecкого пина с таким номером
// 0x7X - ошибка чтения значения инверсии
// 		0x70 - нет физичecкого пина с таким номером
// 0x8X - ошибка записи значения инверсии
// 		0x80 - нет физичecкого пина с таким номером
// 		0x82 - пин не инициализирован (не установлено значение направления)

// тип обработчика ошибок
typedef void(*TErrHandler)(TPinError * pe);

// тип таблицы виртуальных пинов
typedef struct tagVPIN {
	u8		nPin; 		// смещение в таблице aPin (OUTXX или INXX)
	u8		Inv;		// инверсия
	u8		State;		// состояние для выходных пинов
//	u8		trash;		// состояние для выходных пинов
} TVPIN;

// сводная таблица для быстрого обращения к виртуальным пинам
typedef struct tagVQPIN {
	volatile u32* SetAddr;	// LPCGPIO[0,1,2,3]->FIOSET или FIOCLR если инверсия
	volatile u32* ClrAddr; 	// LPCGPIO[0,1,2,3]->FIOCLR или FIOSET если инверсия
	volatile u32* GetAddr;	// LPCGPIO[0,1,2,3]->FIOPIN 
	u32 Mask;			// маска
	u32 Inv;			// инверсия
} TVQPIN;

typedef TVPIN TaVPIN[VIRTUAL_PINTAB_SIZE];

typedef TVQPIN TaVQPIN[VIRTUAL_PINTAB_SIZE];

extern TaVPIN *pvPins;
extern TaVQPIN aVQPIN;
//extern TaVPIN vPinsdef;

// формирование таблицы для процедур быстрого управления сигналами
// Q1SetPin(), Q1ClrPin(), Q1GetPin
void 	FormQPinTable(void);

// установщик обработчика ошибок
void SetPinsErrHandler(TErrHandler eh);

BOOL InitPin(u8 n);
// инициализация виртуального пина
// u8 n - номер виртуального пина
// возвращает TRUE если инициализация прошла успешно
// возвращает FALSE если зафиксирована ошибка в параметрах
// при ошибочной ситуации вызывается обработчик ошибок

BOOL SetPin(u8 n);
// установка виртуального пина
// u8 n - номер виртуального пина
// возвращает TRUE если установка прошла успешно
// возвращает FALSE если зафиксирована ошибка в параметре
// при ошибочной ситуации вызывается обработчик ошибок

void QSetPin(u8 n);
// быстрая (без проверок) установка виртуального пина

void Q1SetPin(u8 n);
// очень быстрая (без проверок) установка виртуального пина

BOOL ClrPin(u8 n);
// сброс виртуального пина
// u8 n - номер виртуального пина
// возвращает TRUE если установка прошла успешно
// возвращает FALSE если зафиксирована ошибка в параметре
// при ошибочной ситуации вызывается обработчик ошибок

void QClrPin(u8 n);
// быстрый (без проверок) сброс виртуального пина

void Q1ClrPin(u8 n);
// очень быстрый (без проверок) сброс виртуального пина

u32 GetPin(u8 n);
// чтение состояния виртуального пина
// возвращает 0 если пин сброшен
// возвращает не 0 если пин установлен
// возвращает 0xFFFFFFFF если обнаружена ошибка
// при обнаружении ошибки вызывается обработчик

u32 QGetPin(u8 n);
// быстрое (без проверок) чтение состояния виртуального пина

// процедуры на всякий случай
u8 		GetPinDir(u8 n);
// чтение направления пина

u8 		GetPinInv(u8 n);
// чтение текущего состояния инверсии пина

void 	SetPinInv(u8 n,u8 i);
// установка состояния инверсии пина на значение i
void InitVirtualPins (void);
// сброс состояния входного пина
void ClrGetPin(u8 n);


#endif
